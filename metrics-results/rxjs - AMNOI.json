{"projectName":"rxjs","metric":"AMNOI","usabilityResult":{"index":0.9406846829640947},"modules":{"..\\src\\internal\\Observable.ts":{"moduleComponents":{"Observable":{"kind":2,"usabilityResult":{"index":1},"methods":[{"methodName":"subscribe","usabilityResult":{"index":1},"sources":[{"parameters":[{"name":"observerOrNext","type":"Partial<Observer<T>> | ((value: T) => void)","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Subscription","isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"isAbstract":false,"typeParameters":[],"hasOverrideKeyword":false,"docs":[],"kind":27,"classStructure":{"decorators":[],"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nA representation of any set of values over any amount of time. This is the most basic building block\r\nof RxJS.\r\n","tags":[{"kind":25,"tagName":"class","text":"Observable<T>"}]}],"isAbstract":false,"implements":["Subscribable<T>"],"name":"Observable","isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"kind":2,"ctors":[{"statements":["if (subscribe) {\r\n  this._subscribe = subscribe;\r\n}"],"parameters":[{"name":"subscribe","type":"(this: Observable<T>, subscriber: Subscriber<T>) => TeardownLogic","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"typeParameters":[],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"constructor"},{"kind":25,"tagName":"param","text":"{Function} subscribe the function that is called when the Observable is\r\ninitially subscribed to. This function is given a Subscriber, to which new values\r\ncan be `next`ed, or an `error` method can be called to raise an error, or\r\n`complete` can be called to notify of a successful completion."}]}],"kind":5,"overloads":[]}],"properties":[{"name":"source","type":"Observable<any> | undefined","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Internal implementation detail, do not use directly. Will be made internal in v8."}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"operator","type":"Operator<any, T> | undefined","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Internal implementation detail, do not use directly. Will be made internal in v8."}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"create","type":"(...args: any[]) => any","initializer":"<T>(subscribe?: (subscriber: Subscriber<T>) => TeardownLogic) => {\r\n    return new Observable<T>(subscribe);\r\n  }","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"\r\nCreates a new Observable by calling the Observable constructor","tags":[{"kind":25,"tagName":"owner","text":"Observable"},{"kind":25,"tagName":"method","text":"create"},{"kind":25,"tagName":"param","text":"{Function} subscribe? the subscriber function to be passed to the Observable constructor"},{"kind":25,"tagName":"return","text":"{Observable} a new observable"},{"kind":25,"tagName":"nocollapse"},{"kind":25,"tagName":"deprecated","text":"Use `new Observable()` instead. Will be removed in v8."}]}],"isStatic":true,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false}],"getAccessors":[],"setAccessors":[]}},{"parameters":[{"name":"next","type":"((value: T) => void) | null","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"error","type":"((error: any) => void) | null","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"complete","type":"(() => void) | null","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Subscription","isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"isAbstract":false,"typeParameters":[],"hasOverrideKeyword":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Instead of passing separate callback arguments, use an observer argument. Signatures taking separate callback arguments will be removed in v8. Details: https://rxjs.dev/deprecations/subscribe-arguments"}]}],"kind":27,"classStructure":{"decorators":[],"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nA representation of any set of values over any amount of time. This is the most basic building block\r\nof RxJS.\r\n","tags":[{"kind":25,"tagName":"class","text":"Observable<T>"}]}],"isAbstract":false,"implements":["Subscribable<T>"],"name":"Observable","isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"kind":2,"ctors":[{"statements":["if (subscribe) {\r\n  this._subscribe = subscribe;\r\n}"],"parameters":[{"name":"subscribe","type":"(this: Observable<T>, subscriber: Subscriber<T>) => TeardownLogic","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"typeParameters":[],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"constructor"},{"kind":25,"tagName":"param","text":"{Function} subscribe the function that is called when the Observable is\r\ninitially subscribed to. This function is given a Subscriber, to which new values\r\ncan be `next`ed, or an `error` method can be called to raise an error, or\r\n`complete` can be called to notify of a successful completion."}]}],"kind":5,"overloads":[]}],"properties":[{"name":"source","type":"Observable<any> | undefined","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Internal implementation detail, do not use directly. Will be made internal in v8."}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"operator","type":"Operator<any, T> | undefined","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Internal implementation detail, do not use directly. Will be made internal in v8."}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"create","type":"(...args: any[]) => any","initializer":"<T>(subscribe?: (subscriber: Subscriber<T>) => TeardownLogic) => {\r\n    return new Observable<T>(subscribe);\r\n  }","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"\r\nCreates a new Observable by calling the Observable constructor","tags":[{"kind":25,"tagName":"owner","text":"Observable"},{"kind":25,"tagName":"method","text":"create"},{"kind":25,"tagName":"param","text":"{Function} subscribe? the subscriber function to be passed to the Observable constructor"},{"kind":25,"tagName":"return","text":"{Observable} a new observable"},{"kind":25,"tagName":"nocollapse"},{"kind":25,"tagName":"deprecated","text":"Use `new Observable()` instead. Will be removed in v8."}]}],"isStatic":true,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false}],"getAccessors":[],"setAccessors":[]}}]},{"methodName":"forEach","usabilityResult":{"index":1},"sources":[{"parameters":[{"name":"next","type":"(value: T) => void","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Promise<void>","isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"isAbstract":false,"typeParameters":[],"hasOverrideKeyword":false,"docs":[{"kind":24,"description":"\r\nUsed as a NON-CANCELLABLE means of subscribing to an observable, for use with\r\nAPIs that expect promises, like `async/await`. You cannot unsubscribe from this.\r\n\r\n**WARNING**: Only use this with observables you *know* will complete. If the source\r\nobservable does not complete, you will end up with a promise that is hung up, and\r\npotentially all of the state of an async function hanging out in memory. To avoid\r\nthis situation, look into adding something like {@link timeout}, {@link take},\r\n{@link takeWhile}, or {@link takeUntil} amongst others.\r\n\r\n#### Example\r\n\r\n```ts\r\nimport { interval, take } from 'rxjs';\r\n\r\nconst source$ = interval(1000).pipe(take(4));\r\n\r\nasync function getTotal() {\r\n  let total = 0;\r\n\r\n  await source$.forEach(value => {\r\n    total += value;\r\n    console.log('observable -> ' + value);\r\n  });\r\n\r\n  return total;\r\n}\r\n\r\ngetTotal().then(\r\n  total => console.log('Total: ' + total)\r\n);\r\n\r\n// Expected:\r\n// 'observable -> 0'\r\n// 'observable -> 1'\r\n// 'observable -> 2'\r\n// 'observable -> 3'\r\n// 'Total: 6'\r\n```\r\n","tags":[{"kind":25,"tagName":"param","text":"next a handler for each value emitted by the observable"},{"kind":25,"tagName":"return","text":"a promise that either resolves on observable completion or\r\n rejects with the handled error"}]}],"kind":27,"classStructure":{"decorators":[],"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nA representation of any set of values over any amount of time. This is the most basic building block\r\nof RxJS.\r\n","tags":[{"kind":25,"tagName":"class","text":"Observable<T>"}]}],"isAbstract":false,"implements":["Subscribable<T>"],"name":"Observable","isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"kind":2,"ctors":[{"statements":["if (subscribe) {\r\n  this._subscribe = subscribe;\r\n}"],"parameters":[{"name":"subscribe","type":"(this: Observable<T>, subscriber: Subscriber<T>) => TeardownLogic","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"typeParameters":[],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"constructor"},{"kind":25,"tagName":"param","text":"{Function} subscribe the function that is called when the Observable is\r\ninitially subscribed to. This function is given a Subscriber, to which new values\r\ncan be `next`ed, or an `error` method can be called to raise an error, or\r\n`complete` can be called to notify of a successful completion."}]}],"kind":5,"overloads":[]}],"properties":[{"name":"source","type":"Observable<any> | undefined","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Internal implementation detail, do not use directly. Will be made internal in v8."}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"operator","type":"Operator<any, T> | undefined","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Internal implementation detail, do not use directly. Will be made internal in v8."}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"create","type":"(...args: any[]) => any","initializer":"<T>(subscribe?: (subscriber: Subscriber<T>) => TeardownLogic) => {\r\n    return new Observable<T>(subscribe);\r\n  }","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"\r\nCreates a new Observable by calling the Observable constructor","tags":[{"kind":25,"tagName":"owner","text":"Observable"},{"kind":25,"tagName":"method","text":"create"},{"kind":25,"tagName":"param","text":"{Function} subscribe? the subscriber function to be passed to the Observable constructor"},{"kind":25,"tagName":"return","text":"{Observable} a new observable"},{"kind":25,"tagName":"nocollapse"},{"kind":25,"tagName":"deprecated","text":"Use `new Observable()` instead. Will be removed in v8."}]}],"isStatic":true,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false}],"getAccessors":[],"setAccessors":[]}},{"parameters":[{"name":"next","type":"(value: T) => void","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"promiseCtor","type":"PromiseConstructorLike","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Promise<void>","isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"isAbstract":false,"typeParameters":[],"hasOverrideKeyword":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"param","text":"next a handler for each value emitted by the observable"},{"kind":25,"tagName":"param","text":"promiseCtor a constructor function used to instantiate the Promise"},{"kind":25,"tagName":"return","text":"a promise that either resolves on observable completion or\r\n rejects with the handled error"},{"kind":25,"tagName":"deprecated","text":"Passing a Promise constructor will no longer be available\r\nin upcoming versions of RxJS. This is because it adds weight to the library, for very\r\nlittle benefit. If you need this functionality, it is recommended that you either\r\npolyfill Promise, or you create an adapter to convert the returned native promise\r\nto whatever promise implementation you wanted. Will be removed in v8."}]}],"kind":27,"classStructure":{"decorators":[],"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nA representation of any set of values over any amount of time. This is the most basic building block\r\nof RxJS.\r\n","tags":[{"kind":25,"tagName":"class","text":"Observable<T>"}]}],"isAbstract":false,"implements":["Subscribable<T>"],"name":"Observable","isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"kind":2,"ctors":[{"statements":["if (subscribe) {\r\n  this._subscribe = subscribe;\r\n}"],"parameters":[{"name":"subscribe","type":"(this: Observable<T>, subscriber: Subscriber<T>) => TeardownLogic","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"typeParameters":[],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"constructor"},{"kind":25,"tagName":"param","text":"{Function} subscribe the function that is called when the Observable is\r\ninitially subscribed to. This function is given a Subscriber, to which new values\r\ncan be `next`ed, or an `error` method can be called to raise an error, or\r\n`complete` can be called to notify of a successful completion."}]}],"kind":5,"overloads":[]}],"properties":[{"name":"source","type":"Observable<any> | undefined","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Internal implementation detail, do not use directly. Will be made internal in v8."}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"operator","type":"Operator<any, T> | undefined","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Internal implementation detail, do not use directly. Will be made internal in v8."}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"create","type":"(...args: any[]) => any","initializer":"<T>(subscribe?: (subscriber: Subscriber<T>) => TeardownLogic) => {\r\n    return new Observable<T>(subscribe);\r\n  }","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"\r\nCreates a new Observable by calling the Observable constructor","tags":[{"kind":25,"tagName":"owner","text":"Observable"},{"kind":25,"tagName":"method","text":"create"},{"kind":25,"tagName":"param","text":"{Function} subscribe? the subscriber function to be passed to the Observable constructor"},{"kind":25,"tagName":"return","text":"{Observable} a new observable"},{"kind":25,"tagName":"nocollapse"},{"kind":25,"tagName":"deprecated","text":"Use `new Observable()` instead. Will be removed in v8."}]}],"isStatic":true,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false}],"getAccessors":[],"setAccessors":[]}}]},{"methodName":"pipe","usabilityResult":{"index":1},"sources":[{"parameters":[],"returnType":"Observable<T>","isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"isAbstract":false,"typeParameters":[],"hasOverrideKeyword":false,"docs":[],"kind":27,"classStructure":{"decorators":[],"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nA representation of any set of values over any amount of time. This is the most basic building block\r\nof RxJS.\r\n","tags":[{"kind":25,"tagName":"class","text":"Observable<T>"}]}],"isAbstract":false,"implements":["Subscribable<T>"],"name":"Observable","isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"kind":2,"ctors":[{"statements":["if (subscribe) {\r\n  this._subscribe = subscribe;\r\n}"],"parameters":[{"name":"subscribe","type":"(this: Observable<T>, subscriber: Subscriber<T>) => TeardownLogic","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"typeParameters":[],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"constructor"},{"kind":25,"tagName":"param","text":"{Function} subscribe the function that is called when the Observable is\r\ninitially subscribed to. This function is given a Subscriber, to which new values\r\ncan be `next`ed, or an `error` method can be called to raise an error, or\r\n`complete` can be called to notify of a successful completion."}]}],"kind":5,"overloads":[]}],"properties":[{"name":"source","type":"Observable<any> | undefined","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Internal implementation detail, do not use directly. Will be made internal in v8."}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"operator","type":"Operator<any, T> | undefined","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Internal implementation detail, do not use directly. Will be made internal in v8."}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"create","type":"(...args: any[]) => any","initializer":"<T>(subscribe?: (subscriber: Subscriber<T>) => TeardownLogic) => {\r\n    return new Observable<T>(subscribe);\r\n  }","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"\r\nCreates a new Observable by calling the Observable constructor","tags":[{"kind":25,"tagName":"owner","text":"Observable"},{"kind":25,"tagName":"method","text":"create"},{"kind":25,"tagName":"param","text":"{Function} subscribe? the subscriber function to be passed to the Observable constructor"},{"kind":25,"tagName":"return","text":"{Observable} a new observable"},{"kind":25,"tagName":"nocollapse"},{"kind":25,"tagName":"deprecated","text":"Use `new Observable()` instead. Will be removed in v8."}]}],"isStatic":true,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false}],"getAccessors":[],"setAccessors":[]}},{"parameters":[{"name":"op1","type":"OperatorFunction<T, A>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<A>","isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"isAbstract":false,"typeParameters":[{"name":"A","kind":39,"isConst":false,"variance":0}],"hasOverrideKeyword":false,"docs":[],"kind":27,"classStructure":{"decorators":[],"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nA representation of any set of values over any amount of time. This is the most basic building block\r\nof RxJS.\r\n","tags":[{"kind":25,"tagName":"class","text":"Observable<T>"}]}],"isAbstract":false,"implements":["Subscribable<T>"],"name":"Observable","isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"kind":2,"ctors":[{"statements":["if (subscribe) {\r\n  this._subscribe = subscribe;\r\n}"],"parameters":[{"name":"subscribe","type":"(this: Observable<T>, subscriber: Subscriber<T>) => TeardownLogic","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"typeParameters":[],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"constructor"},{"kind":25,"tagName":"param","text":"{Function} subscribe the function that is called when the Observable is\r\ninitially subscribed to. This function is given a Subscriber, to which new values\r\ncan be `next`ed, or an `error` method can be called to raise an error, or\r\n`complete` can be called to notify of a successful completion."}]}],"kind":5,"overloads":[]}],"properties":[{"name":"source","type":"Observable<any> | undefined","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Internal implementation detail, do not use directly. Will be made internal in v8."}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"operator","type":"Operator<any, T> | undefined","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Internal implementation detail, do not use directly. Will be made internal in v8."}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"create","type":"(...args: any[]) => any","initializer":"<T>(subscribe?: (subscriber: Subscriber<T>) => TeardownLogic) => {\r\n    return new Observable<T>(subscribe);\r\n  }","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"\r\nCreates a new Observable by calling the Observable constructor","tags":[{"kind":25,"tagName":"owner","text":"Observable"},{"kind":25,"tagName":"method","text":"create"},{"kind":25,"tagName":"param","text":"{Function} subscribe? the subscriber function to be passed to the Observable constructor"},{"kind":25,"tagName":"return","text":"{Observable} a new observable"},{"kind":25,"tagName":"nocollapse"},{"kind":25,"tagName":"deprecated","text":"Use `new Observable()` instead. Will be removed in v8."}]}],"isStatic":true,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false}],"getAccessors":[],"setAccessors":[]}},{"parameters":[{"name":"op1","type":"OperatorFunction<T, A>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"op2","type":"OperatorFunction<A, B>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<B>","isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"isAbstract":false,"typeParameters":[{"name":"A","kind":39,"isConst":false,"variance":0},{"name":"B","kind":39,"isConst":false,"variance":0}],"hasOverrideKeyword":false,"docs":[],"kind":27,"classStructure":{"decorators":[],"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nA representation of any set of values over any amount of time. This is the most basic building block\r\nof RxJS.\r\n","tags":[{"kind":25,"tagName":"class","text":"Observable<T>"}]}],"isAbstract":false,"implements":["Subscribable<T>"],"name":"Observable","isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"kind":2,"ctors":[{"statements":["if (subscribe) {\r\n  this._subscribe = subscribe;\r\n}"],"parameters":[{"name":"subscribe","type":"(this: Observable<T>, subscriber: Subscriber<T>) => TeardownLogic","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"typeParameters":[],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"constructor"},{"kind":25,"tagName":"param","text":"{Function} subscribe the function that is called when the Observable is\r\ninitially subscribed to. This function is given a Subscriber, to which new values\r\ncan be `next`ed, or an `error` method can be called to raise an error, or\r\n`complete` can be called to notify of a successful completion."}]}],"kind":5,"overloads":[]}],"properties":[{"name":"source","type":"Observable<any> | undefined","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Internal implementation detail, do not use directly. Will be made internal in v8."}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"operator","type":"Operator<any, T> | undefined","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Internal implementation detail, do not use directly. Will be made internal in v8."}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"create","type":"(...args: any[]) => any","initializer":"<T>(subscribe?: (subscriber: Subscriber<T>) => TeardownLogic) => {\r\n    return new Observable<T>(subscribe);\r\n  }","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"\r\nCreates a new Observable by calling the Observable constructor","tags":[{"kind":25,"tagName":"owner","text":"Observable"},{"kind":25,"tagName":"method","text":"create"},{"kind":25,"tagName":"param","text":"{Function} subscribe? the subscriber function to be passed to the Observable constructor"},{"kind":25,"tagName":"return","text":"{Observable} a new observable"},{"kind":25,"tagName":"nocollapse"},{"kind":25,"tagName":"deprecated","text":"Use `new Observable()` instead. Will be removed in v8."}]}],"isStatic":true,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false}],"getAccessors":[],"setAccessors":[]}},{"parameters":[{"name":"op1","type":"OperatorFunction<T, A>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"op2","type":"OperatorFunction<A, B>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"op3","type":"OperatorFunction<B, C>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<C>","isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"isAbstract":false,"typeParameters":[{"name":"A","kind":39,"isConst":false,"variance":0},{"name":"B","kind":39,"isConst":false,"variance":0},{"name":"C","kind":39,"isConst":false,"variance":0}],"hasOverrideKeyword":false,"docs":[],"kind":27,"classStructure":{"decorators":[],"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nA representation of any set of values over any amount of time. This is the most basic building block\r\nof RxJS.\r\n","tags":[{"kind":25,"tagName":"class","text":"Observable<T>"}]}],"isAbstract":false,"implements":["Subscribable<T>"],"name":"Observable","isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"kind":2,"ctors":[{"statements":["if (subscribe) {\r\n  this._subscribe = subscribe;\r\n}"],"parameters":[{"name":"subscribe","type":"(this: Observable<T>, subscriber: Subscriber<T>) => TeardownLogic","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"typeParameters":[],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"constructor"},{"kind":25,"tagName":"param","text":"{Function} subscribe the function that is called when the Observable is\r\ninitially subscribed to. This function is given a Subscriber, to which new values\r\ncan be `next`ed, or an `error` method can be called to raise an error, or\r\n`complete` can be called to notify of a successful completion."}]}],"kind":5,"overloads":[]}],"properties":[{"name":"source","type":"Observable<any> | undefined","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Internal implementation detail, do not use directly. Will be made internal in v8."}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"operator","type":"Operator<any, T> | undefined","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Internal implementation detail, do not use directly. Will be made internal in v8."}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"create","type":"(...args: any[]) => any","initializer":"<T>(subscribe?: (subscriber: Subscriber<T>) => TeardownLogic) => {\r\n    return new Observable<T>(subscribe);\r\n  }","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"\r\nCreates a new Observable by calling the Observable constructor","tags":[{"kind":25,"tagName":"owner","text":"Observable"},{"kind":25,"tagName":"method","text":"create"},{"kind":25,"tagName":"param","text":"{Function} subscribe? the subscriber function to be passed to the Observable constructor"},{"kind":25,"tagName":"return","text":"{Observable} a new observable"},{"kind":25,"tagName":"nocollapse"},{"kind":25,"tagName":"deprecated","text":"Use `new Observable()` instead. Will be removed in v8."}]}],"isStatic":true,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false}],"getAccessors":[],"setAccessors":[]}},{"parameters":[{"name":"op1","type":"OperatorFunction<T, A>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"op2","type":"OperatorFunction<A, B>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"op3","type":"OperatorFunction<B, C>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"op4","type":"OperatorFunction<C, D>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<D>","isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"isAbstract":false,"typeParameters":[{"name":"A","kind":39,"isConst":false,"variance":0},{"name":"B","kind":39,"isConst":false,"variance":0},{"name":"C","kind":39,"isConst":false,"variance":0},{"name":"D","kind":39,"isConst":false,"variance":0}],"hasOverrideKeyword":false,"docs":[],"kind":27,"classStructure":{"decorators":[],"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nA representation of any set of values over any amount of time. This is the most basic building block\r\nof RxJS.\r\n","tags":[{"kind":25,"tagName":"class","text":"Observable<T>"}]}],"isAbstract":false,"implements":["Subscribable<T>"],"name":"Observable","isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"kind":2,"ctors":[{"statements":["if (subscribe) {\r\n  this._subscribe = subscribe;\r\n}"],"parameters":[{"name":"subscribe","type":"(this: Observable<T>, subscriber: Subscriber<T>) => TeardownLogic","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"typeParameters":[],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"constructor"},{"kind":25,"tagName":"param","text":"{Function} subscribe the function that is called when the Observable is\r\ninitially subscribed to. This function is given a Subscriber, to which new values\r\ncan be `next`ed, or an `error` method can be called to raise an error, or\r\n`complete` can be called to notify of a successful completion."}]}],"kind":5,"overloads":[]}],"properties":[{"name":"source","type":"Observable<any> | undefined","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Internal implementation detail, do not use directly. Will be made internal in v8."}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"operator","type":"Operator<any, T> | undefined","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Internal implementation detail, do not use directly. Will be made internal in v8."}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"create","type":"(...args: any[]) => any","initializer":"<T>(subscribe?: (subscriber: Subscriber<T>) => TeardownLogic) => {\r\n    return new Observable<T>(subscribe);\r\n  }","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"\r\nCreates a new Observable by calling the Observable constructor","tags":[{"kind":25,"tagName":"owner","text":"Observable"},{"kind":25,"tagName":"method","text":"create"},{"kind":25,"tagName":"param","text":"{Function} subscribe? the subscriber function to be passed to the Observable constructor"},{"kind":25,"tagName":"return","text":"{Observable} a new observable"},{"kind":25,"tagName":"nocollapse"},{"kind":25,"tagName":"deprecated","text":"Use `new Observable()` instead. Will be removed in v8."}]}],"isStatic":true,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false}],"getAccessors":[],"setAccessors":[]}},{"parameters":[{"name":"op1","type":"OperatorFunction<T, A>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"op2","type":"OperatorFunction<A, B>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"op3","type":"OperatorFunction<B, C>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"op4","type":"OperatorFunction<C, D>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"op5","type":"OperatorFunction<D, E>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<E>","isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"isAbstract":false,"typeParameters":[{"name":"A","kind":39,"isConst":false,"variance":0},{"name":"B","kind":39,"isConst":false,"variance":0},{"name":"C","kind":39,"isConst":false,"variance":0},{"name":"D","kind":39,"isConst":false,"variance":0},{"name":"E","kind":39,"isConst":false,"variance":0}],"hasOverrideKeyword":false,"docs":[],"kind":27,"classStructure":{"decorators":[],"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nA representation of any set of values over any amount of time. This is the most basic building block\r\nof RxJS.\r\n","tags":[{"kind":25,"tagName":"class","text":"Observable<T>"}]}],"isAbstract":false,"implements":["Subscribable<T>"],"name":"Observable","isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"kind":2,"ctors":[{"statements":["if (subscribe) {\r\n  this._subscribe = subscribe;\r\n}"],"parameters":[{"name":"subscribe","type":"(this: Observable<T>, subscriber: Subscriber<T>) => TeardownLogic","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"typeParameters":[],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"constructor"},{"kind":25,"tagName":"param","text":"{Function} subscribe the function that is called when the Observable is\r\ninitially subscribed to. This function is given a Subscriber, to which new values\r\ncan be `next`ed, or an `error` method can be called to raise an error, or\r\n`complete` can be called to notify of a successful completion."}]}],"kind":5,"overloads":[]}],"properties":[{"name":"source","type":"Observable<any> | undefined","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Internal implementation detail, do not use directly. Will be made internal in v8."}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"operator","type":"Operator<any, T> | undefined","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Internal implementation detail, do not use directly. Will be made internal in v8."}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"create","type":"(...args: any[]) => any","initializer":"<T>(subscribe?: (subscriber: Subscriber<T>) => TeardownLogic) => {\r\n    return new Observable<T>(subscribe);\r\n  }","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"\r\nCreates a new Observable by calling the Observable constructor","tags":[{"kind":25,"tagName":"owner","text":"Observable"},{"kind":25,"tagName":"method","text":"create"},{"kind":25,"tagName":"param","text":"{Function} subscribe? the subscriber function to be passed to the Observable constructor"},{"kind":25,"tagName":"return","text":"{Observable} a new observable"},{"kind":25,"tagName":"nocollapse"},{"kind":25,"tagName":"deprecated","text":"Use `new Observable()` instead. Will be removed in v8."}]}],"isStatic":true,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false}],"getAccessors":[],"setAccessors":[]}},{"parameters":[{"name":"op1","type":"OperatorFunction<T, A>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"op2","type":"OperatorFunction<A, B>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"op3","type":"OperatorFunction<B, C>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"op4","type":"OperatorFunction<C, D>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"op5","type":"OperatorFunction<D, E>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"op6","type":"OperatorFunction<E, F>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<F>","isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"isAbstract":false,"typeParameters":[{"name":"A","kind":39,"isConst":false,"variance":0},{"name":"B","kind":39,"isConst":false,"variance":0},{"name":"C","kind":39,"isConst":false,"variance":0},{"name":"D","kind":39,"isConst":false,"variance":0},{"name":"E","kind":39,"isConst":false,"variance":0},{"name":"F","kind":39,"isConst":false,"variance":0}],"hasOverrideKeyword":false,"docs":[],"kind":27,"classStructure":{"decorators":[],"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nA representation of any set of values over any amount of time. This is the most basic building block\r\nof RxJS.\r\n","tags":[{"kind":25,"tagName":"class","text":"Observable<T>"}]}],"isAbstract":false,"implements":["Subscribable<T>"],"name":"Observable","isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"kind":2,"ctors":[{"statements":["if (subscribe) {\r\n  this._subscribe = subscribe;\r\n}"],"parameters":[{"name":"subscribe","type":"(this: Observable<T>, subscriber: Subscriber<T>) => TeardownLogic","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"typeParameters":[],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"constructor"},{"kind":25,"tagName":"param","text":"{Function} subscribe the function that is called when the Observable is\r\ninitially subscribed to. This function is given a Subscriber, to which new values\r\ncan be `next`ed, or an `error` method can be called to raise an error, or\r\n`complete` can be called to notify of a successful completion."}]}],"kind":5,"overloads":[]}],"properties":[{"name":"source","type":"Observable<any> | undefined","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Internal implementation detail, do not use directly. Will be made internal in v8."}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"operator","type":"Operator<any, T> | undefined","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Internal implementation detail, do not use directly. Will be made internal in v8."}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"create","type":"(...args: any[]) => any","initializer":"<T>(subscribe?: (subscriber: Subscriber<T>) => TeardownLogic) => {\r\n    return new Observable<T>(subscribe);\r\n  }","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"\r\nCreates a new Observable by calling the Observable constructor","tags":[{"kind":25,"tagName":"owner","text":"Observable"},{"kind":25,"tagName":"method","text":"create"},{"kind":25,"tagName":"param","text":"{Function} subscribe? the subscriber function to be passed to the Observable constructor"},{"kind":25,"tagName":"return","text":"{Observable} a new observable"},{"kind":25,"tagName":"nocollapse"},{"kind":25,"tagName":"deprecated","text":"Use `new Observable()` instead. Will be removed in v8."}]}],"isStatic":true,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false}],"getAccessors":[],"setAccessors":[]}},{"parameters":[{"name":"op1","type":"OperatorFunction<T, A>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"op2","type":"OperatorFunction<A, B>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"op3","type":"OperatorFunction<B, C>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"op4","type":"OperatorFunction<C, D>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"op5","type":"OperatorFunction<D, E>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"op6","type":"OperatorFunction<E, F>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"op7","type":"OperatorFunction<F, G>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<G>","isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"isAbstract":false,"typeParameters":[{"name":"A","kind":39,"isConst":false,"variance":0},{"name":"B","kind":39,"isConst":false,"variance":0},{"name":"C","kind":39,"isConst":false,"variance":0},{"name":"D","kind":39,"isConst":false,"variance":0},{"name":"E","kind":39,"isConst":false,"variance":0},{"name":"F","kind":39,"isConst":false,"variance":0},{"name":"G","kind":39,"isConst":false,"variance":0}],"hasOverrideKeyword":false,"docs":[],"kind":27,"classStructure":{"decorators":[],"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nA representation of any set of values over any amount of time. This is the most basic building block\r\nof RxJS.\r\n","tags":[{"kind":25,"tagName":"class","text":"Observable<T>"}]}],"isAbstract":false,"implements":["Subscribable<T>"],"name":"Observable","isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"kind":2,"ctors":[{"statements":["if (subscribe) {\r\n  this._subscribe = subscribe;\r\n}"],"parameters":[{"name":"subscribe","type":"(this: Observable<T>, subscriber: Subscriber<T>) => TeardownLogic","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"typeParameters":[],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"constructor"},{"kind":25,"tagName":"param","text":"{Function} subscribe the function that is called when the Observable is\r\ninitially subscribed to. This function is given a Subscriber, to which new values\r\ncan be `next`ed, or an `error` method can be called to raise an error, or\r\n`complete` can be called to notify of a successful completion."}]}],"kind":5,"overloads":[]}],"properties":[{"name":"source","type":"Observable<any> | undefined","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Internal implementation detail, do not use directly. Will be made internal in v8."}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"operator","type":"Operator<any, T> | undefined","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Internal implementation detail, do not use directly. Will be made internal in v8."}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"create","type":"(...args: any[]) => any","initializer":"<T>(subscribe?: (subscriber: Subscriber<T>) => TeardownLogic) => {\r\n    return new Observable<T>(subscribe);\r\n  }","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"\r\nCreates a new Observable by calling the Observable constructor","tags":[{"kind":25,"tagName":"owner","text":"Observable"},{"kind":25,"tagName":"method","text":"create"},{"kind":25,"tagName":"param","text":"{Function} subscribe? the subscriber function to be passed to the Observable constructor"},{"kind":25,"tagName":"return","text":"{Observable} a new observable"},{"kind":25,"tagName":"nocollapse"},{"kind":25,"tagName":"deprecated","text":"Use `new Observable()` instead. Will be removed in v8."}]}],"isStatic":true,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false}],"getAccessors":[],"setAccessors":[]}},{"parameters":[{"name":"op1","type":"OperatorFunction<T, A>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"op2","type":"OperatorFunction<A, B>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"op3","type":"OperatorFunction<B, C>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"op4","type":"OperatorFunction<C, D>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"op5","type":"OperatorFunction<D, E>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"op6","type":"OperatorFunction<E, F>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"op7","type":"OperatorFunction<F, G>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"op8","type":"OperatorFunction<G, H>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<H>","isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"isAbstract":false,"typeParameters":[{"name":"A","kind":39,"isConst":false,"variance":0},{"name":"B","kind":39,"isConst":false,"variance":0},{"name":"C","kind":39,"isConst":false,"variance":0},{"name":"D","kind":39,"isConst":false,"variance":0},{"name":"E","kind":39,"isConst":false,"variance":0},{"name":"F","kind":39,"isConst":false,"variance":0},{"name":"G","kind":39,"isConst":false,"variance":0},{"name":"H","kind":39,"isConst":false,"variance":0}],"hasOverrideKeyword":false,"docs":[],"kind":27,"classStructure":{"decorators":[],"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nA representation of any set of values over any amount of time. This is the most basic building block\r\nof RxJS.\r\n","tags":[{"kind":25,"tagName":"class","text":"Observable<T>"}]}],"isAbstract":false,"implements":["Subscribable<T>"],"name":"Observable","isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"kind":2,"ctors":[{"statements":["if (subscribe) {\r\n  this._subscribe = subscribe;\r\n}"],"parameters":[{"name":"subscribe","type":"(this: Observable<T>, subscriber: Subscriber<T>) => TeardownLogic","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"typeParameters":[],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"constructor"},{"kind":25,"tagName":"param","text":"{Function} subscribe the function that is called when the Observable is\r\ninitially subscribed to. This function is given a Subscriber, to which new values\r\ncan be `next`ed, or an `error` method can be called to raise an error, or\r\n`complete` can be called to notify of a successful completion."}]}],"kind":5,"overloads":[]}],"properties":[{"name":"source","type":"Observable<any> | undefined","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Internal implementation detail, do not use directly. Will be made internal in v8."}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"operator","type":"Operator<any, T> | undefined","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Internal implementation detail, do not use directly. Will be made internal in v8."}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"create","type":"(...args: any[]) => any","initializer":"<T>(subscribe?: (subscriber: Subscriber<T>) => TeardownLogic) => {\r\n    return new Observable<T>(subscribe);\r\n  }","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"\r\nCreates a new Observable by calling the Observable constructor","tags":[{"kind":25,"tagName":"owner","text":"Observable"},{"kind":25,"tagName":"method","text":"create"},{"kind":25,"tagName":"param","text":"{Function} subscribe? the subscriber function to be passed to the Observable constructor"},{"kind":25,"tagName":"return","text":"{Observable} a new observable"},{"kind":25,"tagName":"nocollapse"},{"kind":25,"tagName":"deprecated","text":"Use `new Observable()` instead. Will be removed in v8."}]}],"isStatic":true,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false}],"getAccessors":[],"setAccessors":[]}},{"parameters":[{"name":"op1","type":"OperatorFunction<T, A>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"op2","type":"OperatorFunction<A, B>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"op3","type":"OperatorFunction<B, C>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"op4","type":"OperatorFunction<C, D>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"op5","type":"OperatorFunction<D, E>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"op6","type":"OperatorFunction<E, F>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"op7","type":"OperatorFunction<F, G>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"op8","type":"OperatorFunction<G, H>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"op9","type":"OperatorFunction<H, I>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<I>","isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"isAbstract":false,"typeParameters":[{"name":"A","kind":39,"isConst":false,"variance":0},{"name":"B","kind":39,"isConst":false,"variance":0},{"name":"C","kind":39,"isConst":false,"variance":0},{"name":"D","kind":39,"isConst":false,"variance":0},{"name":"E","kind":39,"isConst":false,"variance":0},{"name":"F","kind":39,"isConst":false,"variance":0},{"name":"G","kind":39,"isConst":false,"variance":0},{"name":"H","kind":39,"isConst":false,"variance":0},{"name":"I","kind":39,"isConst":false,"variance":0}],"hasOverrideKeyword":false,"docs":[],"kind":27,"classStructure":{"decorators":[],"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nA representation of any set of values over any amount of time. This is the most basic building block\r\nof RxJS.\r\n","tags":[{"kind":25,"tagName":"class","text":"Observable<T>"}]}],"isAbstract":false,"implements":["Subscribable<T>"],"name":"Observable","isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"kind":2,"ctors":[{"statements":["if (subscribe) {\r\n  this._subscribe = subscribe;\r\n}"],"parameters":[{"name":"subscribe","type":"(this: Observable<T>, subscriber: Subscriber<T>) => TeardownLogic","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"typeParameters":[],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"constructor"},{"kind":25,"tagName":"param","text":"{Function} subscribe the function that is called when the Observable is\r\ninitially subscribed to. This function is given a Subscriber, to which new values\r\ncan be `next`ed, or an `error` method can be called to raise an error, or\r\n`complete` can be called to notify of a successful completion."}]}],"kind":5,"overloads":[]}],"properties":[{"name":"source","type":"Observable<any> | undefined","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Internal implementation detail, do not use directly. Will be made internal in v8."}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"operator","type":"Operator<any, T> | undefined","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Internal implementation detail, do not use directly. Will be made internal in v8."}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"create","type":"(...args: any[]) => any","initializer":"<T>(subscribe?: (subscriber: Subscriber<T>) => TeardownLogic) => {\r\n    return new Observable<T>(subscribe);\r\n  }","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"\r\nCreates a new Observable by calling the Observable constructor","tags":[{"kind":25,"tagName":"owner","text":"Observable"},{"kind":25,"tagName":"method","text":"create"},{"kind":25,"tagName":"param","text":"{Function} subscribe? the subscriber function to be passed to the Observable constructor"},{"kind":25,"tagName":"return","text":"{Observable} a new observable"},{"kind":25,"tagName":"nocollapse"},{"kind":25,"tagName":"deprecated","text":"Use `new Observable()` instead. Will be removed in v8."}]}],"isStatic":true,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false}],"getAccessors":[],"setAccessors":[]}},{"parameters":[{"name":"op1","type":"OperatorFunction<T, A>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"op2","type":"OperatorFunction<A, B>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"op3","type":"OperatorFunction<B, C>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"op4","type":"OperatorFunction<C, D>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"op5","type":"OperatorFunction<D, E>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"op6","type":"OperatorFunction<E, F>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"op7","type":"OperatorFunction<F, G>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"op8","type":"OperatorFunction<G, H>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"op9","type":"OperatorFunction<H, I>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"operations","type":"OperatorFunction<any, any>[]","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":true}],"returnType":"Observable<unknown>","isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"isAbstract":false,"typeParameters":[{"name":"A","kind":39,"isConst":false,"variance":0},{"name":"B","kind":39,"isConst":false,"variance":0},{"name":"C","kind":39,"isConst":false,"variance":0},{"name":"D","kind":39,"isConst":false,"variance":0},{"name":"E","kind":39,"isConst":false,"variance":0},{"name":"F","kind":39,"isConst":false,"variance":0},{"name":"G","kind":39,"isConst":false,"variance":0},{"name":"H","kind":39,"isConst":false,"variance":0},{"name":"I","kind":39,"isConst":false,"variance":0}],"hasOverrideKeyword":false,"docs":[],"kind":27,"classStructure":{"decorators":[],"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nA representation of any set of values over any amount of time. This is the most basic building block\r\nof RxJS.\r\n","tags":[{"kind":25,"tagName":"class","text":"Observable<T>"}]}],"isAbstract":false,"implements":["Subscribable<T>"],"name":"Observable","isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"kind":2,"ctors":[{"statements":["if (subscribe) {\r\n  this._subscribe = subscribe;\r\n}"],"parameters":[{"name":"subscribe","type":"(this: Observable<T>, subscriber: Subscriber<T>) => TeardownLogic","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"typeParameters":[],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"constructor"},{"kind":25,"tagName":"param","text":"{Function} subscribe the function that is called when the Observable is\r\ninitially subscribed to. This function is given a Subscriber, to which new values\r\ncan be `next`ed, or an `error` method can be called to raise an error, or\r\n`complete` can be called to notify of a successful completion."}]}],"kind":5,"overloads":[]}],"properties":[{"name":"source","type":"Observable<any> | undefined","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Internal implementation detail, do not use directly. Will be made internal in v8."}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"operator","type":"Operator<any, T> | undefined","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Internal implementation detail, do not use directly. Will be made internal in v8."}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"create","type":"(...args: any[]) => any","initializer":"<T>(subscribe?: (subscriber: Subscriber<T>) => TeardownLogic) => {\r\n    return new Observable<T>(subscribe);\r\n  }","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"\r\nCreates a new Observable by calling the Observable constructor","tags":[{"kind":25,"tagName":"owner","text":"Observable"},{"kind":25,"tagName":"method","text":"create"},{"kind":25,"tagName":"param","text":"{Function} subscribe? the subscriber function to be passed to the Observable constructor"},{"kind":25,"tagName":"return","text":"{Observable} a new observable"},{"kind":25,"tagName":"nocollapse"},{"kind":25,"tagName":"deprecated","text":"Use `new Observable()` instead. Will be removed in v8."}]}],"isStatic":true,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false}],"getAccessors":[],"setAccessors":[]}}]},{"methodName":"toPromise","usabilityResult":{"index":1},"sources":[{"parameters":[],"returnType":"Promise<T | undefined>","isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"isAbstract":false,"typeParameters":[],"hasOverrideKeyword":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Replaced with {@link firstValueFrom} and {@link lastValueFrom}. Will be removed in v8. Details: https://rxjs.dev/deprecations/to-promise"}]}],"kind":27,"classStructure":{"decorators":[],"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nA representation of any set of values over any amount of time. This is the most basic building block\r\nof RxJS.\r\n","tags":[{"kind":25,"tagName":"class","text":"Observable<T>"}]}],"isAbstract":false,"implements":["Subscribable<T>"],"name":"Observable","isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"kind":2,"ctors":[{"statements":["if (subscribe) {\r\n  this._subscribe = subscribe;\r\n}"],"parameters":[{"name":"subscribe","type":"(this: Observable<T>, subscriber: Subscriber<T>) => TeardownLogic","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"typeParameters":[],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"constructor"},{"kind":25,"tagName":"param","text":"{Function} subscribe the function that is called when the Observable is\r\ninitially subscribed to. This function is given a Subscriber, to which new values\r\ncan be `next`ed, or an `error` method can be called to raise an error, or\r\n`complete` can be called to notify of a successful completion."}]}],"kind":5,"overloads":[]}],"properties":[{"name":"source","type":"Observable<any> | undefined","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Internal implementation detail, do not use directly. Will be made internal in v8."}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"operator","type":"Operator<any, T> | undefined","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Internal implementation detail, do not use directly. Will be made internal in v8."}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"create","type":"(...args: any[]) => any","initializer":"<T>(subscribe?: (subscriber: Subscriber<T>) => TeardownLogic) => {\r\n    return new Observable<T>(subscribe);\r\n  }","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"\r\nCreates a new Observable by calling the Observable constructor","tags":[{"kind":25,"tagName":"owner","text":"Observable"},{"kind":25,"tagName":"method","text":"create"},{"kind":25,"tagName":"param","text":"{Function} subscribe? the subscriber function to be passed to the Observable constructor"},{"kind":25,"tagName":"return","text":"{Observable} a new observable"},{"kind":25,"tagName":"nocollapse"},{"kind":25,"tagName":"deprecated","text":"Use `new Observable()` instead. Will be removed in v8."}]}],"isStatic":true,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false}],"getAccessors":[],"setAccessors":[]}},{"parameters":[{"name":"PromiseCtor","type":"typeof Promise","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Promise<T | undefined>","isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"isAbstract":false,"typeParameters":[],"hasOverrideKeyword":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Replaced with {@link firstValueFrom} and {@link lastValueFrom}. Will be removed in v8. Details: https://rxjs.dev/deprecations/to-promise"}]}],"kind":27,"classStructure":{"decorators":[],"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nA representation of any set of values over any amount of time. This is the most basic building block\r\nof RxJS.\r\n","tags":[{"kind":25,"tagName":"class","text":"Observable<T>"}]}],"isAbstract":false,"implements":["Subscribable<T>"],"name":"Observable","isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"kind":2,"ctors":[{"statements":["if (subscribe) {\r\n  this._subscribe = subscribe;\r\n}"],"parameters":[{"name":"subscribe","type":"(this: Observable<T>, subscriber: Subscriber<T>) => TeardownLogic","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"typeParameters":[],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"constructor"},{"kind":25,"tagName":"param","text":"{Function} subscribe the function that is called when the Observable is\r\ninitially subscribed to. This function is given a Subscriber, to which new values\r\ncan be `next`ed, or an `error` method can be called to raise an error, or\r\n`complete` can be called to notify of a successful completion."}]}],"kind":5,"overloads":[]}],"properties":[{"name":"source","type":"Observable<any> | undefined","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Internal implementation detail, do not use directly. Will be made internal in v8."}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"operator","type":"Operator<any, T> | undefined","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Internal implementation detail, do not use directly. Will be made internal in v8."}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"create","type":"(...args: any[]) => any","initializer":"<T>(subscribe?: (subscriber: Subscriber<T>) => TeardownLogic) => {\r\n    return new Observable<T>(subscribe);\r\n  }","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"\r\nCreates a new Observable by calling the Observable constructor","tags":[{"kind":25,"tagName":"owner","text":"Observable"},{"kind":25,"tagName":"method","text":"create"},{"kind":25,"tagName":"param","text":"{Function} subscribe? the subscriber function to be passed to the Observable constructor"},{"kind":25,"tagName":"return","text":"{Observable} a new observable"},{"kind":25,"tagName":"nocollapse"},{"kind":25,"tagName":"deprecated","text":"Use `new Observable()` instead. Will be removed in v8."}]}],"isStatic":true,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false}],"getAccessors":[],"setAccessors":[]}},{"parameters":[{"name":"PromiseCtor","type":"PromiseConstructorLike","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Promise<T | undefined>","isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"isAbstract":false,"typeParameters":[],"hasOverrideKeyword":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Replaced with {@link firstValueFrom} and {@link lastValueFrom}. Will be removed in v8. Details: https://rxjs.dev/deprecations/to-promise"}]}],"kind":27,"classStructure":{"decorators":[],"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nA representation of any set of values over any amount of time. This is the most basic building block\r\nof RxJS.\r\n","tags":[{"kind":25,"tagName":"class","text":"Observable<T>"}]}],"isAbstract":false,"implements":["Subscribable<T>"],"name":"Observable","isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"kind":2,"ctors":[{"statements":["if (subscribe) {\r\n  this._subscribe = subscribe;\r\n}"],"parameters":[{"name":"subscribe","type":"(this: Observable<T>, subscriber: Subscriber<T>) => TeardownLogic","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"typeParameters":[],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"constructor"},{"kind":25,"tagName":"param","text":"{Function} subscribe the function that is called when the Observable is\r\ninitially subscribed to. This function is given a Subscriber, to which new values\r\ncan be `next`ed, or an `error` method can be called to raise an error, or\r\n`complete` can be called to notify of a successful completion."}]}],"kind":5,"overloads":[]}],"properties":[{"name":"source","type":"Observable<any> | undefined","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Internal implementation detail, do not use directly. Will be made internal in v8."}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"operator","type":"Operator<any, T> | undefined","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Internal implementation detail, do not use directly. Will be made internal in v8."}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"create","type":"(...args: any[]) => any","initializer":"<T>(subscribe?: (subscriber: Subscriber<T>) => TeardownLogic) => {\r\n    return new Observable<T>(subscribe);\r\n  }","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"\r\nCreates a new Observable by calling the Observable constructor","tags":[{"kind":25,"tagName":"owner","text":"Observable"},{"kind":25,"tagName":"method","text":"create"},{"kind":25,"tagName":"param","text":"{Function} subscribe? the subscriber function to be passed to the Observable constructor"},{"kind":25,"tagName":"return","text":"{Observable} a new observable"},{"kind":25,"tagName":"nocollapse"},{"kind":25,"tagName":"deprecated","text":"Use `new Observable()` instead. Will be removed in v8."}]}],"isStatic":true,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false}],"getAccessors":[],"setAccessors":[]}}]}]}},"usabilityResult":{"index":1}},"..\\src\\internal\\Notification.ts":{"moduleComponents":{"Notification":{"kind":2,"usabilityResult":{"index":1},"methods":[{"methodName":"do","usabilityResult":{"index":1},"sources":[{"parameters":[{"name":"next","type":"(value: T) => void","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"error","type":"(err: any) => void","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"complete","type":"() => void","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"void","isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"isAbstract":false,"typeParameters":[],"hasOverrideKeyword":false,"docs":[{"kind":24,"description":"\r\nExecutes a notification on the appropriate handler from a list provided.\r\nIf a handler is missing for the kind of notification, nothing is called\r\nand no error is thrown, it will be a noop.","tags":[{"kind":25,"tagName":"param","text":"next A next handler"},{"kind":25,"tagName":"param","text":"error An error handler"},{"kind":25,"tagName":"param","text":"complete A complete handler"},{"kind":25,"tagName":"deprecated","text":"Replaced with {@link Notification#observe observe}. Will be removed in v8."}]}],"kind":27,"classStructure":{"decorators":[],"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nRepresents a push-based event or value that an {@link Observable} can emit.\r\nThis class is particularly useful for operators that manage notifications,\r\nlike {@link materialize}, {@link dematerialize}, {@link observeOn}, and\r\nothers. Besides wrapping the actual delivered value, it also annotates it\r\nwith metadata of, for instance, what type of push message it is (`next`,\r\n`error`, or `complete`).\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link materialize}"},{"kind":25,"tagName":"see","text":"{@link dematerialize}"},{"kind":25,"tagName":"see","text":"{@link observeOn}"},{"kind":25,"tagName":"deprecated","text":"It is NOT recommended to create instances of `Notification` directly.\r\nRather, try to create POJOs matching the signature outlined in {@link ObservableNotification}.\r\nFor example: `{ kind: 'N', value: 1 }`, `{ kind: 'E', error: new Error('bad') }`, or `{ kind: 'C' }`.\r\nWill be removed in v8."}]}],"isAbstract":false,"implements":[],"name":"Notification","isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"kind":2,"ctors":[{"statements":["this.hasValue = kind === 'N';"],"parameters":[{"name":"kind","type":"'N' | 'E' | 'C'","isReadonly":true,"scope":"public","decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"value","type":"T","isReadonly":true,"scope":"public","decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"error","type":"any","isReadonly":true,"scope":"public","decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"typeParameters":[],"docs":[],"kind":5,"overloads":[{"parameters":[{"name":"kind","type":"'N'","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"value","type":"T","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"docs":[{"kind":24,"description":"\r\nCreates a \"Next\" notification object.","tags":[{"kind":25,"tagName":"param","text":"kind Always `'N'`"},{"kind":25,"tagName":"param","text":"value The value to notify with if observed."},{"kind":25,"tagName":"deprecated","text":"Internal implementation detail. Use {@link Notification#createNext createNext} instead."}]}],"typeParameters":[],"kind":6},{"parameters":[{"name":"kind","type":"'E'","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"value","type":"undefined","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"error","type":"any","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"docs":[{"kind":24,"description":"\r\nCreates an \"Error\" notification object.","tags":[{"kind":25,"tagName":"param","text":"kind Always `'E'`"},{"kind":25,"tagName":"param","text":"value Always `undefined`"},{"kind":25,"tagName":"param","text":"error The error to notify with if observed."},{"kind":25,"tagName":"deprecated","text":"Internal implementation detail. Use {@link Notification#createError createError} instead."}]}],"typeParameters":[],"kind":6},{"parameters":[{"name":"kind","type":"'C'","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"docs":[{"kind":24,"description":"\r\nCreates a \"completion\" notification object.","tags":[{"kind":25,"tagName":"param","text":"kind Always `'C'`"},{"kind":25,"tagName":"deprecated","text":"Internal implementation detail. Use {@link Notification#createComplete createComplete} instead."}]}],"typeParameters":[],"kind":6}]}],"properties":[{"name":"hasValue","type":"boolean","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":true,"docs":[{"kind":24,"description":"\r\nA value signifying that the notification will \"next\" if observed. In truth,\r\nThis is really synonymous with just checking `kind === \"N\"`.","tags":[{"kind":25,"tagName":"deprecated","text":"Will be removed in v8. Instead, just check to see if the value of `kind` is `\"N\"`."}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"completeNotification","initializer":"new Notification('C') as Notification<never> & CompleteNotification","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[],"isStatic":true,"scope":"private","isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false}],"getAccessors":[],"setAccessors":[]}},{"parameters":[{"name":"next","type":"(value: T) => void","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"error","type":"(err: any) => void","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"void","isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"isAbstract":false,"typeParameters":[],"hasOverrideKeyword":false,"docs":[{"kind":24,"description":"\r\nExecutes a notification on the appropriate handler from a list provided.\r\nIf a handler is missing for the kind of notification, nothing is called\r\nand no error is thrown, it will be a noop.","tags":[{"kind":25,"tagName":"param","text":"next A next handler"},{"kind":25,"tagName":"param","text":"error An error handler"},{"kind":25,"tagName":"deprecated","text":"Replaced with {@link Notification#observe observe}. Will be removed in v8."}]}],"kind":27,"classStructure":{"decorators":[],"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nRepresents a push-based event or value that an {@link Observable} can emit.\r\nThis class is particularly useful for operators that manage notifications,\r\nlike {@link materialize}, {@link dematerialize}, {@link observeOn}, and\r\nothers. Besides wrapping the actual delivered value, it also annotates it\r\nwith metadata of, for instance, what type of push message it is (`next`,\r\n`error`, or `complete`).\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link materialize}"},{"kind":25,"tagName":"see","text":"{@link dematerialize}"},{"kind":25,"tagName":"see","text":"{@link observeOn}"},{"kind":25,"tagName":"deprecated","text":"It is NOT recommended to create instances of `Notification` directly.\r\nRather, try to create POJOs matching the signature outlined in {@link ObservableNotification}.\r\nFor example: `{ kind: 'N', value: 1 }`, `{ kind: 'E', error: new Error('bad') }`, or `{ kind: 'C' }`.\r\nWill be removed in v8."}]}],"isAbstract":false,"implements":[],"name":"Notification","isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"kind":2,"ctors":[{"statements":["this.hasValue = kind === 'N';"],"parameters":[{"name":"kind","type":"'N' | 'E' | 'C'","isReadonly":true,"scope":"public","decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"value","type":"T","isReadonly":true,"scope":"public","decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"error","type":"any","isReadonly":true,"scope":"public","decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"typeParameters":[],"docs":[],"kind":5,"overloads":[{"parameters":[{"name":"kind","type":"'N'","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"value","type":"T","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"docs":[{"kind":24,"description":"\r\nCreates a \"Next\" notification object.","tags":[{"kind":25,"tagName":"param","text":"kind Always `'N'`"},{"kind":25,"tagName":"param","text":"value The value to notify with if observed."},{"kind":25,"tagName":"deprecated","text":"Internal implementation detail. Use {@link Notification#createNext createNext} instead."}]}],"typeParameters":[],"kind":6},{"parameters":[{"name":"kind","type":"'E'","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"value","type":"undefined","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"error","type":"any","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"docs":[{"kind":24,"description":"\r\nCreates an \"Error\" notification object.","tags":[{"kind":25,"tagName":"param","text":"kind Always `'E'`"},{"kind":25,"tagName":"param","text":"value Always `undefined`"},{"kind":25,"tagName":"param","text":"error The error to notify with if observed."},{"kind":25,"tagName":"deprecated","text":"Internal implementation detail. Use {@link Notification#createError createError} instead."}]}],"typeParameters":[],"kind":6},{"parameters":[{"name":"kind","type":"'C'","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"docs":[{"kind":24,"description":"\r\nCreates a \"completion\" notification object.","tags":[{"kind":25,"tagName":"param","text":"kind Always `'C'`"},{"kind":25,"tagName":"deprecated","text":"Internal implementation detail. Use {@link Notification#createComplete createComplete} instead."}]}],"typeParameters":[],"kind":6}]}],"properties":[{"name":"hasValue","type":"boolean","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":true,"docs":[{"kind":24,"description":"\r\nA value signifying that the notification will \"next\" if observed. In truth,\r\nThis is really synonymous with just checking `kind === \"N\"`.","tags":[{"kind":25,"tagName":"deprecated","text":"Will be removed in v8. Instead, just check to see if the value of `kind` is `\"N\"`."}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"completeNotification","initializer":"new Notification('C') as Notification<never> & CompleteNotification","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[],"isStatic":true,"scope":"private","isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false}],"getAccessors":[],"setAccessors":[]}},{"parameters":[{"name":"next","type":"(value: T) => void","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"void","isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"isAbstract":false,"typeParameters":[],"hasOverrideKeyword":false,"docs":[{"kind":24,"description":"\r\nExecutes the next handler if the Notification is of `kind` `\"N\"`. Otherwise\r\nthis will not error, and it will be a noop.","tags":[{"kind":25,"tagName":"param","text":"next The next handler"},{"kind":25,"tagName":"deprecated","text":"Replaced with {@link Notification#observe observe}. Will be removed in v8."}]}],"kind":27,"classStructure":{"decorators":[],"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nRepresents a push-based event or value that an {@link Observable} can emit.\r\nThis class is particularly useful for operators that manage notifications,\r\nlike {@link materialize}, {@link dematerialize}, {@link observeOn}, and\r\nothers. Besides wrapping the actual delivered value, it also annotates it\r\nwith metadata of, for instance, what type of push message it is (`next`,\r\n`error`, or `complete`).\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link materialize}"},{"kind":25,"tagName":"see","text":"{@link dematerialize}"},{"kind":25,"tagName":"see","text":"{@link observeOn}"},{"kind":25,"tagName":"deprecated","text":"It is NOT recommended to create instances of `Notification` directly.\r\nRather, try to create POJOs matching the signature outlined in {@link ObservableNotification}.\r\nFor example: `{ kind: 'N', value: 1 }`, `{ kind: 'E', error: new Error('bad') }`, or `{ kind: 'C' }`.\r\nWill be removed in v8."}]}],"isAbstract":false,"implements":[],"name":"Notification","isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"kind":2,"ctors":[{"statements":["this.hasValue = kind === 'N';"],"parameters":[{"name":"kind","type":"'N' | 'E' | 'C'","isReadonly":true,"scope":"public","decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"value","type":"T","isReadonly":true,"scope":"public","decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"error","type":"any","isReadonly":true,"scope":"public","decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"typeParameters":[],"docs":[],"kind":5,"overloads":[{"parameters":[{"name":"kind","type":"'N'","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"value","type":"T","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"docs":[{"kind":24,"description":"\r\nCreates a \"Next\" notification object.","tags":[{"kind":25,"tagName":"param","text":"kind Always `'N'`"},{"kind":25,"tagName":"param","text":"value The value to notify with if observed."},{"kind":25,"tagName":"deprecated","text":"Internal implementation detail. Use {@link Notification#createNext createNext} instead."}]}],"typeParameters":[],"kind":6},{"parameters":[{"name":"kind","type":"'E'","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"value","type":"undefined","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"error","type":"any","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"docs":[{"kind":24,"description":"\r\nCreates an \"Error\" notification object.","tags":[{"kind":25,"tagName":"param","text":"kind Always `'E'`"},{"kind":25,"tagName":"param","text":"value Always `undefined`"},{"kind":25,"tagName":"param","text":"error The error to notify with if observed."},{"kind":25,"tagName":"deprecated","text":"Internal implementation detail. Use {@link Notification#createError createError} instead."}]}],"typeParameters":[],"kind":6},{"parameters":[{"name":"kind","type":"'C'","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"docs":[{"kind":24,"description":"\r\nCreates a \"completion\" notification object.","tags":[{"kind":25,"tagName":"param","text":"kind Always `'C'`"},{"kind":25,"tagName":"deprecated","text":"Internal implementation detail. Use {@link Notification#createComplete createComplete} instead."}]}],"typeParameters":[],"kind":6}]}],"properties":[{"name":"hasValue","type":"boolean","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":true,"docs":[{"kind":24,"description":"\r\nA value signifying that the notification will \"next\" if observed. In truth,\r\nThis is really synonymous with just checking `kind === \"N\"`.","tags":[{"kind":25,"tagName":"deprecated","text":"Will be removed in v8. Instead, just check to see if the value of `kind` is `\"N\"`."}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"completeNotification","initializer":"new Notification('C') as Notification<never> & CompleteNotification","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[],"isStatic":true,"scope":"private","isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false}],"getAccessors":[],"setAccessors":[]}}]},{"methodName":"accept","usabilityResult":{"index":1},"sources":[{"parameters":[{"name":"next","type":"(value: T) => void","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"error","type":"(err: any) => void","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"complete","type":"() => void","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"void","isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"isAbstract":false,"typeParameters":[],"hasOverrideKeyword":false,"docs":[{"kind":24,"description":"\r\nExecutes a notification on the appropriate handler from a list provided.\r\nIf a handler is missing for the kind of notification, nothing is called\r\nand no error is thrown, it will be a noop.","tags":[{"kind":25,"tagName":"param","text":"next A next handler"},{"kind":25,"tagName":"param","text":"error An error handler"},{"kind":25,"tagName":"param","text":"complete A complete handler"},{"kind":25,"tagName":"deprecated","text":"Replaced with {@link Notification#observe observe}. Will be removed in v8."}]}],"kind":27,"classStructure":{"decorators":[],"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nRepresents a push-based event or value that an {@link Observable} can emit.\r\nThis class is particularly useful for operators that manage notifications,\r\nlike {@link materialize}, {@link dematerialize}, {@link observeOn}, and\r\nothers. Besides wrapping the actual delivered value, it also annotates it\r\nwith metadata of, for instance, what type of push message it is (`next`,\r\n`error`, or `complete`).\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link materialize}"},{"kind":25,"tagName":"see","text":"{@link dematerialize}"},{"kind":25,"tagName":"see","text":"{@link observeOn}"},{"kind":25,"tagName":"deprecated","text":"It is NOT recommended to create instances of `Notification` directly.\r\nRather, try to create POJOs matching the signature outlined in {@link ObservableNotification}.\r\nFor example: `{ kind: 'N', value: 1 }`, `{ kind: 'E', error: new Error('bad') }`, or `{ kind: 'C' }`.\r\nWill be removed in v8."}]}],"isAbstract":false,"implements":[],"name":"Notification","isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"kind":2,"ctors":[{"statements":["this.hasValue = kind === 'N';"],"parameters":[{"name":"kind","type":"'N' | 'E' | 'C'","isReadonly":true,"scope":"public","decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"value","type":"T","isReadonly":true,"scope":"public","decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"error","type":"any","isReadonly":true,"scope":"public","decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"typeParameters":[],"docs":[],"kind":5,"overloads":[{"parameters":[{"name":"kind","type":"'N'","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"value","type":"T","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"docs":[{"kind":24,"description":"\r\nCreates a \"Next\" notification object.","tags":[{"kind":25,"tagName":"param","text":"kind Always `'N'`"},{"kind":25,"tagName":"param","text":"value The value to notify with if observed."},{"kind":25,"tagName":"deprecated","text":"Internal implementation detail. Use {@link Notification#createNext createNext} instead."}]}],"typeParameters":[],"kind":6},{"parameters":[{"name":"kind","type":"'E'","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"value","type":"undefined","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"error","type":"any","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"docs":[{"kind":24,"description":"\r\nCreates an \"Error\" notification object.","tags":[{"kind":25,"tagName":"param","text":"kind Always `'E'`"},{"kind":25,"tagName":"param","text":"value Always `undefined`"},{"kind":25,"tagName":"param","text":"error The error to notify with if observed."},{"kind":25,"tagName":"deprecated","text":"Internal implementation detail. Use {@link Notification#createError createError} instead."}]}],"typeParameters":[],"kind":6},{"parameters":[{"name":"kind","type":"'C'","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"docs":[{"kind":24,"description":"\r\nCreates a \"completion\" notification object.","tags":[{"kind":25,"tagName":"param","text":"kind Always `'C'`"},{"kind":25,"tagName":"deprecated","text":"Internal implementation detail. Use {@link Notification#createComplete createComplete} instead."}]}],"typeParameters":[],"kind":6}]}],"properties":[{"name":"hasValue","type":"boolean","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":true,"docs":[{"kind":24,"description":"\r\nA value signifying that the notification will \"next\" if observed. In truth,\r\nThis is really synonymous with just checking `kind === \"N\"`.","tags":[{"kind":25,"tagName":"deprecated","text":"Will be removed in v8. Instead, just check to see if the value of `kind` is `\"N\"`."}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"completeNotification","initializer":"new Notification('C') as Notification<never> & CompleteNotification","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[],"isStatic":true,"scope":"private","isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false}],"getAccessors":[],"setAccessors":[]}},{"parameters":[{"name":"next","type":"(value: T) => void","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"error","type":"(err: any) => void","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"void","isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"isAbstract":false,"typeParameters":[],"hasOverrideKeyword":false,"docs":[{"kind":24,"description":"\r\nExecutes a notification on the appropriate handler from a list provided.\r\nIf a handler is missing for the kind of notification, nothing is called\r\nand no error is thrown, it will be a noop.","tags":[{"kind":25,"tagName":"param","text":"next A next handler"},{"kind":25,"tagName":"param","text":"error An error handler"},{"kind":25,"tagName":"deprecated","text":"Replaced with {@link Notification#observe observe}. Will be removed in v8."}]}],"kind":27,"classStructure":{"decorators":[],"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nRepresents a push-based event or value that an {@link Observable} can emit.\r\nThis class is particularly useful for operators that manage notifications,\r\nlike {@link materialize}, {@link dematerialize}, {@link observeOn}, and\r\nothers. Besides wrapping the actual delivered value, it also annotates it\r\nwith metadata of, for instance, what type of push message it is (`next`,\r\n`error`, or `complete`).\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link materialize}"},{"kind":25,"tagName":"see","text":"{@link dematerialize}"},{"kind":25,"tagName":"see","text":"{@link observeOn}"},{"kind":25,"tagName":"deprecated","text":"It is NOT recommended to create instances of `Notification` directly.\r\nRather, try to create POJOs matching the signature outlined in {@link ObservableNotification}.\r\nFor example: `{ kind: 'N', value: 1 }`, `{ kind: 'E', error: new Error('bad') }`, or `{ kind: 'C' }`.\r\nWill be removed in v8."}]}],"isAbstract":false,"implements":[],"name":"Notification","isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"kind":2,"ctors":[{"statements":["this.hasValue = kind === 'N';"],"parameters":[{"name":"kind","type":"'N' | 'E' | 'C'","isReadonly":true,"scope":"public","decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"value","type":"T","isReadonly":true,"scope":"public","decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"error","type":"any","isReadonly":true,"scope":"public","decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"typeParameters":[],"docs":[],"kind":5,"overloads":[{"parameters":[{"name":"kind","type":"'N'","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"value","type":"T","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"docs":[{"kind":24,"description":"\r\nCreates a \"Next\" notification object.","tags":[{"kind":25,"tagName":"param","text":"kind Always `'N'`"},{"kind":25,"tagName":"param","text":"value The value to notify with if observed."},{"kind":25,"tagName":"deprecated","text":"Internal implementation detail. Use {@link Notification#createNext createNext} instead."}]}],"typeParameters":[],"kind":6},{"parameters":[{"name":"kind","type":"'E'","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"value","type":"undefined","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"error","type":"any","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"docs":[{"kind":24,"description":"\r\nCreates an \"Error\" notification object.","tags":[{"kind":25,"tagName":"param","text":"kind Always `'E'`"},{"kind":25,"tagName":"param","text":"value Always `undefined`"},{"kind":25,"tagName":"param","text":"error The error to notify with if observed."},{"kind":25,"tagName":"deprecated","text":"Internal implementation detail. Use {@link Notification#createError createError} instead."}]}],"typeParameters":[],"kind":6},{"parameters":[{"name":"kind","type":"'C'","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"docs":[{"kind":24,"description":"\r\nCreates a \"completion\" notification object.","tags":[{"kind":25,"tagName":"param","text":"kind Always `'C'`"},{"kind":25,"tagName":"deprecated","text":"Internal implementation detail. Use {@link Notification#createComplete createComplete} instead."}]}],"typeParameters":[],"kind":6}]}],"properties":[{"name":"hasValue","type":"boolean","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":true,"docs":[{"kind":24,"description":"\r\nA value signifying that the notification will \"next\" if observed. In truth,\r\nThis is really synonymous with just checking `kind === \"N\"`.","tags":[{"kind":25,"tagName":"deprecated","text":"Will be removed in v8. Instead, just check to see if the value of `kind` is `\"N\"`."}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"completeNotification","initializer":"new Notification('C') as Notification<never> & CompleteNotification","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[],"isStatic":true,"scope":"private","isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false}],"getAccessors":[],"setAccessors":[]}},{"parameters":[{"name":"next","type":"(value: T) => void","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"void","isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"isAbstract":false,"typeParameters":[],"hasOverrideKeyword":false,"docs":[{"kind":24,"description":"\r\nExecutes the next handler if the Notification is of `kind` `\"N\"`. Otherwise\r\nthis will not error, and it will be a noop.","tags":[{"kind":25,"tagName":"param","text":"next The next handler"},{"kind":25,"tagName":"deprecated","text":"Replaced with {@link Notification#observe observe}. Will be removed in v8."}]}],"kind":27,"classStructure":{"decorators":[],"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nRepresents a push-based event or value that an {@link Observable} can emit.\r\nThis class is particularly useful for operators that manage notifications,\r\nlike {@link materialize}, {@link dematerialize}, {@link observeOn}, and\r\nothers. Besides wrapping the actual delivered value, it also annotates it\r\nwith metadata of, for instance, what type of push message it is (`next`,\r\n`error`, or `complete`).\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link materialize}"},{"kind":25,"tagName":"see","text":"{@link dematerialize}"},{"kind":25,"tagName":"see","text":"{@link observeOn}"},{"kind":25,"tagName":"deprecated","text":"It is NOT recommended to create instances of `Notification` directly.\r\nRather, try to create POJOs matching the signature outlined in {@link ObservableNotification}.\r\nFor example: `{ kind: 'N', value: 1 }`, `{ kind: 'E', error: new Error('bad') }`, or `{ kind: 'C' }`.\r\nWill be removed in v8."}]}],"isAbstract":false,"implements":[],"name":"Notification","isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"kind":2,"ctors":[{"statements":["this.hasValue = kind === 'N';"],"parameters":[{"name":"kind","type":"'N' | 'E' | 'C'","isReadonly":true,"scope":"public","decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"value","type":"T","isReadonly":true,"scope":"public","decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"error","type":"any","isReadonly":true,"scope":"public","decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"typeParameters":[],"docs":[],"kind":5,"overloads":[{"parameters":[{"name":"kind","type":"'N'","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"value","type":"T","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"docs":[{"kind":24,"description":"\r\nCreates a \"Next\" notification object.","tags":[{"kind":25,"tagName":"param","text":"kind Always `'N'`"},{"kind":25,"tagName":"param","text":"value The value to notify with if observed."},{"kind":25,"tagName":"deprecated","text":"Internal implementation detail. Use {@link Notification#createNext createNext} instead."}]}],"typeParameters":[],"kind":6},{"parameters":[{"name":"kind","type":"'E'","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"value","type":"undefined","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"error","type":"any","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"docs":[{"kind":24,"description":"\r\nCreates an \"Error\" notification object.","tags":[{"kind":25,"tagName":"param","text":"kind Always `'E'`"},{"kind":25,"tagName":"param","text":"value Always `undefined`"},{"kind":25,"tagName":"param","text":"error The error to notify with if observed."},{"kind":25,"tagName":"deprecated","text":"Internal implementation detail. Use {@link Notification#createError createError} instead."}]}],"typeParameters":[],"kind":6},{"parameters":[{"name":"kind","type":"'C'","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"docs":[{"kind":24,"description":"\r\nCreates a \"completion\" notification object.","tags":[{"kind":25,"tagName":"param","text":"kind Always `'C'`"},{"kind":25,"tagName":"deprecated","text":"Internal implementation detail. Use {@link Notification#createComplete createComplete} instead."}]}],"typeParameters":[],"kind":6}]}],"properties":[{"name":"hasValue","type":"boolean","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":true,"docs":[{"kind":24,"description":"\r\nA value signifying that the notification will \"next\" if observed. In truth,\r\nThis is really synonymous with just checking `kind === \"N\"`.","tags":[{"kind":25,"tagName":"deprecated","text":"Will be removed in v8. Instead, just check to see if the value of `kind` is `\"N\"`."}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"completeNotification","initializer":"new Notification('C') as Notification<never> & CompleteNotification","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[],"isStatic":true,"scope":"private","isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false}],"getAccessors":[],"setAccessors":[]}},{"parameters":[{"name":"observer","type":"PartialObserver<T>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"void","isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"isAbstract":false,"typeParameters":[],"hasOverrideKeyword":false,"docs":[{"kind":24,"description":"\r\nExecutes the appropriate handler on a passed `observer` given the `kind` of notification.\r\nIf the handler is missing it will do nothing. Even if the notification is an error, if\r\nthere is no error handler on the observer, an error will not be thrown, it will noop.","tags":[{"kind":25,"tagName":"param","text":"observer The observer to notify."},{"kind":25,"tagName":"deprecated","text":"Replaced with {@link Notification#observe observe}. Will be removed in v8."}]}],"kind":27,"classStructure":{"decorators":[],"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nRepresents a push-based event or value that an {@link Observable} can emit.\r\nThis class is particularly useful for operators that manage notifications,\r\nlike {@link materialize}, {@link dematerialize}, {@link observeOn}, and\r\nothers. Besides wrapping the actual delivered value, it also annotates it\r\nwith metadata of, for instance, what type of push message it is (`next`,\r\n`error`, or `complete`).\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link materialize}"},{"kind":25,"tagName":"see","text":"{@link dematerialize}"},{"kind":25,"tagName":"see","text":"{@link observeOn}"},{"kind":25,"tagName":"deprecated","text":"It is NOT recommended to create instances of `Notification` directly.\r\nRather, try to create POJOs matching the signature outlined in {@link ObservableNotification}.\r\nFor example: `{ kind: 'N', value: 1 }`, `{ kind: 'E', error: new Error('bad') }`, or `{ kind: 'C' }`.\r\nWill be removed in v8."}]}],"isAbstract":false,"implements":[],"name":"Notification","isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"kind":2,"ctors":[{"statements":["this.hasValue = kind === 'N';"],"parameters":[{"name":"kind","type":"'N' | 'E' | 'C'","isReadonly":true,"scope":"public","decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"value","type":"T","isReadonly":true,"scope":"public","decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"error","type":"any","isReadonly":true,"scope":"public","decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"typeParameters":[],"docs":[],"kind":5,"overloads":[{"parameters":[{"name":"kind","type":"'N'","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"value","type":"T","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"docs":[{"kind":24,"description":"\r\nCreates a \"Next\" notification object.","tags":[{"kind":25,"tagName":"param","text":"kind Always `'N'`"},{"kind":25,"tagName":"param","text":"value The value to notify with if observed."},{"kind":25,"tagName":"deprecated","text":"Internal implementation detail. Use {@link Notification#createNext createNext} instead."}]}],"typeParameters":[],"kind":6},{"parameters":[{"name":"kind","type":"'E'","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"value","type":"undefined","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"error","type":"any","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"docs":[{"kind":24,"description":"\r\nCreates an \"Error\" notification object.","tags":[{"kind":25,"tagName":"param","text":"kind Always `'E'`"},{"kind":25,"tagName":"param","text":"value Always `undefined`"},{"kind":25,"tagName":"param","text":"error The error to notify with if observed."},{"kind":25,"tagName":"deprecated","text":"Internal implementation detail. Use {@link Notification#createError createError} instead."}]}],"typeParameters":[],"kind":6},{"parameters":[{"name":"kind","type":"'C'","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"docs":[{"kind":24,"description":"\r\nCreates a \"completion\" notification object.","tags":[{"kind":25,"tagName":"param","text":"kind Always `'C'`"},{"kind":25,"tagName":"deprecated","text":"Internal implementation detail. Use {@link Notification#createComplete createComplete} instead."}]}],"typeParameters":[],"kind":6}]}],"properties":[{"name":"hasValue","type":"boolean","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":true,"docs":[{"kind":24,"description":"\r\nA value signifying that the notification will \"next\" if observed. In truth,\r\nThis is really synonymous with just checking `kind === \"N\"`.","tags":[{"kind":25,"tagName":"deprecated","text":"Will be removed in v8. Instead, just check to see if the value of `kind` is `\"N\"`."}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"completeNotification","initializer":"new Notification('C') as Notification<never> & CompleteNotification","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[],"isStatic":true,"scope":"private","isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false}],"getAccessors":[],"setAccessors":[]}}]}]}},"usabilityResult":{"index":1}},"..\\src\\internal\\util\\pipe.ts":{"moduleComponents":{"pipe":{"kind":13,"usabilityResult":{"index":0.9},"sources":[{"isExported":true,"isDefaultExport":false,"typeParameters":[],"docs":[],"hasDeclareKeyword":false,"parameters":[],"returnType":"typeof identity","isGenerator":false,"isAsync":false,"kind":14},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"A","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"fn1","type":"UnaryFunction<T, A>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"UnaryFunction<T, A>","isGenerator":false,"isAsync":false,"kind":14},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"A","kind":39,"isConst":false,"variance":0},{"name":"B","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"fn1","type":"UnaryFunction<T, A>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"fn2","type":"UnaryFunction<A, B>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"UnaryFunction<T, B>","isGenerator":false,"isAsync":false,"kind":14},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"A","kind":39,"isConst":false,"variance":0},{"name":"B","kind":39,"isConst":false,"variance":0},{"name":"C","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"fn1","type":"UnaryFunction<T, A>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"fn2","type":"UnaryFunction<A, B>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"fn3","type":"UnaryFunction<B, C>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"UnaryFunction<T, C>","isGenerator":false,"isAsync":false,"kind":14},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"A","kind":39,"isConst":false,"variance":0},{"name":"B","kind":39,"isConst":false,"variance":0},{"name":"C","kind":39,"isConst":false,"variance":0},{"name":"D","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"fn1","type":"UnaryFunction<T, A>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"fn2","type":"UnaryFunction<A, B>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"fn3","type":"UnaryFunction<B, C>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"fn4","type":"UnaryFunction<C, D>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"UnaryFunction<T, D>","isGenerator":false,"isAsync":false,"kind":14},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"A","kind":39,"isConst":false,"variance":0},{"name":"B","kind":39,"isConst":false,"variance":0},{"name":"C","kind":39,"isConst":false,"variance":0},{"name":"D","kind":39,"isConst":false,"variance":0},{"name":"E","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"fn1","type":"UnaryFunction<T, A>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"fn2","type":"UnaryFunction<A, B>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"fn3","type":"UnaryFunction<B, C>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"fn4","type":"UnaryFunction<C, D>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"fn5","type":"UnaryFunction<D, E>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"UnaryFunction<T, E>","isGenerator":false,"isAsync":false,"kind":14},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"A","kind":39,"isConst":false,"variance":0},{"name":"B","kind":39,"isConst":false,"variance":0},{"name":"C","kind":39,"isConst":false,"variance":0},{"name":"D","kind":39,"isConst":false,"variance":0},{"name":"E","kind":39,"isConst":false,"variance":0},{"name":"F","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"fn1","type":"UnaryFunction<T, A>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"fn2","type":"UnaryFunction<A, B>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"fn3","type":"UnaryFunction<B, C>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"fn4","type":"UnaryFunction<C, D>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"fn5","type":"UnaryFunction<D, E>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"fn6","type":"UnaryFunction<E, F>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"UnaryFunction<T, F>","isGenerator":false,"isAsync":false,"kind":14},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"A","kind":39,"isConst":false,"variance":0},{"name":"B","kind":39,"isConst":false,"variance":0},{"name":"C","kind":39,"isConst":false,"variance":0},{"name":"D","kind":39,"isConst":false,"variance":0},{"name":"E","kind":39,"isConst":false,"variance":0},{"name":"F","kind":39,"isConst":false,"variance":0},{"name":"G","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"fn1","type":"UnaryFunction<T, A>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"fn2","type":"UnaryFunction<A, B>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"fn3","type":"UnaryFunction<B, C>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"fn4","type":"UnaryFunction<C, D>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"fn5","type":"UnaryFunction<D, E>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"fn6","type":"UnaryFunction<E, F>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"fn7","type":"UnaryFunction<F, G>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"UnaryFunction<T, G>","isGenerator":false,"isAsync":false,"kind":14},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"A","kind":39,"isConst":false,"variance":0},{"name":"B","kind":39,"isConst":false,"variance":0},{"name":"C","kind":39,"isConst":false,"variance":0},{"name":"D","kind":39,"isConst":false,"variance":0},{"name":"E","kind":39,"isConst":false,"variance":0},{"name":"F","kind":39,"isConst":false,"variance":0},{"name":"G","kind":39,"isConst":false,"variance":0},{"name":"H","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"fn1","type":"UnaryFunction<T, A>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"fn2","type":"UnaryFunction<A, B>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"fn3","type":"UnaryFunction<B, C>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"fn4","type":"UnaryFunction<C, D>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"fn5","type":"UnaryFunction<D, E>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"fn6","type":"UnaryFunction<E, F>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"fn7","type":"UnaryFunction<F, G>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"fn8","type":"UnaryFunction<G, H>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"UnaryFunction<T, H>","isGenerator":false,"isAsync":false,"kind":14},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"A","kind":39,"isConst":false,"variance":0},{"name":"B","kind":39,"isConst":false,"variance":0},{"name":"C","kind":39,"isConst":false,"variance":0},{"name":"D","kind":39,"isConst":false,"variance":0},{"name":"E","kind":39,"isConst":false,"variance":0},{"name":"F","kind":39,"isConst":false,"variance":0},{"name":"G","kind":39,"isConst":false,"variance":0},{"name":"H","kind":39,"isConst":false,"variance":0},{"name":"I","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"fn1","type":"UnaryFunction<T, A>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"fn2","type":"UnaryFunction<A, B>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"fn3","type":"UnaryFunction<B, C>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"fn4","type":"UnaryFunction<C, D>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"fn5","type":"UnaryFunction<D, E>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"fn6","type":"UnaryFunction<E, F>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"fn7","type":"UnaryFunction<F, G>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"fn8","type":"UnaryFunction<G, H>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"fn9","type":"UnaryFunction<H, I>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"UnaryFunction<T, I>","isGenerator":false,"isAsync":false,"kind":14},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"A","kind":39,"isConst":false,"variance":0},{"name":"B","kind":39,"isConst":false,"variance":0},{"name":"C","kind":39,"isConst":false,"variance":0},{"name":"D","kind":39,"isConst":false,"variance":0},{"name":"E","kind":39,"isConst":false,"variance":0},{"name":"F","kind":39,"isConst":false,"variance":0},{"name":"G","kind":39,"isConst":false,"variance":0},{"name":"H","kind":39,"isConst":false,"variance":0},{"name":"I","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"fn1","type":"UnaryFunction<T, A>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"fn2","type":"UnaryFunction<A, B>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"fn3","type":"UnaryFunction<B, C>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"fn4","type":"UnaryFunction<C, D>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"fn5","type":"UnaryFunction<D, E>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"fn6","type":"UnaryFunction<E, F>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"fn7","type":"UnaryFunction<F, G>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"fn8","type":"UnaryFunction<G, H>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"fn9","type":"UnaryFunction<H, I>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"fns","type":"UnaryFunction<any, any>[]","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":true}],"returnType":"UnaryFunction<T, unknown>","isGenerator":false,"isAsync":false,"kind":14}]}},"usabilityResult":{"index":0.9}},"..\\src\\internal\\lastValueFrom.ts":{"moduleComponents":{"lastValueFrom":{"kind":13,"usabilityResult":{"index":1},"sources":[{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"D","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"source","type":"Observable<T>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"config","type":"LastValueFromConfig<D>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Promise<T | D>","isGenerator":false,"isAsync":false,"kind":14},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"source","type":"Observable<T>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Promise<T>","isGenerator":false,"isAsync":false,"kind":14}]}},"usabilityResult":{"index":1}},"..\\src\\internal\\firstValueFrom.ts":{"moduleComponents":{"firstValueFrom":{"kind":13,"usabilityResult":{"index":1},"sources":[{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"D","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"source","type":"Observable<T>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"config","type":"FirstValueFromConfig<D>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Promise<T | D>","isGenerator":false,"isAsync":false,"kind":14},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"source","type":"Observable<T>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Promise<T>","isGenerator":false,"isAsync":false,"kind":14}]}},"usabilityResult":{"index":1}},"..\\src\\internal\\observable\\bindCallback.ts":{"moduleComponents":{"bindCallback":{"kind":13,"usabilityResult":{"index":1},"sources":[{"isExported":true,"isDefaultExport":false,"typeParameters":[],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"callbackFunc","type":"(...args: any[]) => void","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"resultSelector","type":"(...args: any[]) => any","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"scheduler","type":"SchedulerLike","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"(...args: any[]) => Observable<any>","isGenerator":false,"isAsync":false,"kind":14},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"A","kind":39,"isConst":false,"constraint":"readonly unknown[]","variance":0},{"name":"R","kind":39,"isConst":false,"constraint":"readonly unknown[]","variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"callbackFunc","type":"(...args: [...A, (...res: R) => void]) => void","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"schedulerLike","type":"SchedulerLike","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"(...arg: A) => Observable<R extends [] ? void : R extends [any] ? R[0] : R>","isGenerator":false,"isAsync":false,"kind":14}]}},"usabilityResult":{"index":1}},"..\\src\\internal\\observable\\bindNodeCallback.ts":{"moduleComponents":{"bindNodeCallback":{"kind":13,"usabilityResult":{"index":1},"sources":[{"isExported":true,"isDefaultExport":false,"typeParameters":[],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"callbackFunc","type":"(...args: any[]) => void","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"resultSelector","type":"(...args: any[]) => any","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"scheduler","type":"SchedulerLike","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"(...args: any[]) => Observable<any>","isGenerator":false,"isAsync":false,"kind":14},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"A","kind":39,"isConst":false,"constraint":"readonly unknown[]","variance":0},{"name":"R","kind":39,"isConst":false,"constraint":"readonly unknown[]","variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"callbackFunc","type":"(...args: [...A, (err: any, ...res: R) => void]) => void","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"schedulerLike","type":"SchedulerLike","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"(...arg: A) => Observable<R extends [] ? void : R extends [any] ? R[0] : R>","isGenerator":false,"isAsync":false,"kind":14}]}},"usabilityResult":{"index":1}},"..\\src\\internal\\observable\\combineLatest.ts":{"moduleComponents":{"combineLatest":{"kind":13,"usabilityResult":{"index":0.7272727272727273},"sources":[{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"constraint":"AnyCatcher","variance":0}],"docs":[{"kind":24,"description":"\r\nYou have passed `any` here, we can't figure out if it is\r\nan array or an object, so you're getting `unknown`. Use better types.","tags":[{"kind":25,"tagName":"param","text":"arg Something typed as `any`"}]}],"hasDeclareKeyword":false,"parameters":[{"name":"arg","type":"T","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<unknown>","isGenerator":false,"isAsync":false,"kind":14},{"isExported":true,"isDefaultExport":false,"typeParameters":[],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"sources","type":"[]","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<never>","isGenerator":false,"isAsync":false,"kind":14},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"A","kind":39,"isConst":false,"constraint":"readonly unknown[]","variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"sources","type":"readonly [...ObservableInputTuple<A>]","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<A>","isGenerator":false,"isAsync":false,"kind":14},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"A","kind":39,"isConst":false,"constraint":"readonly unknown[]","variance":0},{"name":"R","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"The `scheduler` parameter will be removed in v8. Use `scheduled` and `combineLatestAll`. Details: https://rxjs.dev/deprecations/scheduler-argument"}]}],"hasDeclareKeyword":false,"parameters":[{"name":"sources","type":"readonly [...ObservableInputTuple<A>]","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"resultSelector","type":"(...values: A) => R","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"scheduler","type":"SchedulerLike","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<R>","isGenerator":false,"isAsync":false,"kind":14},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"A","kind":39,"isConst":false,"constraint":"readonly unknown[]","variance":0},{"name":"R","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"sources","type":"readonly [...ObservableInputTuple<A>]","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"resultSelector","type":"(...values: A) => R","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<R>","isGenerator":false,"isAsync":false,"kind":14},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"A","kind":39,"isConst":false,"constraint":"readonly unknown[]","variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"The `scheduler` parameter will be removed in v8. Use `scheduled` and `combineLatestAll`. Details: https://rxjs.dev/deprecations/scheduler-argument"}]}],"hasDeclareKeyword":false,"parameters":[{"name":"sources","type":"readonly [...ObservableInputTuple<A>]","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"scheduler","type":"SchedulerLike","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<A>","isGenerator":false,"isAsync":false,"kind":14},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"A","kind":39,"isConst":false,"constraint":"readonly unknown[]","variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Pass an array of sources instead. The rest-parameters signature will be removed in v8. Details: https://rxjs.dev/deprecations/array-argument"}]}],"hasDeclareKeyword":false,"parameters":[{"name":"sources","type":"[...ObservableInputTuple<A>]","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":true}],"returnType":"Observable<A>","isGenerator":false,"isAsync":false,"kind":14},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"A","kind":39,"isConst":false,"constraint":"readonly unknown[]","variance":0},{"name":"R","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"The `scheduler` parameter will be removed in v8. Use `scheduled` and `combineLatestAll`. Details: https://rxjs.dev/deprecations/scheduler-argument"}]}],"hasDeclareKeyword":false,"parameters":[{"name":"sourcesAndResultSelectorAndScheduler","type":"[...ObservableInputTuple<A>, (...values: A) => R, SchedulerLike]","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":true}],"returnType":"Observable<R>","isGenerator":false,"isAsync":false,"kind":14},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"A","kind":39,"isConst":false,"constraint":"readonly unknown[]","variance":0},{"name":"R","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Pass an array of sources instead. The rest-parameters signature will be removed in v8. Details: https://rxjs.dev/deprecations/array-argument"}]}],"hasDeclareKeyword":false,"parameters":[{"name":"sourcesAndResultSelector","type":"[...ObservableInputTuple<A>, (...values: A) => R]","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":true}],"returnType":"Observable<R>","isGenerator":false,"isAsync":false,"kind":14},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"A","kind":39,"isConst":false,"constraint":"readonly unknown[]","variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"The `scheduler` parameter will be removed in v8. Use `scheduled` and `combineLatestAll`. Details: https://rxjs.dev/deprecations/scheduler-argument"}]}],"hasDeclareKeyword":false,"parameters":[{"name":"sourcesAndScheduler","type":"[...ObservableInputTuple<A>, SchedulerLike]","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":true}],"returnType":"Observable<A>","isGenerator":false,"isAsync":false,"kind":14},{"isExported":true,"isDefaultExport":false,"typeParameters":[],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"sourcesObject","type":"{ [K in any]: never }","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<never>","isGenerator":false,"isAsync":false,"kind":14},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"constraint":"Record<string, ObservableInput<any>>","variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"sourcesObject","type":"T","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<{ [K in keyof T]: ObservedValueOf<T[K]> }>","isGenerator":false,"isAsync":false,"kind":14}]}},"usabilityResult":{"index":0.7272727272727273}},"..\\src\\internal\\observable\\concat.ts":{"moduleComponents":{"concat":{"kind":13,"usabilityResult":{"index":1},"sources":[{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"constraint":"readonly unknown[]","variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"inputs","type":"[...ObservableInputTuple<T>]","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":true}],"returnType":"Observable<T[number]>","isGenerator":false,"isAsync":false,"kind":14},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"constraint":"readonly unknown[]","variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"inputsAndScheduler","type":"[...ObservableInputTuple<T>, SchedulerLike]","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":true}],"returnType":"Observable<T[number]>","isGenerator":false,"isAsync":false,"kind":14}]}},"usabilityResult":{"index":1}},"..\\src\\internal\\observable\\forkJoin.ts":{"moduleComponents":{"forkJoin":{"kind":13,"usabilityResult":{"index":0.625},"sources":[{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"constraint":"AnyCatcher","variance":0}],"docs":[{"kind":24,"description":"\r\nYou have passed `any` here, we can't figure out if it is\r\nan array or an object, so you're getting `unknown`. Use better types.","tags":[{"kind":25,"tagName":"param","text":"arg Something typed as `any`"}]}],"hasDeclareKeyword":false,"parameters":[{"name":"arg","type":"T","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<unknown>","isGenerator":false,"isAsync":false,"kind":14},{"isExported":true,"isDefaultExport":false,"typeParameters":[],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"scheduler","type":"null | undefined","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<never>","isGenerator":false,"isAsync":false,"kind":14},{"isExported":true,"isDefaultExport":false,"typeParameters":[],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"sources","type":"readonly []","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<never>","isGenerator":false,"isAsync":false,"kind":14},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"A","kind":39,"isConst":false,"constraint":"readonly unknown[]","variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"sources","type":"readonly [...ObservableInputTuple<A>]","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<A>","isGenerator":false,"isAsync":false,"kind":14},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"A","kind":39,"isConst":false,"constraint":"readonly unknown[]","variance":0},{"name":"R","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"sources","type":"readonly [...ObservableInputTuple<A>]","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"resultSelector","type":"(...values: A) => R","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<R>","isGenerator":false,"isAsync":false,"kind":14},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"A","kind":39,"isConst":false,"constraint":"readonly unknown[]","variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Pass an array of sources instead. The rest-parameters signature will be removed in v8. Details: https://rxjs.dev/deprecations/array-argument"}]}],"hasDeclareKeyword":false,"parameters":[{"name":"sources","type":"[...ObservableInputTuple<A>]","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":true}],"returnType":"Observable<A>","isGenerator":false,"isAsync":false,"kind":14},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"A","kind":39,"isConst":false,"constraint":"readonly unknown[]","variance":0},{"name":"R","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Pass an array of sources instead. The rest-parameters signature will be removed in v8. Details: https://rxjs.dev/deprecations/array-argument"}]}],"hasDeclareKeyword":false,"parameters":[{"name":"sourcesAndResultSelector","type":"[...ObservableInputTuple<A>, (...values: A) => R]","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":true}],"returnType":"Observable<R>","isGenerator":false,"isAsync":false,"kind":14},{"isExported":true,"isDefaultExport":false,"typeParameters":[],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"sourcesObject","type":"{ [K in any]: never }","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<never>","isGenerator":false,"isAsync":false,"kind":14},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"constraint":"Record<string, ObservableInput<any>>","variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"sourcesObject","type":"T","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<{ [K in keyof T]: ObservedValueOf<T[K]> }>","isGenerator":false,"isAsync":false,"kind":14}]}},"usabilityResult":{"index":0.625}},"..\\src\\internal\\observable\\from.ts":{"moduleComponents":{"from":{"kind":13,"usabilityResult":{"index":1},"sources":[{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"O","kind":39,"isConst":false,"constraint":"ObservableInput<any>","variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"input","type":"O","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<ObservedValueOf<O>>","isGenerator":false,"isAsync":false,"kind":14},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"O","kind":39,"isConst":false,"constraint":"ObservableInput<any>","variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"The `scheduler` parameter will be removed in v8. Use `scheduled`. Details: https://rxjs.dev/deprecations/scheduler-argument"}]}],"hasDeclareKeyword":false,"parameters":[{"name":"input","type":"O","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"scheduler","type":"SchedulerLike | undefined","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<ObservedValueOf<O>>","isGenerator":false,"isAsync":false,"kind":14}]}},"usabilityResult":{"index":1}},"..\\src\\internal\\observable\\fromEvent.ts":{"moduleComponents":{"fromEvent":{"kind":13,"usabilityResult":{"index":1},"sources":[{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"target","type":"HasEventTargetAddRemove<T> | ArrayLike<HasEventTargetAddRemove<T>>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"eventName","type":"string","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<T>","isGenerator":false,"isAsync":false,"kind":14},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"R","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"target","type":"HasEventTargetAddRemove<T> | ArrayLike<HasEventTargetAddRemove<T>>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"eventName","type":"string","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"resultSelector","type":"(event: T) => R","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<R>","isGenerator":false,"isAsync":false,"kind":14},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"target","type":"HasEventTargetAddRemove<T> | ArrayLike<HasEventTargetAddRemove<T>>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"eventName","type":"string","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"options","type":"EventListenerOptions","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<T>","isGenerator":false,"isAsync":false,"kind":14},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"R","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"target","type":"HasEventTargetAddRemove<T> | ArrayLike<HasEventTargetAddRemove<T>>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"eventName","type":"string","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"options","type":"EventListenerOptions","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"resultSelector","type":"(event: T) => R","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<R>","isGenerator":false,"isAsync":false,"kind":14},{"isExported":true,"isDefaultExport":false,"typeParameters":[],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"target","type":"NodeStyleEventEmitter | ArrayLike<NodeStyleEventEmitter>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"eventName","type":"string","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<unknown>","isGenerator":false,"isAsync":false,"kind":14},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Do not specify explicit type parameters. Signatures with type parameters that cannot be inferred will be removed in v8."}]}],"hasDeclareKeyword":false,"parameters":[{"name":"target","type":"NodeStyleEventEmitter | ArrayLike<NodeStyleEventEmitter>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"eventName","type":"string","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<T>","isGenerator":false,"isAsync":false,"kind":14},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"R","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"target","type":"NodeStyleEventEmitter | ArrayLike<NodeStyleEventEmitter>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"eventName","type":"string","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"resultSelector","type":"(...args: any[]) => R","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<R>","isGenerator":false,"isAsync":false,"kind":14},{"isExported":true,"isDefaultExport":false,"typeParameters":[],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"target","type":"NodeCompatibleEventEmitter | ArrayLike<NodeCompatibleEventEmitter>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"eventName","type":"string","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<unknown>","isGenerator":false,"isAsync":false,"kind":14},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Do not specify explicit type parameters. Signatures with type parameters that cannot be inferred will be removed in v8."}]}],"hasDeclareKeyword":false,"parameters":[{"name":"target","type":"NodeCompatibleEventEmitter | ArrayLike<NodeCompatibleEventEmitter>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"eventName","type":"string","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<T>","isGenerator":false,"isAsync":false,"kind":14},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"R","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"target","type":"NodeCompatibleEventEmitter | ArrayLike<NodeCompatibleEventEmitter>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"eventName","type":"string","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"resultSelector","type":"(...args: any[]) => R","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<R>","isGenerator":false,"isAsync":false,"kind":14},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"target","type":"JQueryStyleEventEmitter<any, T> | ArrayLike<JQueryStyleEventEmitter<any, T>>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"eventName","type":"string","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<T>","isGenerator":false,"isAsync":false,"kind":14},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"R","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"target","type":"JQueryStyleEventEmitter<any, T> | ArrayLike<JQueryStyleEventEmitter<any, T>>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"eventName","type":"string","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"resultSelector","type":"(value: T, ...args: any[]) => R","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<R>","isGenerator":false,"isAsync":false,"kind":14}]}},"usabilityResult":{"index":1}},"..\\src\\internal\\observable\\fromEventPattern.ts":{"moduleComponents":{"fromEventPattern":{"kind":13,"usabilityResult":{"index":1},"sources":[{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"addHandler","type":"(handler: NodeEventHandler) => any","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"removeHandler","type":"(handler: NodeEventHandler, signal?: any) => void","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<T>","isGenerator":false,"isAsync":false,"kind":14},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"addHandler","type":"(handler: NodeEventHandler) => any","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"removeHandler","type":"(handler: NodeEventHandler, signal?: any) => void","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"resultSelector","type":"(...args: any[]) => T","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<T>","isGenerator":false,"isAsync":false,"kind":14}]}},"usabilityResult":{"index":1}},"..\\src\\internal\\observable\\generate.ts":{"moduleComponents":{"generate":{"kind":13,"usabilityResult":{"index":1},"sources":[{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"S","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nGenerates an observable sequence by running a state-driven loop\r\nproducing the sequence's elements, using the specified scheduler\r\nto send out observer messages.\r\n\r\n![](generate.png)\r\n\r\n## Examples\r\n\r\nProduces sequence of numbers\r\n\r\n```ts\r\nimport { generate } from 'rxjs';\r\n\r\nconst result = generate(0, x => x < 3, x => x + 1, x => x);\r\n\r\nresult.subscribe(x => console.log(x));\r\n\r\n// Logs:\r\n// 0\r\n// 1\r\n// 2\r\n```\r\n\r\nUse `asapScheduler`\r\n\r\n```ts\r\nimport { generate, asapScheduler } from 'rxjs';\r\n\r\nconst result = generate(1, x => x < 5, x => x * 2, x => x + 1, asapScheduler);\r\n\r\nresult.subscribe(x => console.log(x));\r\n\r\n// Logs:\r\n// 2\r\n// 3\r\n// 5\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link from}"},{"kind":25,"tagName":"see","text":"{@link Observable}"},{"kind":25,"tagName":"param","text":"{S} initialState Initial state."},{"kind":25,"tagName":"param","text":"{function (state: S): boolean} condition Condition to terminate generation (upon returning false)."},{"kind":25,"tagName":"param","text":"{function (state: S): S} iterate Iteration step function."},{"kind":25,"tagName":"param","text":"{function (state: S): T} resultSelector Selector function for results produced in the sequence. (deprecated)"},{"kind":25,"tagName":"param","text":"{SchedulerLike} [scheduler] A {@link SchedulerLike} on which to run the generator loop. If not provided, defaults to emit immediately."},{"kind":25,"tagName":"returns","text":"{Observable<T>} The generated sequence."},{"kind":25,"tagName":"deprecated","text":"Instead of passing separate arguments, use the options argument. Signatures taking separate arguments will be removed in v8."}]}],"hasDeclareKeyword":false,"parameters":[{"name":"initialState","type":"S","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"condition","type":"ConditionFunc<S>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"iterate","type":"IterateFunc<S>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"resultSelector","type":"ResultFunc<S, T>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"scheduler","type":"SchedulerLike","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<T>","isGenerator":false,"isAsync":false,"kind":14},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"S","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nGenerates an Observable by running a state-driven loop\r\nthat emits an element on each iteration.\r\n\r\n<span class=\"informal\">Use it instead of nexting values in a for loop.</span>\r\n\r\n![](generate.png)\r\n\r\n`generate` allows you to create a stream of values generated with a loop very similar to\r\na traditional for loop. The first argument of `generate` is a beginning value. The second argument\r\nis a function that accepts this value and tests if some condition still holds. If it does,\r\nthen the loop continues, if not, it stops. The third value is a function which takes the\r\npreviously defined value and modifies it in some way on each iteration. Note how these three parameters\r\nare direct equivalents of three expressions in a traditional for loop: the first expression\r\ninitializes some state (for example, a numeric index), the second tests if the loop can perform the next\r\niteration (for example, if the index is lower than 10) and the third states how the defined value\r\nwill be modified on every step (for example, the index will be incremented by one).\r\n\r\nReturn value of a `generate` operator is an Observable that on each loop iteration\r\nemits a value. First of all, the condition function is ran. If it returns true, then the Observable\r\nemits the currently stored value (initial value at the first iteration) and finally updates\r\nthat value with iterate function. If at some point the condition returns false, then the Observable\r\ncompletes at that moment.\r\n\r\nOptionally you can pass a fourth parameter to `generate` - a result selector function which allows you\r\nto immediately map the value that would normally be emitted by an Observable.\r\n\r\nIf you find three anonymous functions in `generate` call hard to read, you can provide\r\na single object to the operator instead where the object has the properties: `initialState`,\r\n`condition`, `iterate` and `resultSelector`, which should have respective values that you\r\nwould normally pass to `generate`. `resultSelector` is still optional, but that form\r\nof calling `generate` allows you to omit `condition` as well. If you omit it, that means\r\ncondition always holds, or in other words the resulting Observable will never complete.\r\n\r\nBoth forms of `generate` can optionally accept a scheduler. In case of a multi-parameter call,\r\nscheduler simply comes as a last argument (no matter if there is a `resultSelector`\r\nfunction or not). In case of a single-parameter call, you can provide it as a\r\n`scheduler` property on the object passed to the operator. In both cases, a scheduler decides when\r\nthe next iteration of the loop will happen and therefore when the next value will be emitted\r\nby the Observable. For example, to ensure that each value is pushed to the Observer\r\non a separate task in the event loop, you could use the `async` scheduler. Note that\r\nby default (when no scheduler is passed) values are simply emitted synchronously.\r\n\r\n\r\n## Examples\r\n\r\nUse with condition and iterate functions\r\n\r\n```ts\r\nimport { generate } from 'rxjs';\r\n\r\nconst result = generate(0, x => x < 3, x => x + 1);\r\n\r\nresult.subscribe({\r\n  next: value => console.log(value),\r\n  complete: () => console.log('Complete!')\r\n});\r\n\r\n// Logs:\r\n// 0\r\n// 1\r\n// 2\r\n// 'Complete!'\r\n```\r\n\r\nUse with condition, iterate and resultSelector functions\r\n\r\n```ts\r\nimport { generate } from 'rxjs';\r\n\r\nconst result = generate(0, x => x < 3, x => x + 1, x => x * 1000);\r\n\r\nresult.subscribe({\r\n  next: value => console.log(value),\r\n  complete: () => console.log('Complete!')\r\n});\r\n\r\n// Logs:\r\n// 0\r\n// 1000\r\n// 2000\r\n// 'Complete!'\r\n```\r\n\r\nUse with options object\r\n\r\n```ts\r\nimport { generate } from 'rxjs';\r\n\r\nconst result = generate({\r\n  initialState: 0,\r\n  condition(value) { return value < 3; },\r\n  iterate(value) { return value + 1; },\r\n  resultSelector(value) { return value * 1000; }\r\n});\r\n\r\nresult.subscribe({\r\n  next: value => console.log(value),\r\n  complete: () => console.log('Complete!')\r\n});\r\n\r\n// Logs:\r\n// 0\r\n// 1000\r\n// 2000\r\n// 'Complete!'\r\n```\r\n\r\nUse options object without condition function\r\n\r\n```ts\r\nimport { generate } from 'rxjs';\r\n\r\nconst result = generate({\r\n  initialState: 0,\r\n  iterate(value) { return value + 1; },\r\n  resultSelector(value) { return value * 1000; }\r\n});\r\n\r\nresult.subscribe({\r\n  next: value => console.log(value),\r\n  complete: () => console.log('Complete!') // This will never run\r\n});\r\n\r\n// Logs:\r\n// 0\r\n// 1000\r\n// 2000\r\n// 3000\r\n// ...and never stops.\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link from}"},{"kind":25,"tagName":"param","text":"{S} initialState Initial state."},{"kind":25,"tagName":"param","text":"{function (state: S): boolean} condition Condition to terminate generation (upon returning false)."},{"kind":25,"tagName":"param","text":"{function (state: S): S} iterate Iteration step function."},{"kind":25,"tagName":"param","text":"{function (state: S): T} [resultSelector] Selector function for results produced in the sequence."},{"kind":25,"tagName":"param","text":"{Scheduler} [scheduler] A {@link Scheduler} on which to run the generator loop. If not provided, defaults to emitting immediately."},{"kind":25,"tagName":"return","text":"{Observable<T>} The generated sequence."},{"kind":25,"tagName":"deprecated","text":"Instead of passing separate arguments, use the options argument. Signatures taking separate arguments will be removed in v8."}]}],"hasDeclareKeyword":false,"parameters":[{"name":"initialState","type":"S","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"condition","type":"ConditionFunc<S>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"iterate","type":"IterateFunc<S>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"scheduler","type":"SchedulerLike","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<S>","isGenerator":false,"isAsync":false,"kind":14},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"S","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nGenerates an observable sequence by running a state-driven loop\r\nproducing the sequence's elements, using the specified scheduler\r\nto send out observer messages.\r\nThe overload accepts options object that might contain initial state, iterate,\r\ncondition and scheduler.\r\n\r\n![](generate.png)\r\n\r\n## Examples\r\n\r\nUse options object with condition function\r\n\r\n```ts\r\nimport { generate } from 'rxjs';\r\n\r\nconst result = generate({\r\n  initialState: 0,\r\n  condition: x => x < 3,\r\n  iterate: x => x + 1\r\n});\r\n\r\nresult.subscribe({\r\n  next: value => console.log(value),\r\n  complete: () => console.log('Complete!')\r\n});\r\n\r\n// Logs:\r\n// 0\r\n// 1\r\n// 2\r\n// 'Complete!'\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link from}"},{"kind":25,"tagName":"see","text":"{@link Observable}"},{"kind":25,"tagName":"param","text":"{GenerateBaseOptions<S>} options Object that must contain initialState, iterate and might contain condition and scheduler."},{"kind":25,"tagName":"returns","text":"{Observable<S>} The generated sequence."}]}],"hasDeclareKeyword":false,"parameters":[{"name":"options","type":"GenerateBaseOptions<S>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<S>","isGenerator":false,"isAsync":false,"kind":14},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"S","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nGenerates an observable sequence by running a state-driven loop\r\nproducing the sequence's elements, using the specified scheduler\r\nto send out observer messages.\r\nThe overload accepts options object that might contain initial state, iterate,\r\ncondition, result selector and scheduler.\r\n\r\n![](generate.png)\r\n\r\n## Examples\r\n\r\nUse options object with condition and iterate function\r\n\r\n```ts\r\nimport { generate } from 'rxjs';\r\n\r\nconst result = generate({\r\n  initialState: 0,\r\n  condition: x => x < 3,\r\n  iterate: x => x + 1,\r\n  resultSelector: x => x\r\n});\r\n\r\nresult.subscribe({\r\n  next: value => console.log(value),\r\n  complete: () => console.log('Complete!')\r\n});\r\n\r\n// Logs:\r\n// 0\r\n// 1\r\n// 2\r\n// 'Complete!'\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link from}"},{"kind":25,"tagName":"see","text":"{@link Observable}"},{"kind":25,"tagName":"param","text":"{GenerateOptions<T, S>} options Object that must contain initialState, iterate, resultSelector and might contain condition and scheduler."},{"kind":25,"tagName":"returns","text":"{Observable<T>} The generated sequence."}]}],"hasDeclareKeyword":false,"parameters":[{"name":"options","type":"GenerateOptions<T, S>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<T>","isGenerator":false,"isAsync":false,"kind":14}]}},"usabilityResult":{"index":1}},"..\\src\\internal\\observable\\merge.ts":{"moduleComponents":{"merge":{"kind":13,"usabilityResult":{"index":1},"sources":[{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"A","kind":39,"isConst":false,"constraint":"readonly unknown[]","variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"sources","type":"[...ObservableInputTuple<A>]","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":true}],"returnType":"Observable<A[number]>","isGenerator":false,"isAsync":false,"kind":14},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"A","kind":39,"isConst":false,"constraint":"readonly unknown[]","variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"sourcesAndConcurrency","type":"[...ObservableInputTuple<A>, number?]","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":true}],"returnType":"Observable<A[number]>","isGenerator":false,"isAsync":false,"kind":14},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"A","kind":39,"isConst":false,"constraint":"readonly unknown[]","variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"The `scheduler` parameter will be removed in v8. Use `scheduled` and `mergeAll`. Details: https://rxjs.dev/deprecations/scheduler-argument"}]}],"hasDeclareKeyword":false,"parameters":[{"name":"sourcesAndScheduler","type":"[...ObservableInputTuple<A>, SchedulerLike?]","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":true}],"returnType":"Observable<A[number]>","isGenerator":false,"isAsync":false,"kind":14},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"A","kind":39,"isConst":false,"constraint":"readonly unknown[]","variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"The `scheduler` parameter will be removed in v8. Use `scheduled` and `mergeAll`. Details: https://rxjs.dev/deprecations/scheduler-argument"}]}],"hasDeclareKeyword":false,"parameters":[{"name":"sourcesAndConcurrencyAndScheduler","type":"[...ObservableInputTuple<A>, number?, SchedulerLike?]","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":true}],"returnType":"Observable<A[number]>","isGenerator":false,"isAsync":false,"kind":14}]}},"usabilityResult":{"index":1}},"..\\src\\internal\\observable\\of.ts":{"moduleComponents":{"of":{"kind":13,"usabilityResult":{"index":0.7142857142857143},"sources":[{"isExported":true,"isDefaultExport":false,"typeParameters":[],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"value","type":"null","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<null>","isGenerator":false,"isAsync":false,"kind":14},{"isExported":true,"isDefaultExport":false,"typeParameters":[],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"value","type":"undefined","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<undefined>","isGenerator":false,"isAsync":false,"kind":14},{"isExported":true,"isDefaultExport":false,"typeParameters":[],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"The `scheduler` parameter will be removed in v8. Use `scheduled`. Details: https://rxjs.dev/deprecations/scheduler-argument"}]}],"hasDeclareKeyword":false,"parameters":[{"name":"scheduler","type":"SchedulerLike","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<never>","isGenerator":false,"isAsync":false,"kind":14},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"A","kind":39,"isConst":false,"constraint":"readonly unknown[]","variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"The `scheduler` parameter will be removed in v8. Use `scheduled`. Details: https://rxjs.dev/deprecations/scheduler-argument"}]}],"hasDeclareKeyword":false,"parameters":[{"name":"valuesAndScheduler","type":"[...A, SchedulerLike]","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":true}],"returnType":"Observable<ValueFromArray<A>>","isGenerator":false,"isAsync":false,"kind":14},{"isExported":true,"isDefaultExport":false,"typeParameters":[],"docs":[],"hasDeclareKeyword":false,"parameters":[],"returnType":"Observable<never>","isGenerator":false,"isAsync":false,"kind":14},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Do not specify explicit type parameters. Signatures with type parameters that cannot be inferred will be removed in v8."}]}],"hasDeclareKeyword":false,"parameters":[],"returnType":"Observable<T>","isGenerator":false,"isAsync":false,"kind":14},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"value","type":"T","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<T>","isGenerator":false,"isAsync":false,"kind":14},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"A","kind":39,"isConst":false,"constraint":"readonly unknown[]","variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"values","type":"A","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":true}],"returnType":"Observable<ValueFromArray<A>>","isGenerator":false,"isAsync":false,"kind":14}]}},"usabilityResult":{"index":0.7142857142857143}},"..\\src\\internal\\observable\\onErrorResumeNext.ts":{"moduleComponents":{"onErrorResumeNext":{"kind":13,"usabilityResult":{"index":1},"sources":[{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"A","kind":39,"isConst":false,"constraint":"readonly unknown[]","variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"sources","type":"[...ObservableInputTuple<A>]","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<A[number]>","isGenerator":false,"isAsync":false,"kind":14},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"A","kind":39,"isConst":false,"constraint":"readonly unknown[]","variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"sources","type":"[...ObservableInputTuple<A>]","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":true}],"returnType":"Observable<A[number]>","isGenerator":false,"isAsync":false,"kind":14}]}},"usabilityResult":{"index":1}},"..\\src\\internal\\observable\\pairs.ts":{"moduleComponents":{"pairs":{"kind":13,"usabilityResult":{"index":0.6666666666666667},"sources":[{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Use `from(Object.entries(obj))` instead. Will be removed in v8."}]}],"hasDeclareKeyword":false,"parameters":[{"name":"arr","type":"readonly T[]","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"scheduler","type":"SchedulerLike","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<[string, T]>","isGenerator":false,"isAsync":false,"kind":14},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"O","kind":39,"isConst":false,"constraint":"Record<string, unknown>","variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Use `from(Object.entries(obj))` instead. Will be removed in v8."}]}],"hasDeclareKeyword":false,"parameters":[{"name":"obj","type":"O","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"scheduler","type":"SchedulerLike","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<[keyof O, O[keyof O]]>","isGenerator":false,"isAsync":false,"kind":14},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Use `from(Object.entries(obj))` instead. Will be removed in v8."}]}],"hasDeclareKeyword":false,"parameters":[{"name":"iterable","type":"Iterable<T>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"scheduler","type":"SchedulerLike","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<[string, T]>","isGenerator":false,"isAsync":false,"kind":14},{"isExported":true,"isDefaultExport":false,"typeParameters":[],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Use `from(Object.entries(obj))` instead. Will be removed in v8."}]}],"hasDeclareKeyword":false,"parameters":[{"name":"n","type":"number | bigint | boolean | ((...args: any[]) => any) | symbol","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"scheduler","type":"SchedulerLike","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<[never, never]>","isGenerator":false,"isAsync":false,"kind":14}]}},"usabilityResult":{"index":0.6666666666666667}},"..\\src\\internal\\observable\\partition.ts":{"moduleComponents":{"partition":{"kind":13,"usabilityResult":{"index":0.6666666666666667},"sources":[{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"U","kind":39,"isConst":false,"constraint":"T","variance":0},{"name":"A","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Use a closure instead of a `thisArg`. Signatures accepting a `thisArg` will be removed in v8."}]}],"hasDeclareKeyword":false,"parameters":[{"name":"source","type":"ObservableInput<T>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"predicate","type":"(this: A, value: T, index: number) => value is U","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"thisArg","type":"A","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"[Observable<U>, Observable<Exclude<T, U>>]","isGenerator":false,"isAsync":false,"kind":14},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"U","kind":39,"isConst":false,"constraint":"T","variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"source","type":"ObservableInput<T>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"predicate","type":"(value: T, index: number) => value is U","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"[Observable<U>, Observable<Exclude<T, U>>]","isGenerator":false,"isAsync":false,"kind":14},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"A","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Use a closure instead of a `thisArg`. Signatures accepting a `thisArg` will be removed in v8."}]}],"hasDeclareKeyword":false,"parameters":[{"name":"source","type":"ObservableInput<T>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"predicate","type":"(this: A, value: T, index: number) => boolean","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"thisArg","type":"A","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"[Observable<T>, Observable<T>]","isGenerator":false,"isAsync":false,"kind":14},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"source","type":"ObservableInput<T>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"predicate","type":"(value: T, index: number) => boolean","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"[Observable<T>, Observable<T>]","isGenerator":false,"isAsync":false,"kind":14}]}},"usabilityResult":{"index":0.6666666666666667}},"..\\src\\internal\\observable\\race.ts":{"moduleComponents":{"race":{"kind":13,"usabilityResult":{"index":1},"sources":[{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"constraint":"readonly unknown[]","variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"inputs","type":"[...ObservableInputTuple<T>]","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<T[number]>","isGenerator":false,"isAsync":false,"kind":14},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"constraint":"readonly unknown[]","variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"inputs","type":"[...ObservableInputTuple<T>]","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":true}],"returnType":"Observable<T[number]>","isGenerator":false,"isAsync":false,"kind":14}]}},"usabilityResult":{"index":1}},"..\\src\\internal\\observable\\range.ts":{"moduleComponents":{"range":{"kind":13,"usabilityResult":{"index":1},"sources":[{"isExported":true,"isDefaultExport":false,"typeParameters":[],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"start","type":"number","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"count","type":"number","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<number>","isGenerator":false,"isAsync":false,"kind":14},{"isExported":true,"isDefaultExport":false,"typeParameters":[],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"The `scheduler` parameter will be removed in v8. Use `range(start, count).pipe(observeOn(scheduler))` instead. Details: Details: https://rxjs.dev/deprecations/scheduler-argument"}]}],"hasDeclareKeyword":false,"parameters":[{"name":"start","type":"number","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"count","type":"number | undefined","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"scheduler","type":"SchedulerLike","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<number>","isGenerator":false,"isAsync":false,"kind":14}]}},"usabilityResult":{"index":1}},"..\\src\\internal\\observable\\throwError.ts":{"moduleComponents":{"throwError":{"kind":13,"usabilityResult":{"index":1},"sources":[{"isExported":true,"isDefaultExport":false,"typeParameters":[],"docs":[{"kind":24,"description":"\r\nCreates an observable that will create an error instance and push it to the consumer as an error\r\nimmediately upon subscription.\r\n\r\n<span class=\"informal\">Just errors and does nothing else</span>\r\n\r\n![](throw.png)\r\n\r\nThis creation function is useful for creating an observable that will create an error and error every\r\ntime it is subscribed to. Generally, inside of most operators when you might want to return an errored\r\nobservable, this is unnecessary. In most cases, such as in the inner return of {@link concatMap},\r\n{@link mergeMap}, {@link defer}, and many others, you can simply throw the error, and RxJS will pick\r\nthat up and notify the consumer of the error.\r\n\r\n## Example\r\n\r\nCreate a simple observable that will create a new error with a timestamp and log it\r\nand the message every time you subscribe to it\r\n\r\n```ts\r\nimport { throwError } from 'rxjs';\r\n\r\nlet errorCount = 0;\r\n\r\nconst errorWithTimestamp$ = throwError(() => {\r\n  const error: any = new Error(`This is error number ${ ++errorCount }`);\r\n  error.timestamp = Date.now();\r\n  return error;\r\n});\r\n\r\nerrorWithTimestamp$.subscribe({\r\n  error: err => console.log(err.timestamp, err.message)\r\n});\r\n\r\nerrorWithTimestamp$.subscribe({\r\n  error: err => console.log(err.timestamp, err.message)\r\n});\r\n\r\n// Logs the timestamp and a new error message for each subscription\r\n```\r\n\r\n### Unnecessary usage\r\n\r\nUsing `throwError` inside of an operator or creation function\r\nwith a callback, is usually not necessary\r\n\r\n```ts\r\nimport { of, concatMap, timer, throwError } from 'rxjs';\r\n\r\nconst delays$ = of(1000, 2000, Infinity, 3000);\r\n\r\ndelays$.pipe(\r\n  concatMap(ms => {\r\n    if (ms < 10000) {\r\n      return timer(ms);\r\n    } else {\r\n      // This is probably overkill.\r\n      return throwError(() => new Error(`Invalid time ${ ms }`));\r\n    }\r\n  })\r\n)\r\n.subscribe({\r\n  next: console.log,\r\n  error: console.error\r\n});\r\n```\r\n\r\nYou can just throw the error instead\r\n\r\n```ts\r\nimport { of, concatMap, timer } from 'rxjs';\r\n\r\nconst delays$ = of(1000, 2000, Infinity, 3000);\r\n\r\ndelays$.pipe(\r\n  concatMap(ms => {\r\n    if (ms < 10000) {\r\n      return timer(ms);\r\n    } else {\r\n      // Cleaner and easier to read for most folks.\r\n      throw new Error(`Invalid time ${ ms }`);\r\n    }\r\n  })\r\n)\r\n.subscribe({\r\n  next: console.log,\r\n  error: console.error\r\n});\r\n```\r\n","tags":[{"kind":25,"tagName":"param","text":"errorFactory A factory function that will create the error instance that is pushed."}]}],"hasDeclareKeyword":false,"parameters":[{"name":"errorFactory","type":"() => any","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<never>","isGenerator":false,"isAsync":false,"kind":14},{"isExported":true,"isDefaultExport":false,"typeParameters":[],"docs":[{"kind":24,"description":"\r\nReturns an observable that will error with the specified error immediately upon subscription.\r\n","tags":[{"kind":25,"tagName":"param","text":"error The error instance to emit"},{"kind":25,"tagName":"deprecated","text":"Support for passing an error value will be removed in v8. Instead, pass a factory function to `throwError(() => new Error('test'))`. This is\r\nbecause it will create the error at the moment it should be created and capture a more appropriate stack trace. If\r\nfor some reason you need to create the error ahead of time, you can still do that: `const err = new Error('test'); throwError(() => err);`."}]}],"hasDeclareKeyword":false,"parameters":[{"name":"error","type":"any","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<never>","isGenerator":false,"isAsync":false,"kind":14},{"isExported":true,"isDefaultExport":false,"typeParameters":[],"docs":[{"kind":24,"description":"\r\nNotifies the consumer of an error using a given scheduler by scheduling it at delay `0` upon subscription.\r\n","tags":[{"kind":25,"tagName":"param","text":"errorOrErrorFactory An error instance or error factory"},{"kind":25,"tagName":"param","text":"scheduler A scheduler to use to schedule the error notification"},{"kind":25,"tagName":"deprecated","text":"The `scheduler` parameter will be removed in v8.\r\nUse `throwError` in combination with {@link observeOn}: `throwError(() => new Error('test')).pipe(observeOn(scheduler));`.\r\nDetails: https://rxjs.dev/deprecations/scheduler-argument"}]}],"hasDeclareKeyword":false,"parameters":[{"name":"errorOrErrorFactory","type":"any","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"scheduler","type":"SchedulerLike","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<never>","isGenerator":false,"isAsync":false,"kind":14}]}},"usabilityResult":{"index":1}},"..\\src\\internal\\observable\\timer.ts":{"moduleComponents":{"timer":{"kind":13,"usabilityResult":{"index":0.5},"sources":[{"isExported":true,"isDefaultExport":false,"typeParameters":[],"docs":[{"kind":24,"description":"\r\nCreates an observable that will wait for a specified time period, or exact date, before\r\nemitting the number 0.\r\n\r\n<span class=\"informal\">Used to emit a notification after a delay.</span>\r\n\r\nThis observable is useful for creating delays in code, or racing against other values\r\nfor ad-hoc timeouts.\r\n\r\nThe `delay` is specified by default in milliseconds, however providing a custom scheduler could\r\ncreate a different behavior.\r\n\r\n## Examples\r\n\r\nWait 3 seconds and start another observable\r\n\r\nYou might want to use `timer` to delay subscription to an\r\nobservable by a set amount of time. Here we use a timer with\r\n{@link concatMapTo} or {@link concatMap} in order to wait\r\na few seconds and start a subscription to a source.\r\n\r\n```ts\r\nimport { of, timer, concatMap } from 'rxjs';\r\n\r\n// This could be any observable\r\nconst source = of(1, 2, 3);\r\n\r\ntimer(3000)\r\n  .pipe(concatMap(() => source))\r\n  .subscribe(console.log);\r\n```\r\n\r\nTake all values until the start of the next minute\r\n\r\nUsing a `Date` as the trigger for the first emission, you can\r\ndo things like wait until midnight to fire an event, or in this case,\r\nwait until a new minute starts (chosen so the example wouldn't take\r\ntoo long to run) in order to stop watching a stream. Leveraging\r\n{@link takeUntil}.\r\n\r\n```ts\r\nimport { interval, takeUntil, timer } from 'rxjs';\r\n\r\n// Build a Date object that marks the\r\n// next minute.\r\nconst currentDate = new Date();\r\nconst startOfNextMinute = new Date(\r\n  currentDate.getFullYear(),\r\n  currentDate.getMonth(),\r\n  currentDate.getDate(),\r\n  currentDate.getHours(),\r\n  currentDate.getMinutes() + 1\r\n);\r\n\r\n// This could be any observable stream\r\nconst source = interval(1000);\r\n\r\nconst result = source.pipe(\r\n  takeUntil(timer(startOfNextMinute))\r\n);\r\n\r\nresult.subscribe(console.log);\r\n```\r\n\r\n### Known Limitations\r\n\r\n- The {@link asyncScheduler} uses `setTimeout` which has limitations for how far in the future it can be scheduled.\r\n\r\n- If a `scheduler` is provided that returns a timestamp other than an epoch from `now()`, and\r\na `Date` object is passed to the `dueTime` argument, the calculation for when the first emission\r\nshould occur will be incorrect. In this case, it would be best to do your own calculations\r\nahead of time, and pass a `number` in as the `dueTime`.\r\n","tags":[{"kind":25,"tagName":"param","text":"due If a `number`, the amount of time in milliseconds to wait before emitting.\r\nIf a `Date`, the exact time at which to emit."},{"kind":25,"tagName":"param","text":"scheduler The scheduler to use to schedule the delay. Defaults to {@link asyncScheduler}."}]}],"hasDeclareKeyword":false,"parameters":[{"name":"due","type":"number | Date","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"scheduler","type":"SchedulerLike","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<0>","isGenerator":false,"isAsync":false,"kind":14},{"isExported":true,"isDefaultExport":false,"typeParameters":[],"docs":[{"kind":24,"description":"\r\nCreates an observable that starts an interval after a specified delay, emitting incrementing numbers -- starting at `0` --\r\non each interval after words.\r\n\r\nThe `delay` and `intervalDuration` are specified by default in milliseconds, however providing a custom scheduler could\r\ncreate a different behavior.\r\n\r\n## Example\r\n\r\n### Start an interval that starts right away\r\n\r\nSince {@link interval} waits for the passed delay before starting,\r\nsometimes that's not ideal. You may want to start an interval immediately.\r\n`timer` works well for this. Here we have both side-by-side so you can\r\nsee them in comparison.\r\n\r\nNote that this observable will never complete.\r\n\r\n```ts\r\nimport { timer, interval } from 'rxjs';\r\n\r\ntimer(0, 1000).subscribe(n => console.log('timer', n));\r\ninterval(1000).subscribe(n => console.log('interval', n));\r\n```\r\n\r\n### Known Limitations\r\n\r\n- The {@link asyncScheduler} uses `setTimeout` which has limitations for how far in the future it can be scheduled.\r\n\r\n- If a `scheduler` is provided that returns a timestamp other than an epoch from `now()`, and\r\na `Date` object is passed to the `dueTime` argument, the calculation for when the first emission\r\nshould occur will be incorrect. In this case, it would be best to do your own calculations\r\nahead of time, and pass a `number` in as the `startDue`.","tags":[{"kind":25,"tagName":"param","text":"startDue If a `number`, is the time to wait before starting the interval.\r\nIf a `Date`, is the exact time at which to start the interval."},{"kind":25,"tagName":"param","text":"intervalDuration The delay between each value emitted in the interval. Passing a\r\nnegative number here will result in immediate completion after the first value is emitted, as though\r\nno `intervalDuration` was passed at all."},{"kind":25,"tagName":"param","text":"scheduler The scheduler to use to schedule the delay. Defaults to {@link asyncScheduler}."}]}],"hasDeclareKeyword":false,"parameters":[{"name":"startDue","type":"number | Date","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"intervalDuration","type":"number","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"scheduler","type":"SchedulerLike","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<number>","isGenerator":false,"isAsync":false,"kind":14},{"isExported":true,"isDefaultExport":false,"typeParameters":[],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"The signature allowing `undefined` to be passed for `intervalDuration` will be removed in v8. Use the `timer(dueTime, scheduler?)` signature instead."}]}],"hasDeclareKeyword":false,"parameters":[{"name":"dueTime","type":"number | Date","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"unused","type":"undefined","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"scheduler","type":"SchedulerLike","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<0>","isGenerator":false,"isAsync":false,"kind":14}]}},"usabilityResult":{"index":0.5}},"..\\src\\internal\\observable\\zip.ts":{"moduleComponents":{"zip":{"kind":13,"usabilityResult":{"index":1},"sources":[{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"A","kind":39,"isConst":false,"constraint":"readonly unknown[]","variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"sources","type":"[...ObservableInputTuple<A>]","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<A>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"zip","modulePath":"..\\src\\internal\\observable\\zip.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"A","kind":39,"isConst":false,"constraint":"readonly unknown[]","variance":0},{"name":"R","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"sources","type":"[...ObservableInputTuple<A>]","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"resultSelector","type":"(...values: A) => R","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<R>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"zip","modulePath":"..\\src\\internal\\observable\\zip.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"A","kind":39,"isConst":false,"constraint":"readonly unknown[]","variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"sources","type":"[...ObservableInputTuple<A>]","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":true}],"returnType":"Observable<A>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"zip","modulePath":"..\\src\\internal\\observable\\zip.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"A","kind":39,"isConst":false,"constraint":"readonly unknown[]","variance":0},{"name":"R","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"sourcesAndResultSelector","type":"[...ObservableInputTuple<A>, (...values: A) => R]","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":true}],"returnType":"Observable<R>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"zip","modulePath":"..\\src\\internal\\observable\\zip.ts"}]}},"usabilityResult":{"index":1}},"..\\src\\internal\\operators\\bufferTime.ts":{"moduleComponents":{"bufferTime":{"kind":13,"usabilityResult":{"index":1},"sources":[{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"bufferTimeSpan","type":"number","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"scheduler","type":"SchedulerLike","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, T[]>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"bufferTime","modulePath":"..\\src\\internal\\operators\\bufferTime.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"bufferTimeSpan","type":"number","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"bufferCreationInterval","type":"number | null | undefined","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"scheduler","type":"SchedulerLike","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, T[]>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"bufferTime","modulePath":"..\\src\\internal\\operators\\bufferTime.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"bufferTimeSpan","type":"number","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"bufferCreationInterval","type":"number | null | undefined","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"maxBufferSize","type":"number","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"scheduler","type":"SchedulerLike","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, T[]>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"bufferTime","modulePath":"..\\src\\internal\\operators\\bufferTime.ts"}]}},"usabilityResult":{"index":1}},"..\\src\\internal\\operators\\catchError.ts":{"moduleComponents":{"catchError":{"kind":13,"usabilityResult":{"index":1},"sources":[{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"O","kind":39,"isConst":false,"constraint":"ObservableInput<any>","variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"selector","type":"(err: any, caught: Observable<T>) => O","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, T | ObservedValueOf<O>>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"catchError","modulePath":"..\\src\\internal\\operators\\catchError.ts"}]}},"usabilityResult":{"index":1}},"..\\src\\internal\\operators\\combineLatestAll.ts":{"moduleComponents":{"combineLatestAll":{"kind":13,"usabilityResult":{"index":1},"sources":[{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[],"returnType":"OperatorFunction<ObservableInput<T>, T[]>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"combineLatestAll","modulePath":"..\\src\\internal\\operators\\combineLatestAll.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[],"returnType":"OperatorFunction<any, T[]>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"combineLatestAll","modulePath":"..\\src\\internal\\operators\\combineLatestAll.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"R","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"project","type":"(...values: T[]) => R","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<ObservableInput<T>, R>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"combineLatestAll","modulePath":"..\\src\\internal\\operators\\combineLatestAll.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"R","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"project","type":"(...values: Array<any>) => R","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<any, R>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"combineLatestAll","modulePath":"..\\src\\internal\\operators\\combineLatestAll.ts"}]}},"usabilityResult":{"index":1}},"..\\src\\internal\\operators\\concatMap.ts":{"moduleComponents":{"concatMap":{"kind":13,"usabilityResult":{"index":1},"sources":[{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"O","kind":39,"isConst":false,"constraint":"ObservableInput<any>","variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"project","type":"(value: T, index: number) => O","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, ObservedValueOf<O>>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"concatMap","modulePath":"..\\src\\internal\\operators\\concatMap.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"O","kind":39,"isConst":false,"constraint":"ObservableInput<any>","variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"The `resultSelector` parameter will be removed in v8. Use an inner `map` instead. Details: https://rxjs.dev/deprecations/resultSelector"}]}],"hasDeclareKeyword":false,"parameters":[{"name":"project","type":"(value: T, index: number) => O","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"resultSelector","type":"undefined","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, ObservedValueOf<O>>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"concatMap","modulePath":"..\\src\\internal\\operators\\concatMap.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"R","kind":39,"isConst":false,"variance":0},{"name":"O","kind":39,"isConst":false,"constraint":"ObservableInput<any>","variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"The `resultSelector` parameter will be removed in v8. Use an inner `map` instead. Details: https://rxjs.dev/deprecations/resultSelector"}]}],"hasDeclareKeyword":false,"parameters":[{"name":"project","type":"(value: T, index: number) => O","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"resultSelector","type":"(outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, R>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"concatMap","modulePath":"..\\src\\internal\\operators\\concatMap.ts"}]}},"usabilityResult":{"index":1}},"..\\src\\internal\\operators\\concatMapTo.ts":{"moduleComponents":{"concatMapTo":{"kind":13,"usabilityResult":{"index":1},"sources":[{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"O","kind":39,"isConst":false,"constraint":"ObservableInput<unknown>","variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Will be removed in v9. Use {@link concatMap} instead: `concatMap(() => result)`"}]}],"hasDeclareKeyword":false,"parameters":[{"name":"observable","type":"O","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<unknown, ObservedValueOf<O>>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"concatMapTo","modulePath":"..\\src\\internal\\operators\\concatMapTo.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"O","kind":39,"isConst":false,"constraint":"ObservableInput<unknown>","variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"The `resultSelector` parameter will be removed in v8. Use an inner `map` instead. Details: https://rxjs.dev/deprecations/resultSelector"}]}],"hasDeclareKeyword":false,"parameters":[{"name":"observable","type":"O","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"resultSelector","type":"undefined","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<unknown, ObservedValueOf<O>>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"concatMapTo","modulePath":"..\\src\\internal\\operators\\concatMapTo.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"R","kind":39,"isConst":false,"variance":0},{"name":"O","kind":39,"isConst":false,"constraint":"ObservableInput<unknown>","variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"The `resultSelector` parameter will be removed in v8. Use an inner `map` instead. Details: https://rxjs.dev/deprecations/resultSelector"}]}],"hasDeclareKeyword":false,"parameters":[{"name":"observable","type":"O","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"resultSelector","type":"(outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, R>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"concatMapTo","modulePath":"..\\src\\internal\\operators\\concatMapTo.ts"}]}},"usabilityResult":{"index":1}},"..\\src\\internal\\operators\\delayWhen.ts":{"moduleComponents":{"delayWhen":{"kind":13,"usabilityResult":{"index":1},"sources":[{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"The `subscriptionDelay` parameter will be removed in v8."}]}],"hasDeclareKeyword":false,"parameters":[{"name":"delayDurationSelector","type":"(value: T, index: number) => ObservableInput<any>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"subscriptionDelay","type":"Observable<any>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"MonoTypeOperatorFunction<T>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"delayWhen","modulePath":"..\\src\\internal\\operators\\delayWhen.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"delayDurationSelector","type":"(value: T, index: number) => ObservableInput<any>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"MonoTypeOperatorFunction<T>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"delayWhen","modulePath":"..\\src\\internal\\operators\\delayWhen.ts"}]}},"usabilityResult":{"index":1}},"..\\src\\internal\\operators\\distinctUntilChanged.ts":{"moduleComponents":{"distinctUntilChanged":{"kind":13,"usabilityResult":{"index":1},"sources":[{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"comparator","type":"(previous: T, current: T) => boolean","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"MonoTypeOperatorFunction<T>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"distinctUntilChanged","modulePath":"..\\src\\internal\\operators\\distinctUntilChanged.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"K","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"comparator","type":"(previous: K, current: K) => boolean","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"keySelector","type":"(value: T) => K","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"MonoTypeOperatorFunction<T>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"distinctUntilChanged","modulePath":"..\\src\\internal\\operators\\distinctUntilChanged.ts"}]}},"usabilityResult":{"index":1}},"..\\src\\internal\\operators\\distinctUntilKeyChanged.ts":{"moduleComponents":{"distinctUntilKeyChanged":{"kind":13,"usabilityResult":{"index":1},"sources":[{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"key","type":"keyof T","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"MonoTypeOperatorFunction<T>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"distinctUntilKeyChanged","modulePath":"..\\src\\internal\\operators\\distinctUntilKeyChanged.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"K","kind":39,"isConst":false,"constraint":"keyof T","variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"key","type":"K","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"compare","type":"(x: T[K], y: T[K]) => boolean","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"MonoTypeOperatorFunction<T>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"distinctUntilKeyChanged","modulePath":"..\\src\\internal\\operators\\distinctUntilKeyChanged.ts"}]}},"usabilityResult":{"index":1}},"..\\src\\internal\\operators\\endWith.ts":{"moduleComponents":{"endWith":{"kind":13,"usabilityResult":{"index":1},"sources":[{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"The `scheduler` parameter will be removed in v8. Use `scheduled` and `concatAll`. Details: https://rxjs.dev/deprecations/scheduler-argument"}]}],"hasDeclareKeyword":false,"parameters":[{"name":"scheduler","type":"SchedulerLike","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"MonoTypeOperatorFunction<T>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"endWith","modulePath":"..\\src\\internal\\operators\\endWith.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"A","kind":39,"isConst":false,"constraint":"unknown[]","default":"T[]","variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"The `scheduler` parameter will be removed in v8. Use `scheduled` and `concatAll`. Details: https://rxjs.dev/deprecations/scheduler-argument"}]}],"hasDeclareKeyword":false,"parameters":[{"name":"valuesAndScheduler","type":"[...A, SchedulerLike]","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":true}],"returnType":"OperatorFunction<T, T | ValueFromArray<A>>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"endWith","modulePath":"..\\src\\internal\\operators\\endWith.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"A","kind":39,"isConst":false,"constraint":"unknown[]","default":"T[]","variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"values","type":"A","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":true}],"returnType":"OperatorFunction<T, T | ValueFromArray<A>>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"endWith","modulePath":"..\\src\\internal\\operators\\endWith.ts"}]}},"usabilityResult":{"index":1}},"..\\src\\internal\\operators\\every.ts":{"moduleComponents":{"every":{"kind":13,"usabilityResult":{"index":1},"sources":[{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"predicate","type":"BooleanConstructor","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, Exclude<T, Falsy> extends never ? false : boolean>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"every","modulePath":"..\\src\\internal\\operators\\every.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Use a closure instead of a `thisArg`. Signatures accepting a `thisArg` will be removed in v8."}]}],"hasDeclareKeyword":false,"parameters":[{"name":"predicate","type":"BooleanConstructor","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"thisArg","type":"any","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, Exclude<T, Falsy> extends never ? false : boolean>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"every","modulePath":"..\\src\\internal\\operators\\every.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"A","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Use a closure instead of a `thisArg`. Signatures accepting a `thisArg` will be removed in v8."}]}],"hasDeclareKeyword":false,"parameters":[{"name":"predicate","type":"(this: A, value: T, index: number, source: Observable<T>) => boolean","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"thisArg","type":"A","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, boolean>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"every","modulePath":"..\\src\\internal\\operators\\every.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"predicate","type":"(value: T, index: number, source: Observable<T>) => boolean","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, boolean>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"every","modulePath":"..\\src\\internal\\operators\\every.ts"}]}},"usabilityResult":{"index":1}},"..\\src\\internal\\operators\\exhaustMap.ts":{"moduleComponents":{"exhaustMap":{"kind":13,"usabilityResult":{"index":1},"sources":[{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"O","kind":39,"isConst":false,"constraint":"ObservableInput<any>","variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"project","type":"(value: T, index: number) => O","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, ObservedValueOf<O>>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"exhaustMap","modulePath":"..\\src\\internal\\operators\\exhaustMap.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"O","kind":39,"isConst":false,"constraint":"ObservableInput<any>","variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"The `resultSelector` parameter will be removed in v8. Use an inner `map` instead. Details: https://rxjs.dev/deprecations/resultSelector"}]}],"hasDeclareKeyword":false,"parameters":[{"name":"project","type":"(value: T, index: number) => O","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"resultSelector","type":"undefined","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, ObservedValueOf<O>>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"exhaustMap","modulePath":"..\\src\\internal\\operators\\exhaustMap.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"I","kind":39,"isConst":false,"variance":0},{"name":"R","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"The `resultSelector` parameter will be removed in v8. Use an inner `map` instead. Details: https://rxjs.dev/deprecations/resultSelector"}]}],"hasDeclareKeyword":false,"parameters":[{"name":"project","type":"(value: T, index: number) => ObservableInput<I>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"resultSelector","type":"(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, R>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"exhaustMap","modulePath":"..\\src\\internal\\operators\\exhaustMap.ts"}]}},"usabilityResult":{"index":1}},"..\\src\\internal\\operators\\expand.ts":{"moduleComponents":{"expand":{"kind":13,"usabilityResult":{"index":1},"sources":[{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"O","kind":39,"isConst":false,"constraint":"ObservableInput<unknown>","variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"project","type":"(value: T, index: number) => O","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"concurrent","type":"number","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"scheduler","type":"SchedulerLike","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, ObservedValueOf<O>>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"expand","modulePath":"..\\src\\internal\\operators\\expand.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"O","kind":39,"isConst":false,"constraint":"ObservableInput<unknown>","variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"The `scheduler` parameter will be removed in v8. If you need to schedule the inner subscription,\r\nuse `subscribeOn` within the projection function: `expand((value) => fn(value).pipe(subscribeOn(scheduler)))`.\r\nDetails: Details: https://rxjs.dev/deprecations/scheduler-argument"}]}],"hasDeclareKeyword":false,"parameters":[{"name":"project","type":"(value: T, index: number) => O","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"concurrent","type":"number | undefined","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"scheduler","type":"SchedulerLike","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, ObservedValueOf<O>>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"expand","modulePath":"..\\src\\internal\\operators\\expand.ts"}]}},"usabilityResult":{"index":1}},"..\\src\\internal\\operators\\filter.ts":{"moduleComponents":{"filter":{"kind":13,"usabilityResult":{"index":1},"sources":[{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"S","kind":39,"isConst":false,"constraint":"T","variance":0},{"name":"A","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Use a closure instead of a `thisArg`. Signatures accepting a `thisArg` will be removed in v8."}]}],"hasDeclareKeyword":false,"parameters":[{"name":"predicate","type":"(this: A, value: T, index: number) => value is S","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"thisArg","type":"A","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, S>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"filter","modulePath":"..\\src\\internal\\operators\\filter.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"S","kind":39,"isConst":false,"constraint":"T","variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"predicate","type":"(value: T, index: number) => value is S","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, S>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"filter","modulePath":"..\\src\\internal\\operators\\filter.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"predicate","type":"BooleanConstructor","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, TruthyTypesOf<T>>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"filter","modulePath":"..\\src\\internal\\operators\\filter.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"A","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Use a closure instead of a `thisArg`. Signatures accepting a `thisArg` will be removed in v8."}]}],"hasDeclareKeyword":false,"parameters":[{"name":"predicate","type":"(this: A, value: T, index: number) => boolean","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"thisArg","type":"A","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"MonoTypeOperatorFunction<T>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"filter","modulePath":"..\\src\\internal\\operators\\filter.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"predicate","type":"(value: T, index: number) => boolean","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"MonoTypeOperatorFunction<T>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"filter","modulePath":"..\\src\\internal\\operators\\filter.ts"}]}},"usabilityResult":{"index":1}},"..\\src\\internal\\operators\\find.ts":{"moduleComponents":{"find":{"kind":13,"usabilityResult":{"index":1},"sources":[{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"predicate","type":"BooleanConstructor","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, TruthyTypesOf<T>>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"find","modulePath":"..\\src\\internal\\operators\\find.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"S","kind":39,"isConst":false,"constraint":"T","variance":0},{"name":"A","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Use a closure instead of a `thisArg`. Signatures accepting a `thisArg` will be removed in v8."}]}],"hasDeclareKeyword":false,"parameters":[{"name":"predicate","type":"(this: A, value: T, index: number, source: Observable<T>) => value is S","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"thisArg","type":"A","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, S | undefined>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"find","modulePath":"..\\src\\internal\\operators\\find.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"S","kind":39,"isConst":false,"constraint":"T","variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"predicate","type":"(value: T, index: number, source: Observable<T>) => value is S","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, S | undefined>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"find","modulePath":"..\\src\\internal\\operators\\find.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"A","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Use a closure instead of a `thisArg`. Signatures accepting a `thisArg` will be removed in v8."}]}],"hasDeclareKeyword":false,"parameters":[{"name":"predicate","type":"(this: A, value: T, index: number, source: Observable<T>) => boolean","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"thisArg","type":"A","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, T | undefined>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"find","modulePath":"..\\src\\internal\\operators\\find.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"predicate","type":"(value: T, index: number, source: Observable<T>) => boolean","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, T | undefined>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"find","modulePath":"..\\src\\internal\\operators\\find.ts"}]}},"usabilityResult":{"index":1}},"..\\src\\internal\\operators\\findIndex.ts":{"moduleComponents":{"findIndex":{"kind":13,"usabilityResult":{"index":1},"sources":[{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"predicate","type":"BooleanConstructor","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, T extends Falsy ? -1 : number>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"findIndex","modulePath":"..\\src\\internal\\operators\\findIndex.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Use a closure instead of a `thisArg`. Signatures accepting a `thisArg` will be removed in v8."}]}],"hasDeclareKeyword":false,"parameters":[{"name":"predicate","type":"BooleanConstructor","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"thisArg","type":"any","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, T extends Falsy ? -1 : number>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"findIndex","modulePath":"..\\src\\internal\\operators\\findIndex.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"A","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Use a closure instead of a `thisArg`. Signatures accepting a `thisArg` will be removed in v8."}]}],"hasDeclareKeyword":false,"parameters":[{"name":"predicate","type":"(this: A, value: T, index: number, source: Observable<T>) => boolean","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"thisArg","type":"A","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, number>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"findIndex","modulePath":"..\\src\\internal\\operators\\findIndex.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"predicate","type":"(value: T, index: number, source: Observable<T>) => boolean","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, number>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"findIndex","modulePath":"..\\src\\internal\\operators\\findIndex.ts"}]}},"usabilityResult":{"index":1}},"..\\src\\internal\\operators\\first.ts":{"moduleComponents":{"first":{"kind":13,"usabilityResult":{"index":1},"sources":[{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"D","kind":39,"isConst":false,"default":"T","variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"predicate","type":"null","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"defaultValue","type":"D","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, T | D>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"first","modulePath":"..\\src\\internal\\operators\\first.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"predicate","type":"BooleanConstructor","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, TruthyTypesOf<T>>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"first","modulePath":"..\\src\\internal\\operators\\first.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"D","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"predicate","type":"BooleanConstructor","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"defaultValue","type":"D","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, TruthyTypesOf<T> | D>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"first","modulePath":"..\\src\\internal\\operators\\first.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"S","kind":39,"isConst":false,"constraint":"T","variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"predicate","type":"(value: T, index: number, source: Observable<T>) => value is S","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"defaultValue","type":"S","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, S>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"first","modulePath":"..\\src\\internal\\operators\\first.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"S","kind":39,"isConst":false,"constraint":"T","variance":0},{"name":"D","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"predicate","type":"(value: T, index: number, source: Observable<T>) => value is S","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"defaultValue","type":"D","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, S | D>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"first","modulePath":"..\\src\\internal\\operators\\first.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"D","kind":39,"isConst":false,"default":"T","variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"predicate","type":"(value: T, index: number, source: Observable<T>) => boolean","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"defaultValue","type":"D","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, T | D>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"first","modulePath":"..\\src\\internal\\operators\\first.ts"}]}},"usabilityResult":{"index":1}},"..\\src\\internal\\operators\\groupBy.ts":{"moduleComponents":{"groupBy":{"kind":13,"usabilityResult":{"index":1},"sources":[{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"K","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"key","type":"(value: T) => K","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"options","type":"BasicGroupByOptions<K, T>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, GroupedObservable<K, T>>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"groupBy","modulePath":"..\\src\\internal\\operators\\groupBy.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"K","kind":39,"isConst":false,"variance":0},{"name":"E","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"key","type":"(value: T) => K","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"options","type":"GroupByOptionsWithElement<K, E, T>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, GroupedObservable<K, E>>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"groupBy","modulePath":"..\\src\\internal\\operators\\groupBy.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"K","kind":39,"isConst":false,"constraint":"T","variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"key","type":"(value: T) => value is K","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, GroupedObservable<true, K> | GroupedObservable<false, Exclude<T, K>>>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"groupBy","modulePath":"..\\src\\internal\\operators\\groupBy.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"K","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"key","type":"(value: T) => K","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, GroupedObservable<K, T>>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"groupBy","modulePath":"..\\src\\internal\\operators\\groupBy.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"K","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"use the options parameter instead."}]}],"hasDeclareKeyword":false,"parameters":[{"name":"key","type":"(value: T) => K","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"element","type":"void","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"duration","type":"(grouped: GroupedObservable<K, T>) => Observable<any>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, GroupedObservable<K, T>>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"groupBy","modulePath":"..\\src\\internal\\operators\\groupBy.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"K","kind":39,"isConst":false,"variance":0},{"name":"R","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"use the options parameter instead."}]}],"hasDeclareKeyword":false,"parameters":[{"name":"key","type":"(value: T) => K","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"element","type":"(value: T) => R","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"duration","type":"(grouped: GroupedObservable<K, R>) => Observable<any>","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, GroupedObservable<K, R>>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"groupBy","modulePath":"..\\src\\internal\\operators\\groupBy.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"K","kind":39,"isConst":false,"variance":0},{"name":"R","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nGroups the items emitted by an Observable according to a specified criterion,\r\nand emits these grouped items as `GroupedObservables`, one\r\n{@link GroupedObservable} per group.\r\n\r\n![](groupBy.png)\r\n\r\nWhen the Observable emits an item, a key is computed for this item with the key function.\r\n\r\nIf a {@link GroupedObservable} for this key exists, this {@link GroupedObservable} emits. Otherwise, a new\r\n{@link GroupedObservable} for this key is created and emits.\r\n\r\nA {@link GroupedObservable} represents values belonging to the same group represented by a common key. The common\r\nkey is available as the `key` field of a {@link GroupedObservable} instance.\r\n\r\nThe elements emitted by {@link GroupedObservable}s are by default the items emitted by the Observable, or elements\r\nreturned by the element function.\r\n\r\n## Examples\r\n\r\nGroup objects by `id` and return as array\r\n\r\n```ts\r\nimport { of, groupBy, mergeMap, reduce } from 'rxjs';\r\n\r\nof(\r\n  { id: 1, name: 'JavaScript' },\r\n  { id: 2, name: 'Parcel' },\r\n  { id: 2, name: 'webpack' },\r\n  { id: 1, name: 'TypeScript' },\r\n  { id: 3, name: 'TSLint' }\r\n).pipe(\r\n  groupBy(p => p.id),\r\n  mergeMap(group$ => group$.pipe(reduce((acc, cur) => [...acc, cur], [])))\r\n)\r\n.subscribe(p => console.log(p));\r\n\r\n// displays:\r\n// [{ id: 1, name: 'JavaScript' }, { id: 1, name: 'TypeScript'}]\r\n// [{ id: 2, name: 'Parcel' }, { id: 2, name: 'webpack'}]\r\n// [{ id: 3, name: 'TSLint' }]\r\n```\r\n\r\nPivot data on the `id` field\r\n\r\n```ts\r\nimport { of, groupBy, mergeMap, reduce, map } from 'rxjs';\r\n\r\nof(\r\n  { id: 1, name: 'JavaScript' },\r\n  { id: 2, name: 'Parcel' },\r\n  { id: 2, name: 'webpack' },\r\n  { id: 1, name: 'TypeScript' },\r\n  { id: 3, name: 'TSLint' }\r\n).pipe(\r\n  groupBy(p => p.id, { element: p => p.name }),\r\n  mergeMap(group$ => group$.pipe(reduce((acc, cur) => [...acc, cur], [`${ group$.key }`]))),\r\n  map(arr => ({ id: parseInt(arr[0], 10), values: arr.slice(1) }))\r\n)\r\n.subscribe(p => console.log(p));\r\n\r\n// displays:\r\n// { id: 1, values: [ 'JavaScript', 'TypeScript' ] }\r\n// { id: 2, values: [ 'Parcel', 'webpack' ] }\r\n// { id: 3, values: [ 'TSLint' ] }\r\n```\r\n","tags":[{"kind":25,"tagName":"param","text":"key A function that extracts the key\r\nfor each item."},{"kind":25,"tagName":"param","text":"element A function that extracts the\r\nreturn element for each item."},{"kind":25,"tagName":"param","text":"duration\r\nA function that returns an Observable to determine how long each group should\r\nexist."},{"kind":25,"tagName":"param","text":"connector Factory function to create an\r\nintermediate Subject through which grouped elements are emitted."},{"kind":25,"tagName":"return","text":"A function that returns an Observable that emits GroupedObservables,\r\neach of which corresponds to a unique key value and each of which emits\r\nthose items from the source Observable that share that key value."},{"kind":25,"tagName":"deprecated","text":"Use the options parameter instead."}]}],"hasDeclareKeyword":false,"parameters":[{"name":"key","type":"(value: T) => K","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"element","type":"(value: T) => R","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"duration","type":"(grouped: GroupedObservable<K, R>) => Observable<any>","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"connector","type":"() => Subject<R>","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, GroupedObservable<K, R>>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"groupBy","modulePath":"..\\src\\internal\\operators\\groupBy.ts"}]}},"usabilityResult":{"index":1}},"..\\src\\internal\\operators\\last.ts":{"moduleComponents":{"last":{"kind":13,"usabilityResult":{"index":1},"sources":[{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"predicate","type":"BooleanConstructor","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, TruthyTypesOf<T>>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"last","modulePath":"..\\src\\internal\\operators\\last.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"D","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"predicate","type":"BooleanConstructor","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"defaultValue","type":"D","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, TruthyTypesOf<T> | D>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"last","modulePath":"..\\src\\internal\\operators\\last.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"D","kind":39,"isConst":false,"default":"T","variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"predicate","type":"null","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"defaultValue","type":"D","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, T | D>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"last","modulePath":"..\\src\\internal\\operators\\last.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"S","kind":39,"isConst":false,"constraint":"T","variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"predicate","type":"(value: T, index: number, source: Observable<T>) => value is S","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"defaultValue","type":"S","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, S>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"last","modulePath":"..\\src\\internal\\operators\\last.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"D","kind":39,"isConst":false,"default":"T","variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"predicate","type":"(value: T, index: number, source: Observable<T>) => boolean","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"defaultValue","type":"D","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, T | D>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"last","modulePath":"..\\src\\internal\\operators\\last.ts"}]}},"usabilityResult":{"index":1}},"..\\src\\internal\\operators\\map.ts":{"moduleComponents":{"map":{"kind":13,"usabilityResult":{"index":1},"sources":[{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"R","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"project","type":"(value: T, index: number) => R","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, R>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"map","modulePath":"..\\src\\internal\\operators\\map.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"R","kind":39,"isConst":false,"variance":0},{"name":"A","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Use a closure instead of a `thisArg`. Signatures accepting a `thisArg` will be removed in v8."}]}],"hasDeclareKeyword":false,"parameters":[{"name":"project","type":"(this: A, value: T, index: number) => R","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"thisArg","type":"A","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, R>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"map","modulePath":"..\\src\\internal\\operators\\map.ts"}]}},"usabilityResult":{"index":1}},"..\\src\\internal\\operators\\mapTo.ts":{"moduleComponents":{"mapTo":{"kind":13,"usabilityResult":{"index":1},"sources":[{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"R","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"To be removed in v9. Use {@link map} instead: `map(() => value)`."}]}],"hasDeclareKeyword":false,"parameters":[{"name":"value","type":"R","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<unknown, R>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"mapTo","modulePath":"..\\src\\internal\\operators\\mapTo.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"R","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Do not specify explicit type parameters. Signatures with type parameters\r\nthat cannot be inferred will be removed in v8. `mapTo` itself will be removed in v9,\r\nuse {@link map} instead: `map(() => value)`."}]}],"hasDeclareKeyword":false,"parameters":[{"name":"value","type":"R","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, R>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"mapTo","modulePath":"..\\src\\internal\\operators\\mapTo.ts"}]}},"usabilityResult":{"index":1}},"..\\src\\internal\\operators\\mergeMap.ts":{"moduleComponents":{"mergeMap":{"kind":13,"usabilityResult":{"index":1},"sources":[{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"O","kind":39,"isConst":false,"constraint":"ObservableInput<any>","variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"project","type":"(value: T, index: number) => O","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"concurrent","type":"number","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, ObservedValueOf<O>>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"mergeMap","modulePath":"..\\src\\internal\\operators\\mergeMap.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"O","kind":39,"isConst":false,"constraint":"ObservableInput<any>","variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"The `resultSelector` parameter will be removed in v8. Use an inner `map` instead. Details: https://rxjs.dev/deprecations/resultSelector"}]}],"hasDeclareKeyword":false,"parameters":[{"name":"project","type":"(value: T, index: number) => O","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"resultSelector","type":"undefined","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"concurrent","type":"number","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, ObservedValueOf<O>>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"mergeMap","modulePath":"..\\src\\internal\\operators\\mergeMap.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"R","kind":39,"isConst":false,"variance":0},{"name":"O","kind":39,"isConst":false,"constraint":"ObservableInput<any>","variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"The `resultSelector` parameter will be removed in v8. Use an inner `map` instead. Details: https://rxjs.dev/deprecations/resultSelector"}]}],"hasDeclareKeyword":false,"parameters":[{"name":"project","type":"(value: T, index: number) => O","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"resultSelector","type":"(outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"concurrent","type":"number","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, R>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"mergeMap","modulePath":"..\\src\\internal\\operators\\mergeMap.ts"}]}},"usabilityResult":{"index":1}},"..\\src\\internal\\operators\\mergeMapTo.ts":{"moduleComponents":{"mergeMapTo":{"kind":13,"usabilityResult":{"index":1},"sources":[{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"O","kind":39,"isConst":false,"constraint":"ObservableInput<unknown>","variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Will be removed in v9. Use {@link mergeMap} instead: `mergeMap(() => result)`"}]}],"hasDeclareKeyword":false,"parameters":[{"name":"innerObservable","type":"O","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"concurrent","type":"number","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<unknown, ObservedValueOf<O>>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"mergeMapTo","modulePath":"..\\src\\internal\\operators\\mergeMapTo.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"R","kind":39,"isConst":false,"variance":0},{"name":"O","kind":39,"isConst":false,"constraint":"ObservableInput<unknown>","variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"The `resultSelector` parameter will be removed in v8. Use an inner `map` instead.\r\nDetails: https://rxjs.dev/deprecations/resultSelector"}]}],"hasDeclareKeyword":false,"parameters":[{"name":"innerObservable","type":"O","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"resultSelector","type":"(outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"concurrent","type":"number","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, R>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"mergeMapTo","modulePath":"..\\src\\internal\\operators\\mergeMapTo.ts"}]}},"usabilityResult":{"index":1}},"..\\src\\internal\\operators\\multicast.ts":{"moduleComponents":{"multicast":{"kind":13,"usabilityResult":{"index":0.6666666666666667},"sources":[{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nAn operator that creates a {@link ConnectableObservable}, that when connected,\r\nwith the `connect` method, will use the provided subject to multicast the values\r\nfrom the source to all consumers.\r\n","tags":[{"kind":25,"tagName":"param","text":"subject The subject to multicast through."},{"kind":25,"tagName":"return","text":"A function that returns a {@link ConnectableObservable}"},{"kind":25,"tagName":"deprecated","text":"Will be removed in v8. To create a connectable observable, use {@link connectable}.\r\nIf you're using {@link refCount} after `multicast`, use the {@link share} operator instead.\r\n`multicast(subject), refCount()` is equivalent to\r\n`share({ connector: () => subject, resetOnError: false, resetOnComplete: false, resetOnRefCountZero: false })`.\r\nDetails: https://rxjs.dev/deprecations/multicasting"}]}],"hasDeclareKeyword":false,"parameters":[{"name":"subject","type":"Subject<T>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"UnaryFunction<Observable<T>, ConnectableObservable<T>>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"multicast","modulePath":"..\\src\\internal\\operators\\multicast.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"O","kind":39,"isConst":false,"constraint":"ObservableInput<any>","variance":0}],"docs":[{"kind":24,"description":"\r\nBecause this is deprecated in favor of the {@link connect} operator, and was otherwise poorly documented,\r\nrather than duplicate the effort of documenting the same behavior, please see documentation for the\r\n{@link connect} operator.\r\n","tags":[{"kind":25,"tagName":"param","text":"subject The subject used to multicast."},{"kind":25,"tagName":"param","text":"selector A setup function to setup the multicast"},{"kind":25,"tagName":"return","text":"A function that returns an observable that mirrors the observable returned by the selector."},{"kind":25,"tagName":"deprecated","text":"Will be removed in v8. Use the {@link connect} operator instead.\r\n`multicast(subject, selector)` is equivalent to\r\n`connect(selector, { connector: () => subject })`.\r\nDetails: https://rxjs.dev/deprecations/multicasting"}]}],"hasDeclareKeyword":false,"parameters":[{"name":"subject","type":"Subject<T>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"selector","type":"(shared: Observable<T>) => O","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, ObservedValueOf<O>>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"multicast","modulePath":"..\\src\\internal\\operators\\multicast.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nAn operator that creates a {@link ConnectableObservable}, that when connected,\r\nwith the `connect` method, will use the provided subject to multicast the values\r\nfrom the source to all consumers.\r\n","tags":[{"kind":25,"tagName":"param","text":"subjectFactory A factory that will be called to create the subject. Passing a function here\r\nwill cause the underlying subject to be \"reset\" on error, completion, or refCounted unsubscription of\r\nthe source."},{"kind":25,"tagName":"return","text":"A function that returns a {@link ConnectableObservable}"},{"kind":25,"tagName":"deprecated","text":"Will be removed in v8. To create a connectable observable, use {@link connectable}.\r\nIf you're using {@link refCount} after `multicast`, use the {@link share} operator instead.\r\n`multicast(() => new BehaviorSubject('test')), refCount()` is equivalent to\r\n`share({ connector: () => new BehaviorSubject('test') })`.\r\nDetails: https://rxjs.dev/deprecations/multicasting"}]}],"hasDeclareKeyword":false,"parameters":[{"name":"subjectFactory","type":"() => Subject<T>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"UnaryFunction<Observable<T>, ConnectableObservable<T>>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"multicast","modulePath":"..\\src\\internal\\operators\\multicast.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"O","kind":39,"isConst":false,"constraint":"ObservableInput<any>","variance":0}],"docs":[{"kind":24,"description":"\r\nBecause this is deprecated in favor of the {@link connect} operator, and was otherwise poorly documented,\r\nrather than duplicate the effort of documenting the same behavior, please see documentation for the\r\n{@link connect} operator.\r\n","tags":[{"kind":25,"tagName":"param","text":"subjectFactory A factory that creates the subject used to multicast."},{"kind":25,"tagName":"param","text":"selector A function to setup the multicast and select the output."},{"kind":25,"tagName":"return","text":"A function that returns an observable that mirrors the observable returned by the selector."},{"kind":25,"tagName":"deprecated","text":"Will be removed in v8. Use the {@link connect} operator instead.\r\n`multicast(subjectFactory, selector)` is equivalent to\r\n`connect(selector, { connector: subjectFactory })`.\r\nDetails: https://rxjs.dev/deprecations/multicasting"}]}],"hasDeclareKeyword":false,"parameters":[{"name":"subjectFactory","type":"() => Subject<T>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"selector","type":"(shared: Observable<T>) => O","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, ObservedValueOf<O>>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"multicast","modulePath":"..\\src\\internal\\operators\\multicast.ts"}]}},"usabilityResult":{"index":0.6666666666666667}},"..\\src\\internal\\operators\\onErrorResumeNextWith.ts":{"moduleComponents":{"onErrorResumeNextWith":{"kind":13,"usabilityResult":{"index":1},"sources":[{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"A","kind":39,"isConst":false,"constraint":"readonly unknown[]","variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"sources","type":"[...ObservableInputTuple<A>]","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, T | A[number]>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"onErrorResumeNextWith","modulePath":"..\\src\\internal\\operators\\onErrorResumeNextWith.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"A","kind":39,"isConst":false,"constraint":"readonly unknown[]","variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"sources","type":"[...ObservableInputTuple<A>]","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":true}],"returnType":"OperatorFunction<T, T | A[number]>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"onErrorResumeNextWith","modulePath":"..\\src\\internal\\operators\\onErrorResumeNextWith.ts"}]}},"usabilityResult":{"index":1}},"..\\src\\internal\\operators\\pluck.ts":{"moduleComponents":{"pluck":{"kind":13,"usabilityResult":{"index":1},"sources":[{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"K1","kind":39,"isConst":false,"constraint":"keyof T","variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Use {@link map} and optional chaining: `pluck('foo', 'bar')` is `map(x => x?.foo?.bar)`. Will be removed in v8."}]}],"hasDeclareKeyword":false,"parameters":[{"name":"k1","type":"K1","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, T[K1]>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"pluck","modulePath":"..\\src\\internal\\operators\\pluck.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"K1","kind":39,"isConst":false,"constraint":"keyof T","variance":0},{"name":"K2","kind":39,"isConst":false,"constraint":"keyof T[K1]","variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Use {@link map} and optional chaining: `pluck('foo', 'bar')` is `map(x => x?.foo?.bar)`. Will be removed in v8."}]}],"hasDeclareKeyword":false,"parameters":[{"name":"k1","type":"K1","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"k2","type":"K2","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, T[K1][K2]>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"pluck","modulePath":"..\\src\\internal\\operators\\pluck.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"K1","kind":39,"isConst":false,"constraint":"keyof T","variance":0},{"name":"K2","kind":39,"isConst":false,"constraint":"keyof T[K1]","variance":0},{"name":"K3","kind":39,"isConst":false,"constraint":"keyof T[K1][K2]","variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Use {@link map} and optional chaining: `pluck('foo', 'bar')` is `map(x => x?.foo?.bar)`. Will be removed in v8."}]}],"hasDeclareKeyword":false,"parameters":[{"name":"k1","type":"K1","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"k2","type":"K2","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"k3","type":"K3","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, T[K1][K2][K3]>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"pluck","modulePath":"..\\src\\internal\\operators\\pluck.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"K1","kind":39,"isConst":false,"constraint":"keyof T","variance":0},{"name":"K2","kind":39,"isConst":false,"constraint":"keyof T[K1]","variance":0},{"name":"K3","kind":39,"isConst":false,"constraint":"keyof T[K1][K2]","variance":0},{"name":"K4","kind":39,"isConst":false,"constraint":"keyof T[K1][K2][K3]","variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Use {@link map} and optional chaining: `pluck('foo', 'bar')` is `map(x => x?.foo?.bar)`. Will be removed in v8."}]}],"hasDeclareKeyword":false,"parameters":[{"name":"k1","type":"K1","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"k2","type":"K2","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"k3","type":"K3","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"k4","type":"K4","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, T[K1][K2][K3][K4]>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"pluck","modulePath":"..\\src\\internal\\operators\\pluck.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"K1","kind":39,"isConst":false,"constraint":"keyof T","variance":0},{"name":"K2","kind":39,"isConst":false,"constraint":"keyof T[K1]","variance":0},{"name":"K3","kind":39,"isConst":false,"constraint":"keyof T[K1][K2]","variance":0},{"name":"K4","kind":39,"isConst":false,"constraint":"keyof T[K1][K2][K3]","variance":0},{"name":"K5","kind":39,"isConst":false,"constraint":"keyof T[K1][K2][K3][K4]","variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Use {@link map} and optional chaining: `pluck('foo', 'bar')` is `map(x => x?.foo?.bar)`. Will be removed in v8."}]}],"hasDeclareKeyword":false,"parameters":[{"name":"k1","type":"K1","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"k2","type":"K2","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"k3","type":"K3","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"k4","type":"K4","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"k5","type":"K5","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, T[K1][K2][K3][K4][K5]>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"pluck","modulePath":"..\\src\\internal\\operators\\pluck.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"K1","kind":39,"isConst":false,"constraint":"keyof T","variance":0},{"name":"K2","kind":39,"isConst":false,"constraint":"keyof T[K1]","variance":0},{"name":"K3","kind":39,"isConst":false,"constraint":"keyof T[K1][K2]","variance":0},{"name":"K4","kind":39,"isConst":false,"constraint":"keyof T[K1][K2][K3]","variance":0},{"name":"K5","kind":39,"isConst":false,"constraint":"keyof T[K1][K2][K3][K4]","variance":0},{"name":"K6","kind":39,"isConst":false,"constraint":"keyof T[K1][K2][K3][K4][K5]","variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Use {@link map} and optional chaining: `pluck('foo', 'bar')` is `map(x => x?.foo?.bar)`. Will be removed in v8."}]}],"hasDeclareKeyword":false,"parameters":[{"name":"k1","type":"K1","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"k2","type":"K2","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"k3","type":"K3","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"k4","type":"K4","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"k5","type":"K5","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"k6","type":"K6","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, T[K1][K2][K3][K4][K5][K6]>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"pluck","modulePath":"..\\src\\internal\\operators\\pluck.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"K1","kind":39,"isConst":false,"constraint":"keyof T","variance":0},{"name":"K2","kind":39,"isConst":false,"constraint":"keyof T[K1]","variance":0},{"name":"K3","kind":39,"isConst":false,"constraint":"keyof T[K1][K2]","variance":0},{"name":"K4","kind":39,"isConst":false,"constraint":"keyof T[K1][K2][K3]","variance":0},{"name":"K5","kind":39,"isConst":false,"constraint":"keyof T[K1][K2][K3][K4]","variance":0},{"name":"K6","kind":39,"isConst":false,"constraint":"keyof T[K1][K2][K3][K4][K5]","variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Use {@link map} and optional chaining: `pluck('foo', 'bar')` is `map(x => x?.foo?.bar)`. Will be removed in v8."}]}],"hasDeclareKeyword":false,"parameters":[{"name":"k1","type":"K1","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"k2","type":"K2","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"k3","type":"K3","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"k4","type":"K4","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"k5","type":"K5","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"k6","type":"K6","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"rest","type":"string[]","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":true}],"returnType":"OperatorFunction<T, unknown>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"pluck","modulePath":"..\\src\\internal\\operators\\pluck.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Use {@link map} and optional chaining: `pluck('foo', 'bar')` is `map(x => x?.foo?.bar)`. Will be removed in v8."}]}],"hasDeclareKeyword":false,"parameters":[{"name":"properties","type":"string[]","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":true}],"returnType":"OperatorFunction<T, unknown>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"pluck","modulePath":"..\\src\\internal\\operators\\pluck.ts"}]}},"usabilityResult":{"index":1}},"..\\src\\internal\\operators\\publish.ts":{"moduleComponents":{"publish":{"kind":13,"usabilityResult":{"index":0},"sources":[{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nReturns a connectable observable that, when connected, will multicast\r\nall values through a single underlying {@link Subject} instance.\r\n","tags":[{"kind":25,"tagName":"deprecated","text":"Will be removed in v8. To create a connectable observable, use {@link connectable}.\r\n`source.pipe(publish())` is equivalent to\r\n`connectable(source, { connector: () => new Subject(), resetOnDisconnect: false })`.\r\nIf you're using {@link refCount} after `publish`, use {@link share} operator instead.\r\n`source.pipe(publish(), refCount())` is equivalent to\r\n`source.pipe(share({ resetOnError: false, resetOnComplete: false, resetOnRefCountZero: false }))`.\r\nDetails: https://rxjs.dev/deprecations/multicasting"}]}],"hasDeclareKeyword":false,"parameters":[],"returnType":"UnaryFunction<Observable<T>, ConnectableObservable<T>>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"publish","modulePath":"..\\src\\internal\\operators\\publish.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"O","kind":39,"isConst":false,"constraint":"ObservableInput<any>","variance":0}],"docs":[{"kind":24,"description":"\r\nReturns an observable, that when subscribed to, creates an underlying {@link Subject},\r\nprovides an observable view of it to a `selector` function, takes the observable result of\r\nthat selector function and subscribes to it, sending its values to the consumer, _then_ connects\r\nthe subject to the original source.\r\n","tags":[{"kind":25,"tagName":"param","text":"selector A function used to setup multicasting prior to automatic connection."},{"kind":25,"tagName":"deprecated","text":"Will be removed in v8. Use the {@link connect} operator instead.\r\n`publish(selector)` is equivalent to `connect(selector)`.\r\nDetails: https://rxjs.dev/deprecations/multicasting"}]}],"hasDeclareKeyword":false,"parameters":[{"name":"selector","type":"(shared: Observable<T>) => O","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, ObservedValueOf<O>>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"publish","modulePath":"..\\src\\internal\\operators\\publish.ts"}]}},"usabilityResult":{"index":0}},"..\\src\\internal\\operators\\publishReplay.ts":{"moduleComponents":{"publishReplay":{"kind":13,"usabilityResult":{"index":1},"sources":[{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nCreates a {@link ConnectableObservable} that uses a {@link ReplaySubject}\r\ninternally.\r\n","tags":[{"kind":25,"tagName":"param","text":"bufferSize The buffer size for the underlying {@link ReplaySubject}."},{"kind":25,"tagName":"param","text":"windowTime The window time for the underlying {@link ReplaySubject}."},{"kind":25,"tagName":"param","text":"timestampProvider The timestamp provider for the underlying {@link ReplaySubject}."},{"kind":25,"tagName":"deprecated","text":"Will be removed in v8. To create a connectable observable that uses a\r\n{@link ReplaySubject} under the hood, use {@link connectable}.\r\n`source.pipe(publishReplay(size, time, scheduler))` is equivalent to\r\n`connectable(source, { connector: () => new ReplaySubject(size, time, scheduler), resetOnDisconnect: false })`.\r\nIf you're using {@link refCount} after `publishReplay`, use the {@link share} operator instead.\r\n`publishReplay(size, time, scheduler), refCount()` is equivalent to\r\n`share({ connector: () => new ReplaySubject(size, time, scheduler), resetOnError: false, resetOnComplete: false, resetOnRefCountZero: false })`.\r\nDetails: https://rxjs.dev/deprecations/multicasting"}]}],"hasDeclareKeyword":false,"parameters":[{"name":"bufferSize","type":"number","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"windowTime","type":"number","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"timestampProvider","type":"TimestampProvider","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"MonoTypeOperatorFunction<T>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"publishReplay","modulePath":"..\\src\\internal\\operators\\publishReplay.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"O","kind":39,"isConst":false,"constraint":"ObservableInput<any>","variance":0}],"docs":[{"kind":24,"description":"\r\nCreates an observable, that when subscribed to, will create a {@link ReplaySubject},\r\nand pass an observable from it (using [asObservable](api/index/class/Subject#asObservable)) to\r\nthe `selector` function, which then returns an observable that is subscribed to before\r\n\"connecting\" the source to the internal `ReplaySubject`.\r\n\r\nSince this is deprecated, for additional details see the documentation for {@link connect}.\r\n","tags":[{"kind":25,"tagName":"param","text":"bufferSize The buffer size for the underlying {@link ReplaySubject}."},{"kind":25,"tagName":"param","text":"windowTime The window time for the underlying {@link ReplaySubject}."},{"kind":25,"tagName":"param","text":"selector A function used to setup the multicast."},{"kind":25,"tagName":"param","text":"timestampProvider The timestamp provider for the underlying {@link ReplaySubject}."},{"kind":25,"tagName":"deprecated","text":"Will be removed in v8. Use the {@link connect} operator instead.\r\n`source.pipe(publishReplay(size, window, selector, scheduler))` is equivalent to\r\n`source.pipe(connect(selector, { connector: () => new ReplaySubject(size, window, scheduler) }))`.\r\nDetails: https://rxjs.dev/deprecations/multicasting"}]}],"hasDeclareKeyword":false,"parameters":[{"name":"bufferSize","type":"number | undefined","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"windowTime","type":"number | undefined","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"selector","type":"(shared: Observable<T>) => O","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"timestampProvider","type":"TimestampProvider","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, ObservedValueOf<O>>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"publishReplay","modulePath":"..\\src\\internal\\operators\\publishReplay.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"O","kind":39,"isConst":false,"constraint":"ObservableInput<any>","variance":0}],"docs":[{"kind":24,"description":"\r\nCreates a {@link ConnectableObservable} that uses a {@link ReplaySubject}\r\ninternally.\r\n","tags":[{"kind":25,"tagName":"param","text":"bufferSize The buffer size for the underlying {@link ReplaySubject}."},{"kind":25,"tagName":"param","text":"windowTime The window time for the underlying {@link ReplaySubject}."},{"kind":25,"tagName":"param","text":"selector Passing `undefined` here determines that this operator will return a {@link ConnectableObservable}."},{"kind":25,"tagName":"param","text":"timestampProvider The timestamp provider for the underlying {@link ReplaySubject}."},{"kind":25,"tagName":"deprecated","text":"Will be removed in v8. To create a connectable observable that uses a\r\n{@link ReplaySubject} under the hood, use {@link connectable}.\r\n`source.pipe(publishReplay(size, time, scheduler))` is equivalent to\r\n`connectable(source, { connector: () => new ReplaySubject(size, time, scheduler), resetOnDisconnect: false })`.\r\nIf you're using {@link refCount} after `publishReplay`, use the {@link share} operator instead.\r\n`publishReplay(size, time, scheduler), refCount()` is equivalent to\r\n`share({ connector: () => new ReplaySubject(size, time, scheduler), resetOnError: false, resetOnComplete: false, resetOnRefCountZero: false })`.\r\nDetails: https://rxjs.dev/deprecations/multicasting"}]}],"hasDeclareKeyword":false,"parameters":[{"name":"bufferSize","type":"number | undefined","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"windowTime","type":"number | undefined","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"selector","type":"undefined","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"timestampProvider","type":"TimestampProvider","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, ObservedValueOf<O>>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"publishReplay","modulePath":"..\\src\\internal\\operators\\publishReplay.ts"}]}},"usabilityResult":{"index":1}},"..\\src\\internal\\operators\\reduce.ts":{"moduleComponents":{"reduce":{"kind":13,"usabilityResult":{"index":1},"sources":[{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"V","kind":39,"isConst":false,"variance":0},{"name":"A","kind":39,"isConst":false,"default":"V","variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"accumulator","type":"(acc: A | V, value: V, index: number) => A","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<V, V | A>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"reduce","modulePath":"..\\src\\internal\\operators\\reduce.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"V","kind":39,"isConst":false,"variance":0},{"name":"A","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"accumulator","type":"(acc: A, value: V, index: number) => A","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"seed","type":"A","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<V, A>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"reduce","modulePath":"..\\src\\internal\\operators\\reduce.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"V","kind":39,"isConst":false,"variance":0},{"name":"A","kind":39,"isConst":false,"variance":0},{"name":"S","kind":39,"isConst":false,"default":"A","variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"accumulator","type":"(acc: A | S, value: V, index: number) => A","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"seed","type":"S","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<V, A>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"reduce","modulePath":"..\\src\\internal\\operators\\reduce.ts"}]}},"usabilityResult":{"index":1}},"..\\src\\internal\\operators\\retry.ts":{"moduleComponents":{"retry":{"kind":13,"usabilityResult":{"index":1},"sources":[{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"count","type":"number","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"MonoTypeOperatorFunction<T>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"retry","modulePath":"..\\src\\internal\\operators\\retry.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"config","type":"RetryConfig","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"MonoTypeOperatorFunction<T>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"retry","modulePath":"..\\src\\internal\\operators\\retry.ts"}]}},"usabilityResult":{"index":1}},"..\\src\\internal\\operators\\scan.ts":{"moduleComponents":{"scan":{"kind":13,"usabilityResult":{"index":1},"sources":[{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"V","kind":39,"isConst":false,"variance":0},{"name":"A","kind":39,"isConst":false,"default":"V","variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"accumulator","type":"(acc: A | V, value: V, index: number) => A","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<V, V | A>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"scan","modulePath":"..\\src\\internal\\operators\\scan.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"V","kind":39,"isConst":false,"variance":0},{"name":"A","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"accumulator","type":"(acc: A, value: V, index: number) => A","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"seed","type":"A","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<V, A>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"scan","modulePath":"..\\src\\internal\\operators\\scan.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"V","kind":39,"isConst":false,"variance":0},{"name":"A","kind":39,"isConst":false,"variance":0},{"name":"S","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"accumulator","type":"(acc: A | S, value: V, index: number) => A","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"seed","type":"S","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<V, A>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"scan","modulePath":"..\\src\\internal\\operators\\scan.ts"}]}},"usabilityResult":{"index":1}},"..\\src\\internal\\operators\\share.ts":{"moduleComponents":{"share":{"kind":13,"usabilityResult":{"index":1},"sources":[{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[],"returnType":"MonoTypeOperatorFunction<T>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"share","modulePath":"..\\src\\internal\\operators\\share.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"options","type":"ShareConfig<T>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"MonoTypeOperatorFunction<T>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"share","modulePath":"..\\src\\internal\\operators\\share.ts"}]}},"usabilityResult":{"index":1}},"..\\src\\internal\\operators\\shareReplay.ts":{"moduleComponents":{"shareReplay":{"kind":13,"usabilityResult":{"index":1},"sources":[{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"config","type":"ShareReplayConfig","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"MonoTypeOperatorFunction<T>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"shareReplay","modulePath":"..\\src\\internal\\operators\\shareReplay.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"bufferSize","type":"number","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"windowTime","type":"number","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"scheduler","type":"SchedulerLike","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"MonoTypeOperatorFunction<T>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"shareReplay","modulePath":"..\\src\\internal\\operators\\shareReplay.ts"}]}},"usabilityResult":{"index":1}},"..\\src\\internal\\operators\\single.ts":{"moduleComponents":{"single":{"kind":13,"usabilityResult":{"index":1},"sources":[{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"predicate","type":"BooleanConstructor","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, TruthyTypesOf<T>>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"single","modulePath":"..\\src\\internal\\operators\\single.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"predicate","type":"(value: T, index: number, source: Observable<T>) => boolean","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"MonoTypeOperatorFunction<T>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"single","modulePath":"..\\src\\internal\\operators\\single.ts"}]}},"usabilityResult":{"index":1}},"..\\src\\internal\\operators\\skipWhile.ts":{"moduleComponents":{"skipWhile":{"kind":13,"usabilityResult":{"index":0.5},"sources":[{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"predicate","type":"BooleanConstructor","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, Extract<T, Falsy> extends never ? never : T>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"skipWhile","modulePath":"..\\src\\internal\\operators\\skipWhile.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"predicate","type":"(value: T, index: number) => true","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, never>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"skipWhile","modulePath":"..\\src\\internal\\operators\\skipWhile.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"predicate","type":"(value: T, index: number) => boolean","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"MonoTypeOperatorFunction<T>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"skipWhile","modulePath":"..\\src\\internal\\operators\\skipWhile.ts"}]}},"usabilityResult":{"index":0.5}},"..\\src\\internal\\operators\\startWith.ts":{"moduleComponents":{"startWith":{"kind":13,"usabilityResult":{"index":1},"sources":[{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"value","type":"null","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, T | null>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"startWith","modulePath":"..\\src\\internal\\operators\\startWith.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"value","type":"undefined","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, T | undefined>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"startWith","modulePath":"..\\src\\internal\\operators\\startWith.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"A","kind":39,"isConst":false,"constraint":"readonly unknown[]","default":"T[]","variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"The `scheduler` parameter will be removed in v8. Use `scheduled` and `concatAll`. Details: https://rxjs.dev/deprecations/scheduler-argument"}]}],"hasDeclareKeyword":false,"parameters":[{"name":"valuesAndScheduler","type":"[...A, SchedulerLike]","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":true}],"returnType":"OperatorFunction<T, T | ValueFromArray<A>>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"startWith","modulePath":"..\\src\\internal\\operators\\startWith.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"A","kind":39,"isConst":false,"constraint":"readonly unknown[]","default":"T[]","variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"values","type":"A","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":true}],"returnType":"OperatorFunction<T, T | ValueFromArray<A>>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"startWith","modulePath":"..\\src\\internal\\operators\\startWith.ts"}]}},"usabilityResult":{"index":1}},"..\\src\\internal\\operators\\switchMap.ts":{"moduleComponents":{"switchMap":{"kind":13,"usabilityResult":{"index":1},"sources":[{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"O","kind":39,"isConst":false,"constraint":"ObservableInput<any>","variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"project","type":"(value: T, index: number) => O","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, ObservedValueOf<O>>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"switchMap","modulePath":"..\\src\\internal\\operators\\switchMap.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"O","kind":39,"isConst":false,"constraint":"ObservableInput<any>","variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"The `resultSelector` parameter will be removed in v8. Use an inner `map` instead. Details: https://rxjs.dev/deprecations/resultSelector"}]}],"hasDeclareKeyword":false,"parameters":[{"name":"project","type":"(value: T, index: number) => O","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"resultSelector","type":"undefined","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, ObservedValueOf<O>>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"switchMap","modulePath":"..\\src\\internal\\operators\\switchMap.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"R","kind":39,"isConst":false,"variance":0},{"name":"O","kind":39,"isConst":false,"constraint":"ObservableInput<any>","variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"The `resultSelector` parameter will be removed in v8. Use an inner `map` instead. Details: https://rxjs.dev/deprecations/resultSelector"}]}],"hasDeclareKeyword":false,"parameters":[{"name":"project","type":"(value: T, index: number) => O","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"resultSelector","type":"(outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, R>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"switchMap","modulePath":"..\\src\\internal\\operators\\switchMap.ts"}]}},"usabilityResult":{"index":1}},"..\\src\\internal\\operators\\switchMapTo.ts":{"moduleComponents":{"switchMapTo":{"kind":13,"usabilityResult":{"index":1},"sources":[{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"O","kind":39,"isConst":false,"constraint":"ObservableInput<unknown>","variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Will be removed in v9. Use {@link switchMap} instead: `switchMap(() => result)`"}]}],"hasDeclareKeyword":false,"parameters":[{"name":"observable","type":"O","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<unknown, ObservedValueOf<O>>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"switchMapTo","modulePath":"..\\src\\internal\\operators\\switchMapTo.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"O","kind":39,"isConst":false,"constraint":"ObservableInput<unknown>","variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"The `resultSelector` parameter will be removed in v8. Use an inner `map` instead. Details: https://rxjs.dev/deprecations/resultSelector"}]}],"hasDeclareKeyword":false,"parameters":[{"name":"observable","type":"O","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"resultSelector","type":"undefined","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<unknown, ObservedValueOf<O>>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"switchMapTo","modulePath":"..\\src\\internal\\operators\\switchMapTo.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"R","kind":39,"isConst":false,"variance":0},{"name":"O","kind":39,"isConst":false,"constraint":"ObservableInput<unknown>","variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"The `resultSelector` parameter will be removed in v8. Use an inner `map` instead. Details: https://rxjs.dev/deprecations/resultSelector"}]}],"hasDeclareKeyword":false,"parameters":[{"name":"observable","type":"O","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"resultSelector","type":"(outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, R>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"switchMapTo","modulePath":"..\\src\\internal\\operators\\switchMapTo.ts"}]}},"usabilityResult":{"index":1}},"..\\src\\internal\\operators\\takeWhile.ts":{"moduleComponents":{"takeWhile":{"kind":13,"usabilityResult":{"index":1},"sources":[{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"predicate","type":"BooleanConstructor","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"inclusive","type":"true","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"MonoTypeOperatorFunction<T>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"takeWhile","modulePath":"..\\src\\internal\\operators\\takeWhile.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"predicate","type":"BooleanConstructor","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"inclusive","type":"false","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, TruthyTypesOf<T>>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"takeWhile","modulePath":"..\\src\\internal\\operators\\takeWhile.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"predicate","type":"BooleanConstructor","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, TruthyTypesOf<T>>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"takeWhile","modulePath":"..\\src\\internal\\operators\\takeWhile.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"S","kind":39,"isConst":false,"constraint":"T","variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"predicate","type":"(value: T, index: number) => value is S","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, S>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"takeWhile","modulePath":"..\\src\\internal\\operators\\takeWhile.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"S","kind":39,"isConst":false,"constraint":"T","variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"predicate","type":"(value: T, index: number) => value is S","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"inclusive","type":"false","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, S>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"takeWhile","modulePath":"..\\src\\internal\\operators\\takeWhile.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"predicate","type":"(value: T, index: number) => boolean","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"inclusive","type":"boolean","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"MonoTypeOperatorFunction<T>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"takeWhile","modulePath":"..\\src\\internal\\operators\\takeWhile.ts"}]}},"usabilityResult":{"index":1}},"..\\src\\internal\\operators\\tap.ts":{"moduleComponents":{"tap":{"kind":13,"usabilityResult":{"index":1},"sources":[{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"observerOrNext","type":"Partial<TapObserver<T>> | ((value: T) => void)","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"MonoTypeOperatorFunction<T>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"tap","modulePath":"..\\src\\internal\\operators\\tap.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Instead of passing separate callback arguments, use an observer argument. Signatures taking separate callback arguments will be removed in v8. Details: https://rxjs.dev/deprecations/subscribe-arguments"}]}],"hasDeclareKeyword":false,"parameters":[{"name":"next","type":"((value: T) => void) | null","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"error","type":"((error: any) => void) | null","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"complete","type":"(() => void) | null","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"MonoTypeOperatorFunction<T>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"tap","modulePath":"..\\src\\internal\\operators\\tap.ts"}]}},"usabilityResult":{"index":1}},"..\\src\\internal\\operators\\timeout.ts":{"moduleComponents":{"timeout":{"kind":13,"usabilityResult":{"index":1},"sources":[{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"O","kind":39,"isConst":false,"constraint":"ObservableInput<unknown>","variance":0},{"name":"M","kind":39,"isConst":false,"default":"unknown","variance":0}],"docs":[{"kind":24,"description":"\r\nIf `with` is provided, this will return an observable that will switch to a different observable if the source\r\ndoes not push values within the specified time parameters.\r\n\r\n<span class=\"informal\">The most flexible option for creating a timeout behavior.</span>\r\n\r\nThe first thing to know about the configuration is if you do not provide a `with` property to the configuration,\r\nwhen timeout conditions are met, this operator will emit a {@link TimeoutError}. Otherwise, it will use the factory\r\nfunction provided by `with`, and switch your subscription to the result of that. Timeout conditions are provided by\r\nthe settings in `first` and `each`.\r\n\r\nThe `first` property can be either a `Date` for a specific time, a `number` for a time period relative to the\r\npoint of subscription, or it can be skipped. This property is to check timeout conditions for the arrival of\r\nthe first value from the source _only_. The timings of all subsequent values  from the source will be checked\r\nagainst the time period provided by `each`, if it was provided.\r\n\r\nThe `each` property can be either a `number` or skipped. If a value for `each` is provided, it represents the amount of\r\ntime the resulting observable will wait between the arrival of values from the source before timing out. Note that if\r\n`first` is _not_ provided, the value from `each` will be used to check timeout conditions for the arrival of the first\r\nvalue and all subsequent values. If `first` _is_ provided, `each` will only be use to check all values after the first.\r\n\r\n## Examples\r\n\r\nEmit a custom error if there is too much time between values\r\n\r\n```ts\r\nimport { interval, timeout, throwError } from 'rxjs';\r\n\r\nclass CustomTimeoutError extends Error {\r\n  constructor() {\r\n    super('It was too slow');\r\n    this.name = 'CustomTimeoutError';\r\n  }\r\n}\r\n\r\nconst slow$ = interval(900);\r\n\r\nslow$.pipe(\r\n  timeout({\r\n    each: 1000,\r\n    with: () => throwError(() => new CustomTimeoutError())\r\n  })\r\n)\r\n.subscribe({\r\n  error: console.error\r\n});\r\n```\r\n\r\nSwitch to a faster observable if your source is slow.\r\n\r\n```ts\r\nimport { interval, timeout } from 'rxjs';\r\n\r\nconst slow$ = interval(900);\r\nconst fast$ = interval(500);\r\n\r\nslow$.pipe(\r\n  timeout({\r\n    each: 1000,\r\n    with: () => fast$,\r\n  })\r\n)\r\n.subscribe(console.log);\r\n```","tags":[{"kind":25,"tagName":"param","text":"config The configuration for the timeout."}]}],"hasDeclareKeyword":false,"parameters":[{"name":"config","type":"TimeoutConfig<T, O, M> & { with: (info: TimeoutInfo<T, M>) => O }","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, T | ObservedValueOf<O>>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"timeout","modulePath":"..\\src\\internal\\operators\\timeout.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"M","kind":39,"isConst":false,"default":"unknown","variance":0}],"docs":[{"kind":24,"description":"\r\nReturns an observable that will error or switch to a different observable if the source does not push values\r\nwithin the specified time parameters.\r\n\r\n<span class=\"informal\">The most flexible option for creating a timeout behavior.</span>\r\n\r\nThe first thing to know about the configuration is if you do not provide a `with` property to the configuration,\r\nwhen timeout conditions are met, this operator will emit a {@link TimeoutError}. Otherwise, it will use the factory\r\nfunction provided by `with`, and switch your subscription to the result of that. Timeout conditions are provided by\r\nthe settings in `first` and `each`.\r\n\r\nThe `first` property can be either a `Date` for a specific time, a `number` for a time period relative to the\r\npoint of subscription, or it can be skipped. This property is to check timeout conditions for the arrival of\r\nthe first value from the source _only_. The timings of all subsequent values  from the source will be checked\r\nagainst the time period provided by `each`, if it was provided.\r\n\r\nThe `each` property can be either a `number` or skipped. If a value for `each` is provided, it represents the amount of\r\ntime the resulting observable will wait between the arrival of values from the source before timing out. Note that if\r\n`first` is _not_ provided, the value from `each` will be used to check timeout conditions for the arrival of the first\r\nvalue and all subsequent values. If `first` _is_ provided, `each` will only be use to check all values after the first.\r\n\r\n### Handling TimeoutErrors\r\n\r\nIf no `with` property was provided, subscriptions to the resulting observable may emit an error of {@link TimeoutError}.\r\nThe timeout error provides useful information you can examine when you're handling the error. The most common way to handle\r\nthe error would be with {@link catchError}, although you could use {@link tap} or just the error handler in your `subscribe` call\r\ndirectly, if your error handling is only a side effect (such as notifying the user, or logging).\r\n\r\nIn this case, you would check the error for `instanceof TimeoutError` to validate that the error was indeed from `timeout`, and\r\nnot from some other source. If it's not from `timeout`, you should probably rethrow it if you're in a `catchError`.\r\n\r\n## Examples\r\n\r\nEmit a {@link TimeoutError} if the first value, and _only_ the first value, does not arrive within 5 seconds\r\n\r\n```ts\r\nimport { interval, timeout } from 'rxjs';\r\n\r\n// A random interval that lasts between 0 and 10 seconds per tick\r\nconst source$ = interval(Math.round(Math.random() * 10_000));\r\n\r\nsource$.pipe(\r\n  timeout({ first: 5_000 })\r\n)\r\n.subscribe({\r\n  next: console.log,\r\n  error: console.error\r\n});\r\n```\r\n\r\nEmit a {@link TimeoutError} if the source waits longer than 5 seconds between any two values or the first value\r\nand subscription.\r\n\r\n```ts\r\nimport { timer, timeout, expand } from 'rxjs';\r\n\r\nconst getRandomTime = () => Math.round(Math.random() * 10_000);\r\n\r\n// An observable that waits a random amount of time between each delivered value\r\nconst source$ = timer(getRandomTime())\r\n  .pipe(expand(() => timer(getRandomTime())));\r\n\r\nsource$\r\n  .pipe(timeout({ each: 5_000 }))\r\n  .subscribe({\r\n    next: console.log,\r\n    error: console.error\r\n  });\r\n```\r\n\r\nEmit a {@link TimeoutError} if the source does not emit before 7 seconds, _or_ if the source waits longer than\r\n5 seconds between any two values after the first.\r\n\r\n```ts\r\nimport { timer, timeout, expand } from 'rxjs';\r\n\r\nconst getRandomTime = () => Math.round(Math.random() * 10_000);\r\n\r\n// An observable that waits a random amount of time between each delivered value\r\nconst source$ = timer(getRandomTime())\r\n  .pipe(expand(() => timer(getRandomTime())));\r\n\r\nsource$\r\n  .pipe(timeout({ first: 7_000, each: 5_000 }))\r\n  .subscribe({\r\n    next: console.log,\r\n    error: console.error\r\n  });\r\n```","tags":[]}],"hasDeclareKeyword":false,"parameters":[{"name":"config","type":"Omit<TimeoutConfig<T, any, M>, 'with'>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, T>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"timeout","modulePath":"..\\src\\internal\\operators\\timeout.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nReturns an observable that will error if the source does not push its first value before the specified time passed as a `Date`.\r\nThis is functionally the same as `timeout({ first: someDate })`.\r\n\r\n<span class=\"informal\">Errors if the first value doesn't show up before the given date and time</span>\r\n\r\n![](timeout.png)\r\n","tags":[{"kind":25,"tagName":"param","text":"first The date to at which the resulting observable will timeout if the source observable\r\ndoes not emit at least one value."},{"kind":25,"tagName":"param","text":"scheduler The scheduler to use. Defaults to {@link asyncScheduler}."}]}],"hasDeclareKeyword":false,"parameters":[{"name":"first","type":"Date","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"scheduler","type":"SchedulerLike","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"MonoTypeOperatorFunction<T>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"timeout","modulePath":"..\\src\\internal\\operators\\timeout.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nReturns an observable that will error if the source does not push a value within the specified time in milliseconds.\r\nThis is functionally the same as `timeout({ each: milliseconds })`.\r\n\r\n<span class=\"informal\">Errors if it waits too long between any value</span>\r\n\r\n![](timeout.png)\r\n","tags":[{"kind":25,"tagName":"param","text":"each The time allowed between each pushed value from the source before the resulting observable\r\nwill timeout."},{"kind":25,"tagName":"param","text":"scheduler The scheduler to use. Defaults to {@link asyncScheduler}."}]}],"hasDeclareKeyword":false,"parameters":[{"name":"each","type":"number","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"scheduler","type":"SchedulerLike","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"MonoTypeOperatorFunction<T>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"timeout","modulePath":"..\\src\\internal\\operators\\timeout.ts"}]}},"usabilityResult":{"index":1}},"..\\src\\internal\\operators\\timeoutWith.ts":{"moduleComponents":{"timeoutWith":{"kind":13,"usabilityResult":{"index":1},"sources":[{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"R","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Replaced with {@link timeout}. Instead of `timeoutWith(someDate, a$, scheduler)`, use the configuration object\r\n`timeout({ first: someDate, with: () => a$, scheduler })`. Will be removed in v8."}]}],"hasDeclareKeyword":false,"parameters":[{"name":"dueBy","type":"Date","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"switchTo","type":"ObservableInput<R>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"scheduler","type":"SchedulerLike","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, T | R>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"timeoutWith","modulePath":"..\\src\\internal\\operators\\timeoutWith.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"R","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Replaced with {@link timeout}. Instead of `timeoutWith(100, a$, scheduler)`, use the configuration object\r\n `timeout({ each: 100, with: () => a$, scheduler })`. Will be removed in v8."}]}],"hasDeclareKeyword":false,"parameters":[{"name":"waitFor","type":"number","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"switchTo","type":"ObservableInput<R>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"scheduler","type":"SchedulerLike","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, T | R>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"timeoutWith","modulePath":"..\\src\\internal\\operators\\timeoutWith.ts"}]}},"usabilityResult":{"index":1}},"..\\src\\internal\\operators\\windowTime.ts":{"moduleComponents":{"windowTime":{"kind":13,"usabilityResult":{"index":1},"sources":[{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"windowTimeSpan","type":"number","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"scheduler","type":"SchedulerLike","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, Observable<T>>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"windowTime","modulePath":"..\\src\\internal\\operators\\windowTime.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"windowTimeSpan","type":"number","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"windowCreationInterval","type":"number","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"scheduler","type":"SchedulerLike","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, Observable<T>>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"windowTime","modulePath":"..\\src\\internal\\operators\\windowTime.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"windowTimeSpan","type":"number","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"windowCreationInterval","type":"number | null | void","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"maxWindowSize","type":"number","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"scheduler","type":"SchedulerLike","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, Observable<T>>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"windowTime","modulePath":"..\\src\\internal\\operators\\windowTime.ts"}]}},"usabilityResult":{"index":1}},"..\\src\\internal\\operators\\withLatestFrom.ts":{"moduleComponents":{"withLatestFrom":{"kind":13,"usabilityResult":{"index":1},"sources":[{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"O","kind":39,"isConst":false,"constraint":"unknown[]","variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"inputs","type":"[...ObservableInputTuple<O>]","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":true}],"returnType":"OperatorFunction<T, [T, ...O]>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"withLatestFrom","modulePath":"..\\src\\internal\\operators\\withLatestFrom.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"O","kind":39,"isConst":false,"constraint":"unknown[]","variance":0},{"name":"R","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"inputs","type":"[...ObservableInputTuple<O>, (...value: [T, ...O]) => R]","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":true}],"returnType":"OperatorFunction<T, R>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"withLatestFrom","modulePath":"..\\src\\internal\\operators\\withLatestFrom.ts"}]}},"usabilityResult":{"index":1}},"..\\src\\internal\\operators\\zipAll.ts":{"moduleComponents":{"zipAll":{"kind":13,"usabilityResult":{"index":1},"sources":[{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nCollects all observable inner sources from the source, once the source completes,\r\nit will subscribe to all inner sources, combining their values by index and emitting\r\nthem.\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link zipWith}"},{"kind":25,"tagName":"see","text":"{@link zip}"}]}],"hasDeclareKeyword":false,"parameters":[],"returnType":"OperatorFunction<ObservableInput<T>, T[]>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"zipAll","modulePath":"..\\src\\internal\\operators\\zipAll.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[],"returnType":"OperatorFunction<any, T[]>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"zipAll","modulePath":"..\\src\\internal\\operators\\zipAll.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"R","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"project","type":"(...values: T[]) => R","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<ObservableInput<T>, R>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"zipAll","modulePath":"..\\src\\internal\\operators\\zipAll.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"R","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"project","type":"(...values: Array<any>) => R","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<any, R>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"zipAll","modulePath":"..\\src\\internal\\operators\\zipAll.ts"}]}},"usabilityResult":{"index":1}}}}