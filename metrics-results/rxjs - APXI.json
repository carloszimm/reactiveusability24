{"projectName":"rxjs","metric":"APXI","usabilityResult":{"paramLengthComplexity":0.9930288808710203,"paramSequenceComplexity":0.8855404879733739,"index":0.9392846844221971},"modules":{"..\\src\\internal\\Observable.ts":{"moduleComponents":{"Observable":{"kind":2,"usabilityResult":{"index":0.8499367063784207,"paramLengthComplexity":0.9178868807703092,"paramSequenceComplexity":0.781986531986532},"methods":[{"methodName":"lift","usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":1,"index":1},"sources":[{"source":{"name":"lift","statements":[{"isExported":false,"isDefaultExport":false,"hasDeclareKeyword":false,"docs":[],"kind":41,"declarationKind":"const","declarations":[{"name":"observable","initializer":"new Observable<R>()","hasExclamationToken":false,"kind":40}]},"observable.source = this;","observable.operator = operator;","return observable;"],"parameters":[{"name":"operator","type":"Operator<T, R>","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<R>","typeParameters":[{"name":"R","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nCreates a new Observable, with this Observable instance as the source, and the passed\r\noperator defined as the new observable's operator.","tags":[{"kind":25,"tagName":"method","text":"lift"},{"kind":25,"tagName":"param","text":"operator the operator defining the operation to take on the observable"},{"kind":25,"tagName":"return","text":"a new observable with the Operator applied"},{"kind":25,"tagName":"deprecated","text":"Internal implementation detail, do not use directly. Will be made internal in v8.\r\nIf you have implemented an operator using `lift`, it is recommended that you create an\r\noperator by simply returning `new Observable()` directly. See \"Creating new operators from\r\nscratch\" section here: https://rxjs.dev/guide/operators"}]}],"isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"isAbstract":false,"decorators":[],"hasOverrideKeyword":false,"kind":26,"overloads":[],"declarationInfo":{"className":"Observable","modulePath":"..\\src\\internal\\Observable.ts"},"classStructure":{"decorators":[],"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nA representation of any set of values over any amount of time. This is the most basic building block\r\nof RxJS.\r\n","tags":[{"kind":25,"tagName":"class","text":"Observable<T>"}]}],"isAbstract":false,"implements":["Subscribable<T>"],"name":"Observable","isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"kind":2,"ctors":[{"statements":["if (subscribe) {\r\n  this._subscribe = subscribe;\r\n}"],"parameters":[{"name":"subscribe","type":"(this: Observable<T>, subscriber: Subscriber<T>) => TeardownLogic","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"typeParameters":[],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"constructor"},{"kind":25,"tagName":"param","text":"{Function} subscribe the function that is called when the Observable is\r\ninitially subscribed to. This function is given a Subscriber, to which new values\r\ncan be `next`ed, or an `error` method can be called to raise an error, or\r\n`complete` can be called to notify of a successful completion."}]}],"kind":5,"overloads":[]}],"properties":[{"name":"source","type":"Observable<any> | undefined","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Internal implementation detail, do not use directly. Will be made internal in v8."}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"operator","type":"Operator<any, T> | undefined","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Internal implementation detail, do not use directly. Will be made internal in v8."}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"create","type":"(...args: any[]) => any","initializer":"<T>(subscribe?: (subscriber: Subscriber<T>) => TeardownLogic) => {\r\n    return new Observable<T>(subscribe);\r\n  }","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"\r\nCreates a new Observable by calling the Observable constructor","tags":[{"kind":25,"tagName":"owner","text":"Observable"},{"kind":25,"tagName":"method","text":"create"},{"kind":25,"tagName":"param","text":"{Function} subscribe? the subscriber function to be passed to the Observable constructor"},{"kind":25,"tagName":"return","text":"{Observable} a new observable"},{"kind":25,"tagName":"nocollapse"},{"kind":25,"tagName":"deprecated","text":"Use `new Observable()` instead. Will be removed in v8."}]}],"isStatic":true,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false}],"getAccessors":[],"setAccessors":[]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]},{"methodName":"subscribe","usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":0.5,"index":0.75},"sources":[{"source":{"parameters":[{"name":"observerOrNext","type":"Partial<Observer<T>> | ((value: T) => void)","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Subscription","isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"isAbstract":false,"typeParameters":[],"hasOverrideKeyword":false,"docs":[],"kind":27,"declarationInfo":{"className":"Observable","modulePath":"..\\src\\internal\\Observable.ts"},"classStructure":{"decorators":[],"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nA representation of any set of values over any amount of time. This is the most basic building block\r\nof RxJS.\r\n","tags":[{"kind":25,"tagName":"class","text":"Observable<T>"}]}],"isAbstract":false,"implements":["Subscribable<T>"],"name":"Observable","isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"kind":2,"ctors":[{"statements":["if (subscribe) {\r\n  this._subscribe = subscribe;\r\n}"],"parameters":[{"name":"subscribe","type":"(this: Observable<T>, subscriber: Subscriber<T>) => TeardownLogic","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"typeParameters":[],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"constructor"},{"kind":25,"tagName":"param","text":"{Function} subscribe the function that is called when the Observable is\r\ninitially subscribed to. This function is given a Subscriber, to which new values\r\ncan be `next`ed, or an `error` method can be called to raise an error, or\r\n`complete` can be called to notify of a successful completion."}]}],"kind":5,"overloads":[]}],"properties":[{"name":"source","type":"Observable<any> | undefined","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Internal implementation detail, do not use directly. Will be made internal in v8."}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"operator","type":"Operator<any, T> | undefined","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Internal implementation detail, do not use directly. Will be made internal in v8."}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"create","type":"(...args: any[]) => any","initializer":"<T>(subscribe?: (subscriber: Subscriber<T>) => TeardownLogic) => {\r\n    return new Observable<T>(subscribe);\r\n  }","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"\r\nCreates a new Observable by calling the Observable constructor","tags":[{"kind":25,"tagName":"owner","text":"Observable"},{"kind":25,"tagName":"method","text":"create"},{"kind":25,"tagName":"param","text":"{Function} subscribe? the subscriber function to be passed to the Observable constructor"},{"kind":25,"tagName":"return","text":"{Observable} a new observable"},{"kind":25,"tagName":"nocollapse"},{"kind":25,"tagName":"deprecated","text":"Use `new Observable()` instead. Will be removed in v8."}]}],"isStatic":true,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false}],"getAccessors":[],"setAccessors":[]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},{"source":{"parameters":[{"name":"next","type":"((value: T) => void) | null","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"error","type":"((error: any) => void) | null","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"complete","type":"(() => void) | null","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Subscription","isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"isAbstract":false,"typeParameters":[],"hasOverrideKeyword":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Instead of passing separate callback arguments, use an observer argument. Signatures taking separate callback arguments will be removed in v8. Details: https://rxjs.dev/deprecations/subscribe-arguments"}]}],"kind":27,"declarationInfo":{"className":"Observable","modulePath":"..\\src\\internal\\Observable.ts"},"classStructure":{"decorators":[],"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nA representation of any set of values over any amount of time. This is the most basic building block\r\nof RxJS.\r\n","tags":[{"kind":25,"tagName":"class","text":"Observable<T>"}]}],"isAbstract":false,"implements":["Subscribable<T>"],"name":"Observable","isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"kind":2,"ctors":[{"statements":["if (subscribe) {\r\n  this._subscribe = subscribe;\r\n}"],"parameters":[{"name":"subscribe","type":"(this: Observable<T>, subscriber: Subscriber<T>) => TeardownLogic","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"typeParameters":[],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"constructor"},{"kind":25,"tagName":"param","text":"{Function} subscribe the function that is called when the Observable is\r\ninitially subscribed to. This function is given a Subscriber, to which new values\r\ncan be `next`ed, or an `error` method can be called to raise an error, or\r\n`complete` can be called to notify of a successful completion."}]}],"kind":5,"overloads":[]}],"properties":[{"name":"source","type":"Observable<any> | undefined","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Internal implementation detail, do not use directly. Will be made internal in v8."}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"operator","type":"Operator<any, T> | undefined","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Internal implementation detail, do not use directly. Will be made internal in v8."}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"create","type":"(...args: any[]) => any","initializer":"<T>(subscribe?: (subscriber: Subscriber<T>) => TeardownLogic) => {\r\n    return new Observable<T>(subscribe);\r\n  }","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"\r\nCreates a new Observable by calling the Observable constructor","tags":[{"kind":25,"tagName":"owner","text":"Observable"},{"kind":25,"tagName":"method","text":"create"},{"kind":25,"tagName":"param","text":"{Function} subscribe? the subscriber function to be passed to the Observable constructor"},{"kind":25,"tagName":"return","text":"{Observable} a new observable"},{"kind":25,"tagName":"nocollapse"},{"kind":25,"tagName":"deprecated","text":"Use `new Observable()` instead. Will be removed in v8."}]}],"isStatic":true,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false}],"getAccessors":[],"setAccessors":[]}},"usabilityResult":{"index":0.5,"paramLengthComplexity":1,"paramSequenceComplexity":0}}]},{"methodName":"forEach","usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":1,"index":1},"sources":[{"source":{"parameters":[{"name":"next","type":"(value: T) => void","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Promise<void>","isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"isAbstract":false,"typeParameters":[],"hasOverrideKeyword":false,"docs":[{"kind":24,"description":"\r\nUsed as a NON-CANCELLABLE means of subscribing to an observable, for use with\r\nAPIs that expect promises, like `async/await`. You cannot unsubscribe from this.\r\n\r\n**WARNING**: Only use this with observables you *know* will complete. If the source\r\nobservable does not complete, you will end up with a promise that is hung up, and\r\npotentially all of the state of an async function hanging out in memory. To avoid\r\nthis situation, look into adding something like {@link timeout}, {@link take},\r\n{@link takeWhile}, or {@link takeUntil} amongst others.\r\n\r\n#### Example\r\n\r\n```ts\r\nimport { interval, take } from 'rxjs';\r\n\r\nconst source$ = interval(1000).pipe(take(4));\r\n\r\nasync function getTotal() {\r\n  let total = 0;\r\n\r\n  await source$.forEach(value => {\r\n    total += value;\r\n    console.log('observable -> ' + value);\r\n  });\r\n\r\n  return total;\r\n}\r\n\r\ngetTotal().then(\r\n  total => console.log('Total: ' + total)\r\n);\r\n\r\n// Expected:\r\n// 'observable -> 0'\r\n// 'observable -> 1'\r\n// 'observable -> 2'\r\n// 'observable -> 3'\r\n// 'Total: 6'\r\n```\r\n","tags":[{"kind":25,"tagName":"param","text":"next a handler for each value emitted by the observable"},{"kind":25,"tagName":"return","text":"a promise that either resolves on observable completion or\r\n rejects with the handled error"}]}],"kind":27,"declarationInfo":{"className":"Observable","modulePath":"..\\src\\internal\\Observable.ts"},"classStructure":{"decorators":[],"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nA representation of any set of values over any amount of time. This is the most basic building block\r\nof RxJS.\r\n","tags":[{"kind":25,"tagName":"class","text":"Observable<T>"}]}],"isAbstract":false,"implements":["Subscribable<T>"],"name":"Observable","isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"kind":2,"ctors":[{"statements":["if (subscribe) {\r\n  this._subscribe = subscribe;\r\n}"],"parameters":[{"name":"subscribe","type":"(this: Observable<T>, subscriber: Subscriber<T>) => TeardownLogic","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"typeParameters":[],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"constructor"},{"kind":25,"tagName":"param","text":"{Function} subscribe the function that is called when the Observable is\r\ninitially subscribed to. This function is given a Subscriber, to which new values\r\ncan be `next`ed, or an `error` method can be called to raise an error, or\r\n`complete` can be called to notify of a successful completion."}]}],"kind":5,"overloads":[]}],"properties":[{"name":"source","type":"Observable<any> | undefined","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Internal implementation detail, do not use directly. Will be made internal in v8."}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"operator","type":"Operator<any, T> | undefined","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Internal implementation detail, do not use directly. Will be made internal in v8."}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"create","type":"(...args: any[]) => any","initializer":"<T>(subscribe?: (subscriber: Subscriber<T>) => TeardownLogic) => {\r\n    return new Observable<T>(subscribe);\r\n  }","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"\r\nCreates a new Observable by calling the Observable constructor","tags":[{"kind":25,"tagName":"owner","text":"Observable"},{"kind":25,"tagName":"method","text":"create"},{"kind":25,"tagName":"param","text":"{Function} subscribe? the subscriber function to be passed to the Observable constructor"},{"kind":25,"tagName":"return","text":"{Observable} a new observable"},{"kind":25,"tagName":"nocollapse"},{"kind":25,"tagName":"deprecated","text":"Use `new Observable()` instead. Will be removed in v8."}]}],"isStatic":true,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false}],"getAccessors":[],"setAccessors":[]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},{"source":{"parameters":[{"name":"next","type":"(value: T) => void","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"promiseCtor","type":"PromiseConstructorLike","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Promise<void>","isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"isAbstract":false,"typeParameters":[],"hasOverrideKeyword":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"param","text":"next a handler for each value emitted by the observable"},{"kind":25,"tagName":"param","text":"promiseCtor a constructor function used to instantiate the Promise"},{"kind":25,"tagName":"return","text":"a promise that either resolves on observable completion or\r\n rejects with the handled error"},{"kind":25,"tagName":"deprecated","text":"Passing a Promise constructor will no longer be available\r\nin upcoming versions of RxJS. This is because it adds weight to the library, for very\r\nlittle benefit. If you need this functionality, it is recommended that you either\r\npolyfill Promise, or you create an adapter to convert the returned native promise\r\nto whatever promise implementation you wanted. Will be removed in v8."}]}],"kind":27,"declarationInfo":{"className":"Observable","modulePath":"..\\src\\internal\\Observable.ts"},"classStructure":{"decorators":[],"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nA representation of any set of values over any amount of time. This is the most basic building block\r\nof RxJS.\r\n","tags":[{"kind":25,"tagName":"class","text":"Observable<T>"}]}],"isAbstract":false,"implements":["Subscribable<T>"],"name":"Observable","isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"kind":2,"ctors":[{"statements":["if (subscribe) {\r\n  this._subscribe = subscribe;\r\n}"],"parameters":[{"name":"subscribe","type":"(this: Observable<T>, subscriber: Subscriber<T>) => TeardownLogic","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"typeParameters":[],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"constructor"},{"kind":25,"tagName":"param","text":"{Function} subscribe the function that is called when the Observable is\r\ninitially subscribed to. This function is given a Subscriber, to which new values\r\ncan be `next`ed, or an `error` method can be called to raise an error, or\r\n`complete` can be called to notify of a successful completion."}]}],"kind":5,"overloads":[]}],"properties":[{"name":"source","type":"Observable<any> | undefined","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Internal implementation detail, do not use directly. Will be made internal in v8."}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"operator","type":"Operator<any, T> | undefined","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Internal implementation detail, do not use directly. Will be made internal in v8."}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"create","type":"(...args: any[]) => any","initializer":"<T>(subscribe?: (subscriber: Subscriber<T>) => TeardownLogic) => {\r\n    return new Observable<T>(subscribe);\r\n  }","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"\r\nCreates a new Observable by calling the Observable constructor","tags":[{"kind":25,"tagName":"owner","text":"Observable"},{"kind":25,"tagName":"method","text":"create"},{"kind":25,"tagName":"param","text":"{Function} subscribe? the subscriber function to be passed to the Observable constructor"},{"kind":25,"tagName":"return","text":"{Observable} a new observable"},{"kind":25,"tagName":"nocollapse"},{"kind":25,"tagName":"deprecated","text":"Use `new Observable()` instead. Will be removed in v8."}]}],"isStatic":true,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false}],"getAccessors":[],"setAccessors":[]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]},{"methodName":"[Symbol_observable]","usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":1,"index":1},"sources":[{"source":{"name":"[Symbol_observable]","statements":["return this;"],"parameters":[],"typeParameters":[],"docs":[{"kind":24,"description":"\r\nAn interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable","tags":[{"kind":25,"tagName":"method","text":"Symbol.observable"},{"kind":25,"tagName":"return","text":"{Observable} this instance of the observable"}]}],"isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"isAbstract":false,"decorators":[],"hasOverrideKeyword":false,"kind":26,"overloads":[],"declarationInfo":{"className":"Observable","modulePath":"..\\src\\internal\\Observable.ts"},"classStructure":{"decorators":[],"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nA representation of any set of values over any amount of time. This is the most basic building block\r\nof RxJS.\r\n","tags":[{"kind":25,"tagName":"class","text":"Observable<T>"}]}],"isAbstract":false,"implements":["Subscribable<T>"],"name":"Observable","isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"kind":2,"ctors":[{"statements":["if (subscribe) {\r\n  this._subscribe = subscribe;\r\n}"],"parameters":[{"name":"subscribe","type":"(this: Observable<T>, subscriber: Subscriber<T>) => TeardownLogic","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"typeParameters":[],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"constructor"},{"kind":25,"tagName":"param","text":"{Function} subscribe the function that is called when the Observable is\r\ninitially subscribed to. This function is given a Subscriber, to which new values\r\ncan be `next`ed, or an `error` method can be called to raise an error, or\r\n`complete` can be called to notify of a successful completion."}]}],"kind":5,"overloads":[]}],"properties":[{"name":"source","type":"Observable<any> | undefined","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Internal implementation detail, do not use directly. Will be made internal in v8."}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"operator","type":"Operator<any, T> | undefined","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Internal implementation detail, do not use directly. Will be made internal in v8."}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"create","type":"(...args: any[]) => any","initializer":"<T>(subscribe?: (subscriber: Subscriber<T>) => TeardownLogic) => {\r\n    return new Observable<T>(subscribe);\r\n  }","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"\r\nCreates a new Observable by calling the Observable constructor","tags":[{"kind":25,"tagName":"owner","text":"Observable"},{"kind":25,"tagName":"method","text":"create"},{"kind":25,"tagName":"param","text":"{Function} subscribe? the subscriber function to be passed to the Observable constructor"},{"kind":25,"tagName":"return","text":"{Observable} a new observable"},{"kind":25,"tagName":"nocollapse"},{"kind":25,"tagName":"deprecated","text":"Use `new Observable()` instead. Will be removed in v8."}]}],"isStatic":true,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false}],"getAccessors":[],"setAccessors":[]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]},{"methodName":"pipe","usabilityResult":{"paramLengthComplexity":0.507321284621855,"paramSequenceComplexity":0.19191919191919193,"index":0.34962023827052346},"sources":[{"source":{"parameters":[],"returnType":"Observable<T>","isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"isAbstract":false,"typeParameters":[],"hasOverrideKeyword":false,"docs":[],"kind":27,"declarationInfo":{"className":"Observable","modulePath":"..\\src\\internal\\Observable.ts"},"classStructure":{"decorators":[],"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nA representation of any set of values over any amount of time. This is the most basic building block\r\nof RxJS.\r\n","tags":[{"kind":25,"tagName":"class","text":"Observable<T>"}]}],"isAbstract":false,"implements":["Subscribable<T>"],"name":"Observable","isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"kind":2,"ctors":[{"statements":["if (subscribe) {\r\n  this._subscribe = subscribe;\r\n}"],"parameters":[{"name":"subscribe","type":"(this: Observable<T>, subscriber: Subscriber<T>) => TeardownLogic","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"typeParameters":[],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"constructor"},{"kind":25,"tagName":"param","text":"{Function} subscribe the function that is called when the Observable is\r\ninitially subscribed to. This function is given a Subscriber, to which new values\r\ncan be `next`ed, or an `error` method can be called to raise an error, or\r\n`complete` can be called to notify of a successful completion."}]}],"kind":5,"overloads":[]}],"properties":[{"name":"source","type":"Observable<any> | undefined","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Internal implementation detail, do not use directly. Will be made internal in v8."}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"operator","type":"Operator<any, T> | undefined","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Internal implementation detail, do not use directly. Will be made internal in v8."}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"create","type":"(...args: any[]) => any","initializer":"<T>(subscribe?: (subscriber: Subscriber<T>) => TeardownLogic) => {\r\n    return new Observable<T>(subscribe);\r\n  }","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"\r\nCreates a new Observable by calling the Observable constructor","tags":[{"kind":25,"tagName":"owner","text":"Observable"},{"kind":25,"tagName":"method","text":"create"},{"kind":25,"tagName":"param","text":"{Function} subscribe? the subscriber function to be passed to the Observable constructor"},{"kind":25,"tagName":"return","text":"{Observable} a new observable"},{"kind":25,"tagName":"nocollapse"},{"kind":25,"tagName":"deprecated","text":"Use `new Observable()` instead. Will be removed in v8."}]}],"isStatic":true,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false}],"getAccessors":[],"setAccessors":[]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},{"source":{"parameters":[{"name":"op1","type":"OperatorFunction<T, A>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<A>","isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"isAbstract":false,"typeParameters":[{"name":"A","kind":39,"isConst":false,"variance":0}],"hasOverrideKeyword":false,"docs":[],"kind":27,"declarationInfo":{"className":"Observable","modulePath":"..\\src\\internal\\Observable.ts"},"classStructure":{"decorators":[],"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nA representation of any set of values over any amount of time. This is the most basic building block\r\nof RxJS.\r\n","tags":[{"kind":25,"tagName":"class","text":"Observable<T>"}]}],"isAbstract":false,"implements":["Subscribable<T>"],"name":"Observable","isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"kind":2,"ctors":[{"statements":["if (subscribe) {\r\n  this._subscribe = subscribe;\r\n}"],"parameters":[{"name":"subscribe","type":"(this: Observable<T>, subscriber: Subscriber<T>) => TeardownLogic","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"typeParameters":[],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"constructor"},{"kind":25,"tagName":"param","text":"{Function} subscribe the function that is called when the Observable is\r\ninitially subscribed to. This function is given a Subscriber, to which new values\r\ncan be `next`ed, or an `error` method can be called to raise an error, or\r\n`complete` can be called to notify of a successful completion."}]}],"kind":5,"overloads":[]}],"properties":[{"name":"source","type":"Observable<any> | undefined","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Internal implementation detail, do not use directly. Will be made internal in v8."}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"operator","type":"Operator<any, T> | undefined","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Internal implementation detail, do not use directly. Will be made internal in v8."}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"create","type":"(...args: any[]) => any","initializer":"<T>(subscribe?: (subscriber: Subscriber<T>) => TeardownLogic) => {\r\n    return new Observable<T>(subscribe);\r\n  }","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"\r\nCreates a new Observable by calling the Observable constructor","tags":[{"kind":25,"tagName":"owner","text":"Observable"},{"kind":25,"tagName":"method","text":"create"},{"kind":25,"tagName":"param","text":"{Function} subscribe? the subscriber function to be passed to the Observable constructor"},{"kind":25,"tagName":"return","text":"{Observable} a new observable"},{"kind":25,"tagName":"nocollapse"},{"kind":25,"tagName":"deprecated","text":"Use `new Observable()` instead. Will be removed in v8."}]}],"isStatic":true,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false}],"getAccessors":[],"setAccessors":[]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},{"source":{"parameters":[{"name":"op1","type":"OperatorFunction<T, A>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"op2","type":"OperatorFunction<A, B>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<B>","isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"isAbstract":false,"typeParameters":[{"name":"A","kind":39,"isConst":false,"variance":0},{"name":"B","kind":39,"isConst":false,"variance":0}],"hasOverrideKeyword":false,"docs":[],"kind":27,"declarationInfo":{"className":"Observable","modulePath":"..\\src\\internal\\Observable.ts"},"classStructure":{"decorators":[],"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nA representation of any set of values over any amount of time. This is the most basic building block\r\nof RxJS.\r\n","tags":[{"kind":25,"tagName":"class","text":"Observable<T>"}]}],"isAbstract":false,"implements":["Subscribable<T>"],"name":"Observable","isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"kind":2,"ctors":[{"statements":["if (subscribe) {\r\n  this._subscribe = subscribe;\r\n}"],"parameters":[{"name":"subscribe","type":"(this: Observable<T>, subscriber: Subscriber<T>) => TeardownLogic","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"typeParameters":[],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"constructor"},{"kind":25,"tagName":"param","text":"{Function} subscribe the function that is called when the Observable is\r\ninitially subscribed to. This function is given a Subscriber, to which new values\r\ncan be `next`ed, or an `error` method can be called to raise an error, or\r\n`complete` can be called to notify of a successful completion."}]}],"kind":5,"overloads":[]}],"properties":[{"name":"source","type":"Observable<any> | undefined","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Internal implementation detail, do not use directly. Will be made internal in v8."}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"operator","type":"Operator<any, T> | undefined","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Internal implementation detail, do not use directly. Will be made internal in v8."}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"create","type":"(...args: any[]) => any","initializer":"<T>(subscribe?: (subscriber: Subscriber<T>) => TeardownLogic) => {\r\n    return new Observable<T>(subscribe);\r\n  }","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"\r\nCreates a new Observable by calling the Observable constructor","tags":[{"kind":25,"tagName":"owner","text":"Observable"},{"kind":25,"tagName":"method","text":"create"},{"kind":25,"tagName":"param","text":"{Function} subscribe? the subscriber function to be passed to the Observable constructor"},{"kind":25,"tagName":"return","text":"{Observable} a new observable"},{"kind":25,"tagName":"nocollapse"},{"kind":25,"tagName":"deprecated","text":"Use `new Observable()` instead. Will be removed in v8."}]}],"isStatic":true,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false}],"getAccessors":[],"setAccessors":[]}},"usabilityResult":{"index":0.5,"paramLengthComplexity":1,"paramSequenceComplexity":0}},{"source":{"parameters":[{"name":"op1","type":"OperatorFunction<T, A>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"op2","type":"OperatorFunction<A, B>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"op3","type":"OperatorFunction<B, C>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<C>","isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"isAbstract":false,"typeParameters":[{"name":"A","kind":39,"isConst":false,"variance":0},{"name":"B","kind":39,"isConst":false,"variance":0},{"name":"C","kind":39,"isConst":false,"variance":0}],"hasOverrideKeyword":false,"docs":[],"kind":27,"declarationInfo":{"className":"Observable","modulePath":"..\\src\\internal\\Observable.ts"},"classStructure":{"decorators":[],"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nA representation of any set of values over any amount of time. This is the most basic building block\r\nof RxJS.\r\n","tags":[{"kind":25,"tagName":"class","text":"Observable<T>"}]}],"isAbstract":false,"implements":["Subscribable<T>"],"name":"Observable","isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"kind":2,"ctors":[{"statements":["if (subscribe) {\r\n  this._subscribe = subscribe;\r\n}"],"parameters":[{"name":"subscribe","type":"(this: Observable<T>, subscriber: Subscriber<T>) => TeardownLogic","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"typeParameters":[],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"constructor"},{"kind":25,"tagName":"param","text":"{Function} subscribe the function that is called when the Observable is\r\ninitially subscribed to. This function is given a Subscriber, to which new values\r\ncan be `next`ed, or an `error` method can be called to raise an error, or\r\n`complete` can be called to notify of a successful completion."}]}],"kind":5,"overloads":[]}],"properties":[{"name":"source","type":"Observable<any> | undefined","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Internal implementation detail, do not use directly. Will be made internal in v8."}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"operator","type":"Operator<any, T> | undefined","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Internal implementation detail, do not use directly. Will be made internal in v8."}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"create","type":"(...args: any[]) => any","initializer":"<T>(subscribe?: (subscriber: Subscriber<T>) => TeardownLogic) => {\r\n    return new Observable<T>(subscribe);\r\n  }","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"\r\nCreates a new Observable by calling the Observable constructor","tags":[{"kind":25,"tagName":"owner","text":"Observable"},{"kind":25,"tagName":"method","text":"create"},{"kind":25,"tagName":"param","text":"{Function} subscribe? the subscriber function to be passed to the Observable constructor"},{"kind":25,"tagName":"return","text":"{Observable} a new observable"},{"kind":25,"tagName":"nocollapse"},{"kind":25,"tagName":"deprecated","text":"Use `new Observable()` instead. Will be removed in v8."}]}],"isStatic":true,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false}],"getAccessors":[],"setAccessors":[]}},"usabilityResult":{"index":0.5,"paramLengthComplexity":1,"paramSequenceComplexity":0}},{"source":{"parameters":[{"name":"op1","type":"OperatorFunction<T, A>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"op2","type":"OperatorFunction<A, B>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"op3","type":"OperatorFunction<B, C>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"op4","type":"OperatorFunction<C, D>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<D>","isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"isAbstract":false,"typeParameters":[{"name":"A","kind":39,"isConst":false,"variance":0},{"name":"B","kind":39,"isConst":false,"variance":0},{"name":"C","kind":39,"isConst":false,"variance":0},{"name":"D","kind":39,"isConst":false,"variance":0}],"hasOverrideKeyword":false,"docs":[],"kind":27,"declarationInfo":{"className":"Observable","modulePath":"..\\src\\internal\\Observable.ts"},"classStructure":{"decorators":[],"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nA representation of any set of values over any amount of time. This is the most basic building block\r\nof RxJS.\r\n","tags":[{"kind":25,"tagName":"class","text":"Observable<T>"}]}],"isAbstract":false,"implements":["Subscribable<T>"],"name":"Observable","isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"kind":2,"ctors":[{"statements":["if (subscribe) {\r\n  this._subscribe = subscribe;\r\n}"],"parameters":[{"name":"subscribe","type":"(this: Observable<T>, subscriber: Subscriber<T>) => TeardownLogic","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"typeParameters":[],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"constructor"},{"kind":25,"tagName":"param","text":"{Function} subscribe the function that is called when the Observable is\r\ninitially subscribed to. This function is given a Subscriber, to which new values\r\ncan be `next`ed, or an `error` method can be called to raise an error, or\r\n`complete` can be called to notify of a successful completion."}]}],"kind":5,"overloads":[]}],"properties":[{"name":"source","type":"Observable<any> | undefined","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Internal implementation detail, do not use directly. Will be made internal in v8."}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"operator","type":"Operator<any, T> | undefined","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Internal implementation detail, do not use directly. Will be made internal in v8."}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"create","type":"(...args: any[]) => any","initializer":"<T>(subscribe?: (subscriber: Subscriber<T>) => TeardownLogic) => {\r\n    return new Observable<T>(subscribe);\r\n  }","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"\r\nCreates a new Observable by calling the Observable constructor","tags":[{"kind":25,"tagName":"owner","text":"Observable"},{"kind":25,"tagName":"method","text":"create"},{"kind":25,"tagName":"param","text":"{Function} subscribe? the subscriber function to be passed to the Observable constructor"},{"kind":25,"tagName":"return","text":"{Observable} a new observable"},{"kind":25,"tagName":"nocollapse"},{"kind":25,"tagName":"deprecated","text":"Use `new Observable()` instead. Will be removed in v8."}]}],"isStatic":true,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false}],"getAccessors":[],"setAccessors":[]}},"usabilityResult":{"index":0.5,"paramLengthComplexity":1,"paramSequenceComplexity":0}},{"source":{"parameters":[{"name":"op1","type":"OperatorFunction<T, A>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"op2","type":"OperatorFunction<A, B>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"op3","type":"OperatorFunction<B, C>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"op4","type":"OperatorFunction<C, D>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"op5","type":"OperatorFunction<D, E>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<E>","isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"isAbstract":false,"typeParameters":[{"name":"A","kind":39,"isConst":false,"variance":0},{"name":"B","kind":39,"isConst":false,"variance":0},{"name":"C","kind":39,"isConst":false,"variance":0},{"name":"D","kind":39,"isConst":false,"variance":0},{"name":"E","kind":39,"isConst":false,"variance":0}],"hasOverrideKeyword":false,"docs":[],"kind":27,"declarationInfo":{"className":"Observable","modulePath":"..\\src\\internal\\Observable.ts"},"classStructure":{"decorators":[],"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nA representation of any set of values over any amount of time. This is the most basic building block\r\nof RxJS.\r\n","tags":[{"kind":25,"tagName":"class","text":"Observable<T>"}]}],"isAbstract":false,"implements":["Subscribable<T>"],"name":"Observable","isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"kind":2,"ctors":[{"statements":["if (subscribe) {\r\n  this._subscribe = subscribe;\r\n}"],"parameters":[{"name":"subscribe","type":"(this: Observable<T>, subscriber: Subscriber<T>) => TeardownLogic","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"typeParameters":[],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"constructor"},{"kind":25,"tagName":"param","text":"{Function} subscribe the function that is called when the Observable is\r\ninitially subscribed to. This function is given a Subscriber, to which new values\r\ncan be `next`ed, or an `error` method can be called to raise an error, or\r\n`complete` can be called to notify of a successful completion."}]}],"kind":5,"overloads":[]}],"properties":[{"name":"source","type":"Observable<any> | undefined","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Internal implementation detail, do not use directly. Will be made internal in v8."}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"operator","type":"Operator<any, T> | undefined","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Internal implementation detail, do not use directly. Will be made internal in v8."}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"create","type":"(...args: any[]) => any","initializer":"<T>(subscribe?: (subscriber: Subscriber<T>) => TeardownLogic) => {\r\n    return new Observable<T>(subscribe);\r\n  }","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"\r\nCreates a new Observable by calling the Observable constructor","tags":[{"kind":25,"tagName":"owner","text":"Observable"},{"kind":25,"tagName":"method","text":"create"},{"kind":25,"tagName":"param","text":"{Function} subscribe? the subscriber function to be passed to the Observable constructor"},{"kind":25,"tagName":"return","text":"{Observable} a new observable"},{"kind":25,"tagName":"nocollapse"},{"kind":25,"tagName":"deprecated","text":"Use `new Observable()` instead. Will be removed in v8."}]}],"isStatic":true,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false}],"getAccessors":[],"setAccessors":[]}},"usabilityResult":{"index":0.18393972058572117,"paramLengthComplexity":0.36787944117144233,"paramSequenceComplexity":0}},{"source":{"parameters":[{"name":"op1","type":"OperatorFunction<T, A>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"op2","type":"OperatorFunction<A, B>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"op3","type":"OperatorFunction<B, C>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"op4","type":"OperatorFunction<C, D>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"op5","type":"OperatorFunction<D, E>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"op6","type":"OperatorFunction<E, F>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<F>","isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"isAbstract":false,"typeParameters":[{"name":"A","kind":39,"isConst":false,"variance":0},{"name":"B","kind":39,"isConst":false,"variance":0},{"name":"C","kind":39,"isConst":false,"variance":0},{"name":"D","kind":39,"isConst":false,"variance":0},{"name":"E","kind":39,"isConst":false,"variance":0},{"name":"F","kind":39,"isConst":false,"variance":0}],"hasOverrideKeyword":false,"docs":[],"kind":27,"declarationInfo":{"className":"Observable","modulePath":"..\\src\\internal\\Observable.ts"},"classStructure":{"decorators":[],"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nA representation of any set of values over any amount of time. This is the most basic building block\r\nof RxJS.\r\n","tags":[{"kind":25,"tagName":"class","text":"Observable<T>"}]}],"isAbstract":false,"implements":["Subscribable<T>"],"name":"Observable","isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"kind":2,"ctors":[{"statements":["if (subscribe) {\r\n  this._subscribe = subscribe;\r\n}"],"parameters":[{"name":"subscribe","type":"(this: Observable<T>, subscriber: Subscriber<T>) => TeardownLogic","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"typeParameters":[],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"constructor"},{"kind":25,"tagName":"param","text":"{Function} subscribe the function that is called when the Observable is\r\ninitially subscribed to. This function is given a Subscriber, to which new values\r\ncan be `next`ed, or an `error` method can be called to raise an error, or\r\n`complete` can be called to notify of a successful completion."}]}],"kind":5,"overloads":[]}],"properties":[{"name":"source","type":"Observable<any> | undefined","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Internal implementation detail, do not use directly. Will be made internal in v8."}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"operator","type":"Operator<any, T> | undefined","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Internal implementation detail, do not use directly. Will be made internal in v8."}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"create","type":"(...args: any[]) => any","initializer":"<T>(subscribe?: (subscriber: Subscriber<T>) => TeardownLogic) => {\r\n    return new Observable<T>(subscribe);\r\n  }","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"\r\nCreates a new Observable by calling the Observable constructor","tags":[{"kind":25,"tagName":"owner","text":"Observable"},{"kind":25,"tagName":"method","text":"create"},{"kind":25,"tagName":"param","text":"{Function} subscribe? the subscriber function to be passed to the Observable constructor"},{"kind":25,"tagName":"return","text":"{Observable} a new observable"},{"kind":25,"tagName":"nocollapse"},{"kind":25,"tagName":"deprecated","text":"Use `new Observable()` instead. Will be removed in v8."}]}],"isStatic":true,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false}],"getAccessors":[],"setAccessors":[]}},"usabilityResult":{"index":0.06766764161830635,"paramLengthComplexity":0.1353352832366127,"paramSequenceComplexity":0}},{"source":{"parameters":[{"name":"op1","type":"OperatorFunction<T, A>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"op2","type":"OperatorFunction<A, B>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"op3","type":"OperatorFunction<B, C>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"op4","type":"OperatorFunction<C, D>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"op5","type":"OperatorFunction<D, E>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"op6","type":"OperatorFunction<E, F>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"op7","type":"OperatorFunction<F, G>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<G>","isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"isAbstract":false,"typeParameters":[{"name":"A","kind":39,"isConst":false,"variance":0},{"name":"B","kind":39,"isConst":false,"variance":0},{"name":"C","kind":39,"isConst":false,"variance":0},{"name":"D","kind":39,"isConst":false,"variance":0},{"name":"E","kind":39,"isConst":false,"variance":0},{"name":"F","kind":39,"isConst":false,"variance":0},{"name":"G","kind":39,"isConst":false,"variance":0}],"hasOverrideKeyword":false,"docs":[],"kind":27,"declarationInfo":{"className":"Observable","modulePath":"..\\src\\internal\\Observable.ts"},"classStructure":{"decorators":[],"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nA representation of any set of values over any amount of time. This is the most basic building block\r\nof RxJS.\r\n","tags":[{"kind":25,"tagName":"class","text":"Observable<T>"}]}],"isAbstract":false,"implements":["Subscribable<T>"],"name":"Observable","isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"kind":2,"ctors":[{"statements":["if (subscribe) {\r\n  this._subscribe = subscribe;\r\n}"],"parameters":[{"name":"subscribe","type":"(this: Observable<T>, subscriber: Subscriber<T>) => TeardownLogic","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"typeParameters":[],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"constructor"},{"kind":25,"tagName":"param","text":"{Function} subscribe the function that is called when the Observable is\r\ninitially subscribed to. This function is given a Subscriber, to which new values\r\ncan be `next`ed, or an `error` method can be called to raise an error, or\r\n`complete` can be called to notify of a successful completion."}]}],"kind":5,"overloads":[]}],"properties":[{"name":"source","type":"Observable<any> | undefined","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Internal implementation detail, do not use directly. Will be made internal in v8."}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"operator","type":"Operator<any, T> | undefined","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Internal implementation detail, do not use directly. Will be made internal in v8."}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"create","type":"(...args: any[]) => any","initializer":"<T>(subscribe?: (subscriber: Subscriber<T>) => TeardownLogic) => {\r\n    return new Observable<T>(subscribe);\r\n  }","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"\r\nCreates a new Observable by calling the Observable constructor","tags":[{"kind":25,"tagName":"owner","text":"Observable"},{"kind":25,"tagName":"method","text":"create"},{"kind":25,"tagName":"param","text":"{Function} subscribe? the subscriber function to be passed to the Observable constructor"},{"kind":25,"tagName":"return","text":"{Observable} a new observable"},{"kind":25,"tagName":"nocollapse"},{"kind":25,"tagName":"deprecated","text":"Use `new Observable()` instead. Will be removed in v8."}]}],"isStatic":true,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false}],"getAccessors":[],"setAccessors":[]}},"usabilityResult":{"index":0.024893534183931972,"paramLengthComplexity":0.049787068367863944,"paramSequenceComplexity":0}},{"source":{"parameters":[{"name":"op1","type":"OperatorFunction<T, A>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"op2","type":"OperatorFunction<A, B>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"op3","type":"OperatorFunction<B, C>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"op4","type":"OperatorFunction<C, D>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"op5","type":"OperatorFunction<D, E>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"op6","type":"OperatorFunction<E, F>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"op7","type":"OperatorFunction<F, G>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"op8","type":"OperatorFunction<G, H>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<H>","isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"isAbstract":false,"typeParameters":[{"name":"A","kind":39,"isConst":false,"variance":0},{"name":"B","kind":39,"isConst":false,"variance":0},{"name":"C","kind":39,"isConst":false,"variance":0},{"name":"D","kind":39,"isConst":false,"variance":0},{"name":"E","kind":39,"isConst":false,"variance":0},{"name":"F","kind":39,"isConst":false,"variance":0},{"name":"G","kind":39,"isConst":false,"variance":0},{"name":"H","kind":39,"isConst":false,"variance":0}],"hasOverrideKeyword":false,"docs":[],"kind":27,"declarationInfo":{"className":"Observable","modulePath":"..\\src\\internal\\Observable.ts"},"classStructure":{"decorators":[],"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nA representation of any set of values over any amount of time. This is the most basic building block\r\nof RxJS.\r\n","tags":[{"kind":25,"tagName":"class","text":"Observable<T>"}]}],"isAbstract":false,"implements":["Subscribable<T>"],"name":"Observable","isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"kind":2,"ctors":[{"statements":["if (subscribe) {\r\n  this._subscribe = subscribe;\r\n}"],"parameters":[{"name":"subscribe","type":"(this: Observable<T>, subscriber: Subscriber<T>) => TeardownLogic","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"typeParameters":[],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"constructor"},{"kind":25,"tagName":"param","text":"{Function} subscribe the function that is called when the Observable is\r\ninitially subscribed to. This function is given a Subscriber, to which new values\r\ncan be `next`ed, or an `error` method can be called to raise an error, or\r\n`complete` can be called to notify of a successful completion."}]}],"kind":5,"overloads":[]}],"properties":[{"name":"source","type":"Observable<any> | undefined","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Internal implementation detail, do not use directly. Will be made internal in v8."}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"operator","type":"Operator<any, T> | undefined","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Internal implementation detail, do not use directly. Will be made internal in v8."}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"create","type":"(...args: any[]) => any","initializer":"<T>(subscribe?: (subscriber: Subscriber<T>) => TeardownLogic) => {\r\n    return new Observable<T>(subscribe);\r\n  }","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"\r\nCreates a new Observable by calling the Observable constructor","tags":[{"kind":25,"tagName":"owner","text":"Observable"},{"kind":25,"tagName":"method","text":"create"},{"kind":25,"tagName":"param","text":"{Function} subscribe? the subscriber function to be passed to the Observable constructor"},{"kind":25,"tagName":"return","text":"{Observable} a new observable"},{"kind":25,"tagName":"nocollapse"},{"kind":25,"tagName":"deprecated","text":"Use `new Observable()` instead. Will be removed in v8."}]}],"isStatic":true,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false}],"getAccessors":[],"setAccessors":[]}},"usabilityResult":{"index":0.00915781944436709,"paramLengthComplexity":0.01831563888873418,"paramSequenceComplexity":0}},{"source":{"parameters":[{"name":"op1","type":"OperatorFunction<T, A>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"op2","type":"OperatorFunction<A, B>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"op3","type":"OperatorFunction<B, C>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"op4","type":"OperatorFunction<C, D>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"op5","type":"OperatorFunction<D, E>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"op6","type":"OperatorFunction<E, F>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"op7","type":"OperatorFunction<F, G>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"op8","type":"OperatorFunction<G, H>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"op9","type":"OperatorFunction<H, I>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<I>","isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"isAbstract":false,"typeParameters":[{"name":"A","kind":39,"isConst":false,"variance":0},{"name":"B","kind":39,"isConst":false,"variance":0},{"name":"C","kind":39,"isConst":false,"variance":0},{"name":"D","kind":39,"isConst":false,"variance":0},{"name":"E","kind":39,"isConst":false,"variance":0},{"name":"F","kind":39,"isConst":false,"variance":0},{"name":"G","kind":39,"isConst":false,"variance":0},{"name":"H","kind":39,"isConst":false,"variance":0},{"name":"I","kind":39,"isConst":false,"variance":0}],"hasOverrideKeyword":false,"docs":[],"kind":27,"declarationInfo":{"className":"Observable","modulePath":"..\\src\\internal\\Observable.ts"},"classStructure":{"decorators":[],"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nA representation of any set of values over any amount of time. This is the most basic building block\r\nof RxJS.\r\n","tags":[{"kind":25,"tagName":"class","text":"Observable<T>"}]}],"isAbstract":false,"implements":["Subscribable<T>"],"name":"Observable","isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"kind":2,"ctors":[{"statements":["if (subscribe) {\r\n  this._subscribe = subscribe;\r\n}"],"parameters":[{"name":"subscribe","type":"(this: Observable<T>, subscriber: Subscriber<T>) => TeardownLogic","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"typeParameters":[],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"constructor"},{"kind":25,"tagName":"param","text":"{Function} subscribe the function that is called when the Observable is\r\ninitially subscribed to. This function is given a Subscriber, to which new values\r\ncan be `next`ed, or an `error` method can be called to raise an error, or\r\n`complete` can be called to notify of a successful completion."}]}],"kind":5,"overloads":[]}],"properties":[{"name":"source","type":"Observable<any> | undefined","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Internal implementation detail, do not use directly. Will be made internal in v8."}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"operator","type":"Operator<any, T> | undefined","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Internal implementation detail, do not use directly. Will be made internal in v8."}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"create","type":"(...args: any[]) => any","initializer":"<T>(subscribe?: (subscriber: Subscriber<T>) => TeardownLogic) => {\r\n    return new Observable<T>(subscribe);\r\n  }","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"\r\nCreates a new Observable by calling the Observable constructor","tags":[{"kind":25,"tagName":"owner","text":"Observable"},{"kind":25,"tagName":"method","text":"create"},{"kind":25,"tagName":"param","text":"{Function} subscribe? the subscriber function to be passed to the Observable constructor"},{"kind":25,"tagName":"return","text":"{Observable} a new observable"},{"kind":25,"tagName":"nocollapse"},{"kind":25,"tagName":"deprecated","text":"Use `new Observable()` instead. Will be removed in v8."}]}],"isStatic":true,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false}],"getAccessors":[],"setAccessors":[]}},"usabilityResult":{"index":0.0033689734995427335,"paramLengthComplexity":0.006737946999085467,"paramSequenceComplexity":0}},{"source":{"parameters":[{"name":"op1","type":"OperatorFunction<T, A>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"op2","type":"OperatorFunction<A, B>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"op3","type":"OperatorFunction<B, C>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"op4","type":"OperatorFunction<C, D>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"op5","type":"OperatorFunction<D, E>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"op6","type":"OperatorFunction<E, F>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"op7","type":"OperatorFunction<F, G>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"op8","type":"OperatorFunction<G, H>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"op9","type":"OperatorFunction<H, I>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"operations","type":"OperatorFunction<any, any>[]","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":true}],"returnType":"Observable<unknown>","isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"isAbstract":false,"typeParameters":[{"name":"A","kind":39,"isConst":false,"variance":0},{"name":"B","kind":39,"isConst":false,"variance":0},{"name":"C","kind":39,"isConst":false,"variance":0},{"name":"D","kind":39,"isConst":false,"variance":0},{"name":"E","kind":39,"isConst":false,"variance":0},{"name":"F","kind":39,"isConst":false,"variance":0},{"name":"G","kind":39,"isConst":false,"variance":0},{"name":"H","kind":39,"isConst":false,"variance":0},{"name":"I","kind":39,"isConst":false,"variance":0}],"hasOverrideKeyword":false,"docs":[],"kind":27,"declarationInfo":{"className":"Observable","modulePath":"..\\src\\internal\\Observable.ts"},"classStructure":{"decorators":[],"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nA representation of any set of values over any amount of time. This is the most basic building block\r\nof RxJS.\r\n","tags":[{"kind":25,"tagName":"class","text":"Observable<T>"}]}],"isAbstract":false,"implements":["Subscribable<T>"],"name":"Observable","isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"kind":2,"ctors":[{"statements":["if (subscribe) {\r\n  this._subscribe = subscribe;\r\n}"],"parameters":[{"name":"subscribe","type":"(this: Observable<T>, subscriber: Subscriber<T>) => TeardownLogic","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"typeParameters":[],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"constructor"},{"kind":25,"tagName":"param","text":"{Function} subscribe the function that is called when the Observable is\r\ninitially subscribed to. This function is given a Subscriber, to which new values\r\ncan be `next`ed, or an `error` method can be called to raise an error, or\r\n`complete` can be called to notify of a successful completion."}]}],"kind":5,"overloads":[]}],"properties":[{"name":"source","type":"Observable<any> | undefined","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Internal implementation detail, do not use directly. Will be made internal in v8."}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"operator","type":"Operator<any, T> | undefined","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Internal implementation detail, do not use directly. Will be made internal in v8."}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"create","type":"(...args: any[]) => any","initializer":"<T>(subscribe?: (subscriber: Subscriber<T>) => TeardownLogic) => {\r\n    return new Observable<T>(subscribe);\r\n  }","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"\r\nCreates a new Observable by calling the Observable constructor","tags":[{"kind":25,"tagName":"owner","text":"Observable"},{"kind":25,"tagName":"method","text":"create"},{"kind":25,"tagName":"param","text":"{Function} subscribe? the subscriber function to be passed to the Observable constructor"},{"kind":25,"tagName":"return","text":"{Observable} a new observable"},{"kind":25,"tagName":"nocollapse"},{"kind":25,"tagName":"deprecated","text":"Use `new Observable()` instead. Will be removed in v8."}]}],"isStatic":true,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false}],"getAccessors":[],"setAccessors":[]}},"usabilityResult":{"index":0.05679493164388876,"paramLengthComplexity":0.0024787521766663585,"paramSequenceComplexity":0.11111111111111116}}]},{"methodName":"toPromise","usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":1,"index":1},"sources":[{"source":{"parameters":[],"returnType":"Promise<T | undefined>","isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"isAbstract":false,"typeParameters":[],"hasOverrideKeyword":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Replaced with {@link firstValueFrom} and {@link lastValueFrom}. Will be removed in v8. Details: https://rxjs.dev/deprecations/to-promise"}]}],"kind":27,"declarationInfo":{"className":"Observable","modulePath":"..\\src\\internal\\Observable.ts"},"classStructure":{"decorators":[],"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nA representation of any set of values over any amount of time. This is the most basic building block\r\nof RxJS.\r\n","tags":[{"kind":25,"tagName":"class","text":"Observable<T>"}]}],"isAbstract":false,"implements":["Subscribable<T>"],"name":"Observable","isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"kind":2,"ctors":[{"statements":["if (subscribe) {\r\n  this._subscribe = subscribe;\r\n}"],"parameters":[{"name":"subscribe","type":"(this: Observable<T>, subscriber: Subscriber<T>) => TeardownLogic","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"typeParameters":[],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"constructor"},{"kind":25,"tagName":"param","text":"{Function} subscribe the function that is called when the Observable is\r\ninitially subscribed to. This function is given a Subscriber, to which new values\r\ncan be `next`ed, or an `error` method can be called to raise an error, or\r\n`complete` can be called to notify of a successful completion."}]}],"kind":5,"overloads":[]}],"properties":[{"name":"source","type":"Observable<any> | undefined","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Internal implementation detail, do not use directly. Will be made internal in v8."}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"operator","type":"Operator<any, T> | undefined","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Internal implementation detail, do not use directly. Will be made internal in v8."}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"create","type":"(...args: any[]) => any","initializer":"<T>(subscribe?: (subscriber: Subscriber<T>) => TeardownLogic) => {\r\n    return new Observable<T>(subscribe);\r\n  }","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"\r\nCreates a new Observable by calling the Observable constructor","tags":[{"kind":25,"tagName":"owner","text":"Observable"},{"kind":25,"tagName":"method","text":"create"},{"kind":25,"tagName":"param","text":"{Function} subscribe? the subscriber function to be passed to the Observable constructor"},{"kind":25,"tagName":"return","text":"{Observable} a new observable"},{"kind":25,"tagName":"nocollapse"},{"kind":25,"tagName":"deprecated","text":"Use `new Observable()` instead. Will be removed in v8."}]}],"isStatic":true,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false}],"getAccessors":[],"setAccessors":[]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},{"source":{"parameters":[{"name":"PromiseCtor","type":"typeof Promise","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Promise<T | undefined>","isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"isAbstract":false,"typeParameters":[],"hasOverrideKeyword":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Replaced with {@link firstValueFrom} and {@link lastValueFrom}. Will be removed in v8. Details: https://rxjs.dev/deprecations/to-promise"}]}],"kind":27,"declarationInfo":{"className":"Observable","modulePath":"..\\src\\internal\\Observable.ts"},"classStructure":{"decorators":[],"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nA representation of any set of values over any amount of time. This is the most basic building block\r\nof RxJS.\r\n","tags":[{"kind":25,"tagName":"class","text":"Observable<T>"}]}],"isAbstract":false,"implements":["Subscribable<T>"],"name":"Observable","isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"kind":2,"ctors":[{"statements":["if (subscribe) {\r\n  this._subscribe = subscribe;\r\n}"],"parameters":[{"name":"subscribe","type":"(this: Observable<T>, subscriber: Subscriber<T>) => TeardownLogic","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"typeParameters":[],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"constructor"},{"kind":25,"tagName":"param","text":"{Function} subscribe the function that is called when the Observable is\r\ninitially subscribed to. This function is given a Subscriber, to which new values\r\ncan be `next`ed, or an `error` method can be called to raise an error, or\r\n`complete` can be called to notify of a successful completion."}]}],"kind":5,"overloads":[]}],"properties":[{"name":"source","type":"Observable<any> | undefined","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Internal implementation detail, do not use directly. Will be made internal in v8."}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"operator","type":"Operator<any, T> | undefined","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Internal implementation detail, do not use directly. Will be made internal in v8."}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"create","type":"(...args: any[]) => any","initializer":"<T>(subscribe?: (subscriber: Subscriber<T>) => TeardownLogic) => {\r\n    return new Observable<T>(subscribe);\r\n  }","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"\r\nCreates a new Observable by calling the Observable constructor","tags":[{"kind":25,"tagName":"owner","text":"Observable"},{"kind":25,"tagName":"method","text":"create"},{"kind":25,"tagName":"param","text":"{Function} subscribe? the subscriber function to be passed to the Observable constructor"},{"kind":25,"tagName":"return","text":"{Observable} a new observable"},{"kind":25,"tagName":"nocollapse"},{"kind":25,"tagName":"deprecated","text":"Use `new Observable()` instead. Will be removed in v8."}]}],"isStatic":true,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false}],"getAccessors":[],"setAccessors":[]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},{"source":{"parameters":[{"name":"PromiseCtor","type":"PromiseConstructorLike","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Promise<T | undefined>","isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"isAbstract":false,"typeParameters":[],"hasOverrideKeyword":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Replaced with {@link firstValueFrom} and {@link lastValueFrom}. Will be removed in v8. Details: https://rxjs.dev/deprecations/to-promise"}]}],"kind":27,"declarationInfo":{"className":"Observable","modulePath":"..\\src\\internal\\Observable.ts"},"classStructure":{"decorators":[],"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nA representation of any set of values over any amount of time. This is the most basic building block\r\nof RxJS.\r\n","tags":[{"kind":25,"tagName":"class","text":"Observable<T>"}]}],"isAbstract":false,"implements":["Subscribable<T>"],"name":"Observable","isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"kind":2,"ctors":[{"statements":["if (subscribe) {\r\n  this._subscribe = subscribe;\r\n}"],"parameters":[{"name":"subscribe","type":"(this: Observable<T>, subscriber: Subscriber<T>) => TeardownLogic","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"typeParameters":[],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"constructor"},{"kind":25,"tagName":"param","text":"{Function} subscribe the function that is called when the Observable is\r\ninitially subscribed to. This function is given a Subscriber, to which new values\r\ncan be `next`ed, or an `error` method can be called to raise an error, or\r\n`complete` can be called to notify of a successful completion."}]}],"kind":5,"overloads":[]}],"properties":[{"name":"source","type":"Observable<any> | undefined","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Internal implementation detail, do not use directly. Will be made internal in v8."}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"operator","type":"Operator<any, T> | undefined","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Internal implementation detail, do not use directly. Will be made internal in v8."}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"create","type":"(...args: any[]) => any","initializer":"<T>(subscribe?: (subscriber: Subscriber<T>) => TeardownLogic) => {\r\n    return new Observable<T>(subscribe);\r\n  }","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"\r\nCreates a new Observable by calling the Observable constructor","tags":[{"kind":25,"tagName":"owner","text":"Observable"},{"kind":25,"tagName":"method","text":"create"},{"kind":25,"tagName":"param","text":"{Function} subscribe? the subscriber function to be passed to the Observable constructor"},{"kind":25,"tagName":"return","text":"{Observable} a new observable"},{"kind":25,"tagName":"nocollapse"},{"kind":25,"tagName":"deprecated","text":"Use `new Observable()` instead. Will be removed in v8."}]}],"isStatic":true,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false}],"getAccessors":[],"setAccessors":[]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]}]}},"usabilityResult":{"index":0.8499367063784207,"paramLengthComplexity":0.9178868807703092,"paramSequenceComplexity":0.781986531986532}},"..\\src\\internal\\observable\\ConnectableObservable.ts":{"moduleComponents":{"ConnectableObservable":{"kind":2,"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1},"methods":[{"methodName":"connect","usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":1,"index":1},"sources":[{"source":{"name":"connect","statements":[{"isExported":false,"isDefaultExport":false,"hasDeclareKeyword":false,"docs":[],"kind":41,"declarationKind":"let","declarations":[{"name":"connection","initializer":"this._connection","hasExclamationToken":false,"kind":40}]},"if (!connection) {\r\n      connection = this._connection = new Subscription();\r\n      const subject = this.getSubject();\r\n      connection.add(\r\n        this.source.subscribe(\r\n          createOperatorSubscriber(\r\n            subject as any,\r\n            undefined,\r\n            () => {\r\n              this._teardown();\r\n              subject.complete();\r\n            },\r\n            (err) => {\r\n              this._teardown();\r\n              subject.error(err);\r\n            },\r\n            () => this._teardown()\r\n          )\r\n        )\r\n      );\r\n\r\n      if (connection.closed) {\r\n        this._connection = null;\r\n        connection = Subscription.EMPTY;\r\n      }\r\n    }","return connection;"],"parameters":[],"returnType":"Subscription","typeParameters":[],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"{@link ConnectableObservable} will be removed in v8. Use {@link connectable} instead.\r\nDetails: https://rxjs.dev/deprecations/multicasting"}]}],"isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"isAbstract":false,"decorators":[],"hasOverrideKeyword":false,"kind":26,"overloads":[],"declarationInfo":{"className":"ConnectableObservable","modulePath":"..\\src\\internal\\observable\\ConnectableObservable.ts"},"classStructure":{"decorators":[],"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"class","text":"ConnectableObservable<T>"},{"kind":25,"tagName":"deprecated","text":"Will be removed in v8. Use {@link connectable} to create a connectable observable.\r\nIf you are using the `refCount` method of `ConnectableObservable`, use the {@link share} operator\r\ninstead.\r\nDetails: https://rxjs.dev/deprecations/multicasting"}]}],"isAbstract":false,"implements":[],"name":"ConnectableObservable","isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"kind":2,"ctors":[{"statements":["super();","if (hasLift(source)) {\r\n  this.lift = source.lift;\r\n}"],"parameters":[{"name":"source","type":"Observable<T>","isReadonly":false,"scope":"public","decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"subjectFactory","type":"() => Subject<T>","isReadonly":false,"scope":"protected","decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"typeParameters":[],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"param","text":"source The source observable"},{"kind":25,"tagName":"param","text":"subjectFactory The factory that creates the subject used internally."},{"kind":25,"tagName":"deprecated","text":"Will be removed in v8. Use {@link connectable} to create a connectable observable.\r\n`new ConnectableObservable(source, factory)` is equivalent to\r\n`connectable(source, { connector: factory })`.\r\nWhen the `refCount()` method is needed, the {@link share} operator should be used instead:\r\n`new ConnectableObservable(source, factory).refCount()` is equivalent to\r\n`source.pipe(share({ connector: factory }))`.\r\nDetails: https://rxjs.dev/deprecations/multicasting"}]}],"kind":5,"overloads":[]}],"properties":[{"name":"_subject","type":"Subject<T> | null","initializer":"null","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[],"isStatic":false,"scope":"protected","isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"_refCount","type":"number","initializer":"0","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[],"isStatic":false,"scope":"protected","isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"_connection","type":"Subscription | null","initializer":"null","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[],"isStatic":false,"scope":"protected","isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false}],"extends":"Observable<T>","getAccessors":[],"setAccessors":[]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]},{"methodName":"refCount","usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":1,"index":1},"sources":[{"source":{"name":"refCount","statements":["return higherOrderRefCount()(this) as Observable<T>;"],"parameters":[],"returnType":"Observable<T>","typeParameters":[],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"{@link ConnectableObservable} will be removed in v8. Use the {@link share} operator instead.\r\nDetails: https://rxjs.dev/deprecations/multicasting"}]}],"isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"isAbstract":false,"decorators":[],"hasOverrideKeyword":false,"kind":26,"overloads":[],"declarationInfo":{"className":"ConnectableObservable","modulePath":"..\\src\\internal\\observable\\ConnectableObservable.ts"},"classStructure":{"decorators":[],"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"class","text":"ConnectableObservable<T>"},{"kind":25,"tagName":"deprecated","text":"Will be removed in v8. Use {@link connectable} to create a connectable observable.\r\nIf you are using the `refCount` method of `ConnectableObservable`, use the {@link share} operator\r\ninstead.\r\nDetails: https://rxjs.dev/deprecations/multicasting"}]}],"isAbstract":false,"implements":[],"name":"ConnectableObservable","isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"kind":2,"ctors":[{"statements":["super();","if (hasLift(source)) {\r\n  this.lift = source.lift;\r\n}"],"parameters":[{"name":"source","type":"Observable<T>","isReadonly":false,"scope":"public","decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"subjectFactory","type":"() => Subject<T>","isReadonly":false,"scope":"protected","decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"typeParameters":[],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"param","text":"source The source observable"},{"kind":25,"tagName":"param","text":"subjectFactory The factory that creates the subject used internally."},{"kind":25,"tagName":"deprecated","text":"Will be removed in v8. Use {@link connectable} to create a connectable observable.\r\n`new ConnectableObservable(source, factory)` is equivalent to\r\n`connectable(source, { connector: factory })`.\r\nWhen the `refCount()` method is needed, the {@link share} operator should be used instead:\r\n`new ConnectableObservable(source, factory).refCount()` is equivalent to\r\n`source.pipe(share({ connector: factory }))`.\r\nDetails: https://rxjs.dev/deprecations/multicasting"}]}],"kind":5,"overloads":[]}],"properties":[{"name":"_subject","type":"Subject<T> | null","initializer":"null","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[],"isStatic":false,"scope":"protected","isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"_refCount","type":"number","initializer":"0","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[],"isStatic":false,"scope":"protected","isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"_connection","type":"Subscription | null","initializer":"null","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[],"isStatic":false,"scope":"protected","isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false}],"extends":"Observable<T>","getAccessors":[],"setAccessors":[]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]}]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},"..\\src\\internal\\observable\\dom\\animationFrames.ts":{"moduleComponents":{"animationFrames":{"kind":13,"usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":1,"index":1},"sources":[{"source":{"name":"animationFrames","statements":["return timestampProvider ? animationFramesFactory(timestampProvider) : DEFAULT_ANIMATION_FRAMES;"],"parameters":[{"name":"timestampProvider","type":"TimestampProvider","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"typeParameters":[],"docs":[{"kind":24,"description":"\r\nAn observable of animation frames\r\n\r\nEmits the amount of time elapsed since subscription and the timestamp on each animation frame.\r\nDefaults to milliseconds provided to the requestAnimationFrame's callback. Does not end on its own.\r\n\r\nEvery subscription will start a separate animation loop. Since animation frames are always scheduled\r\nby the browser to occur directly before a repaint, scheduling more than one animation frame synchronously\r\nshould not be much different or have more overhead than looping over an array of events during\r\na single animation frame. However, if for some reason the developer would like to ensure the\r\nexecution of animation-related handlers are all executed during the same task by the engine,\r\nthe `share` operator can be used.\r\n\r\nThis is useful for setting up animations with RxJS.\r\n\r\n## Examples\r\n\r\nTweening a div to move it on the screen\r\n\r\n```ts\r\nimport { animationFrames, map, takeWhile, endWith } from 'rxjs';\r\n\r\nfunction tween(start: number, end: number, duration: number) {\r\n  const diff = end - start;\r\n  return animationFrames().pipe(\r\n    // Figure out what percentage of time has passed\r\n    map(({ elapsed }) => elapsed / duration),\r\n    // Take the vector while less than 100%\r\n    takeWhile(v => v < 1),\r\n    // Finish with 100%\r\n    endWith(1),\r\n    // Calculate the distance traveled between start and end\r\n    map(v => v * diff + start)\r\n  );\r\n}\r\n\r\n// Setup a div for us to move around\r\nconst div = document.createElement('div');\r\ndocument.body.appendChild(div);\r\ndiv.style.position = 'absolute';\r\ndiv.style.width = '40px';\r\ndiv.style.height = '40px';\r\ndiv.style.backgroundColor = 'lime';\r\ndiv.style.transform = 'translate3d(10px, 0, 0)';\r\n\r\ntween(10, 200, 4000).subscribe(x => {\r\n  div.style.transform = `translate3d(${ x }px, 0, 0)`;\r\n});\r\n```\r\n\r\nProviding a custom timestamp provider\r\n\r\n```ts\r\nimport { animationFrames, TimestampProvider } from 'rxjs';\r\n\r\n// A custom timestamp provider\r\nlet now = 0;\r\nconst customTSProvider: TimestampProvider = {\r\n  now() { return now++; }\r\n};\r\n\r\nconst source$ = animationFrames(customTSProvider);\r\n\r\n// Log increasing numbers 0...1...2... on every animation frame.\r\nsource$.subscribe(({ elapsed }) => console.log(elapsed));\r\n```\r\n","tags":[{"kind":25,"tagName":"param","text":"timestampProvider An object with a `now` method that provides a numeric timestamp"}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[],"functionName":"animationFrames","modulePath":"..\\src\\internal\\observable\\dom\\animationFrames.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},"..\\src\\internal\\Subject.ts":{"moduleComponents":{"Subject":{"kind":2,"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1},"methods":[{"methodName":"lift","usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":1,"index":1},"sources":[{"source":{"name":"lift","statements":[{"isExported":false,"isDefaultExport":false,"hasDeclareKeyword":false,"docs":[],"kind":41,"declarationKind":"const","declarations":[{"name":"subject","initializer":"new AnonymousSubject(this, this)","hasExclamationToken":false,"kind":40}]},"subject.operator = operator as any;","return subject as any;"],"parameters":[{"name":"operator","type":"Operator<T, R>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<R>","typeParameters":[{"name":"R","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Internal implementation detail, do not use directly. Will be made internal in v8."}]}],"isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"isAbstract":false,"decorators":[],"hasOverrideKeyword":false,"kind":26,"overloads":[],"declarationInfo":{"className":"Subject","modulePath":"..\\src\\internal\\Subject.ts"},"classStructure":{"decorators":[],"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nA Subject is a special type of Observable that allows values to be\r\nmulticasted to many Observers. Subjects are like EventEmitters.\r\n\r\nEvery Subject is an Observable and an Observer. You can subscribe to a\r\nSubject, and you can call next to feed values as well as error and complete.","tags":[]}],"isAbstract":false,"implements":["SubscriptionLike"],"name":"Subject","isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"kind":2,"ctors":[{"statements":["super();"],"parameters":[],"typeParameters":[],"docs":[],"kind":5,"overloads":[]}],"properties":[{"name":"closed","initializer":"false","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"currentObservers","type":"Observer<T>[] | null","initializer":"null","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[],"isStatic":false,"scope":"private","isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"observers","type":"Observer<T>[]","initializer":"[]","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Internal implementation detail, do not use directly. Will be made internal in v8."}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"isStopped","initializer":"false","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Internal implementation detail, do not use directly. Will be made internal in v8."}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"hasError","initializer":"false","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Internal implementation detail, do not use directly. Will be made internal in v8."}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"thrownError","type":"any","initializer":"null","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Internal implementation detail, do not use directly. Will be made internal in v8."}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"create","type":"(...args: any[]) => any","initializer":"<T>(destination: Observer<T>, source: Observable<T>): AnonymousSubject<T> => {\r\n    return new AnonymousSubject<T>(destination, source);\r\n  }","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"\r\nCreates a \"subject\" by basically gluing an observer to an observable.\r\n","tags":[{"kind":25,"tagName":"nocollapse"},{"kind":25,"tagName":"deprecated","text":"Recommended you do not use. Will be removed at some point in the future. Plans for replacement still under discussion."}]}],"isStatic":true,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false}],"extends":"Observable<T>","getAccessors":[{"name":"observed","statements":["return this.observers?.length > 0;"],"parameters":[],"typeParameters":[],"docs":[],"isStatic":false,"isAbstract":false,"decorators":[],"kind":15}],"setAccessors":[]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]},{"methodName":"next","usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":1,"index":1},"sources":[{"source":{"name":"next","statements":["errorContext(() => {\r\n  this._throwIfClosed();\r\n  if (!this.isStopped) {\r\n    if (!this.currentObservers) {\r\n      this.currentObservers = Array.from(this.observers);\r\n    }\r\n    for (const observer of this.currentObservers) {\r\n      observer.next(value);\r\n    }\r\n  }\r\n});"],"parameters":[{"name":"value","type":"T","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"typeParameters":[],"docs":[],"isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"isAbstract":false,"decorators":[],"hasOverrideKeyword":false,"kind":26,"overloads":[],"declarationInfo":{"className":"Subject","modulePath":"..\\src\\internal\\Subject.ts"},"classStructure":{"decorators":[],"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nA Subject is a special type of Observable that allows values to be\r\nmulticasted to many Observers. Subjects are like EventEmitters.\r\n\r\nEvery Subject is an Observable and an Observer. You can subscribe to a\r\nSubject, and you can call next to feed values as well as error and complete.","tags":[]}],"isAbstract":false,"implements":["SubscriptionLike"],"name":"Subject","isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"kind":2,"ctors":[{"statements":["super();"],"parameters":[],"typeParameters":[],"docs":[],"kind":5,"overloads":[]}],"properties":[{"name":"closed","initializer":"false","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"currentObservers","type":"Observer<T>[] | null","initializer":"null","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[],"isStatic":false,"scope":"private","isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"observers","type":"Observer<T>[]","initializer":"[]","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Internal implementation detail, do not use directly. Will be made internal in v8."}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"isStopped","initializer":"false","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Internal implementation detail, do not use directly. Will be made internal in v8."}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"hasError","initializer":"false","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Internal implementation detail, do not use directly. Will be made internal in v8."}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"thrownError","type":"any","initializer":"null","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Internal implementation detail, do not use directly. Will be made internal in v8."}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"create","type":"(...args: any[]) => any","initializer":"<T>(destination: Observer<T>, source: Observable<T>): AnonymousSubject<T> => {\r\n    return new AnonymousSubject<T>(destination, source);\r\n  }","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"\r\nCreates a \"subject\" by basically gluing an observer to an observable.\r\n","tags":[{"kind":25,"tagName":"nocollapse"},{"kind":25,"tagName":"deprecated","text":"Recommended you do not use. Will be removed at some point in the future. Plans for replacement still under discussion."}]}],"isStatic":true,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false}],"extends":"Observable<T>","getAccessors":[{"name":"observed","statements":["return this.observers?.length > 0;"],"parameters":[],"typeParameters":[],"docs":[],"isStatic":false,"isAbstract":false,"decorators":[],"kind":15}],"setAccessors":[]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]},{"methodName":"error","usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":1,"index":1},"sources":[{"source":{"name":"error","statements":["errorContext(() => {\r\n  this._throwIfClosed();\r\n  if (!this.isStopped) {\r\n    this.hasError = this.isStopped = true;\r\n    this.thrownError = err;\r\n    const { observers } = this;\r\n    while (observers.length) {\r\n      observers.shift()!.error(err);\r\n    }\r\n  }\r\n});"],"parameters":[{"name":"err","type":"any","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"typeParameters":[],"docs":[],"isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"isAbstract":false,"decorators":[],"hasOverrideKeyword":false,"kind":26,"overloads":[],"declarationInfo":{"className":"Subject","modulePath":"..\\src\\internal\\Subject.ts"},"classStructure":{"decorators":[],"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nA Subject is a special type of Observable that allows values to be\r\nmulticasted to many Observers. Subjects are like EventEmitters.\r\n\r\nEvery Subject is an Observable and an Observer. You can subscribe to a\r\nSubject, and you can call next to feed values as well as error and complete.","tags":[]}],"isAbstract":false,"implements":["SubscriptionLike"],"name":"Subject","isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"kind":2,"ctors":[{"statements":["super();"],"parameters":[],"typeParameters":[],"docs":[],"kind":5,"overloads":[]}],"properties":[{"name":"closed","initializer":"false","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"currentObservers","type":"Observer<T>[] | null","initializer":"null","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[],"isStatic":false,"scope":"private","isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"observers","type":"Observer<T>[]","initializer":"[]","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Internal implementation detail, do not use directly. Will be made internal in v8."}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"isStopped","initializer":"false","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Internal implementation detail, do not use directly. Will be made internal in v8."}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"hasError","initializer":"false","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Internal implementation detail, do not use directly. Will be made internal in v8."}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"thrownError","type":"any","initializer":"null","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Internal implementation detail, do not use directly. Will be made internal in v8."}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"create","type":"(...args: any[]) => any","initializer":"<T>(destination: Observer<T>, source: Observable<T>): AnonymousSubject<T> => {\r\n    return new AnonymousSubject<T>(destination, source);\r\n  }","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"\r\nCreates a \"subject\" by basically gluing an observer to an observable.\r\n","tags":[{"kind":25,"tagName":"nocollapse"},{"kind":25,"tagName":"deprecated","text":"Recommended you do not use. Will be removed at some point in the future. Plans for replacement still under discussion."}]}],"isStatic":true,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false}],"extends":"Observable<T>","getAccessors":[{"name":"observed","statements":["return this.observers?.length > 0;"],"parameters":[],"typeParameters":[],"docs":[],"isStatic":false,"isAbstract":false,"decorators":[],"kind":15}],"setAccessors":[]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]},{"methodName":"complete","usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":1,"index":1},"sources":[{"source":{"name":"complete","statements":["errorContext(() => {\r\n  this._throwIfClosed();\r\n  if (!this.isStopped) {\r\n    this.isStopped = true;\r\n    const { observers } = this;\r\n    while (observers.length) {\r\n      observers.shift()!.complete();\r\n    }\r\n  }\r\n});"],"parameters":[],"typeParameters":[],"docs":[],"isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"isAbstract":false,"decorators":[],"hasOverrideKeyword":false,"kind":26,"overloads":[],"declarationInfo":{"className":"Subject","modulePath":"..\\src\\internal\\Subject.ts"},"classStructure":{"decorators":[],"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nA Subject is a special type of Observable that allows values to be\r\nmulticasted to many Observers. Subjects are like EventEmitters.\r\n\r\nEvery Subject is an Observable and an Observer. You can subscribe to a\r\nSubject, and you can call next to feed values as well as error and complete.","tags":[]}],"isAbstract":false,"implements":["SubscriptionLike"],"name":"Subject","isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"kind":2,"ctors":[{"statements":["super();"],"parameters":[],"typeParameters":[],"docs":[],"kind":5,"overloads":[]}],"properties":[{"name":"closed","initializer":"false","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"currentObservers","type":"Observer<T>[] | null","initializer":"null","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[],"isStatic":false,"scope":"private","isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"observers","type":"Observer<T>[]","initializer":"[]","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Internal implementation detail, do not use directly. Will be made internal in v8."}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"isStopped","initializer":"false","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Internal implementation detail, do not use directly. Will be made internal in v8."}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"hasError","initializer":"false","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Internal implementation detail, do not use directly. Will be made internal in v8."}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"thrownError","type":"any","initializer":"null","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Internal implementation detail, do not use directly. Will be made internal in v8."}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"create","type":"(...args: any[]) => any","initializer":"<T>(destination: Observer<T>, source: Observable<T>): AnonymousSubject<T> => {\r\n    return new AnonymousSubject<T>(destination, source);\r\n  }","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"\r\nCreates a \"subject\" by basically gluing an observer to an observable.\r\n","tags":[{"kind":25,"tagName":"nocollapse"},{"kind":25,"tagName":"deprecated","text":"Recommended you do not use. Will be removed at some point in the future. Plans for replacement still under discussion."}]}],"isStatic":true,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false}],"extends":"Observable<T>","getAccessors":[{"name":"observed","statements":["return this.observers?.length > 0;"],"parameters":[],"typeParameters":[],"docs":[],"isStatic":false,"isAbstract":false,"decorators":[],"kind":15}],"setAccessors":[]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]},{"methodName":"unsubscribe","usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":1,"index":1},"sources":[{"source":{"name":"unsubscribe","statements":["this.isStopped = this.closed = true;","this.observers = this.currentObservers = null!;"],"parameters":[],"typeParameters":[],"docs":[],"isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"isAbstract":false,"decorators":[],"hasOverrideKeyword":false,"kind":26,"overloads":[],"declarationInfo":{"className":"Subject","modulePath":"..\\src\\internal\\Subject.ts"},"classStructure":{"decorators":[],"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nA Subject is a special type of Observable that allows values to be\r\nmulticasted to many Observers. Subjects are like EventEmitters.\r\n\r\nEvery Subject is an Observable and an Observer. You can subscribe to a\r\nSubject, and you can call next to feed values as well as error and complete.","tags":[]}],"isAbstract":false,"implements":["SubscriptionLike"],"name":"Subject","isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"kind":2,"ctors":[{"statements":["super();"],"parameters":[],"typeParameters":[],"docs":[],"kind":5,"overloads":[]}],"properties":[{"name":"closed","initializer":"false","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"currentObservers","type":"Observer<T>[] | null","initializer":"null","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[],"isStatic":false,"scope":"private","isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"observers","type":"Observer<T>[]","initializer":"[]","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Internal implementation detail, do not use directly. Will be made internal in v8."}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"isStopped","initializer":"false","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Internal implementation detail, do not use directly. Will be made internal in v8."}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"hasError","initializer":"false","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Internal implementation detail, do not use directly. Will be made internal in v8."}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"thrownError","type":"any","initializer":"null","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Internal implementation detail, do not use directly. Will be made internal in v8."}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"create","type":"(...args: any[]) => any","initializer":"<T>(destination: Observer<T>, source: Observable<T>): AnonymousSubject<T> => {\r\n    return new AnonymousSubject<T>(destination, source);\r\n  }","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"\r\nCreates a \"subject\" by basically gluing an observer to an observable.\r\n","tags":[{"kind":25,"tagName":"nocollapse"},{"kind":25,"tagName":"deprecated","text":"Recommended you do not use. Will be removed at some point in the future. Plans for replacement still under discussion."}]}],"isStatic":true,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false}],"extends":"Observable<T>","getAccessors":[{"name":"observed","statements":["return this.observers?.length > 0;"],"parameters":[],"typeParameters":[],"docs":[],"isStatic":false,"isAbstract":false,"decorators":[],"kind":15}],"setAccessors":[]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]},{"methodName":"asObservable","usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":1,"index":1},"sources":[{"source":{"name":"asObservable","statements":[{"isExported":false,"isDefaultExport":false,"hasDeclareKeyword":false,"docs":[],"kind":41,"declarationKind":"const","declarations":[{"name":"observable","initializer":"new Observable<T>()","type":"any","hasExclamationToken":false,"kind":40}]},"observable.source = this;","return observable;"],"parameters":[],"returnType":"Observable<T>","typeParameters":[],"docs":[{"kind":24,"description":"\r\nCreates a new Observable with this Subject as the source. You can do this\r\nto create custom Observer-side logic of the Subject and conceal it from\r\ncode that uses the Observable.","tags":[{"kind":25,"tagName":"return","text":"{Observable} Observable that the Subject casts to"}]}],"isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"isAbstract":false,"decorators":[],"hasOverrideKeyword":false,"kind":26,"overloads":[],"declarationInfo":{"className":"Subject","modulePath":"..\\src\\internal\\Subject.ts"},"classStructure":{"decorators":[],"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nA Subject is a special type of Observable that allows values to be\r\nmulticasted to many Observers. Subjects are like EventEmitters.\r\n\r\nEvery Subject is an Observable and an Observer. You can subscribe to a\r\nSubject, and you can call next to feed values as well as error and complete.","tags":[]}],"isAbstract":false,"implements":["SubscriptionLike"],"name":"Subject","isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"kind":2,"ctors":[{"statements":["super();"],"parameters":[],"typeParameters":[],"docs":[],"kind":5,"overloads":[]}],"properties":[{"name":"closed","initializer":"false","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"currentObservers","type":"Observer<T>[] | null","initializer":"null","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[],"isStatic":false,"scope":"private","isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"observers","type":"Observer<T>[]","initializer":"[]","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Internal implementation detail, do not use directly. Will be made internal in v8."}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"isStopped","initializer":"false","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Internal implementation detail, do not use directly. Will be made internal in v8."}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"hasError","initializer":"false","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Internal implementation detail, do not use directly. Will be made internal in v8."}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"thrownError","type":"any","initializer":"null","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Internal implementation detail, do not use directly. Will be made internal in v8."}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"create","type":"(...args: any[]) => any","initializer":"<T>(destination: Observer<T>, source: Observable<T>): AnonymousSubject<T> => {\r\n    return new AnonymousSubject<T>(destination, source);\r\n  }","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"\r\nCreates a \"subject\" by basically gluing an observer to an observable.\r\n","tags":[{"kind":25,"tagName":"nocollapse"},{"kind":25,"tagName":"deprecated","text":"Recommended you do not use. Will be removed at some point in the future. Plans for replacement still under discussion."}]}],"isStatic":true,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false}],"extends":"Observable<T>","getAccessors":[{"name":"observed","statements":["return this.observers?.length > 0;"],"parameters":[],"typeParameters":[],"docs":[],"isStatic":false,"isAbstract":false,"decorators":[],"kind":15}],"setAccessors":[]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]}]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},"..\\src\\internal\\BehaviorSubject.ts":{"moduleComponents":{"BehaviorSubject":{"kind":2,"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1},"methods":[{"methodName":"getValue","usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":1,"index":1},"sources":[{"source":{"name":"getValue","statements":[{"isExported":false,"isDefaultExport":false,"hasDeclareKeyword":false,"docs":[],"kind":41,"declarationKind":"const","declarations":[{"name":"{ hasError, thrownError, _value }","initializer":"this","hasExclamationToken":false,"kind":40}]},"if (hasError) {\r\n  throw thrownError;\r\n}","this._throwIfClosed();","return _value;"],"parameters":[],"returnType":"T","typeParameters":[],"docs":[],"isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"isAbstract":false,"decorators":[],"hasOverrideKeyword":false,"kind":26,"overloads":[],"declarationInfo":{"className":"BehaviorSubject","modulePath":"..\\src\\internal\\BehaviorSubject.ts"},"classStructure":{"decorators":[],"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nA variant of Subject that requires an initial value and emits its current\r\nvalue whenever it is subscribed to.\r\n","tags":[{"kind":25,"tagName":"class","text":"BehaviorSubject<T>"}]}],"isAbstract":false,"implements":[],"name":"BehaviorSubject","isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"kind":2,"ctors":[{"statements":["super();"],"parameters":[{"name":"_value","type":"T","isReadonly":false,"scope":"private","decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"typeParameters":[],"docs":[],"kind":5,"overloads":[]}],"properties":[],"extends":"Subject<T>","getAccessors":[{"name":"value","statements":["return this.getValue();"],"parameters":[],"returnType":"T","typeParameters":[],"docs":[],"isStatic":false,"isAbstract":false,"decorators":[],"kind":15}],"setAccessors":[]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]},{"methodName":"next","usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":1,"index":1},"sources":[{"source":{"name":"next","statements":["super.next((this._value = value));"],"parameters":[{"name":"value","type":"T","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"void","typeParameters":[],"docs":[],"isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"isAbstract":false,"decorators":[],"hasOverrideKeyword":false,"kind":26,"overloads":[],"declarationInfo":{"className":"BehaviorSubject","modulePath":"..\\src\\internal\\BehaviorSubject.ts"},"classStructure":{"decorators":[],"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nA variant of Subject that requires an initial value and emits its current\r\nvalue whenever it is subscribed to.\r\n","tags":[{"kind":25,"tagName":"class","text":"BehaviorSubject<T>"}]}],"isAbstract":false,"implements":[],"name":"BehaviorSubject","isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"kind":2,"ctors":[{"statements":["super();"],"parameters":[{"name":"_value","type":"T","isReadonly":false,"scope":"private","decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"typeParameters":[],"docs":[],"kind":5,"overloads":[]}],"properties":[],"extends":"Subject<T>","getAccessors":[{"name":"value","statements":["return this.getValue();"],"parameters":[],"returnType":"T","typeParameters":[],"docs":[],"isStatic":false,"isAbstract":false,"decorators":[],"kind":15}],"setAccessors":[]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]}]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},"..\\src\\internal\\ReplaySubject.ts":{"moduleComponents":{"ReplaySubject":{"kind":2,"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1},"methods":[{"methodName":"next","usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":1,"index":1},"sources":[{"source":{"name":"next","statements":[{"isExported":false,"isDefaultExport":false,"hasDeclareKeyword":false,"docs":[],"kind":41,"declarationKind":"const","declarations":[{"name":"{ isStopped, _buffer, _infiniteTimeWindow, _timestampProvider, _windowTime }","initializer":"this","hasExclamationToken":false,"kind":40}]},"if (!isStopped) {\r\n  _buffer.push(value);\r\n  !_infiniteTimeWindow && _buffer.push(_timestampProvider.now() + _windowTime);\r\n}","this._trimBuffer();","super.next(value);"],"parameters":[{"name":"value","type":"T","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"void","typeParameters":[],"docs":[],"isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"isAbstract":false,"decorators":[],"hasOverrideKeyword":false,"kind":26,"overloads":[],"declarationInfo":{"className":"ReplaySubject","modulePath":"..\\src\\internal\\ReplaySubject.ts"},"classStructure":{"decorators":[],"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nA variant of {@link Subject} that \"replays\" old values to new subscribers by emitting them when they first subscribe.\r\n\r\n`ReplaySubject` has an internal buffer that will store a specified number of values that it has observed. Like `Subject`,\r\n`ReplaySubject` \"observes\" values by having them passed to its `next` method. When it observes a value, it will store that\r\nvalue for a time determined by the configuration of the `ReplaySubject`, as passed to its constructor.\r\n\r\nWhen a new subscriber subscribes to the `ReplaySubject` instance, it will synchronously emit all values in its buffer in\r\na First-In-First-Out (FIFO) manner. The `ReplaySubject` will also complete, if it has observed completion; and it will\r\nerror if it has observed an error.\r\n\r\nThere are two main configuration items to be concerned with:\r\n\r\n1. `bufferSize` - This will determine how many items are stored in the buffer, defaults to infinite.\r\n2. `windowTime` - The amount of time to hold a value in the buffer before removing it from the buffer.\r\n\r\nBoth configurations may exist simultaneously. So if you would like to buffer a maximum of 3 values, as long as the values\r\nare less than 2 seconds old, you could do so with a `new ReplaySubject(3, 2000)`.\r\n\r\n### Differences with BehaviorSubject\r\n\r\n`BehaviorSubject` is similar to `new ReplaySubject(1)`, with a couple of exceptions:\r\n\r\n1. `BehaviorSubject` comes \"primed\" with a single value upon construction.\r\n2. `ReplaySubject` will replay values, even after observing an error, where `BehaviorSubject` will not.\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link Subject}"},{"kind":25,"tagName":"see","text":"{@link BehaviorSubject}"},{"kind":25,"tagName":"see","text":"{@link shareReplay}"}]}],"isAbstract":false,"implements":[],"name":"ReplaySubject","isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"kind":2,"ctors":[{"statements":["super();","this._infiniteTimeWindow = _windowTime === Infinity;","this._bufferSize = Math.max(1, _bufferSize);","this._windowTime = Math.max(1, _windowTime);"],"parameters":[{"name":"_bufferSize","initializer":"Infinity","isReadonly":false,"scope":"private","decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"_windowTime","initializer":"Infinity","isReadonly":false,"scope":"private","decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"_timestampProvider","initializer":"dateTimestampProvider","type":"TimestampProvider","isReadonly":false,"scope":"private","decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"typeParameters":[],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"param","text":"bufferSize The size of the buffer to replay on subscription"},{"kind":25,"tagName":"param","text":"windowTime The amount of time the buffered items will stay buffered"},{"kind":25,"tagName":"param","text":"timestampProvider An object with a `now()` method that provides the current timestamp. This is used to\r\ncalculate the amount of time something has been buffered."}]}],"kind":5,"overloads":[]}],"properties":[{"name":"_buffer","type":"(T | number)[]","initializer":"[]","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[],"isStatic":false,"scope":"private","isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"_infiniteTimeWindow","initializer":"true","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[],"isStatic":false,"scope":"private","isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false}],"extends":"Subject<T>","getAccessors":[],"setAccessors":[]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]}]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},"..\\src\\internal\\AsyncSubject.ts":{"moduleComponents":{"AsyncSubject":{"kind":2,"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1},"methods":[{"methodName":"next","usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":1,"index":1},"sources":[{"source":{"name":"next","statements":["if (!this.isStopped) {\r\n  this._value = value;\r\n  this._hasValue = true;\r\n}"],"parameters":[{"name":"value","type":"T","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"void","typeParameters":[],"docs":[],"isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"isAbstract":false,"decorators":[],"hasOverrideKeyword":false,"kind":26,"overloads":[],"declarationInfo":{"className":"AsyncSubject","modulePath":"..\\src\\internal\\AsyncSubject.ts"},"classStructure":{"decorators":[],"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nA variant of Subject that only emits a value when it completes. It will emit\r\nits latest value to all its observers on completion.\r\n","tags":[{"kind":25,"tagName":"class","text":"AsyncSubject<T>"}]}],"isAbstract":false,"implements":[],"name":"AsyncSubject","isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"kind":2,"ctors":[],"properties":[{"name":"_value","type":"T | null","initializer":"null","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[],"isStatic":false,"scope":"private","isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"_hasValue","initializer":"false","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[],"isStatic":false,"scope":"private","isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"_isComplete","initializer":"false","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[],"isStatic":false,"scope":"private","isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false}],"extends":"Subject<T>","getAccessors":[],"setAccessors":[]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]},{"methodName":"complete","usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":1,"index":1},"sources":[{"source":{"name":"complete","statements":[{"isExported":false,"isDefaultExport":false,"hasDeclareKeyword":false,"docs":[],"kind":41,"declarationKind":"const","declarations":[{"name":"{ _hasValue, _value, _isComplete }","initializer":"this","hasExclamationToken":false,"kind":40}]},"if (!_isComplete) {\r\n  this._isComplete = true;\r\n  _hasValue && super.next(_value!);\r\n  super.complete();\r\n}"],"parameters":[],"returnType":"void","typeParameters":[],"docs":[],"isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"isAbstract":false,"decorators":[],"hasOverrideKeyword":false,"kind":26,"overloads":[],"declarationInfo":{"className":"AsyncSubject","modulePath":"..\\src\\internal\\AsyncSubject.ts"},"classStructure":{"decorators":[],"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nA variant of Subject that only emits a value when it completes. It will emit\r\nits latest value to all its observers on completion.\r\n","tags":[{"kind":25,"tagName":"class","text":"AsyncSubject<T>"}]}],"isAbstract":false,"implements":[],"name":"AsyncSubject","isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"kind":2,"ctors":[],"properties":[{"name":"_value","type":"T | null","initializer":"null","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[],"isStatic":false,"scope":"private","isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"_hasValue","initializer":"false","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[],"isStatic":false,"scope":"private","isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"_isComplete","initializer":"false","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[],"isStatic":false,"scope":"private","isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false}],"extends":"Subject<T>","getAccessors":[],"setAccessors":[]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]}]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},"..\\src\\internal\\scheduler\\VirtualTimeScheduler.ts":{"moduleComponents":{"VirtualTimeScheduler":{"kind":2,"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1},"methods":[{"methodName":"flush","usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":1,"index":1},"sources":[{"source":{"name":"flush","statements":[{"isExported":false,"isDefaultExport":false,"hasDeclareKeyword":false,"docs":[],"kind":41,"declarationKind":"const","declarations":[{"name":"{ actions, maxFrames }","initializer":"this","hasExclamationToken":false,"kind":40}]},{"isExported":false,"isDefaultExport":false,"hasDeclareKeyword":false,"docs":[],"kind":41,"declarationKind":"let","declarations":[{"name":"error","type":"any","hasExclamationToken":false,"kind":40}]},{"isExported":false,"isDefaultExport":false,"hasDeclareKeyword":false,"docs":[],"kind":41,"declarationKind":"let","declarations":[{"name":"action","type":"AsyncAction<any> | undefined","hasExclamationToken":false,"kind":40}]},"while ((action = actions[0]) && action.delay <= maxFrames) {\r\n      actions.shift();\r\n      this.frame = action.delay;\r\n\r\n      if ((error = action.execute(action.state, action.delay))) {\r\n        break;\r\n      }\r\n    }","if (error) {\r\n  while ((action = actions.shift())) {\r\n    action.unsubscribe();\r\n  }\r\n  throw error;\r\n}"],"parameters":[],"returnType":"void","typeParameters":[],"docs":[{"kind":24,"description":"\r\nPrompt the Scheduler to execute all of its queued actions, therefore\r\nclearing its queue.","tags":[{"kind":25,"tagName":"return","text":"{void}"}]}],"isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"scope":"public","isAbstract":false,"decorators":[],"hasOverrideKeyword":false,"kind":26,"overloads":[],"declarationInfo":{"className":"VirtualTimeScheduler","modulePath":"..\\src\\internal\\scheduler\\VirtualTimeScheduler.ts"},"classStructure":{"decorators":[],"typeParameters":[],"docs":[],"isAbstract":false,"implements":[],"name":"VirtualTimeScheduler","isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"kind":2,"ctors":[{"statements":["super(schedulerActionCtor, () => this.frame);"],"parameters":[{"name":"schedulerActionCtor","initializer":"VirtualAction as any","type":"typeof AsyncAction","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"maxFrames","initializer":"Infinity","type":"number","isReadonly":false,"scope":"public","decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"typeParameters":[],"docs":[{"kind":24,"description":"\r\nThis creates an instance of a `VirtualTimeScheduler`. Experts only. The signature of\r\nthis constructor is likely to change in the long run.\r\n","tags":[{"kind":25,"tagName":"param","text":"schedulerActionCtor The type of Action to initialize when initializing actions during scheduling."},{"kind":25,"tagName":"param","text":"maxFrames The maximum number of frames to process before stopping. Used to prevent endless flush cycles."}]}],"kind":5,"overloads":[]}],"properties":[{"name":"frameTimeFactor","initializer":"10","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Not used in VirtualTimeScheduler directly. Will be removed in v8."}]}],"isStatic":true,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"frame","type":"number","initializer":"0","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"\r\nThe current frame for the state of the virtual scheduler instance. The difference\r\nbetween two \"frames\" is synonymous with the passage of \"virtual time units\". So if\r\nyou record `scheduler.frame` to be `1`, then later, observe `scheduler.frame` to be at `11`,\r\nthat means `10` virtual time units have passed.","tags":[]}],"isStatic":false,"scope":"public","isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"index","type":"number","initializer":"-1","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"\r\nUsed internally to examine the current virtual action index being processed.","tags":[{"kind":25,"tagName":"deprecated","text":"Internal implementation detail, do not use directly. Will be made internal in v8."}]}],"isStatic":false,"scope":"public","isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false}],"extends":"AsyncScheduler","getAccessors":[],"setAccessors":[]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]}]},"VirtualAction":{"kind":2,"usabilityResult":{"index":0.5,"paramLengthComplexity":1,"paramSequenceComplexity":0},"methods":[{"methodName":"schedule","usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":0,"index":0.5},"sources":[{"source":{"name":"schedule","statements":["if (Number.isFinite(delay)) {\r\n  if (!this.id) {\r\n    return super.schedule(state, delay);\r\n  }\r\n  this.active = false;\r\n  // If an action is rescheduled, we save allocations by mutating its state,\r\n  // pushing it to the end of the scheduler queue, and recycling the action.\r\n  // But since the VirtualTimeScheduler is used for testing, VirtualActions\r\n  // must be immutable so they can be inspected later.\r\n  const action = new VirtualAction(this.scheduler, this.work);\r\n  this.add(action);\r\n  return action.schedule(state, delay);\r\n} else {\r\n  // If someone schedules something with Infinity, it'll never happen. So we\r\n  // don't even schedule it.\r\n  return Subscription.EMPTY;\r\n}"],"parameters":[{"name":"state","type":"T","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"delay","initializer":"0","type":"number","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Subscription","typeParameters":[],"docs":[],"isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"scope":"public","isAbstract":false,"decorators":[],"hasOverrideKeyword":false,"kind":26,"overloads":[],"declarationInfo":{"className":"VirtualAction","modulePath":"..\\src\\internal\\scheduler\\VirtualTimeScheduler.ts"},"classStructure":{"decorators":[],"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"isAbstract":false,"implements":[],"name":"VirtualAction","isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"kind":2,"ctors":[{"statements":["super(scheduler, work);","this.index = scheduler.index = index;"],"parameters":[{"name":"scheduler","type":"VirtualTimeScheduler","isReadonly":false,"scope":"protected","decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"work","type":"(this: SchedulerAction<T>, state?: T) => void","isReadonly":false,"scope":"protected","decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"index","initializer":"(scheduler.index += 1)","type":"number","isReadonly":false,"scope":"protected","decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"typeParameters":[],"docs":[],"kind":5,"overloads":[]}],"properties":[{"name":"active","type":"boolean","initializer":"true","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[],"isStatic":false,"scope":"protected","isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false}],"extends":"AsyncAction<T>","getAccessors":[],"setAccessors":[]}},"usabilityResult":{"index":0.5,"paramLengthComplexity":1,"paramSequenceComplexity":0}}]}]}},"usabilityResult":{"index":0.75,"paramLengthComplexity":1,"paramSequenceComplexity":0.5}},"..\\src\\internal\\Scheduler.ts":{"moduleComponents":{"Scheduler":{"kind":2,"usabilityResult":{"index":0.75,"paramLengthComplexity":1,"paramSequenceComplexity":0.5},"methods":[{"methodName":"schedule","usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":0.5,"index":0.75},"sources":[{"source":{"name":"schedule","statements":["return new this.schedulerActionCtor<T>(this, work).schedule(state, delay);"],"parameters":[{"name":"work","type":"(this: SchedulerAction<T>, state?: T) => void","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"delay","initializer":"0","type":"number","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"state","type":"T","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Subscription","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nSchedules a function, `work`, for execution. May happen at some point in\r\nthe future, according to the `delay` parameter, if specified. May be passed\r\nsome context object, `state`, which will be passed to the `work` function.\r\n\r\nThe given arguments will be processed an stored as an Action object in a\r\nqueue of actions.\r\n","tags":[{"kind":25,"tagName":"param","text":"{function(state: ?T): ?Subscription} work A function representing a\r\ntask, or some unit of work to be executed by the Scheduler."},{"kind":25,"tagName":"param","text":"{number} [delay] Time to wait before executing the work, where the\r\ntime unit is implicit and defined by the Scheduler itself."},{"kind":25,"tagName":"param","text":"{T} [state] Some contextual data that the `work` function uses when\r\ncalled by the Scheduler."},{"kind":25,"tagName":"return","text":"{Subscription} A subscription in order to be able to unsubscribe\r\nthe scheduled work."}]}],"isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"scope":"public","isAbstract":false,"decorators":[],"hasOverrideKeyword":false,"kind":26,"overloads":[],"declarationInfo":{"className":"Scheduler","modulePath":"..\\src\\internal\\Scheduler.ts"},"classStructure":{"decorators":[],"typeParameters":[],"docs":[{"kind":24,"description":"\r\nAn execution context and a data structure to order tasks and schedule their\r\nexecution. Provides a notion of (potentially virtual) time, through the\r\n`now()` getter method.\r\n\r\nEach unit of work in a Scheduler is called an `Action`.\r\n\r\n```ts\r\nclass Scheduler {\r\n  now(): number;\r\n  schedule(work, delay?, state?): Subscription;\r\n}\r\n```\r\n","tags":[{"kind":25,"tagName":"class","text":"Scheduler"},{"kind":25,"tagName":"deprecated","text":"Scheduler is an internal implementation detail of RxJS, and\r\nshould not be used directly. Rather, create your own class and implement\r\n{@link SchedulerLike}. Will be made internal in v8."}]}],"isAbstract":false,"implements":["SchedulerLike"],"name":"Scheduler","isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"kind":2,"ctors":[{"statements":["this.now = now;"],"parameters":[{"name":"schedulerActionCtor","type":"typeof Action","isReadonly":false,"scope":"private","decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"now","initializer":"Scheduler.now","type":"() => number","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"typeParameters":[],"docs":[],"kind":5,"overloads":[]}],"properties":[{"name":"now","type":"() => number","initializer":"dateTimestampProvider.now","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[],"isStatic":true,"scope":"public","isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"now","type":"() => number","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"\r\nA getter method that returns a number representing the current time\r\n(at the time this function was called) according to the scheduler's own\r\ninternal clock.","tags":[{"kind":25,"tagName":"return","text":"{number} A number that represents the current time. May or may not\r\nhave a relation to wall-clock time. May or may not refer to a time unit\r\n(e.g. milliseconds)."}]}],"isStatic":false,"scope":"public","isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false}],"getAccessors":[],"setAccessors":[]}},"usabilityResult":{"index":0.75,"paramLengthComplexity":1,"paramSequenceComplexity":0.5}}]}]}},"usabilityResult":{"index":0.75,"paramLengthComplexity":1,"paramSequenceComplexity":0.5}},"..\\src\\internal\\Subscription.ts":{"moduleComponents":{"Subscription":{"kind":2,"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1},"methods":[{"methodName":"unsubscribe","usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":1,"index":1},"sources":[{"source":{"name":"unsubscribe","statements":[{"isExported":false,"isDefaultExport":false,"hasDeclareKeyword":false,"docs":[],"kind":41,"declarationKind":"let","declarations":[{"name":"errors","type":"any[] | undefined","hasExclamationToken":false,"kind":40}]},"if (!this.closed) {\r\n      this.closed = true;\r\n\r\n      // Remove this from it's parents.\r\n      const { _parentage } = this;\r\n      if (_parentage) {\r\n        this._parentage = null;\r\n        if (Array.isArray(_parentage)) {\r\n          for (const parent of _parentage) {\r\n            parent.remove(this);\r\n          }\r\n        } else {\r\n          _parentage.remove(this);\r\n        }\r\n      }\r\n\r\n      const { initialTeardown: initialFinalizer } = this;\r\n      if (isFunction(initialFinalizer)) {\r\n        try {\r\n          initialFinalizer();\r\n        } catch (e) {\r\n          errors = e instanceof UnsubscriptionError ? e.errors : [e];\r\n        }\r\n      }\r\n\r\n      const { _finalizers } = this;\r\n      if (_finalizers) {\r\n        this._finalizers = null;\r\n        for (const finalizer of _finalizers) {\r\n          try {\r\n            execFinalizer(finalizer);\r\n          } catch (err) {\r\n            errors = errors ?? [];\r\n            if (err instanceof UnsubscriptionError) {\r\n              errors = [...errors, ...err.errors];\r\n            } else {\r\n              errors.push(err);\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      if (errors) {\r\n        throw new UnsubscriptionError(errors);\r\n      }\r\n    }"],"parameters":[],"returnType":"void","typeParameters":[],"docs":[{"kind":24,"description":"\r\nDisposes the resources held by the subscription. May, for instance, cancel\r\nan ongoing Observable execution or cancel any other type of work that\r\nstarted when the Subscription was created.","tags":[{"kind":25,"tagName":"return","text":"{void}"}]}],"isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"isAbstract":false,"decorators":[],"hasOverrideKeyword":false,"kind":26,"overloads":[],"declarationInfo":{"className":"Subscription","modulePath":"..\\src\\internal\\Subscription.ts"},"classStructure":{"decorators":[],"typeParameters":[],"docs":[{"kind":24,"description":"\r\nRepresents a disposable resource, such as the execution of an Observable. A\r\nSubscription has one important method, `unsubscribe`, that takes no argument\r\nand just disposes the resource held by the subscription.\r\n\r\nAdditionally, subscriptions may be grouped together through the `add()`\r\nmethod, which will attach a child Subscription to the current Subscription.\r\nWhen a Subscription is unsubscribed, all its children (and its grandchildren)\r\nwill be unsubscribed as well.\r\n","tags":[{"kind":25,"tagName":"class","text":"Subscription"}]}],"isAbstract":false,"implements":["SubscriptionLike"],"name":"Subscription","isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"kind":2,"ctors":[{"statements":[],"parameters":[{"name":"initialTeardown","type":"() => void","isReadonly":false,"scope":"private","decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"typeParameters":[],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"param","text":"initialTeardown A function executed first as part of the finalization\r\nprocess that is kicked off when {@link #unsubscribe} is called."}]}],"kind":5,"overloads":[]}],"properties":[{"name":"EMPTY","initializer":"(() => {\r\n    const empty = new Subscription();\r\n    empty.closed = true;\r\n    return empty;\r\n  })()","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"nocollapse"}]}],"isStatic":true,"scope":"public","isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"closed","initializer":"false","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"\r\nA flag to indicate whether this Subscription has already been unsubscribed.","tags":[]}],"isStatic":false,"scope":"public","isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"_parentage","type":"Subscription[] | Subscription | null","initializer":"null","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[],"isStatic":false,"scope":"private","isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"_finalizers","type":"Exclude<TeardownLogic, void>[] | null","initializer":"null","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"\r\nThe list of registered finalizers to execute upon unsubscription. Adding and removing from this\r\nlist occurs in the {@link #add} and {@link #remove} methods.","tags":[]}],"isStatic":false,"scope":"private","isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false}],"getAccessors":[],"setAccessors":[]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]},{"methodName":"add","usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":1,"index":1},"sources":[{"source":{"name":"add","statements":["if (teardown && teardown !== this) {\r\n  if (this.closed) {\r\n    // If this subscription is already closed,\r\n    // execute whatever finalizer is handed to it automatically.\r\n    execFinalizer(teardown);\r\n  } else {\r\n    if (teardown instanceof Subscription) {\r\n      // We don't add closed subscriptions, and we don't add the same subscription\r\n      // twice. Subscription unsubscribe is idempotent.\r\n      if (teardown.closed || teardown._hasParent(this)) {\r\n        return;\r\n      }\r\n      teardown._addParent(this);\r\n    }\r\n    (this._finalizers = this._finalizers ?? []).push(teardown);\r\n  }\r\n}"],"parameters":[{"name":"teardown","type":"TeardownLogic","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"void","typeParameters":[],"docs":[{"kind":24,"description":"\r\nAdds a finalizer to this subscription, so that finalization will be unsubscribed/called\r\nwhen this subscription is unsubscribed. If this subscription is already {@link #closed},\r\nbecause it has already been unsubscribed, then whatever finalizer is passed to it\r\nwill automatically be executed (unless the finalizer itself is also a closed subscription).\r\n\r\nClosed Subscriptions cannot be added as finalizers to any subscription. Adding a closed\r\nsubscription to a any subscription will result in no operation. (A noop).\r\n\r\nAdding a subscription to itself, or adding `null` or `undefined` will not perform any\r\noperation at all. (A noop).\r\n\r\n`Subscription` instances that are added to this instance will automatically remove themselves\r\nif they are unsubscribed. Functions and {@link Unsubscribable} objects that you wish to remove\r\nwill need to be removed manually with {@link #remove}\r\n","tags":[{"kind":25,"tagName":"param","text":"teardown The finalization logic to add to this subscription."}]}],"isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"isAbstract":false,"decorators":[],"hasOverrideKeyword":false,"kind":26,"overloads":[],"declarationInfo":{"className":"Subscription","modulePath":"..\\src\\internal\\Subscription.ts"},"classStructure":{"decorators":[],"typeParameters":[],"docs":[{"kind":24,"description":"\r\nRepresents a disposable resource, such as the execution of an Observable. A\r\nSubscription has one important method, `unsubscribe`, that takes no argument\r\nand just disposes the resource held by the subscription.\r\n\r\nAdditionally, subscriptions may be grouped together through the `add()`\r\nmethod, which will attach a child Subscription to the current Subscription.\r\nWhen a Subscription is unsubscribed, all its children (and its grandchildren)\r\nwill be unsubscribed as well.\r\n","tags":[{"kind":25,"tagName":"class","text":"Subscription"}]}],"isAbstract":false,"implements":["SubscriptionLike"],"name":"Subscription","isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"kind":2,"ctors":[{"statements":[],"parameters":[{"name":"initialTeardown","type":"() => void","isReadonly":false,"scope":"private","decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"typeParameters":[],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"param","text":"initialTeardown A function executed first as part of the finalization\r\nprocess that is kicked off when {@link #unsubscribe} is called."}]}],"kind":5,"overloads":[]}],"properties":[{"name":"EMPTY","initializer":"(() => {\r\n    const empty = new Subscription();\r\n    empty.closed = true;\r\n    return empty;\r\n  })()","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"nocollapse"}]}],"isStatic":true,"scope":"public","isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"closed","initializer":"false","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"\r\nA flag to indicate whether this Subscription has already been unsubscribed.","tags":[]}],"isStatic":false,"scope":"public","isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"_parentage","type":"Subscription[] | Subscription | null","initializer":"null","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[],"isStatic":false,"scope":"private","isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"_finalizers","type":"Exclude<TeardownLogic, void>[] | null","initializer":"null","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"\r\nThe list of registered finalizers to execute upon unsubscription. Adding and removing from this\r\nlist occurs in the {@link #add} and {@link #remove} methods.","tags":[]}],"isStatic":false,"scope":"private","isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false}],"getAccessors":[],"setAccessors":[]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]},{"methodName":"remove","usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":1,"index":1},"sources":[{"source":{"name":"remove","statements":[{"isExported":false,"isDefaultExport":false,"hasDeclareKeyword":false,"docs":[],"kind":41,"declarationKind":"const","declarations":[{"name":"{ _finalizers }","initializer":"this","hasExclamationToken":false,"kind":40}]},"_finalizers && arrRemove(_finalizers, teardown);","if (teardown instanceof Subscription) {\r\n  teardown._removeParent(this);\r\n}"],"parameters":[{"name":"teardown","type":"Exclude<TeardownLogic, void>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"void","typeParameters":[],"docs":[{"kind":24,"description":"\r\nRemoves a finalizer from this subscription that was previously added with the {@link #add} method.\r\n\r\nNote that `Subscription` instances, when unsubscribed, will automatically remove themselves\r\nfrom every other `Subscription` they have been added to. This means that using the `remove` method\r\nis not a common thing and should be used thoughtfully.\r\n\r\nIf you add the same finalizer instance of a function or an unsubscribable object to a `Subscription` instance\r\nmore than once, you will need to call `remove` the same number of times to remove all instances.\r\n\r\nAll finalizer instances are removed to free up memory upon unsubscription.\r\n","tags":[{"kind":25,"tagName":"param","text":"teardown The finalizer to remove from this subscription"}]}],"isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"isAbstract":false,"decorators":[],"hasOverrideKeyword":false,"kind":26,"overloads":[],"declarationInfo":{"className":"Subscription","modulePath":"..\\src\\internal\\Subscription.ts"},"classStructure":{"decorators":[],"typeParameters":[],"docs":[{"kind":24,"description":"\r\nRepresents a disposable resource, such as the execution of an Observable. A\r\nSubscription has one important method, `unsubscribe`, that takes no argument\r\nand just disposes the resource held by the subscription.\r\n\r\nAdditionally, subscriptions may be grouped together through the `add()`\r\nmethod, which will attach a child Subscription to the current Subscription.\r\nWhen a Subscription is unsubscribed, all its children (and its grandchildren)\r\nwill be unsubscribed as well.\r\n","tags":[{"kind":25,"tagName":"class","text":"Subscription"}]}],"isAbstract":false,"implements":["SubscriptionLike"],"name":"Subscription","isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"kind":2,"ctors":[{"statements":[],"parameters":[{"name":"initialTeardown","type":"() => void","isReadonly":false,"scope":"private","decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"typeParameters":[],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"param","text":"initialTeardown A function executed first as part of the finalization\r\nprocess that is kicked off when {@link #unsubscribe} is called."}]}],"kind":5,"overloads":[]}],"properties":[{"name":"EMPTY","initializer":"(() => {\r\n    const empty = new Subscription();\r\n    empty.closed = true;\r\n    return empty;\r\n  })()","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"nocollapse"}]}],"isStatic":true,"scope":"public","isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"closed","initializer":"false","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"\r\nA flag to indicate whether this Subscription has already been unsubscribed.","tags":[]}],"isStatic":false,"scope":"public","isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"_parentage","type":"Subscription[] | Subscription | null","initializer":"null","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[],"isStatic":false,"scope":"private","isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"_finalizers","type":"Exclude<TeardownLogic, void>[] | null","initializer":"null","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"\r\nThe list of registered finalizers to execute upon unsubscription. Adding and removing from this\r\nlist occurs in the {@link #add} and {@link #remove} methods.","tags":[]}],"isStatic":false,"scope":"private","isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false}],"getAccessors":[],"setAccessors":[]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]}]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},"..\\src\\internal\\Subscriber.ts":{"moduleComponents":{"Subscriber":{"kind":2,"usabilityResult":{"index":0.9,"paramLengthComplexity":1,"paramSequenceComplexity":0.8},"methods":[{"methodName":"create","usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":0,"index":0.5},"sources":[{"source":{"name":"create","statements":["return new SafeSubscriber(next, error, complete);"],"parameters":[{"name":"next","type":"(x?: T) => void","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"error","type":"(e?: any) => void","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"complete","type":"() => void","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Subscriber<T>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nA static factory for a Subscriber, given a (potentially partial) definition\r\nof an Observer.","tags":[{"kind":25,"tagName":"param","text":"next The `next` callback of an Observer."},{"kind":25,"tagName":"param","text":"error The `error` callback of an\r\nObserver."},{"kind":25,"tagName":"param","text":"complete The `complete` callback of an\r\nObserver."},{"kind":25,"tagName":"return","text":"A Subscriber wrapping the (partially defined)\r\nObserver represented by the given arguments."},{"kind":25,"tagName":"nocollapse"},{"kind":25,"tagName":"deprecated","text":"Do not use. Will be removed in v8. There is no replacement for this\r\nmethod, and there is no reason to be creating instances of `Subscriber` directly.\r\nIf you have a specific use case, please file an issue."}]}],"isGenerator":false,"isAsync":false,"isStatic":true,"hasQuestionToken":false,"isAbstract":false,"decorators":[],"hasOverrideKeyword":false,"kind":26,"overloads":[],"declarationInfo":{"className":"Subscriber","modulePath":"..\\src\\internal\\Subscriber.ts"},"classStructure":{"decorators":[],"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nImplements the {@link Observer} interface and extends the\r\n{@link Subscription} class. While the {@link Observer} is the public API for\r\nconsuming the values of an {@link Observable}, all Observers get converted to\r\na Subscriber, in order to provide Subscription-like capabilities such as\r\n`unsubscribe`. Subscriber is a common type in RxJS, and crucial for\r\nimplementing operators, but it is rarely used as a public API.\r\n","tags":[{"kind":25,"tagName":"class","text":"Subscriber<T>"}]}],"isAbstract":false,"implements":["Observer<T>"],"name":"Subscriber","isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"kind":2,"ctors":[{"statements":["super();","if (destination) {\r\n  this.destination = destination;\r\n  // Automatically chain subscriptions together here.\r\n  // if destination is a Subscription, then it is a Subscriber.\r\n  if (isSubscription(destination)) {\r\n    destination.add(this);\r\n  }\r\n} else {\r\n  this.destination = EMPTY_OBSERVER;\r\n}"],"parameters":[{"name":"destination","type":"Subscriber<any> | Observer<any>","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"typeParameters":[],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Internal implementation detail, do not use directly. Will be made internal in v8.\r\nThere is no reason to directly create an instance of Subscriber. This type is exported for typings reasons."}]}],"kind":5,"overloads":[]}],"properties":[{"name":"isStopped","type":"boolean","initializer":"false","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Internal implementation detail, do not use directly. Will be made internal in v8."}]}],"isStatic":false,"scope":"protected","isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"destination","type":"Subscriber<any> | Observer<any>","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Internal implementation detail, do not use directly. Will be made internal in v8."}]}],"isStatic":false,"scope":"protected","isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false}],"extends":"Subscription","getAccessors":[],"setAccessors":[]}},"usabilityResult":{"index":0.5,"paramLengthComplexity":1,"paramSequenceComplexity":0}}]},{"methodName":"next","usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":1,"index":1},"sources":[{"source":{"name":"next","statements":["if (this.isStopped) {\r\n  handleStoppedNotification(nextNotification(value), this);\r\n} else {\r\n  this._next(value!);\r\n}"],"parameters":[{"name":"value","type":"T","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"void","typeParameters":[],"docs":[{"kind":24,"description":"\r\nThe {@link Observer} callback to receive notifications of type `next` from\r\nthe Observable, with a value. The Observable may call this method 0 or more\r\ntimes.","tags":[{"kind":25,"tagName":"param","text":"{T} [value] The `next` value."},{"kind":25,"tagName":"return","text":"{void}"}]}],"isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"isAbstract":false,"decorators":[],"hasOverrideKeyword":false,"kind":26,"overloads":[],"declarationInfo":{"className":"Subscriber","modulePath":"..\\src\\internal\\Subscriber.ts"},"classStructure":{"decorators":[],"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nImplements the {@link Observer} interface and extends the\r\n{@link Subscription} class. While the {@link Observer} is the public API for\r\nconsuming the values of an {@link Observable}, all Observers get converted to\r\na Subscriber, in order to provide Subscription-like capabilities such as\r\n`unsubscribe`. Subscriber is a common type in RxJS, and crucial for\r\nimplementing operators, but it is rarely used as a public API.\r\n","tags":[{"kind":25,"tagName":"class","text":"Subscriber<T>"}]}],"isAbstract":false,"implements":["Observer<T>"],"name":"Subscriber","isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"kind":2,"ctors":[{"statements":["super();","if (destination) {\r\n  this.destination = destination;\r\n  // Automatically chain subscriptions together here.\r\n  // if destination is a Subscription, then it is a Subscriber.\r\n  if (isSubscription(destination)) {\r\n    destination.add(this);\r\n  }\r\n} else {\r\n  this.destination = EMPTY_OBSERVER;\r\n}"],"parameters":[{"name":"destination","type":"Subscriber<any> | Observer<any>","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"typeParameters":[],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Internal implementation detail, do not use directly. Will be made internal in v8.\r\nThere is no reason to directly create an instance of Subscriber. This type is exported for typings reasons."}]}],"kind":5,"overloads":[]}],"properties":[{"name":"isStopped","type":"boolean","initializer":"false","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Internal implementation detail, do not use directly. Will be made internal in v8."}]}],"isStatic":false,"scope":"protected","isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"destination","type":"Subscriber<any> | Observer<any>","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Internal implementation detail, do not use directly. Will be made internal in v8."}]}],"isStatic":false,"scope":"protected","isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false}],"extends":"Subscription","getAccessors":[],"setAccessors":[]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]},{"methodName":"error","usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":1,"index":1},"sources":[{"source":{"name":"error","statements":["if (this.isStopped) {\r\n  handleStoppedNotification(errorNotification(err), this);\r\n} else {\r\n  this.isStopped = true;\r\n  this._error(err);\r\n}"],"parameters":[{"name":"err","type":"any","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"void","typeParameters":[],"docs":[{"kind":24,"description":"\r\nThe {@link Observer} callback to receive notifications of type `error` from\r\nthe Observable, with an attached `Error`. Notifies the Observer that\r\nthe Observable has experienced an error condition.","tags":[{"kind":25,"tagName":"param","text":"{any} [err] The `error` exception."},{"kind":25,"tagName":"return","text":"{void}"}]}],"isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"isAbstract":false,"decorators":[],"hasOverrideKeyword":false,"kind":26,"overloads":[],"declarationInfo":{"className":"Subscriber","modulePath":"..\\src\\internal\\Subscriber.ts"},"classStructure":{"decorators":[],"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nImplements the {@link Observer} interface and extends the\r\n{@link Subscription} class. While the {@link Observer} is the public API for\r\nconsuming the values of an {@link Observable}, all Observers get converted to\r\na Subscriber, in order to provide Subscription-like capabilities such as\r\n`unsubscribe`. Subscriber is a common type in RxJS, and crucial for\r\nimplementing operators, but it is rarely used as a public API.\r\n","tags":[{"kind":25,"tagName":"class","text":"Subscriber<T>"}]}],"isAbstract":false,"implements":["Observer<T>"],"name":"Subscriber","isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"kind":2,"ctors":[{"statements":["super();","if (destination) {\r\n  this.destination = destination;\r\n  // Automatically chain subscriptions together here.\r\n  // if destination is a Subscription, then it is a Subscriber.\r\n  if (isSubscription(destination)) {\r\n    destination.add(this);\r\n  }\r\n} else {\r\n  this.destination = EMPTY_OBSERVER;\r\n}"],"parameters":[{"name":"destination","type":"Subscriber<any> | Observer<any>","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"typeParameters":[],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Internal implementation detail, do not use directly. Will be made internal in v8.\r\nThere is no reason to directly create an instance of Subscriber. This type is exported for typings reasons."}]}],"kind":5,"overloads":[]}],"properties":[{"name":"isStopped","type":"boolean","initializer":"false","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Internal implementation detail, do not use directly. Will be made internal in v8."}]}],"isStatic":false,"scope":"protected","isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"destination","type":"Subscriber<any> | Observer<any>","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Internal implementation detail, do not use directly. Will be made internal in v8."}]}],"isStatic":false,"scope":"protected","isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false}],"extends":"Subscription","getAccessors":[],"setAccessors":[]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]},{"methodName":"complete","usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":1,"index":1},"sources":[{"source":{"name":"complete","statements":["if (this.isStopped) {\r\n  handleStoppedNotification(COMPLETE_NOTIFICATION, this);\r\n} else {\r\n  this.isStopped = true;\r\n  this._complete();\r\n}"],"parameters":[],"returnType":"void","typeParameters":[],"docs":[{"kind":24,"description":"\r\nThe {@link Observer} callback to receive a valueless notification of type\r\n`complete` from the Observable. Notifies the Observer that the Observable\r\nhas finished sending push-based notifications.","tags":[{"kind":25,"tagName":"return","text":"{void}"}]}],"isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"isAbstract":false,"decorators":[],"hasOverrideKeyword":false,"kind":26,"overloads":[],"declarationInfo":{"className":"Subscriber","modulePath":"..\\src\\internal\\Subscriber.ts"},"classStructure":{"decorators":[],"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nImplements the {@link Observer} interface and extends the\r\n{@link Subscription} class. While the {@link Observer} is the public API for\r\nconsuming the values of an {@link Observable}, all Observers get converted to\r\na Subscriber, in order to provide Subscription-like capabilities such as\r\n`unsubscribe`. Subscriber is a common type in RxJS, and crucial for\r\nimplementing operators, but it is rarely used as a public API.\r\n","tags":[{"kind":25,"tagName":"class","text":"Subscriber<T>"}]}],"isAbstract":false,"implements":["Observer<T>"],"name":"Subscriber","isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"kind":2,"ctors":[{"statements":["super();","if (destination) {\r\n  this.destination = destination;\r\n  // Automatically chain subscriptions together here.\r\n  // if destination is a Subscription, then it is a Subscriber.\r\n  if (isSubscription(destination)) {\r\n    destination.add(this);\r\n  }\r\n} else {\r\n  this.destination = EMPTY_OBSERVER;\r\n}"],"parameters":[{"name":"destination","type":"Subscriber<any> | Observer<any>","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"typeParameters":[],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Internal implementation detail, do not use directly. Will be made internal in v8.\r\nThere is no reason to directly create an instance of Subscriber. This type is exported for typings reasons."}]}],"kind":5,"overloads":[]}],"properties":[{"name":"isStopped","type":"boolean","initializer":"false","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Internal implementation detail, do not use directly. Will be made internal in v8."}]}],"isStatic":false,"scope":"protected","isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"destination","type":"Subscriber<any> | Observer<any>","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Internal implementation detail, do not use directly. Will be made internal in v8."}]}],"isStatic":false,"scope":"protected","isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false}],"extends":"Subscription","getAccessors":[],"setAccessors":[]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]},{"methodName":"unsubscribe","usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":1,"index":1},"sources":[{"source":{"name":"unsubscribe","statements":["if (!this.closed) {\r\n  this.isStopped = true;\r\n  super.unsubscribe();\r\n  this.destination = null!;\r\n}"],"parameters":[],"returnType":"void","typeParameters":[],"docs":[],"isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"isAbstract":false,"decorators":[],"hasOverrideKeyword":false,"kind":26,"overloads":[],"declarationInfo":{"className":"Subscriber","modulePath":"..\\src\\internal\\Subscriber.ts"},"classStructure":{"decorators":[],"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nImplements the {@link Observer} interface and extends the\r\n{@link Subscription} class. While the {@link Observer} is the public API for\r\nconsuming the values of an {@link Observable}, all Observers get converted to\r\na Subscriber, in order to provide Subscription-like capabilities such as\r\n`unsubscribe`. Subscriber is a common type in RxJS, and crucial for\r\nimplementing operators, but it is rarely used as a public API.\r\n","tags":[{"kind":25,"tagName":"class","text":"Subscriber<T>"}]}],"isAbstract":false,"implements":["Observer<T>"],"name":"Subscriber","isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"kind":2,"ctors":[{"statements":["super();","if (destination) {\r\n  this.destination = destination;\r\n  // Automatically chain subscriptions together here.\r\n  // if destination is a Subscription, then it is a Subscriber.\r\n  if (isSubscription(destination)) {\r\n    destination.add(this);\r\n  }\r\n} else {\r\n  this.destination = EMPTY_OBSERVER;\r\n}"],"parameters":[{"name":"destination","type":"Subscriber<any> | Observer<any>","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"typeParameters":[],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Internal implementation detail, do not use directly. Will be made internal in v8.\r\nThere is no reason to directly create an instance of Subscriber. This type is exported for typings reasons."}]}],"kind":5,"overloads":[]}],"properties":[{"name":"isStopped","type":"boolean","initializer":"false","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Internal implementation detail, do not use directly. Will be made internal in v8."}]}],"isStatic":false,"scope":"protected","isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"destination","type":"Subscriber<any> | Observer<any>","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Internal implementation detail, do not use directly. Will be made internal in v8."}]}],"isStatic":false,"scope":"protected","isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false}],"extends":"Subscription","getAccessors":[],"setAccessors":[]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]}]}},"usabilityResult":{"index":0.9,"paramLengthComplexity":1,"paramSequenceComplexity":0.8}},"..\\src\\internal\\Notification.ts":{"moduleComponents":{"Notification":{"kind":2,"usabilityResult":{"index":0.9375,"paramLengthComplexity":1,"paramSequenceComplexity":0.875},"methods":[{"methodName":"observe","usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":1,"index":1},"sources":[{"source":{"name":"observe","statements":["return observeNotification(this as ObservableNotification<T>, observer);"],"parameters":[{"name":"observer","type":"PartialObserver<T>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"void","typeParameters":[],"docs":[{"kind":24,"description":"\r\nExecutes the appropriate handler on a passed `observer` given the `kind` of notification.\r\nIf the handler is missing it will do nothing. Even if the notification is an error, if\r\nthere is no error handler on the observer, an error will not be thrown, it will noop.","tags":[{"kind":25,"tagName":"param","text":"observer The observer to notify."}]}],"isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"isAbstract":false,"decorators":[],"hasOverrideKeyword":false,"kind":26,"overloads":[],"declarationInfo":{"className":"Notification","modulePath":"..\\src\\internal\\Notification.ts"},"classStructure":{"decorators":[],"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nRepresents a push-based event or value that an {@link Observable} can emit.\r\nThis class is particularly useful for operators that manage notifications,\r\nlike {@link materialize}, {@link dematerialize}, {@link observeOn}, and\r\nothers. Besides wrapping the actual delivered value, it also annotates it\r\nwith metadata of, for instance, what type of push message it is (`next`,\r\n`error`, or `complete`).\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link materialize}"},{"kind":25,"tagName":"see","text":"{@link dematerialize}"},{"kind":25,"tagName":"see","text":"{@link observeOn}"},{"kind":25,"tagName":"deprecated","text":"It is NOT recommended to create instances of `Notification` directly.\r\nRather, try to create POJOs matching the signature outlined in {@link ObservableNotification}.\r\nFor example: `{ kind: 'N', value: 1 }`, `{ kind: 'E', error: new Error('bad') }`, or `{ kind: 'C' }`.\r\nWill be removed in v8."}]}],"isAbstract":false,"implements":[],"name":"Notification","isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"kind":2,"ctors":[{"statements":["this.hasValue = kind === 'N';"],"parameters":[{"name":"kind","type":"'N' | 'E' | 'C'","isReadonly":true,"scope":"public","decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"value","type":"T","isReadonly":true,"scope":"public","decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"error","type":"any","isReadonly":true,"scope":"public","decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"typeParameters":[],"docs":[],"kind":5,"overloads":[{"parameters":[{"name":"kind","type":"'N'","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"value","type":"T","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"docs":[{"kind":24,"description":"\r\nCreates a \"Next\" notification object.","tags":[{"kind":25,"tagName":"param","text":"kind Always `'N'`"},{"kind":25,"tagName":"param","text":"value The value to notify with if observed."},{"kind":25,"tagName":"deprecated","text":"Internal implementation detail. Use {@link Notification#createNext createNext} instead."}]}],"typeParameters":[],"kind":6},{"parameters":[{"name":"kind","type":"'E'","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"value","type":"undefined","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"error","type":"any","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"docs":[{"kind":24,"description":"\r\nCreates an \"Error\" notification object.","tags":[{"kind":25,"tagName":"param","text":"kind Always `'E'`"},{"kind":25,"tagName":"param","text":"value Always `undefined`"},{"kind":25,"tagName":"param","text":"error The error to notify with if observed."},{"kind":25,"tagName":"deprecated","text":"Internal implementation detail. Use {@link Notification#createError createError} instead."}]}],"typeParameters":[],"kind":6},{"parameters":[{"name":"kind","type":"'C'","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"docs":[{"kind":24,"description":"\r\nCreates a \"completion\" notification object.","tags":[{"kind":25,"tagName":"param","text":"kind Always `'C'`"},{"kind":25,"tagName":"deprecated","text":"Internal implementation detail. Use {@link Notification#createComplete createComplete} instead."}]}],"typeParameters":[],"kind":6}]}],"properties":[{"name":"hasValue","type":"boolean","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":true,"docs":[{"kind":24,"description":"\r\nA value signifying that the notification will \"next\" if observed. In truth,\r\nThis is really synonymous with just checking `kind === \"N\"`.","tags":[{"kind":25,"tagName":"deprecated","text":"Will be removed in v8. Instead, just check to see if the value of `kind` is `\"N\"`."}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"completeNotification","initializer":"new Notification('C') as Notification<never> & CompleteNotification","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[],"isStatic":true,"scope":"private","isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false}],"getAccessors":[],"setAccessors":[]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]},{"methodName":"do","usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":0.5,"index":0.75},"sources":[{"source":{"parameters":[{"name":"next","type":"(value: T) => void","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"error","type":"(err: any) => void","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"complete","type":"() => void","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"void","isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"isAbstract":false,"typeParameters":[],"hasOverrideKeyword":false,"docs":[{"kind":24,"description":"\r\nExecutes a notification on the appropriate handler from a list provided.\r\nIf a handler is missing for the kind of notification, nothing is called\r\nand no error is thrown, it will be a noop.","tags":[{"kind":25,"tagName":"param","text":"next A next handler"},{"kind":25,"tagName":"param","text":"error An error handler"},{"kind":25,"tagName":"param","text":"complete A complete handler"},{"kind":25,"tagName":"deprecated","text":"Replaced with {@link Notification#observe observe}. Will be removed in v8."}]}],"kind":27,"declarationInfo":{"className":"Notification","modulePath":"..\\src\\internal\\Notification.ts"},"classStructure":{"decorators":[],"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nRepresents a push-based event or value that an {@link Observable} can emit.\r\nThis class is particularly useful for operators that manage notifications,\r\nlike {@link materialize}, {@link dematerialize}, {@link observeOn}, and\r\nothers. Besides wrapping the actual delivered value, it also annotates it\r\nwith metadata of, for instance, what type of push message it is (`next`,\r\n`error`, or `complete`).\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link materialize}"},{"kind":25,"tagName":"see","text":"{@link dematerialize}"},{"kind":25,"tagName":"see","text":"{@link observeOn}"},{"kind":25,"tagName":"deprecated","text":"It is NOT recommended to create instances of `Notification` directly.\r\nRather, try to create POJOs matching the signature outlined in {@link ObservableNotification}.\r\nFor example: `{ kind: 'N', value: 1 }`, `{ kind: 'E', error: new Error('bad') }`, or `{ kind: 'C' }`.\r\nWill be removed in v8."}]}],"isAbstract":false,"implements":[],"name":"Notification","isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"kind":2,"ctors":[{"statements":["this.hasValue = kind === 'N';"],"parameters":[{"name":"kind","type":"'N' | 'E' | 'C'","isReadonly":true,"scope":"public","decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"value","type":"T","isReadonly":true,"scope":"public","decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"error","type":"any","isReadonly":true,"scope":"public","decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"typeParameters":[],"docs":[],"kind":5,"overloads":[{"parameters":[{"name":"kind","type":"'N'","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"value","type":"T","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"docs":[{"kind":24,"description":"\r\nCreates a \"Next\" notification object.","tags":[{"kind":25,"tagName":"param","text":"kind Always `'N'`"},{"kind":25,"tagName":"param","text":"value The value to notify with if observed."},{"kind":25,"tagName":"deprecated","text":"Internal implementation detail. Use {@link Notification#createNext createNext} instead."}]}],"typeParameters":[],"kind":6},{"parameters":[{"name":"kind","type":"'E'","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"value","type":"undefined","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"error","type":"any","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"docs":[{"kind":24,"description":"\r\nCreates an \"Error\" notification object.","tags":[{"kind":25,"tagName":"param","text":"kind Always `'E'`"},{"kind":25,"tagName":"param","text":"value Always `undefined`"},{"kind":25,"tagName":"param","text":"error The error to notify with if observed."},{"kind":25,"tagName":"deprecated","text":"Internal implementation detail. Use {@link Notification#createError createError} instead."}]}],"typeParameters":[],"kind":6},{"parameters":[{"name":"kind","type":"'C'","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"docs":[{"kind":24,"description":"\r\nCreates a \"completion\" notification object.","tags":[{"kind":25,"tagName":"param","text":"kind Always `'C'`"},{"kind":25,"tagName":"deprecated","text":"Internal implementation detail. Use {@link Notification#createComplete createComplete} instead."}]}],"typeParameters":[],"kind":6}]}],"properties":[{"name":"hasValue","type":"boolean","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":true,"docs":[{"kind":24,"description":"\r\nA value signifying that the notification will \"next\" if observed. In truth,\r\nThis is really synonymous with just checking `kind === \"N\"`.","tags":[{"kind":25,"tagName":"deprecated","text":"Will be removed in v8. Instead, just check to see if the value of `kind` is `\"N\"`."}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"completeNotification","initializer":"new Notification('C') as Notification<never> & CompleteNotification","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[],"isStatic":true,"scope":"private","isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false}],"getAccessors":[],"setAccessors":[]}},"usabilityResult":{"index":0.75,"paramLengthComplexity":1,"paramSequenceComplexity":0.5}},{"source":{"parameters":[{"name":"next","type":"(value: T) => void","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"error","type":"(err: any) => void","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"void","isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"isAbstract":false,"typeParameters":[],"hasOverrideKeyword":false,"docs":[{"kind":24,"description":"\r\nExecutes a notification on the appropriate handler from a list provided.\r\nIf a handler is missing for the kind of notification, nothing is called\r\nand no error is thrown, it will be a noop.","tags":[{"kind":25,"tagName":"param","text":"next A next handler"},{"kind":25,"tagName":"param","text":"error An error handler"},{"kind":25,"tagName":"deprecated","text":"Replaced with {@link Notification#observe observe}. Will be removed in v8."}]}],"kind":27,"declarationInfo":{"className":"Notification","modulePath":"..\\src\\internal\\Notification.ts"},"classStructure":{"decorators":[],"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nRepresents a push-based event or value that an {@link Observable} can emit.\r\nThis class is particularly useful for operators that manage notifications,\r\nlike {@link materialize}, {@link dematerialize}, {@link observeOn}, and\r\nothers. Besides wrapping the actual delivered value, it also annotates it\r\nwith metadata of, for instance, what type of push message it is (`next`,\r\n`error`, or `complete`).\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link materialize}"},{"kind":25,"tagName":"see","text":"{@link dematerialize}"},{"kind":25,"tagName":"see","text":"{@link observeOn}"},{"kind":25,"tagName":"deprecated","text":"It is NOT recommended to create instances of `Notification` directly.\r\nRather, try to create POJOs matching the signature outlined in {@link ObservableNotification}.\r\nFor example: `{ kind: 'N', value: 1 }`, `{ kind: 'E', error: new Error('bad') }`, or `{ kind: 'C' }`.\r\nWill be removed in v8."}]}],"isAbstract":false,"implements":[],"name":"Notification","isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"kind":2,"ctors":[{"statements":["this.hasValue = kind === 'N';"],"parameters":[{"name":"kind","type":"'N' | 'E' | 'C'","isReadonly":true,"scope":"public","decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"value","type":"T","isReadonly":true,"scope":"public","decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"error","type":"any","isReadonly":true,"scope":"public","decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"typeParameters":[],"docs":[],"kind":5,"overloads":[{"parameters":[{"name":"kind","type":"'N'","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"value","type":"T","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"docs":[{"kind":24,"description":"\r\nCreates a \"Next\" notification object.","tags":[{"kind":25,"tagName":"param","text":"kind Always `'N'`"},{"kind":25,"tagName":"param","text":"value The value to notify with if observed."},{"kind":25,"tagName":"deprecated","text":"Internal implementation detail. Use {@link Notification#createNext createNext} instead."}]}],"typeParameters":[],"kind":6},{"parameters":[{"name":"kind","type":"'E'","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"value","type":"undefined","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"error","type":"any","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"docs":[{"kind":24,"description":"\r\nCreates an \"Error\" notification object.","tags":[{"kind":25,"tagName":"param","text":"kind Always `'E'`"},{"kind":25,"tagName":"param","text":"value Always `undefined`"},{"kind":25,"tagName":"param","text":"error The error to notify with if observed."},{"kind":25,"tagName":"deprecated","text":"Internal implementation detail. Use {@link Notification#createError createError} instead."}]}],"typeParameters":[],"kind":6},{"parameters":[{"name":"kind","type":"'C'","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"docs":[{"kind":24,"description":"\r\nCreates a \"completion\" notification object.","tags":[{"kind":25,"tagName":"param","text":"kind Always `'C'`"},{"kind":25,"tagName":"deprecated","text":"Internal implementation detail. Use {@link Notification#createComplete createComplete} instead."}]}],"typeParameters":[],"kind":6}]}],"properties":[{"name":"hasValue","type":"boolean","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":true,"docs":[{"kind":24,"description":"\r\nA value signifying that the notification will \"next\" if observed. In truth,\r\nThis is really synonymous with just checking `kind === \"N\"`.","tags":[{"kind":25,"tagName":"deprecated","text":"Will be removed in v8. Instead, just check to see if the value of `kind` is `\"N\"`."}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"completeNotification","initializer":"new Notification('C') as Notification<never> & CompleteNotification","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[],"isStatic":true,"scope":"private","isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false}],"getAccessors":[],"setAccessors":[]}},"usabilityResult":{"index":0.5,"paramLengthComplexity":1,"paramSequenceComplexity":0}},{"source":{"parameters":[{"name":"next","type":"(value: T) => void","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"void","isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"isAbstract":false,"typeParameters":[],"hasOverrideKeyword":false,"docs":[{"kind":24,"description":"\r\nExecutes the next handler if the Notification is of `kind` `\"N\"`. Otherwise\r\nthis will not error, and it will be a noop.","tags":[{"kind":25,"tagName":"param","text":"next The next handler"},{"kind":25,"tagName":"deprecated","text":"Replaced with {@link Notification#observe observe}. Will be removed in v8."}]}],"kind":27,"declarationInfo":{"className":"Notification","modulePath":"..\\src\\internal\\Notification.ts"},"classStructure":{"decorators":[],"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nRepresents a push-based event or value that an {@link Observable} can emit.\r\nThis class is particularly useful for operators that manage notifications,\r\nlike {@link materialize}, {@link dematerialize}, {@link observeOn}, and\r\nothers. Besides wrapping the actual delivered value, it also annotates it\r\nwith metadata of, for instance, what type of push message it is (`next`,\r\n`error`, or `complete`).\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link materialize}"},{"kind":25,"tagName":"see","text":"{@link dematerialize}"},{"kind":25,"tagName":"see","text":"{@link observeOn}"},{"kind":25,"tagName":"deprecated","text":"It is NOT recommended to create instances of `Notification` directly.\r\nRather, try to create POJOs matching the signature outlined in {@link ObservableNotification}.\r\nFor example: `{ kind: 'N', value: 1 }`, `{ kind: 'E', error: new Error('bad') }`, or `{ kind: 'C' }`.\r\nWill be removed in v8."}]}],"isAbstract":false,"implements":[],"name":"Notification","isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"kind":2,"ctors":[{"statements":["this.hasValue = kind === 'N';"],"parameters":[{"name":"kind","type":"'N' | 'E' | 'C'","isReadonly":true,"scope":"public","decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"value","type":"T","isReadonly":true,"scope":"public","decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"error","type":"any","isReadonly":true,"scope":"public","decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"typeParameters":[],"docs":[],"kind":5,"overloads":[{"parameters":[{"name":"kind","type":"'N'","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"value","type":"T","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"docs":[{"kind":24,"description":"\r\nCreates a \"Next\" notification object.","tags":[{"kind":25,"tagName":"param","text":"kind Always `'N'`"},{"kind":25,"tagName":"param","text":"value The value to notify with if observed."},{"kind":25,"tagName":"deprecated","text":"Internal implementation detail. Use {@link Notification#createNext createNext} instead."}]}],"typeParameters":[],"kind":6},{"parameters":[{"name":"kind","type":"'E'","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"value","type":"undefined","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"error","type":"any","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"docs":[{"kind":24,"description":"\r\nCreates an \"Error\" notification object.","tags":[{"kind":25,"tagName":"param","text":"kind Always `'E'`"},{"kind":25,"tagName":"param","text":"value Always `undefined`"},{"kind":25,"tagName":"param","text":"error The error to notify with if observed."},{"kind":25,"tagName":"deprecated","text":"Internal implementation detail. Use {@link Notification#createError createError} instead."}]}],"typeParameters":[],"kind":6},{"parameters":[{"name":"kind","type":"'C'","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"docs":[{"kind":24,"description":"\r\nCreates a \"completion\" notification object.","tags":[{"kind":25,"tagName":"param","text":"kind Always `'C'`"},{"kind":25,"tagName":"deprecated","text":"Internal implementation detail. Use {@link Notification#createComplete createComplete} instead."}]}],"typeParameters":[],"kind":6}]}],"properties":[{"name":"hasValue","type":"boolean","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":true,"docs":[{"kind":24,"description":"\r\nA value signifying that the notification will \"next\" if observed. In truth,\r\nThis is really synonymous with just checking `kind === \"N\"`.","tags":[{"kind":25,"tagName":"deprecated","text":"Will be removed in v8. Instead, just check to see if the value of `kind` is `\"N\"`."}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"completeNotification","initializer":"new Notification('C') as Notification<never> & CompleteNotification","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[],"isStatic":true,"scope":"private","isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false}],"getAccessors":[],"setAccessors":[]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]},{"methodName":"accept","usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":0.625,"index":0.8125},"sources":[{"source":{"parameters":[{"name":"next","type":"(value: T) => void","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"error","type":"(err: any) => void","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"complete","type":"() => void","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"void","isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"isAbstract":false,"typeParameters":[],"hasOverrideKeyword":false,"docs":[{"kind":24,"description":"\r\nExecutes a notification on the appropriate handler from a list provided.\r\nIf a handler is missing for the kind of notification, nothing is called\r\nand no error is thrown, it will be a noop.","tags":[{"kind":25,"tagName":"param","text":"next A next handler"},{"kind":25,"tagName":"param","text":"error An error handler"},{"kind":25,"tagName":"param","text":"complete A complete handler"},{"kind":25,"tagName":"deprecated","text":"Replaced with {@link Notification#observe observe}. Will be removed in v8."}]}],"kind":27,"declarationInfo":{"className":"Notification","modulePath":"..\\src\\internal\\Notification.ts"},"classStructure":{"decorators":[],"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nRepresents a push-based event or value that an {@link Observable} can emit.\r\nThis class is particularly useful for operators that manage notifications,\r\nlike {@link materialize}, {@link dematerialize}, {@link observeOn}, and\r\nothers. Besides wrapping the actual delivered value, it also annotates it\r\nwith metadata of, for instance, what type of push message it is (`next`,\r\n`error`, or `complete`).\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link materialize}"},{"kind":25,"tagName":"see","text":"{@link dematerialize}"},{"kind":25,"tagName":"see","text":"{@link observeOn}"},{"kind":25,"tagName":"deprecated","text":"It is NOT recommended to create instances of `Notification` directly.\r\nRather, try to create POJOs matching the signature outlined in {@link ObservableNotification}.\r\nFor example: `{ kind: 'N', value: 1 }`, `{ kind: 'E', error: new Error('bad') }`, or `{ kind: 'C' }`.\r\nWill be removed in v8."}]}],"isAbstract":false,"implements":[],"name":"Notification","isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"kind":2,"ctors":[{"statements":["this.hasValue = kind === 'N';"],"parameters":[{"name":"kind","type":"'N' | 'E' | 'C'","isReadonly":true,"scope":"public","decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"value","type":"T","isReadonly":true,"scope":"public","decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"error","type":"any","isReadonly":true,"scope":"public","decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"typeParameters":[],"docs":[],"kind":5,"overloads":[{"parameters":[{"name":"kind","type":"'N'","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"value","type":"T","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"docs":[{"kind":24,"description":"\r\nCreates a \"Next\" notification object.","tags":[{"kind":25,"tagName":"param","text":"kind Always `'N'`"},{"kind":25,"tagName":"param","text":"value The value to notify with if observed."},{"kind":25,"tagName":"deprecated","text":"Internal implementation detail. Use {@link Notification#createNext createNext} instead."}]}],"typeParameters":[],"kind":6},{"parameters":[{"name":"kind","type":"'E'","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"value","type":"undefined","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"error","type":"any","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"docs":[{"kind":24,"description":"\r\nCreates an \"Error\" notification object.","tags":[{"kind":25,"tagName":"param","text":"kind Always `'E'`"},{"kind":25,"tagName":"param","text":"value Always `undefined`"},{"kind":25,"tagName":"param","text":"error The error to notify with if observed."},{"kind":25,"tagName":"deprecated","text":"Internal implementation detail. Use {@link Notification#createError createError} instead."}]}],"typeParameters":[],"kind":6},{"parameters":[{"name":"kind","type":"'C'","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"docs":[{"kind":24,"description":"\r\nCreates a \"completion\" notification object.","tags":[{"kind":25,"tagName":"param","text":"kind Always `'C'`"},{"kind":25,"tagName":"deprecated","text":"Internal implementation detail. Use {@link Notification#createComplete createComplete} instead."}]}],"typeParameters":[],"kind":6}]}],"properties":[{"name":"hasValue","type":"boolean","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":true,"docs":[{"kind":24,"description":"\r\nA value signifying that the notification will \"next\" if observed. In truth,\r\nThis is really synonymous with just checking `kind === \"N\"`.","tags":[{"kind":25,"tagName":"deprecated","text":"Will be removed in v8. Instead, just check to see if the value of `kind` is `\"N\"`."}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"completeNotification","initializer":"new Notification('C') as Notification<never> & CompleteNotification","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[],"isStatic":true,"scope":"private","isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false}],"getAccessors":[],"setAccessors":[]}},"usabilityResult":{"index":0.75,"paramLengthComplexity":1,"paramSequenceComplexity":0.5}},{"source":{"parameters":[{"name":"next","type":"(value: T) => void","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"error","type":"(err: any) => void","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"void","isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"isAbstract":false,"typeParameters":[],"hasOverrideKeyword":false,"docs":[{"kind":24,"description":"\r\nExecutes a notification on the appropriate handler from a list provided.\r\nIf a handler is missing for the kind of notification, nothing is called\r\nand no error is thrown, it will be a noop.","tags":[{"kind":25,"tagName":"param","text":"next A next handler"},{"kind":25,"tagName":"param","text":"error An error handler"},{"kind":25,"tagName":"deprecated","text":"Replaced with {@link Notification#observe observe}. Will be removed in v8."}]}],"kind":27,"declarationInfo":{"className":"Notification","modulePath":"..\\src\\internal\\Notification.ts"},"classStructure":{"decorators":[],"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nRepresents a push-based event or value that an {@link Observable} can emit.\r\nThis class is particularly useful for operators that manage notifications,\r\nlike {@link materialize}, {@link dematerialize}, {@link observeOn}, and\r\nothers. Besides wrapping the actual delivered value, it also annotates it\r\nwith metadata of, for instance, what type of push message it is (`next`,\r\n`error`, or `complete`).\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link materialize}"},{"kind":25,"tagName":"see","text":"{@link dematerialize}"},{"kind":25,"tagName":"see","text":"{@link observeOn}"},{"kind":25,"tagName":"deprecated","text":"It is NOT recommended to create instances of `Notification` directly.\r\nRather, try to create POJOs matching the signature outlined in {@link ObservableNotification}.\r\nFor example: `{ kind: 'N', value: 1 }`, `{ kind: 'E', error: new Error('bad') }`, or `{ kind: 'C' }`.\r\nWill be removed in v8."}]}],"isAbstract":false,"implements":[],"name":"Notification","isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"kind":2,"ctors":[{"statements":["this.hasValue = kind === 'N';"],"parameters":[{"name":"kind","type":"'N' | 'E' | 'C'","isReadonly":true,"scope":"public","decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"value","type":"T","isReadonly":true,"scope":"public","decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"error","type":"any","isReadonly":true,"scope":"public","decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"typeParameters":[],"docs":[],"kind":5,"overloads":[{"parameters":[{"name":"kind","type":"'N'","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"value","type":"T","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"docs":[{"kind":24,"description":"\r\nCreates a \"Next\" notification object.","tags":[{"kind":25,"tagName":"param","text":"kind Always `'N'`"},{"kind":25,"tagName":"param","text":"value The value to notify with if observed."},{"kind":25,"tagName":"deprecated","text":"Internal implementation detail. Use {@link Notification#createNext createNext} instead."}]}],"typeParameters":[],"kind":6},{"parameters":[{"name":"kind","type":"'E'","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"value","type":"undefined","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"error","type":"any","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"docs":[{"kind":24,"description":"\r\nCreates an \"Error\" notification object.","tags":[{"kind":25,"tagName":"param","text":"kind Always `'E'`"},{"kind":25,"tagName":"param","text":"value Always `undefined`"},{"kind":25,"tagName":"param","text":"error The error to notify with if observed."},{"kind":25,"tagName":"deprecated","text":"Internal implementation detail. Use {@link Notification#createError createError} instead."}]}],"typeParameters":[],"kind":6},{"parameters":[{"name":"kind","type":"'C'","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"docs":[{"kind":24,"description":"\r\nCreates a \"completion\" notification object.","tags":[{"kind":25,"tagName":"param","text":"kind Always `'C'`"},{"kind":25,"tagName":"deprecated","text":"Internal implementation detail. Use {@link Notification#createComplete createComplete} instead."}]}],"typeParameters":[],"kind":6}]}],"properties":[{"name":"hasValue","type":"boolean","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":true,"docs":[{"kind":24,"description":"\r\nA value signifying that the notification will \"next\" if observed. In truth,\r\nThis is really synonymous with just checking `kind === \"N\"`.","tags":[{"kind":25,"tagName":"deprecated","text":"Will be removed in v8. Instead, just check to see if the value of `kind` is `\"N\"`."}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"completeNotification","initializer":"new Notification('C') as Notification<never> & CompleteNotification","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[],"isStatic":true,"scope":"private","isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false}],"getAccessors":[],"setAccessors":[]}},"usabilityResult":{"index":0.5,"paramLengthComplexity":1,"paramSequenceComplexity":0}},{"source":{"parameters":[{"name":"next","type":"(value: T) => void","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"void","isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"isAbstract":false,"typeParameters":[],"hasOverrideKeyword":false,"docs":[{"kind":24,"description":"\r\nExecutes the next handler if the Notification is of `kind` `\"N\"`. Otherwise\r\nthis will not error, and it will be a noop.","tags":[{"kind":25,"tagName":"param","text":"next The next handler"},{"kind":25,"tagName":"deprecated","text":"Replaced with {@link Notification#observe observe}. Will be removed in v8."}]}],"kind":27,"declarationInfo":{"className":"Notification","modulePath":"..\\src\\internal\\Notification.ts"},"classStructure":{"decorators":[],"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nRepresents a push-based event or value that an {@link Observable} can emit.\r\nThis class is particularly useful for operators that manage notifications,\r\nlike {@link materialize}, {@link dematerialize}, {@link observeOn}, and\r\nothers. Besides wrapping the actual delivered value, it also annotates it\r\nwith metadata of, for instance, what type of push message it is (`next`,\r\n`error`, or `complete`).\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link materialize}"},{"kind":25,"tagName":"see","text":"{@link dematerialize}"},{"kind":25,"tagName":"see","text":"{@link observeOn}"},{"kind":25,"tagName":"deprecated","text":"It is NOT recommended to create instances of `Notification` directly.\r\nRather, try to create POJOs matching the signature outlined in {@link ObservableNotification}.\r\nFor example: `{ kind: 'N', value: 1 }`, `{ kind: 'E', error: new Error('bad') }`, or `{ kind: 'C' }`.\r\nWill be removed in v8."}]}],"isAbstract":false,"implements":[],"name":"Notification","isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"kind":2,"ctors":[{"statements":["this.hasValue = kind === 'N';"],"parameters":[{"name":"kind","type":"'N' | 'E' | 'C'","isReadonly":true,"scope":"public","decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"value","type":"T","isReadonly":true,"scope":"public","decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"error","type":"any","isReadonly":true,"scope":"public","decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"typeParameters":[],"docs":[],"kind":5,"overloads":[{"parameters":[{"name":"kind","type":"'N'","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"value","type":"T","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"docs":[{"kind":24,"description":"\r\nCreates a \"Next\" notification object.","tags":[{"kind":25,"tagName":"param","text":"kind Always `'N'`"},{"kind":25,"tagName":"param","text":"value The value to notify with if observed."},{"kind":25,"tagName":"deprecated","text":"Internal implementation detail. Use {@link Notification#createNext createNext} instead."}]}],"typeParameters":[],"kind":6},{"parameters":[{"name":"kind","type":"'E'","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"value","type":"undefined","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"error","type":"any","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"docs":[{"kind":24,"description":"\r\nCreates an \"Error\" notification object.","tags":[{"kind":25,"tagName":"param","text":"kind Always `'E'`"},{"kind":25,"tagName":"param","text":"value Always `undefined`"},{"kind":25,"tagName":"param","text":"error The error to notify with if observed."},{"kind":25,"tagName":"deprecated","text":"Internal implementation detail. Use {@link Notification#createError createError} instead."}]}],"typeParameters":[],"kind":6},{"parameters":[{"name":"kind","type":"'C'","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"docs":[{"kind":24,"description":"\r\nCreates a \"completion\" notification object.","tags":[{"kind":25,"tagName":"param","text":"kind Always `'C'`"},{"kind":25,"tagName":"deprecated","text":"Internal implementation detail. Use {@link Notification#createComplete createComplete} instead."}]}],"typeParameters":[],"kind":6}]}],"properties":[{"name":"hasValue","type":"boolean","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":true,"docs":[{"kind":24,"description":"\r\nA value signifying that the notification will \"next\" if observed. In truth,\r\nThis is really synonymous with just checking `kind === \"N\"`.","tags":[{"kind":25,"tagName":"deprecated","text":"Will be removed in v8. Instead, just check to see if the value of `kind` is `\"N\"`."}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"completeNotification","initializer":"new Notification('C') as Notification<never> & CompleteNotification","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[],"isStatic":true,"scope":"private","isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false}],"getAccessors":[],"setAccessors":[]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},{"source":{"parameters":[{"name":"observer","type":"PartialObserver<T>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"void","isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"isAbstract":false,"typeParameters":[],"hasOverrideKeyword":false,"docs":[{"kind":24,"description":"\r\nExecutes the appropriate handler on a passed `observer` given the `kind` of notification.\r\nIf the handler is missing it will do nothing. Even if the notification is an error, if\r\nthere is no error handler on the observer, an error will not be thrown, it will noop.","tags":[{"kind":25,"tagName":"param","text":"observer The observer to notify."},{"kind":25,"tagName":"deprecated","text":"Replaced with {@link Notification#observe observe}. Will be removed in v8."}]}],"kind":27,"declarationInfo":{"className":"Notification","modulePath":"..\\src\\internal\\Notification.ts"},"classStructure":{"decorators":[],"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nRepresents a push-based event or value that an {@link Observable} can emit.\r\nThis class is particularly useful for operators that manage notifications,\r\nlike {@link materialize}, {@link dematerialize}, {@link observeOn}, and\r\nothers. Besides wrapping the actual delivered value, it also annotates it\r\nwith metadata of, for instance, what type of push message it is (`next`,\r\n`error`, or `complete`).\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link materialize}"},{"kind":25,"tagName":"see","text":"{@link dematerialize}"},{"kind":25,"tagName":"see","text":"{@link observeOn}"},{"kind":25,"tagName":"deprecated","text":"It is NOT recommended to create instances of `Notification` directly.\r\nRather, try to create POJOs matching the signature outlined in {@link ObservableNotification}.\r\nFor example: `{ kind: 'N', value: 1 }`, `{ kind: 'E', error: new Error('bad') }`, or `{ kind: 'C' }`.\r\nWill be removed in v8."}]}],"isAbstract":false,"implements":[],"name":"Notification","isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"kind":2,"ctors":[{"statements":["this.hasValue = kind === 'N';"],"parameters":[{"name":"kind","type":"'N' | 'E' | 'C'","isReadonly":true,"scope":"public","decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"value","type":"T","isReadonly":true,"scope":"public","decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"error","type":"any","isReadonly":true,"scope":"public","decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"typeParameters":[],"docs":[],"kind":5,"overloads":[{"parameters":[{"name":"kind","type":"'N'","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"value","type":"T","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"docs":[{"kind":24,"description":"\r\nCreates a \"Next\" notification object.","tags":[{"kind":25,"tagName":"param","text":"kind Always `'N'`"},{"kind":25,"tagName":"param","text":"value The value to notify with if observed."},{"kind":25,"tagName":"deprecated","text":"Internal implementation detail. Use {@link Notification#createNext createNext} instead."}]}],"typeParameters":[],"kind":6},{"parameters":[{"name":"kind","type":"'E'","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"value","type":"undefined","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"error","type":"any","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"docs":[{"kind":24,"description":"\r\nCreates an \"Error\" notification object.","tags":[{"kind":25,"tagName":"param","text":"kind Always `'E'`"},{"kind":25,"tagName":"param","text":"value Always `undefined`"},{"kind":25,"tagName":"param","text":"error The error to notify with if observed."},{"kind":25,"tagName":"deprecated","text":"Internal implementation detail. Use {@link Notification#createError createError} instead."}]}],"typeParameters":[],"kind":6},{"parameters":[{"name":"kind","type":"'C'","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"docs":[{"kind":24,"description":"\r\nCreates a \"completion\" notification object.","tags":[{"kind":25,"tagName":"param","text":"kind Always `'C'`"},{"kind":25,"tagName":"deprecated","text":"Internal implementation detail. Use {@link Notification#createComplete createComplete} instead."}]}],"typeParameters":[],"kind":6}]}],"properties":[{"name":"hasValue","type":"boolean","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":true,"docs":[{"kind":24,"description":"\r\nA value signifying that the notification will \"next\" if observed. In truth,\r\nThis is really synonymous with just checking `kind === \"N\"`.","tags":[{"kind":25,"tagName":"deprecated","text":"Will be removed in v8. Instead, just check to see if the value of `kind` is `\"N\"`."}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"completeNotification","initializer":"new Notification('C') as Notification<never> & CompleteNotification","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[],"isStatic":true,"scope":"private","isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false}],"getAccessors":[],"setAccessors":[]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]},{"methodName":"toObservable","usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":1,"index":1},"sources":[{"source":{"name":"toObservable","statements":[{"isExported":false,"isDefaultExport":false,"hasDeclareKeyword":false,"docs":[],"kind":41,"declarationKind":"const","declarations":[{"name":"{ kind, value, error }","initializer":"this","hasExclamationToken":false,"kind":40}]},{"isExported":false,"isDefaultExport":false,"hasDeclareKeyword":false,"docs":[],"kind":41,"declarationKind":"const","declarations":[{"name":"result","initializer":"kind === 'N'\r\n        ? // Next kind. Return an observable of that value.\r\n          of(value!)\r\n        : //\r\n        kind === 'E'\r\n        ? // Error kind. Return an observable that emits the error.\r\n          throwError(() => error)\r\n        : //\r\n        kind === 'C'\r\n        ? // Completion kind. Kind is \"C\", return an observable that just completes.\r\n          EMPTY\r\n        : // Unknown kind, return falsy, so we error below.\r\n          0","hasExclamationToken":false,"kind":40}]},"if (!result) {\r\n  // TODO: consider removing this check. The only way to cause this would be to\r\n  // use the Notification constructor directly in a way that is not type-safe.\r\n  // and direct use of the Notification constructor is deprecated.\r\n  throw new TypeError(`Unexpected notification kind ${kind}`);\r\n}","return result;"],"parameters":[],"returnType":"Observable<T>","typeParameters":[],"docs":[{"kind":24,"description":"\r\nReturns a simple Observable that just delivers the notification represented\r\nby this Notification instance.\r\n","tags":[{"kind":25,"tagName":"deprecated","text":"Will be removed in v8. To convert a `Notification` to an {@link Observable},\r\nuse {@link of} and {@link dematerialize}: `of(notification).pipe(dematerialize())`."}]}],"isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"isAbstract":false,"decorators":[],"hasOverrideKeyword":false,"kind":26,"overloads":[],"declarationInfo":{"className":"Notification","modulePath":"..\\src\\internal\\Notification.ts"},"classStructure":{"decorators":[],"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nRepresents a push-based event or value that an {@link Observable} can emit.\r\nThis class is particularly useful for operators that manage notifications,\r\nlike {@link materialize}, {@link dematerialize}, {@link observeOn}, and\r\nothers. Besides wrapping the actual delivered value, it also annotates it\r\nwith metadata of, for instance, what type of push message it is (`next`,\r\n`error`, or `complete`).\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link materialize}"},{"kind":25,"tagName":"see","text":"{@link dematerialize}"},{"kind":25,"tagName":"see","text":"{@link observeOn}"},{"kind":25,"tagName":"deprecated","text":"It is NOT recommended to create instances of `Notification` directly.\r\nRather, try to create POJOs matching the signature outlined in {@link ObservableNotification}.\r\nFor example: `{ kind: 'N', value: 1 }`, `{ kind: 'E', error: new Error('bad') }`, or `{ kind: 'C' }`.\r\nWill be removed in v8."}]}],"isAbstract":false,"implements":[],"name":"Notification","isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"kind":2,"ctors":[{"statements":["this.hasValue = kind === 'N';"],"parameters":[{"name":"kind","type":"'N' | 'E' | 'C'","isReadonly":true,"scope":"public","decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"value","type":"T","isReadonly":true,"scope":"public","decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"error","type":"any","isReadonly":true,"scope":"public","decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"typeParameters":[],"docs":[],"kind":5,"overloads":[{"parameters":[{"name":"kind","type":"'N'","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"value","type":"T","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"docs":[{"kind":24,"description":"\r\nCreates a \"Next\" notification object.","tags":[{"kind":25,"tagName":"param","text":"kind Always `'N'`"},{"kind":25,"tagName":"param","text":"value The value to notify with if observed."},{"kind":25,"tagName":"deprecated","text":"Internal implementation detail. Use {@link Notification#createNext createNext} instead."}]}],"typeParameters":[],"kind":6},{"parameters":[{"name":"kind","type":"'E'","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"value","type":"undefined","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"error","type":"any","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"docs":[{"kind":24,"description":"\r\nCreates an \"Error\" notification object.","tags":[{"kind":25,"tagName":"param","text":"kind Always `'E'`"},{"kind":25,"tagName":"param","text":"value Always `undefined`"},{"kind":25,"tagName":"param","text":"error The error to notify with if observed."},{"kind":25,"tagName":"deprecated","text":"Internal implementation detail. Use {@link Notification#createError createError} instead."}]}],"typeParameters":[],"kind":6},{"parameters":[{"name":"kind","type":"'C'","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"docs":[{"kind":24,"description":"\r\nCreates a \"completion\" notification object.","tags":[{"kind":25,"tagName":"param","text":"kind Always `'C'`"},{"kind":25,"tagName":"deprecated","text":"Internal implementation detail. Use {@link Notification#createComplete createComplete} instead."}]}],"typeParameters":[],"kind":6}]}],"properties":[{"name":"hasValue","type":"boolean","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":true,"docs":[{"kind":24,"description":"\r\nA value signifying that the notification will \"next\" if observed. In truth,\r\nThis is really synonymous with just checking `kind === \"N\"`.","tags":[{"kind":25,"tagName":"deprecated","text":"Will be removed in v8. Instead, just check to see if the value of `kind` is `\"N\"`."}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"completeNotification","initializer":"new Notification('C') as Notification<never> & CompleteNotification","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[],"isStatic":true,"scope":"private","isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false}],"getAccessors":[],"setAccessors":[]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]},{"methodName":"createNext","usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":1,"index":1},"sources":[{"source":{"name":"createNext","statements":["return new Notification('N', value) as Notification<T> & NextNotification<T>;"],"parameters":[{"name":"value","type":"T","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nA shortcut to create a Notification instance of the type `next` from a\r\ngiven value.","tags":[{"kind":25,"tagName":"param","text":"{T} value The `next` value."},{"kind":25,"tagName":"return","text":"{Notification<T>} The \"next\" Notification representing the\r\nargument."},{"kind":25,"tagName":"nocollapse"},{"kind":25,"tagName":"deprecated","text":"It is NOT recommended to create instances of `Notification` directly.\r\nRather, try to create POJOs matching the signature outlined in {@link ObservableNotification}.\r\nFor example: `{ kind: 'N', value: 1 }`, `{ kind: 'E', error: new Error('bad') }`, or `{ kind: 'C' }`.\r\nWill be removed in v8."}]}],"isGenerator":false,"isAsync":false,"isStatic":true,"hasQuestionToken":false,"isAbstract":false,"decorators":[],"hasOverrideKeyword":false,"kind":26,"overloads":[],"declarationInfo":{"className":"Notification","modulePath":"..\\src\\internal\\Notification.ts"},"classStructure":{"decorators":[],"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nRepresents a push-based event or value that an {@link Observable} can emit.\r\nThis class is particularly useful for operators that manage notifications,\r\nlike {@link materialize}, {@link dematerialize}, {@link observeOn}, and\r\nothers. Besides wrapping the actual delivered value, it also annotates it\r\nwith metadata of, for instance, what type of push message it is (`next`,\r\n`error`, or `complete`).\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link materialize}"},{"kind":25,"tagName":"see","text":"{@link dematerialize}"},{"kind":25,"tagName":"see","text":"{@link observeOn}"},{"kind":25,"tagName":"deprecated","text":"It is NOT recommended to create instances of `Notification` directly.\r\nRather, try to create POJOs matching the signature outlined in {@link ObservableNotification}.\r\nFor example: `{ kind: 'N', value: 1 }`, `{ kind: 'E', error: new Error('bad') }`, or `{ kind: 'C' }`.\r\nWill be removed in v8."}]}],"isAbstract":false,"implements":[],"name":"Notification","isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"kind":2,"ctors":[{"statements":["this.hasValue = kind === 'N';"],"parameters":[{"name":"kind","type":"'N' | 'E' | 'C'","isReadonly":true,"scope":"public","decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"value","type":"T","isReadonly":true,"scope":"public","decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"error","type":"any","isReadonly":true,"scope":"public","decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"typeParameters":[],"docs":[],"kind":5,"overloads":[{"parameters":[{"name":"kind","type":"'N'","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"value","type":"T","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"docs":[{"kind":24,"description":"\r\nCreates a \"Next\" notification object.","tags":[{"kind":25,"tagName":"param","text":"kind Always `'N'`"},{"kind":25,"tagName":"param","text":"value The value to notify with if observed."},{"kind":25,"tagName":"deprecated","text":"Internal implementation detail. Use {@link Notification#createNext createNext} instead."}]}],"typeParameters":[],"kind":6},{"parameters":[{"name":"kind","type":"'E'","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"value","type":"undefined","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"error","type":"any","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"docs":[{"kind":24,"description":"\r\nCreates an \"Error\" notification object.","tags":[{"kind":25,"tagName":"param","text":"kind Always `'E'`"},{"kind":25,"tagName":"param","text":"value Always `undefined`"},{"kind":25,"tagName":"param","text":"error The error to notify with if observed."},{"kind":25,"tagName":"deprecated","text":"Internal implementation detail. Use {@link Notification#createError createError} instead."}]}],"typeParameters":[],"kind":6},{"parameters":[{"name":"kind","type":"'C'","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"docs":[{"kind":24,"description":"\r\nCreates a \"completion\" notification object.","tags":[{"kind":25,"tagName":"param","text":"kind Always `'C'`"},{"kind":25,"tagName":"deprecated","text":"Internal implementation detail. Use {@link Notification#createComplete createComplete} instead."}]}],"typeParameters":[],"kind":6}]}],"properties":[{"name":"hasValue","type":"boolean","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":true,"docs":[{"kind":24,"description":"\r\nA value signifying that the notification will \"next\" if observed. In truth,\r\nThis is really synonymous with just checking `kind === \"N\"`.","tags":[{"kind":25,"tagName":"deprecated","text":"Will be removed in v8. Instead, just check to see if the value of `kind` is `\"N\"`."}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"completeNotification","initializer":"new Notification('C') as Notification<never> & CompleteNotification","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[],"isStatic":true,"scope":"private","isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false}],"getAccessors":[],"setAccessors":[]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]},{"methodName":"createError","usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":1,"index":1},"sources":[{"source":{"name":"createError","statements":["return new Notification('E', undefined, err) as Notification<never> & ErrorNotification;"],"parameters":[{"name":"err","type":"any","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"typeParameters":[],"docs":[{"kind":24,"description":"\r\nA shortcut to create a Notification instance of the type `error` from a\r\ngiven error.","tags":[{"kind":25,"tagName":"param","text":"{any} [err] The `error` error."},{"kind":25,"tagName":"return","text":"{Notification<T>} The \"error\" Notification representing the\r\nargument."},{"kind":25,"tagName":"nocollapse"},{"kind":25,"tagName":"deprecated","text":"It is NOT recommended to create instances of `Notification` directly.\r\nRather, try to create POJOs matching the signature outlined in {@link ObservableNotification}.\r\nFor example: `{ kind: 'N', value: 1 }`, `{ kind: 'E', error: new Error('bad') }`, or `{ kind: 'C' }`.\r\nWill be removed in v8."}]}],"isGenerator":false,"isAsync":false,"isStatic":true,"hasQuestionToken":false,"isAbstract":false,"decorators":[],"hasOverrideKeyword":false,"kind":26,"overloads":[],"declarationInfo":{"className":"Notification","modulePath":"..\\src\\internal\\Notification.ts"},"classStructure":{"decorators":[],"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nRepresents a push-based event or value that an {@link Observable} can emit.\r\nThis class is particularly useful for operators that manage notifications,\r\nlike {@link materialize}, {@link dematerialize}, {@link observeOn}, and\r\nothers. Besides wrapping the actual delivered value, it also annotates it\r\nwith metadata of, for instance, what type of push message it is (`next`,\r\n`error`, or `complete`).\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link materialize}"},{"kind":25,"tagName":"see","text":"{@link dematerialize}"},{"kind":25,"tagName":"see","text":"{@link observeOn}"},{"kind":25,"tagName":"deprecated","text":"It is NOT recommended to create instances of `Notification` directly.\r\nRather, try to create POJOs matching the signature outlined in {@link ObservableNotification}.\r\nFor example: `{ kind: 'N', value: 1 }`, `{ kind: 'E', error: new Error('bad') }`, or `{ kind: 'C' }`.\r\nWill be removed in v8."}]}],"isAbstract":false,"implements":[],"name":"Notification","isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"kind":2,"ctors":[{"statements":["this.hasValue = kind === 'N';"],"parameters":[{"name":"kind","type":"'N' | 'E' | 'C'","isReadonly":true,"scope":"public","decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"value","type":"T","isReadonly":true,"scope":"public","decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"error","type":"any","isReadonly":true,"scope":"public","decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"typeParameters":[],"docs":[],"kind":5,"overloads":[{"parameters":[{"name":"kind","type":"'N'","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"value","type":"T","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"docs":[{"kind":24,"description":"\r\nCreates a \"Next\" notification object.","tags":[{"kind":25,"tagName":"param","text":"kind Always `'N'`"},{"kind":25,"tagName":"param","text":"value The value to notify with if observed."},{"kind":25,"tagName":"deprecated","text":"Internal implementation detail. Use {@link Notification#createNext createNext} instead."}]}],"typeParameters":[],"kind":6},{"parameters":[{"name":"kind","type":"'E'","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"value","type":"undefined","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"error","type":"any","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"docs":[{"kind":24,"description":"\r\nCreates an \"Error\" notification object.","tags":[{"kind":25,"tagName":"param","text":"kind Always `'E'`"},{"kind":25,"tagName":"param","text":"value Always `undefined`"},{"kind":25,"tagName":"param","text":"error The error to notify with if observed."},{"kind":25,"tagName":"deprecated","text":"Internal implementation detail. Use {@link Notification#createError createError} instead."}]}],"typeParameters":[],"kind":6},{"parameters":[{"name":"kind","type":"'C'","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"docs":[{"kind":24,"description":"\r\nCreates a \"completion\" notification object.","tags":[{"kind":25,"tagName":"param","text":"kind Always `'C'`"},{"kind":25,"tagName":"deprecated","text":"Internal implementation detail. Use {@link Notification#createComplete createComplete} instead."}]}],"typeParameters":[],"kind":6}]}],"properties":[{"name":"hasValue","type":"boolean","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":true,"docs":[{"kind":24,"description":"\r\nA value signifying that the notification will \"next\" if observed. In truth,\r\nThis is really synonymous with just checking `kind === \"N\"`.","tags":[{"kind":25,"tagName":"deprecated","text":"Will be removed in v8. Instead, just check to see if the value of `kind` is `\"N\"`."}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"completeNotification","initializer":"new Notification('C') as Notification<never> & CompleteNotification","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[],"isStatic":true,"scope":"private","isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false}],"getAccessors":[],"setAccessors":[]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]},{"methodName":"createComplete","usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":1,"index":1},"sources":[{"source":{"name":"createComplete","statements":["return Notification.completeNotification;"],"parameters":[],"returnType":"Notification<never> & CompleteNotification","typeParameters":[],"docs":[{"kind":24,"description":"\r\nA shortcut to create a Notification instance of the type `complete`.","tags":[{"kind":25,"tagName":"return","text":"{Notification<any>} The valueless \"complete\" Notification."},{"kind":25,"tagName":"nocollapse"},{"kind":25,"tagName":"deprecated","text":"It is NOT recommended to create instances of `Notification` directly.\r\nRather, try to create POJOs matching the signature outlined in {@link ObservableNotification}.\r\nFor example: `{ kind: 'N', value: 1 }`, `{ kind: 'E', error: new Error('bad') }`, or `{ kind: 'C' }`.\r\nWill be removed in v8."}]}],"isGenerator":false,"isAsync":false,"isStatic":true,"hasQuestionToken":false,"isAbstract":false,"decorators":[],"hasOverrideKeyword":false,"kind":26,"overloads":[],"declarationInfo":{"className":"Notification","modulePath":"..\\src\\internal\\Notification.ts"},"classStructure":{"decorators":[],"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nRepresents a push-based event or value that an {@link Observable} can emit.\r\nThis class is particularly useful for operators that manage notifications,\r\nlike {@link materialize}, {@link dematerialize}, {@link observeOn}, and\r\nothers. Besides wrapping the actual delivered value, it also annotates it\r\nwith metadata of, for instance, what type of push message it is (`next`,\r\n`error`, or `complete`).\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link materialize}"},{"kind":25,"tagName":"see","text":"{@link dematerialize}"},{"kind":25,"tagName":"see","text":"{@link observeOn}"},{"kind":25,"tagName":"deprecated","text":"It is NOT recommended to create instances of `Notification` directly.\r\nRather, try to create POJOs matching the signature outlined in {@link ObservableNotification}.\r\nFor example: `{ kind: 'N', value: 1 }`, `{ kind: 'E', error: new Error('bad') }`, or `{ kind: 'C' }`.\r\nWill be removed in v8."}]}],"isAbstract":false,"implements":[],"name":"Notification","isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"kind":2,"ctors":[{"statements":["this.hasValue = kind === 'N';"],"parameters":[{"name":"kind","type":"'N' | 'E' | 'C'","isReadonly":true,"scope":"public","decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"value","type":"T","isReadonly":true,"scope":"public","decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"error","type":"any","isReadonly":true,"scope":"public","decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"typeParameters":[],"docs":[],"kind":5,"overloads":[{"parameters":[{"name":"kind","type":"'N'","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"value","type":"T","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"docs":[{"kind":24,"description":"\r\nCreates a \"Next\" notification object.","tags":[{"kind":25,"tagName":"param","text":"kind Always `'N'`"},{"kind":25,"tagName":"param","text":"value The value to notify with if observed."},{"kind":25,"tagName":"deprecated","text":"Internal implementation detail. Use {@link Notification#createNext createNext} instead."}]}],"typeParameters":[],"kind":6},{"parameters":[{"name":"kind","type":"'E'","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"value","type":"undefined","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"error","type":"any","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"docs":[{"kind":24,"description":"\r\nCreates an \"Error\" notification object.","tags":[{"kind":25,"tagName":"param","text":"kind Always `'E'`"},{"kind":25,"tagName":"param","text":"value Always `undefined`"},{"kind":25,"tagName":"param","text":"error The error to notify with if observed."},{"kind":25,"tagName":"deprecated","text":"Internal implementation detail. Use {@link Notification#createError createError} instead."}]}],"typeParameters":[],"kind":6},{"parameters":[{"name":"kind","type":"'C'","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"docs":[{"kind":24,"description":"\r\nCreates a \"completion\" notification object.","tags":[{"kind":25,"tagName":"param","text":"kind Always `'C'`"},{"kind":25,"tagName":"deprecated","text":"Internal implementation detail. Use {@link Notification#createComplete createComplete} instead."}]}],"typeParameters":[],"kind":6}]}],"properties":[{"name":"hasValue","type":"boolean","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":true,"docs":[{"kind":24,"description":"\r\nA value signifying that the notification will \"next\" if observed. In truth,\r\nThis is really synonymous with just checking `kind === \"N\"`.","tags":[{"kind":25,"tagName":"deprecated","text":"Will be removed in v8. Instead, just check to see if the value of `kind` is `\"N\"`."}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"completeNotification","initializer":"new Notification('C') as Notification<never> & CompleteNotification","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[],"isStatic":true,"scope":"private","isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false}],"getAccessors":[],"setAccessors":[]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]}]}},"usabilityResult":{"index":0.9375,"paramLengthComplexity":1,"paramSequenceComplexity":0.875}},"..\\src\\internal\\util\\pipe.ts":{"moduleComponents":{"pipe":{"kind":13,"usabilityResult":{"paramLengthComplexity":0.507321284621855,"paramSequenceComplexity":0.19191919191919193,"index":0.34962023827052346},"sources":[{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[],"docs":[],"hasDeclareKeyword":false,"parameters":[],"returnType":"typeof identity","isGenerator":false,"isAsync":false,"kind":14,"functionName":"pipe","modulePath":"..\\src\\internal\\util\\pipe.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"A","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"fn1","type":"UnaryFunction<T, A>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"UnaryFunction<T, A>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"pipe","modulePath":"..\\src\\internal\\util\\pipe.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"A","kind":39,"isConst":false,"variance":0},{"name":"B","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"fn1","type":"UnaryFunction<T, A>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"fn2","type":"UnaryFunction<A, B>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"UnaryFunction<T, B>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"pipe","modulePath":"..\\src\\internal\\util\\pipe.ts"},"usabilityResult":{"index":0.5,"paramLengthComplexity":1,"paramSequenceComplexity":0}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"A","kind":39,"isConst":false,"variance":0},{"name":"B","kind":39,"isConst":false,"variance":0},{"name":"C","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"fn1","type":"UnaryFunction<T, A>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"fn2","type":"UnaryFunction<A, B>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"fn3","type":"UnaryFunction<B, C>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"UnaryFunction<T, C>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"pipe","modulePath":"..\\src\\internal\\util\\pipe.ts"},"usabilityResult":{"index":0.5,"paramLengthComplexity":1,"paramSequenceComplexity":0}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"A","kind":39,"isConst":false,"variance":0},{"name":"B","kind":39,"isConst":false,"variance":0},{"name":"C","kind":39,"isConst":false,"variance":0},{"name":"D","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"fn1","type":"UnaryFunction<T, A>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"fn2","type":"UnaryFunction<A, B>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"fn3","type":"UnaryFunction<B, C>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"fn4","type":"UnaryFunction<C, D>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"UnaryFunction<T, D>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"pipe","modulePath":"..\\src\\internal\\util\\pipe.ts"},"usabilityResult":{"index":0.5,"paramLengthComplexity":1,"paramSequenceComplexity":0}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"A","kind":39,"isConst":false,"variance":0},{"name":"B","kind":39,"isConst":false,"variance":0},{"name":"C","kind":39,"isConst":false,"variance":0},{"name":"D","kind":39,"isConst":false,"variance":0},{"name":"E","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"fn1","type":"UnaryFunction<T, A>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"fn2","type":"UnaryFunction<A, B>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"fn3","type":"UnaryFunction<B, C>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"fn4","type":"UnaryFunction<C, D>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"fn5","type":"UnaryFunction<D, E>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"UnaryFunction<T, E>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"pipe","modulePath":"..\\src\\internal\\util\\pipe.ts"},"usabilityResult":{"index":0.18393972058572117,"paramLengthComplexity":0.36787944117144233,"paramSequenceComplexity":0}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"A","kind":39,"isConst":false,"variance":0},{"name":"B","kind":39,"isConst":false,"variance":0},{"name":"C","kind":39,"isConst":false,"variance":0},{"name":"D","kind":39,"isConst":false,"variance":0},{"name":"E","kind":39,"isConst":false,"variance":0},{"name":"F","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"fn1","type":"UnaryFunction<T, A>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"fn2","type":"UnaryFunction<A, B>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"fn3","type":"UnaryFunction<B, C>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"fn4","type":"UnaryFunction<C, D>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"fn5","type":"UnaryFunction<D, E>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"fn6","type":"UnaryFunction<E, F>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"UnaryFunction<T, F>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"pipe","modulePath":"..\\src\\internal\\util\\pipe.ts"},"usabilityResult":{"index":0.06766764161830635,"paramLengthComplexity":0.1353352832366127,"paramSequenceComplexity":0}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"A","kind":39,"isConst":false,"variance":0},{"name":"B","kind":39,"isConst":false,"variance":0},{"name":"C","kind":39,"isConst":false,"variance":0},{"name":"D","kind":39,"isConst":false,"variance":0},{"name":"E","kind":39,"isConst":false,"variance":0},{"name":"F","kind":39,"isConst":false,"variance":0},{"name":"G","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"fn1","type":"UnaryFunction<T, A>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"fn2","type":"UnaryFunction<A, B>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"fn3","type":"UnaryFunction<B, C>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"fn4","type":"UnaryFunction<C, D>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"fn5","type":"UnaryFunction<D, E>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"fn6","type":"UnaryFunction<E, F>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"fn7","type":"UnaryFunction<F, G>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"UnaryFunction<T, G>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"pipe","modulePath":"..\\src\\internal\\util\\pipe.ts"},"usabilityResult":{"index":0.024893534183931972,"paramLengthComplexity":0.049787068367863944,"paramSequenceComplexity":0}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"A","kind":39,"isConst":false,"variance":0},{"name":"B","kind":39,"isConst":false,"variance":0},{"name":"C","kind":39,"isConst":false,"variance":0},{"name":"D","kind":39,"isConst":false,"variance":0},{"name":"E","kind":39,"isConst":false,"variance":0},{"name":"F","kind":39,"isConst":false,"variance":0},{"name":"G","kind":39,"isConst":false,"variance":0},{"name":"H","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"fn1","type":"UnaryFunction<T, A>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"fn2","type":"UnaryFunction<A, B>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"fn3","type":"UnaryFunction<B, C>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"fn4","type":"UnaryFunction<C, D>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"fn5","type":"UnaryFunction<D, E>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"fn6","type":"UnaryFunction<E, F>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"fn7","type":"UnaryFunction<F, G>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"fn8","type":"UnaryFunction<G, H>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"UnaryFunction<T, H>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"pipe","modulePath":"..\\src\\internal\\util\\pipe.ts"},"usabilityResult":{"index":0.00915781944436709,"paramLengthComplexity":0.01831563888873418,"paramSequenceComplexity":0}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"A","kind":39,"isConst":false,"variance":0},{"name":"B","kind":39,"isConst":false,"variance":0},{"name":"C","kind":39,"isConst":false,"variance":0},{"name":"D","kind":39,"isConst":false,"variance":0},{"name":"E","kind":39,"isConst":false,"variance":0},{"name":"F","kind":39,"isConst":false,"variance":0},{"name":"G","kind":39,"isConst":false,"variance":0},{"name":"H","kind":39,"isConst":false,"variance":0},{"name":"I","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"fn1","type":"UnaryFunction<T, A>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"fn2","type":"UnaryFunction<A, B>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"fn3","type":"UnaryFunction<B, C>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"fn4","type":"UnaryFunction<C, D>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"fn5","type":"UnaryFunction<D, E>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"fn6","type":"UnaryFunction<E, F>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"fn7","type":"UnaryFunction<F, G>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"fn8","type":"UnaryFunction<G, H>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"fn9","type":"UnaryFunction<H, I>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"UnaryFunction<T, I>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"pipe","modulePath":"..\\src\\internal\\util\\pipe.ts"},"usabilityResult":{"index":0.0033689734995427335,"paramLengthComplexity":0.006737946999085467,"paramSequenceComplexity":0}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"A","kind":39,"isConst":false,"variance":0},{"name":"B","kind":39,"isConst":false,"variance":0},{"name":"C","kind":39,"isConst":false,"variance":0},{"name":"D","kind":39,"isConst":false,"variance":0},{"name":"E","kind":39,"isConst":false,"variance":0},{"name":"F","kind":39,"isConst":false,"variance":0},{"name":"G","kind":39,"isConst":false,"variance":0},{"name":"H","kind":39,"isConst":false,"variance":0},{"name":"I","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"fn1","type":"UnaryFunction<T, A>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"fn2","type":"UnaryFunction<A, B>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"fn3","type":"UnaryFunction<B, C>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"fn4","type":"UnaryFunction<C, D>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"fn5","type":"UnaryFunction<D, E>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"fn6","type":"UnaryFunction<E, F>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"fn7","type":"UnaryFunction<F, G>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"fn8","type":"UnaryFunction<G, H>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"fn9","type":"UnaryFunction<H, I>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"fns","type":"UnaryFunction<any, any>[]","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":true}],"returnType":"UnaryFunction<T, unknown>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"pipe","modulePath":"..\\src\\internal\\util\\pipe.ts"},"usabilityResult":{"index":0.05679493164388876,"paramLengthComplexity":0.0024787521766663585,"paramSequenceComplexity":0.11111111111111116}}]}},"usabilityResult":{"index":0.34962023827052346,"paramLengthComplexity":0.507321284621855,"paramSequenceComplexity":0.19191919191919193}},"..\\src\\internal\\util\\noop.ts":{"moduleComponents":{"noop":{"kind":13,"usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":1,"index":1},"sources":[{"source":{"name":"noop","statements":[],"parameters":[],"typeParameters":[],"docs":[],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[],"functionName":"noop","modulePath":"..\\src\\internal\\util\\noop.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},"..\\src\\internal\\util\\identity.ts":{"moduleComponents":{"identity":{"kind":13,"usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":1,"index":1},"sources":[{"source":{"name":"identity","statements":["return x;"],"parameters":[{"name":"x","type":"T","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"T","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nThis function takes one parameter and just returns it. Simply put,\r\nthis is like `<T>(x: T): T => x`.\r\n\r\n## Examples\r\n\r\nThis is useful in some cases when using things like `mergeMap`\r\n\r\n```ts\r\nimport { interval, take, map, range, mergeMap, identity } from 'rxjs';\r\n\r\nconst source$ = interval(1000).pipe(take(5));\r\n\r\nconst result$ = source$.pipe(\r\n  map(i => range(i)),\r\n  mergeMap(identity) // same as mergeMap(x => x)\r\n);\r\n\r\nresult$.subscribe({\r\n  next: console.log\r\n});\r\n```\r\n\r\nOr when you want to selectively apply an operator\r\n\r\n```ts\r\nimport { interval, take, identity } from 'rxjs';\r\n\r\nconst shouldLimit = () => Math.random() < 0.5;\r\n\r\nconst source$ = interval(1000);\r\n\r\nconst result$ = source$.pipe(shouldLimit() ? take(5) : identity);\r\n\r\nresult$.subscribe({\r\n  next: console.log\r\n});\r\n```\r\n","tags":[{"kind":25,"tagName":"param","text":"x Any value that is returned by this function"},{"kind":25,"tagName":"returns","text":"The value passed as the first parameter to this function"}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[],"functionName":"identity","modulePath":"..\\src\\internal\\util\\identity.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},"..\\src\\internal\\util\\isObservable.ts":{"moduleComponents":{"isObservable":{"kind":13,"usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":1,"index":1},"sources":[{"source":{"name":"isObservable","statements":["return !!obj && (obj instanceof Observable || (isFunction(obj.lift) && isFunction(obj.subscribe)));"],"parameters":[{"name":"obj","type":"any","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"obj is Observable<unknown>","typeParameters":[],"docs":[{"kind":24,"description":"\r\nTests to see if the object is an RxJS {@link Observable}","tags":[{"kind":25,"tagName":"param","text":"obj the object to test"}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[],"functionName":"isObservable","modulePath":"..\\src\\internal\\util\\isObservable.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},"..\\src\\internal\\lastValueFrom.ts":{"moduleComponents":{"lastValueFrom":{"kind":13,"usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":1,"index":1},"sources":[{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"D","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"source","type":"Observable<T>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"config","type":"LastValueFromConfig<D>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Promise<T | D>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"lastValueFrom","modulePath":"..\\src\\internal\\lastValueFrom.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"source","type":"Observable<T>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Promise<T>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"lastValueFrom","modulePath":"..\\src\\internal\\lastValueFrom.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},"..\\src\\internal\\firstValueFrom.ts":{"moduleComponents":{"firstValueFrom":{"kind":13,"usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":1,"index":1},"sources":[{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"D","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"source","type":"Observable<T>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"config","type":"FirstValueFromConfig<D>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Promise<T | D>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"firstValueFrom","modulePath":"..\\src\\internal\\firstValueFrom.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"source","type":"Observable<T>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Promise<T>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"firstValueFrom","modulePath":"..\\src\\internal\\firstValueFrom.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},"..\\src\\internal\\observable\\bindCallback.ts":{"moduleComponents":{"bindCallback":{"kind":13,"usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":0.75,"index":0.875},"sources":[{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"callbackFunc","type":"(...args: any[]) => void","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"resultSelector","type":"(...args: any[]) => any","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"scheduler","type":"SchedulerLike","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"(...args: any[]) => Observable<any>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"bindCallback","modulePath":"..\\src\\internal\\observable\\bindCallback.ts"},"usabilityResult":{"index":0.75,"paramLengthComplexity":1,"paramSequenceComplexity":0.5}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"A","kind":39,"isConst":false,"constraint":"readonly unknown[]","variance":0},{"name":"R","kind":39,"isConst":false,"constraint":"readonly unknown[]","variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"callbackFunc","type":"(...args: [...A, (...res: R) => void]) => void","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"schedulerLike","type":"SchedulerLike","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"(...arg: A) => Observable<R extends [] ? void : R extends [any] ? R[0] : R>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"bindCallback","modulePath":"..\\src\\internal\\observable\\bindCallback.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]}},"usabilityResult":{"index":0.875,"paramLengthComplexity":1,"paramSequenceComplexity":0.75}},"..\\src\\internal\\observable\\bindNodeCallback.ts":{"moduleComponents":{"bindNodeCallback":{"kind":13,"usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":0.75,"index":0.875},"sources":[{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"callbackFunc","type":"(...args: any[]) => void","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"resultSelector","type":"(...args: any[]) => any","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"scheduler","type":"SchedulerLike","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"(...args: any[]) => Observable<any>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"bindNodeCallback","modulePath":"..\\src\\internal\\observable\\bindNodeCallback.ts"},"usabilityResult":{"index":0.75,"paramLengthComplexity":1,"paramSequenceComplexity":0.5}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"A","kind":39,"isConst":false,"constraint":"readonly unknown[]","variance":0},{"name":"R","kind":39,"isConst":false,"constraint":"readonly unknown[]","variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"callbackFunc","type":"(...args: [...A, (err: any, ...res: R) => void]) => void","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"schedulerLike","type":"SchedulerLike","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"(...arg: A) => Observable<R extends [] ? void : R extends [any] ? R[0] : R>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"bindNodeCallback","modulePath":"..\\src\\internal\\observable\\bindNodeCallback.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]}},"usabilityResult":{"index":0.875,"paramLengthComplexity":1,"paramSequenceComplexity":0.75}},"..\\src\\internal\\observable\\combineLatest.ts":{"moduleComponents":{"combineLatest":{"kind":13,"usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":1,"index":1},"sources":[{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"constraint":"AnyCatcher","variance":0}],"docs":[{"kind":24,"description":"\r\nYou have passed `any` here, we can't figure out if it is\r\nan array or an object, so you're getting `unknown`. Use better types.","tags":[{"kind":25,"tagName":"param","text":"arg Something typed as `any`"}]}],"hasDeclareKeyword":false,"parameters":[{"name":"arg","type":"T","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<unknown>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"combineLatest","modulePath":"..\\src\\internal\\observable\\combineLatest.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"sources","type":"[]","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<never>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"combineLatest","modulePath":"..\\src\\internal\\observable\\combineLatest.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"A","kind":39,"isConst":false,"constraint":"readonly unknown[]","variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"sources","type":"readonly [...ObservableInputTuple<A>]","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<A>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"combineLatest","modulePath":"..\\src\\internal\\observable\\combineLatest.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"A","kind":39,"isConst":false,"constraint":"readonly unknown[]","variance":0},{"name":"R","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"The `scheduler` parameter will be removed in v8. Use `scheduled` and `combineLatestAll`. Details: https://rxjs.dev/deprecations/scheduler-argument"}]}],"hasDeclareKeyword":false,"parameters":[{"name":"sources","type":"readonly [...ObservableInputTuple<A>]","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"resultSelector","type":"(...values: A) => R","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"scheduler","type":"SchedulerLike","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<R>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"combineLatest","modulePath":"..\\src\\internal\\observable\\combineLatest.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"A","kind":39,"isConst":false,"constraint":"readonly unknown[]","variance":0},{"name":"R","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"sources","type":"readonly [...ObservableInputTuple<A>]","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"resultSelector","type":"(...values: A) => R","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<R>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"combineLatest","modulePath":"..\\src\\internal\\observable\\combineLatest.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"A","kind":39,"isConst":false,"constraint":"readonly unknown[]","variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"The `scheduler` parameter will be removed in v8. Use `scheduled` and `combineLatestAll`. Details: https://rxjs.dev/deprecations/scheduler-argument"}]}],"hasDeclareKeyword":false,"parameters":[{"name":"sources","type":"readonly [...ObservableInputTuple<A>]","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"scheduler","type":"SchedulerLike","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<A>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"combineLatest","modulePath":"..\\src\\internal\\observable\\combineLatest.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"A","kind":39,"isConst":false,"constraint":"readonly unknown[]","variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Pass an array of sources instead. The rest-parameters signature will be removed in v8. Details: https://rxjs.dev/deprecations/array-argument"}]}],"hasDeclareKeyword":false,"parameters":[{"name":"sources","type":"[...ObservableInputTuple<A>]","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":true}],"returnType":"Observable<A>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"combineLatest","modulePath":"..\\src\\internal\\observable\\combineLatest.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"A","kind":39,"isConst":false,"constraint":"readonly unknown[]","variance":0},{"name":"R","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"The `scheduler` parameter will be removed in v8. Use `scheduled` and `combineLatestAll`. Details: https://rxjs.dev/deprecations/scheduler-argument"}]}],"hasDeclareKeyword":false,"parameters":[{"name":"sourcesAndResultSelectorAndScheduler","type":"[...ObservableInputTuple<A>, (...values: A) => R, SchedulerLike]","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":true}],"returnType":"Observable<R>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"combineLatest","modulePath":"..\\src\\internal\\observable\\combineLatest.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"A","kind":39,"isConst":false,"constraint":"readonly unknown[]","variance":0},{"name":"R","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Pass an array of sources instead. The rest-parameters signature will be removed in v8. Details: https://rxjs.dev/deprecations/array-argument"}]}],"hasDeclareKeyword":false,"parameters":[{"name":"sourcesAndResultSelector","type":"[...ObservableInputTuple<A>, (...values: A) => R]","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":true}],"returnType":"Observable<R>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"combineLatest","modulePath":"..\\src\\internal\\observable\\combineLatest.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"A","kind":39,"isConst":false,"constraint":"readonly unknown[]","variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"The `scheduler` parameter will be removed in v8. Use `scheduled` and `combineLatestAll`. Details: https://rxjs.dev/deprecations/scheduler-argument"}]}],"hasDeclareKeyword":false,"parameters":[{"name":"sourcesAndScheduler","type":"[...ObservableInputTuple<A>, SchedulerLike]","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":true}],"returnType":"Observable<A>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"combineLatest","modulePath":"..\\src\\internal\\observable\\combineLatest.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"sourcesObject","type":"{ [K in any]: never }","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<never>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"combineLatest","modulePath":"..\\src\\internal\\observable\\combineLatest.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"constraint":"Record<string, ObservableInput<any>>","variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"sourcesObject","type":"T","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<{ [K in keyof T]: ObservedValueOf<T[K]> }>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"combineLatest","modulePath":"..\\src\\internal\\observable\\combineLatest.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},"..\\src\\internal\\observable\\concat.ts":{"moduleComponents":{"concat":{"kind":13,"usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":1,"index":1},"sources":[{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"constraint":"readonly unknown[]","variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"inputs","type":"[...ObservableInputTuple<T>]","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":true}],"returnType":"Observable<T[number]>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"concat","modulePath":"..\\src\\internal\\observable\\concat.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"constraint":"readonly unknown[]","variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"inputsAndScheduler","type":"[...ObservableInputTuple<T>, SchedulerLike]","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":true}],"returnType":"Observable<T[number]>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"concat","modulePath":"..\\src\\internal\\observable\\concat.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},"..\\src\\internal\\observable\\connectable.ts":{"moduleComponents":{"connectable":{"kind":13,"usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":1,"index":1},"sources":[{"source":{"name":"connectable","statements":[{"isExported":false,"isDefaultExport":false,"hasDeclareKeyword":false,"docs":[],"kind":41,"declarationKind":"let","declarations":[{"name":"connection","initializer":"null","type":"Subscription | null","hasExclamationToken":false,"kind":40}]},{"isExported":false,"isDefaultExport":false,"hasDeclareKeyword":false,"docs":[],"kind":41,"declarationKind":"const","declarations":[{"name":"{ connector, resetOnDisconnect = true }","initializer":"config","hasExclamationToken":false,"kind":40}]},{"isExported":false,"isDefaultExport":false,"hasDeclareKeyword":false,"docs":[],"kind":41,"declarationKind":"let","declarations":[{"name":"subject","initializer":"connector()","hasExclamationToken":false,"kind":40}]},{"isExported":false,"isDefaultExport":false,"hasDeclareKeyword":false,"docs":[],"kind":41,"declarationKind":"const","declarations":[{"name":"result","initializer":"new Observable<T>((subscriber) => {\r\n    return subject.subscribe(subscriber);\r\n  })","type":"any","hasExclamationToken":false,"kind":40}]},"result.connect = () => {\r\nif (!connection || connection.closed) {\r\n  connection = defer(() => source).subscribe(subject);\r\n  if (resetOnDisconnect) {\r\n    connection.add(() => (subject = connector()));\r\n  }\r\n}\r\nreturn connection;\r\n};","return result;"],"parameters":[{"name":"source","type":"ObservableInput<T>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"config","initializer":"DEFAULT_CONFIG","type":"ConnectableConfig<T>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Connectable<T>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nCreates an observable that multicasts once `connect()` is called on it.\r\n","tags":[{"kind":25,"tagName":"param","text":"source The observable source to make connectable."},{"kind":25,"tagName":"param","text":"config The configuration object for `connectable`."},{"kind":25,"tagName":"returns","text":"A \"connectable\" observable, that has a `connect()` method, that you must call to\r\nconnect the source to all consumers through the subject provided as the connector."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[],"functionName":"connectable","modulePath":"..\\src\\internal\\observable\\connectable.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},"..\\src\\internal\\observable\\defer.ts":{"moduleComponents":{"defer":{"kind":13,"usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":1,"index":1},"sources":[{"source":{"name":"defer","statements":["return new Observable<ObservedValueOf<R>>((subscriber) => {\r\ninnerFrom(observableFactory()).subscribe(subscriber);\r\n});"],"parameters":[{"name":"observableFactory","type":"() => R","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<ObservedValueOf<R>>","typeParameters":[{"name":"R","kind":39,"isConst":false,"constraint":"ObservableInput<any>","variance":0}],"docs":[{"kind":24,"description":"\r\nCreates an Observable that, on subscribe, calls an Observable factory to\r\nmake an Observable for each new Observer.\r\n\r\n<span class=\"informal\">Creates the Observable lazily, that is, only when it\r\nis subscribed.\r\n</span>\r\n\r\n![](defer.png)\r\n\r\n`defer` allows you to create an Observable only when the Observer\r\nsubscribes. It waits until an Observer subscribes to it, calls the given\r\nfactory function to get an Observable -- where a factory function typically\r\ngenerates a new Observable -- and subscribes the Observer to this Observable.\r\nIn case the factory function returns a falsy value, then EMPTY is used as\r\nObservable instead. Last but not least, an exception during the factory\r\nfunction call is transferred to the Observer by calling `error`.\r\n\r\n## Example\r\n\r\nSubscribe to either an Observable of clicks or an Observable of interval, at random\r\n\r\n```ts\r\nimport { defer, fromEvent, interval } from 'rxjs';\r\n\r\nconst clicksOrInterval = defer(() => {\r\n  return Math.random() > 0.5\r\n    ? fromEvent(document, 'click')\r\n    : interval(1000);\r\n});\r\nclicksOrInterval.subscribe(x => console.log(x));\r\n\r\n// Results in the following behavior:\r\n// If the result of Math.random() is greater than 0.5 it will listen\r\n// for clicks anywhere on the \"document\"; when document is clicked it\r\n// will log a MouseEvent object to the console. If the result is less\r\n// than 0.5 it will emit ascending numbers, one every second(1000ms).\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link Observable}"},{"kind":25,"tagName":"param","text":"{function(): ObservableInput} observableFactory The Observable\r\nfactory function to invoke for each Observer that subscribes to the output\r\nObservable. May also return a Promise, which will be converted on the fly\r\nto an Observable."},{"kind":25,"tagName":"return","text":"{Observable} An Observable whose Observers' subscriptions trigger\r\nan invocation of the given Observable factory function."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[],"functionName":"defer","modulePath":"..\\src\\internal\\observable\\defer.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},"..\\src\\internal\\observable\\empty.ts":{"moduleComponents":{"empty":{"kind":13,"usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":1,"index":1},"sources":[{"source":{"name":"empty","statements":["return scheduler ? emptyScheduled(scheduler) : EMPTY;"],"parameters":[{"name":"scheduler","type":"SchedulerLike","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"typeParameters":[],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"param","text":"scheduler A {@link SchedulerLike} to use for scheduling\r\nthe emission of the complete notification."},{"kind":25,"tagName":"deprecated","text":"Replaced with the {@link EMPTY} constant or {@link scheduled} (e.g. `scheduled([], scheduler)`). Will be removed in v8."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[],"functionName":"empty","modulePath":"..\\src\\internal\\observable\\empty.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},"..\\src\\internal\\observable\\forkJoin.ts":{"moduleComponents":{"forkJoin":{"kind":13,"usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":1,"index":1},"sources":[{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"constraint":"AnyCatcher","variance":0}],"docs":[{"kind":24,"description":"\r\nYou have passed `any` here, we can't figure out if it is\r\nan array or an object, so you're getting `unknown`. Use better types.","tags":[{"kind":25,"tagName":"param","text":"arg Something typed as `any`"}]}],"hasDeclareKeyword":false,"parameters":[{"name":"arg","type":"T","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<unknown>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"forkJoin","modulePath":"..\\src\\internal\\observable\\forkJoin.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"scheduler","type":"null | undefined","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<never>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"forkJoin","modulePath":"..\\src\\internal\\observable\\forkJoin.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"sources","type":"readonly []","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<never>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"forkJoin","modulePath":"..\\src\\internal\\observable\\forkJoin.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"A","kind":39,"isConst":false,"constraint":"readonly unknown[]","variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"sources","type":"readonly [...ObservableInputTuple<A>]","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<A>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"forkJoin","modulePath":"..\\src\\internal\\observable\\forkJoin.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"A","kind":39,"isConst":false,"constraint":"readonly unknown[]","variance":0},{"name":"R","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"sources","type":"readonly [...ObservableInputTuple<A>]","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"resultSelector","type":"(...values: A) => R","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<R>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"forkJoin","modulePath":"..\\src\\internal\\observable\\forkJoin.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"A","kind":39,"isConst":false,"constraint":"readonly unknown[]","variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Pass an array of sources instead. The rest-parameters signature will be removed in v8. Details: https://rxjs.dev/deprecations/array-argument"}]}],"hasDeclareKeyword":false,"parameters":[{"name":"sources","type":"[...ObservableInputTuple<A>]","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":true}],"returnType":"Observable<A>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"forkJoin","modulePath":"..\\src\\internal\\observable\\forkJoin.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"A","kind":39,"isConst":false,"constraint":"readonly unknown[]","variance":0},{"name":"R","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Pass an array of sources instead. The rest-parameters signature will be removed in v8. Details: https://rxjs.dev/deprecations/array-argument"}]}],"hasDeclareKeyword":false,"parameters":[{"name":"sourcesAndResultSelector","type":"[...ObservableInputTuple<A>, (...values: A) => R]","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":true}],"returnType":"Observable<R>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"forkJoin","modulePath":"..\\src\\internal\\observable\\forkJoin.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"sourcesObject","type":"{ [K in any]: never }","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<never>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"forkJoin","modulePath":"..\\src\\internal\\observable\\forkJoin.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"constraint":"Record<string, ObservableInput<any>>","variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"sourcesObject","type":"T","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<{ [K in keyof T]: ObservedValueOf<T[K]> }>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"forkJoin","modulePath":"..\\src\\internal\\observable\\forkJoin.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},"..\\src\\internal\\observable\\from.ts":{"moduleComponents":{"from":{"kind":13,"usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":1,"index":1},"sources":[{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"O","kind":39,"isConst":false,"constraint":"ObservableInput<any>","variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"input","type":"O","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<ObservedValueOf<O>>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"from","modulePath":"..\\src\\internal\\observable\\from.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"O","kind":39,"isConst":false,"constraint":"ObservableInput<any>","variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"The `scheduler` parameter will be removed in v8. Use `scheduled`. Details: https://rxjs.dev/deprecations/scheduler-argument"}]}],"hasDeclareKeyword":false,"parameters":[{"name":"input","type":"O","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"scheduler","type":"SchedulerLike | undefined","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<ObservedValueOf<O>>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"from","modulePath":"..\\src\\internal\\observable\\from.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},"..\\src\\internal\\observable\\fromEvent.ts":{"moduleComponents":{"fromEvent":{"kind":13,"usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":1,"index":1},"sources":[{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"target","type":"HasEventTargetAddRemove<T> | ArrayLike<HasEventTargetAddRemove<T>>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"eventName","type":"string","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<T>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"fromEvent","modulePath":"..\\src\\internal\\observable\\fromEvent.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"R","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"target","type":"HasEventTargetAddRemove<T> | ArrayLike<HasEventTargetAddRemove<T>>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"eventName","type":"string","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"resultSelector","type":"(event: T) => R","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<R>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"fromEvent","modulePath":"..\\src\\internal\\observable\\fromEvent.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"target","type":"HasEventTargetAddRemove<T> | ArrayLike<HasEventTargetAddRemove<T>>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"eventName","type":"string","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"options","type":"EventListenerOptions","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<T>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"fromEvent","modulePath":"..\\src\\internal\\observable\\fromEvent.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"R","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"target","type":"HasEventTargetAddRemove<T> | ArrayLike<HasEventTargetAddRemove<T>>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"eventName","type":"string","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"options","type":"EventListenerOptions","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"resultSelector","type":"(event: T) => R","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<R>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"fromEvent","modulePath":"..\\src\\internal\\observable\\fromEvent.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"target","type":"NodeStyleEventEmitter | ArrayLike<NodeStyleEventEmitter>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"eventName","type":"string","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<unknown>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"fromEvent","modulePath":"..\\src\\internal\\observable\\fromEvent.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Do not specify explicit type parameters. Signatures with type parameters that cannot be inferred will be removed in v8."}]}],"hasDeclareKeyword":false,"parameters":[{"name":"target","type":"NodeStyleEventEmitter | ArrayLike<NodeStyleEventEmitter>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"eventName","type":"string","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<T>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"fromEvent","modulePath":"..\\src\\internal\\observable\\fromEvent.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"R","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"target","type":"NodeStyleEventEmitter | ArrayLike<NodeStyleEventEmitter>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"eventName","type":"string","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"resultSelector","type":"(...args: any[]) => R","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<R>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"fromEvent","modulePath":"..\\src\\internal\\observable\\fromEvent.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"target","type":"NodeCompatibleEventEmitter | ArrayLike<NodeCompatibleEventEmitter>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"eventName","type":"string","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<unknown>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"fromEvent","modulePath":"..\\src\\internal\\observable\\fromEvent.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Do not specify explicit type parameters. Signatures with type parameters that cannot be inferred will be removed in v8."}]}],"hasDeclareKeyword":false,"parameters":[{"name":"target","type":"NodeCompatibleEventEmitter | ArrayLike<NodeCompatibleEventEmitter>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"eventName","type":"string","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<T>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"fromEvent","modulePath":"..\\src\\internal\\observable\\fromEvent.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"R","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"target","type":"NodeCompatibleEventEmitter | ArrayLike<NodeCompatibleEventEmitter>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"eventName","type":"string","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"resultSelector","type":"(...args: any[]) => R","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<R>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"fromEvent","modulePath":"..\\src\\internal\\observable\\fromEvent.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"target","type":"JQueryStyleEventEmitter<any, T> | ArrayLike<JQueryStyleEventEmitter<any, T>>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"eventName","type":"string","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<T>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"fromEvent","modulePath":"..\\src\\internal\\observable\\fromEvent.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"R","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"target","type":"JQueryStyleEventEmitter<any, T> | ArrayLike<JQueryStyleEventEmitter<any, T>>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"eventName","type":"string","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"resultSelector","type":"(value: T, ...args: any[]) => R","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<R>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"fromEvent","modulePath":"..\\src\\internal\\observable\\fromEvent.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},"..\\src\\internal\\observable\\fromEventPattern.ts":{"moduleComponents":{"fromEventPattern":{"kind":13,"usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":0,"index":0.5},"sources":[{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"addHandler","type":"(handler: NodeEventHandler) => any","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"removeHandler","type":"(handler: NodeEventHandler, signal?: any) => void","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<T>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"fromEventPattern","modulePath":"..\\src\\internal\\observable\\fromEventPattern.ts"},"usabilityResult":{"index":0.5,"paramLengthComplexity":1,"paramSequenceComplexity":0}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"addHandler","type":"(handler: NodeEventHandler) => any","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"removeHandler","type":"(handler: NodeEventHandler, signal?: any) => void","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"resultSelector","type":"(...args: any[]) => T","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<T>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"fromEventPattern","modulePath":"..\\src\\internal\\observable\\fromEventPattern.ts"},"usabilityResult":{"index":0.5,"paramLengthComplexity":1,"paramSequenceComplexity":0}}]}},"usabilityResult":{"index":0.5,"paramLengthComplexity":1,"paramSequenceComplexity":0}},"..\\src\\internal\\observable\\generate.ts":{"moduleComponents":{"generate":{"kind":13,"usabilityResult":{"paramLengthComplexity":0.8419698602928606,"paramSequenceComplexity":0.6458333333333334,"index":0.743901596813097},"sources":[{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"S","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nGenerates an observable sequence by running a state-driven loop\r\nproducing the sequence's elements, using the specified scheduler\r\nto send out observer messages.\r\n\r\n![](generate.png)\r\n\r\n## Examples\r\n\r\nProduces sequence of numbers\r\n\r\n```ts\r\nimport { generate } from 'rxjs';\r\n\r\nconst result = generate(0, x => x < 3, x => x + 1, x => x);\r\n\r\nresult.subscribe(x => console.log(x));\r\n\r\n// Logs:\r\n// 0\r\n// 1\r\n// 2\r\n```\r\n\r\nUse `asapScheduler`\r\n\r\n```ts\r\nimport { generate, asapScheduler } from 'rxjs';\r\n\r\nconst result = generate(1, x => x < 5, x => x * 2, x => x + 1, asapScheduler);\r\n\r\nresult.subscribe(x => console.log(x));\r\n\r\n// Logs:\r\n// 2\r\n// 3\r\n// 5\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link from}"},{"kind":25,"tagName":"see","text":"{@link Observable}"},{"kind":25,"tagName":"param","text":"{S} initialState Initial state."},{"kind":25,"tagName":"param","text":"{function (state: S): boolean} condition Condition to terminate generation (upon returning false)."},{"kind":25,"tagName":"param","text":"{function (state: S): S} iterate Iteration step function."},{"kind":25,"tagName":"param","text":"{function (state: S): T} resultSelector Selector function for results produced in the sequence. (deprecated)"},{"kind":25,"tagName":"param","text":"{SchedulerLike} [scheduler] A {@link SchedulerLike} on which to run the generator loop. If not provided, defaults to emit immediately."},{"kind":25,"tagName":"returns","text":"{Observable<T>} The generated sequence."},{"kind":25,"tagName":"deprecated","text":"Instead of passing separate arguments, use the options argument. Signatures taking separate arguments will be removed in v8."}]}],"hasDeclareKeyword":false,"parameters":[{"name":"initialState","type":"S","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"condition","type":"ConditionFunc<S>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"iterate","type":"IterateFunc<S>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"resultSelector","type":"ResultFunc<S, T>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"scheduler","type":"SchedulerLike","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<T>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"generate","modulePath":"..\\src\\internal\\observable\\generate.ts"},"usabilityResult":{"index":0.30893972058572117,"paramLengthComplexity":0.36787944117144233,"paramSequenceComplexity":0.25}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"S","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nGenerates an Observable by running a state-driven loop\r\nthat emits an element on each iteration.\r\n\r\n<span class=\"informal\">Use it instead of nexting values in a for loop.</span>\r\n\r\n![](generate.png)\r\n\r\n`generate` allows you to create a stream of values generated with a loop very similar to\r\na traditional for loop. The first argument of `generate` is a beginning value. The second argument\r\nis a function that accepts this value and tests if some condition still holds. If it does,\r\nthen the loop continues, if not, it stops. The third value is a function which takes the\r\npreviously defined value and modifies it in some way on each iteration. Note how these three parameters\r\nare direct equivalents of three expressions in a traditional for loop: the first expression\r\ninitializes some state (for example, a numeric index), the second tests if the loop can perform the next\r\niteration (for example, if the index is lower than 10) and the third states how the defined value\r\nwill be modified on every step (for example, the index will be incremented by one).\r\n\r\nReturn value of a `generate` operator is an Observable that on each loop iteration\r\nemits a value. First of all, the condition function is ran. If it returns true, then the Observable\r\nemits the currently stored value (initial value at the first iteration) and finally updates\r\nthat value with iterate function. If at some point the condition returns false, then the Observable\r\ncompletes at that moment.\r\n\r\nOptionally you can pass a fourth parameter to `generate` - a result selector function which allows you\r\nto immediately map the value that would normally be emitted by an Observable.\r\n\r\nIf you find three anonymous functions in `generate` call hard to read, you can provide\r\na single object to the operator instead where the object has the properties: `initialState`,\r\n`condition`, `iterate` and `resultSelector`, which should have respective values that you\r\nwould normally pass to `generate`. `resultSelector` is still optional, but that form\r\nof calling `generate` allows you to omit `condition` as well. If you omit it, that means\r\ncondition always holds, or in other words the resulting Observable will never complete.\r\n\r\nBoth forms of `generate` can optionally accept a scheduler. In case of a multi-parameter call,\r\nscheduler simply comes as a last argument (no matter if there is a `resultSelector`\r\nfunction or not). In case of a single-parameter call, you can provide it as a\r\n`scheduler` property on the object passed to the operator. In both cases, a scheduler decides when\r\nthe next iteration of the loop will happen and therefore when the next value will be emitted\r\nby the Observable. For example, to ensure that each value is pushed to the Observer\r\non a separate task in the event loop, you could use the `async` scheduler. Note that\r\nby default (when no scheduler is passed) values are simply emitted synchronously.\r\n\r\n\r\n## Examples\r\n\r\nUse with condition and iterate functions\r\n\r\n```ts\r\nimport { generate } from 'rxjs';\r\n\r\nconst result = generate(0, x => x < 3, x => x + 1);\r\n\r\nresult.subscribe({\r\n  next: value => console.log(value),\r\n  complete: () => console.log('Complete!')\r\n});\r\n\r\n// Logs:\r\n// 0\r\n// 1\r\n// 2\r\n// 'Complete!'\r\n```\r\n\r\nUse with condition, iterate and resultSelector functions\r\n\r\n```ts\r\nimport { generate } from 'rxjs';\r\n\r\nconst result = generate(0, x => x < 3, x => x + 1, x => x * 1000);\r\n\r\nresult.subscribe({\r\n  next: value => console.log(value),\r\n  complete: () => console.log('Complete!')\r\n});\r\n\r\n// Logs:\r\n// 0\r\n// 1000\r\n// 2000\r\n// 'Complete!'\r\n```\r\n\r\nUse with options object\r\n\r\n```ts\r\nimport { generate } from 'rxjs';\r\n\r\nconst result = generate({\r\n  initialState: 0,\r\n  condition(value) { return value < 3; },\r\n  iterate(value) { return value + 1; },\r\n  resultSelector(value) { return value * 1000; }\r\n});\r\n\r\nresult.subscribe({\r\n  next: value => console.log(value),\r\n  complete: () => console.log('Complete!')\r\n});\r\n\r\n// Logs:\r\n// 0\r\n// 1000\r\n// 2000\r\n// 'Complete!'\r\n```\r\n\r\nUse options object without condition function\r\n\r\n```ts\r\nimport { generate } from 'rxjs';\r\n\r\nconst result = generate({\r\n  initialState: 0,\r\n  iterate(value) { return value + 1; },\r\n  resultSelector(value) { return value * 1000; }\r\n});\r\n\r\nresult.subscribe({\r\n  next: value => console.log(value),\r\n  complete: () => console.log('Complete!') // This will never run\r\n});\r\n\r\n// Logs:\r\n// 0\r\n// 1000\r\n// 2000\r\n// 3000\r\n// ...and never stops.\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link from}"},{"kind":25,"tagName":"param","text":"{S} initialState Initial state."},{"kind":25,"tagName":"param","text":"{function (state: S): boolean} condition Condition to terminate generation (upon returning false)."},{"kind":25,"tagName":"param","text":"{function (state: S): S} iterate Iteration step function."},{"kind":25,"tagName":"param","text":"{function (state: S): T} [resultSelector] Selector function for results produced in the sequence."},{"kind":25,"tagName":"param","text":"{Scheduler} [scheduler] A {@link Scheduler} on which to run the generator loop. If not provided, defaults to emitting immediately."},{"kind":25,"tagName":"return","text":"{Observable<T>} The generated sequence."},{"kind":25,"tagName":"deprecated","text":"Instead of passing separate arguments, use the options argument. Signatures taking separate arguments will be removed in v8."}]}],"hasDeclareKeyword":false,"parameters":[{"name":"initialState","type":"S","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"condition","type":"ConditionFunc<S>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"iterate","type":"IterateFunc<S>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"scheduler","type":"SchedulerLike","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<S>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"generate","modulePath":"..\\src\\internal\\observable\\generate.ts"},"usabilityResult":{"index":0.6666666666666667,"paramLengthComplexity":1,"paramSequenceComplexity":0.33333333333333337}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"S","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nGenerates an observable sequence by running a state-driven loop\r\nproducing the sequence's elements, using the specified scheduler\r\nto send out observer messages.\r\nThe overload accepts options object that might contain initial state, iterate,\r\ncondition and scheduler.\r\n\r\n![](generate.png)\r\n\r\n## Examples\r\n\r\nUse options object with condition function\r\n\r\n```ts\r\nimport { generate } from 'rxjs';\r\n\r\nconst result = generate({\r\n  initialState: 0,\r\n  condition: x => x < 3,\r\n  iterate: x => x + 1\r\n});\r\n\r\nresult.subscribe({\r\n  next: value => console.log(value),\r\n  complete: () => console.log('Complete!')\r\n});\r\n\r\n// Logs:\r\n// 0\r\n// 1\r\n// 2\r\n// 'Complete!'\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link from}"},{"kind":25,"tagName":"see","text":"{@link Observable}"},{"kind":25,"tagName":"param","text":"{GenerateBaseOptions<S>} options Object that must contain initialState, iterate and might contain condition and scheduler."},{"kind":25,"tagName":"returns","text":"{Observable<S>} The generated sequence."}]}],"hasDeclareKeyword":false,"parameters":[{"name":"options","type":"GenerateBaseOptions<S>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<S>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"generate","modulePath":"..\\src\\internal\\observable\\generate.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"S","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nGenerates an observable sequence by running a state-driven loop\r\nproducing the sequence's elements, using the specified scheduler\r\nto send out observer messages.\r\nThe overload accepts options object that might contain initial state, iterate,\r\ncondition, result selector and scheduler.\r\n\r\n![](generate.png)\r\n\r\n## Examples\r\n\r\nUse options object with condition and iterate function\r\n\r\n```ts\r\nimport { generate } from 'rxjs';\r\n\r\nconst result = generate({\r\n  initialState: 0,\r\n  condition: x => x < 3,\r\n  iterate: x => x + 1,\r\n  resultSelector: x => x\r\n});\r\n\r\nresult.subscribe({\r\n  next: value => console.log(value),\r\n  complete: () => console.log('Complete!')\r\n});\r\n\r\n// Logs:\r\n// 0\r\n// 1\r\n// 2\r\n// 'Complete!'\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link from}"},{"kind":25,"tagName":"see","text":"{@link Observable}"},{"kind":25,"tagName":"param","text":"{GenerateOptions<T, S>} options Object that must contain initialState, iterate, resultSelector and might contain condition and scheduler."},{"kind":25,"tagName":"returns","text":"{Observable<T>} The generated sequence."}]}],"hasDeclareKeyword":false,"parameters":[{"name":"options","type":"GenerateOptions<T, S>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<T>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"generate","modulePath":"..\\src\\internal\\observable\\generate.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]}},"usabilityResult":{"index":0.743901596813097,"paramLengthComplexity":0.8419698602928606,"paramSequenceComplexity":0.6458333333333334}},"..\\src\\internal\\observable\\iif.ts":{"moduleComponents":{"iif":{"kind":13,"usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":0.5,"index":0.75},"sources":[{"source":{"name":"iif","statements":["return defer(() => (condition() ? trueResult : falseResult));"],"parameters":[{"name":"condition","type":"() => boolean","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"trueResult","type":"ObservableInput<T>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"falseResult","type":"ObservableInput<F>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<T | F>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"F","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nChecks a boolean at subscription time, and chooses between one of two observable sources\r\n\r\n`iif` expects a function that returns a boolean (the `condition` function), and two sources,\r\nthe `trueResult` and the `falseResult`, and returns an Observable.\r\n\r\nAt the moment of subscription, the `condition` function is called. If the result is `true`, the\r\nsubscription will be to the source passed as the `trueResult`, otherwise, the subscription will be\r\nto the source passed as the `falseResult`.\r\n\r\nIf you need to check more than two options to choose between more than one observable, have a look at the {@link defer} creation method.\r\n\r\n## Examples\r\n\r\nChange at runtime which Observable will be subscribed\r\n\r\n```ts\r\nimport { iif, of } from 'rxjs';\r\n\r\nlet subscribeToFirst;\r\nconst firstOrSecond = iif(\r\n  () => subscribeToFirst,\r\n  of('first'),\r\n  of('second')\r\n);\r\n\r\nsubscribeToFirst = true;\r\nfirstOrSecond.subscribe(value => console.log(value));\r\n\r\n// Logs:\r\n// 'first'\r\n\r\nsubscribeToFirst = false;\r\nfirstOrSecond.subscribe(value => console.log(value));\r\n\r\n// Logs:\r\n// 'second'\r\n```\r\n\r\nControl access to an Observable\r\n\r\n```ts\r\nimport { iif, of, EMPTY } from 'rxjs';\r\n\r\nlet accessGranted;\r\nconst observableIfYouHaveAccess = iif(\r\n  () => accessGranted,\r\n  of('It seems you have an access...'),\r\n  EMPTY\r\n);\r\n\r\naccessGranted = true;\r\nobservableIfYouHaveAccess.subscribe({\r\n  next: value => console.log(value),\r\n  complete: () => console.log('The end')\r\n});\r\n\r\n// Logs:\r\n// 'It seems you have an access...'\r\n// 'The end'\r\n\r\naccessGranted = false;\r\nobservableIfYouHaveAccess.subscribe({\r\n  next: value => console.log(value),\r\n  complete: () => console.log('The end')\r\n});\r\n\r\n// Logs:\r\n// 'The end'\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link defer}"},{"kind":25,"tagName":"param","text":"condition Condition which Observable should be chosen."},{"kind":25,"tagName":"param","text":"trueResult An Observable that will be subscribed if condition is true."},{"kind":25,"tagName":"param","text":"falseResult An Observable that will be subscribed if condition is false."},{"kind":25,"tagName":"return","text":"An observable that proxies to `trueResult` or `falseResult`, depending on the result of the `condition` function."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[],"functionName":"iif","modulePath":"..\\src\\internal\\observable\\iif.ts"},"usabilityResult":{"index":0.75,"paramLengthComplexity":1,"paramSequenceComplexity":0.5}}]}},"usabilityResult":{"index":0.75,"paramLengthComplexity":1,"paramSequenceComplexity":0.5}},"..\\src\\internal\\observable\\interval.ts":{"moduleComponents":{"interval":{"kind":13,"usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":1,"index":1},"sources":[{"source":{"name":"interval","statements":["if (period < 0) {\r\n// We cannot schedule an interval in the past.\r\nperiod = 0;\r\n}","return timer(period, period, scheduler);"],"parameters":[{"name":"period","initializer":"0","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"scheduler","initializer":"asyncScheduler","type":"SchedulerLike","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<number>","typeParameters":[],"docs":[{"kind":24,"description":"\r\nCreates an Observable that emits sequential numbers every specified\r\ninterval of time, on a specified {@link SchedulerLike}.\r\n\r\n<span class=\"informal\">Emits incremental numbers periodically in time.</span>\r\n\r\n![](interval.png)\r\n\r\n`interval` returns an Observable that emits an infinite sequence of\r\nascending integers, with a constant interval of time of your choosing\r\nbetween those emissions. The first emission is not sent immediately, but\r\nonly after the first period has passed. By default, this operator uses the\r\n`async` {@link SchedulerLike} to provide a notion of time, but you may pass any\r\n{@link SchedulerLike} to it.\r\n\r\n## Example\r\n\r\nEmits ascending numbers, one every second (1000ms) up to the number 3\r\n\r\n```ts\r\nimport { interval, take } from 'rxjs';\r\n\r\nconst numbers = interval(1000);\r\n\r\nconst takeFourNumbers = numbers.pipe(take(4));\r\n\r\ntakeFourNumbers.subscribe(x => console.log('Next: ', x));\r\n\r\n// Logs:\r\n// Next: 0\r\n// Next: 1\r\n// Next: 2\r\n// Next: 3\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link timer}"},{"kind":25,"tagName":"see","text":"{@link delay}"},{"kind":25,"tagName":"param","text":"{number} [period=0] The interval size in milliseconds (by default)\r\nor the time unit determined by the scheduler's clock."},{"kind":25,"tagName":"param","text":"{SchedulerLike} [scheduler=async] The {@link SchedulerLike} to use for scheduling\r\nthe emission of values, and providing a notion of \"time\"."},{"kind":25,"tagName":"return","text":"{Observable} An Observable that emits a sequential number each time\r\ninterval."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[],"functionName":"interval","modulePath":"..\\src\\internal\\observable\\interval.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},"..\\src\\internal\\observable\\merge.ts":{"moduleComponents":{"merge":{"kind":13,"usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":1,"index":1},"sources":[{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"A","kind":39,"isConst":false,"constraint":"readonly unknown[]","variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"sources","type":"[...ObservableInputTuple<A>]","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":true}],"returnType":"Observable<A[number]>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"merge","modulePath":"..\\src\\internal\\observable\\merge.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"A","kind":39,"isConst":false,"constraint":"readonly unknown[]","variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"sourcesAndConcurrency","type":"[...ObservableInputTuple<A>, number?]","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":true}],"returnType":"Observable<A[number]>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"merge","modulePath":"..\\src\\internal\\observable\\merge.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"A","kind":39,"isConst":false,"constraint":"readonly unknown[]","variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"The `scheduler` parameter will be removed in v8. Use `scheduled` and `mergeAll`. Details: https://rxjs.dev/deprecations/scheduler-argument"}]}],"hasDeclareKeyword":false,"parameters":[{"name":"sourcesAndScheduler","type":"[...ObservableInputTuple<A>, SchedulerLike?]","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":true}],"returnType":"Observable<A[number]>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"merge","modulePath":"..\\src\\internal\\observable\\merge.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"A","kind":39,"isConst":false,"constraint":"readonly unknown[]","variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"The `scheduler` parameter will be removed in v8. Use `scheduled` and `mergeAll`. Details: https://rxjs.dev/deprecations/scheduler-argument"}]}],"hasDeclareKeyword":false,"parameters":[{"name":"sourcesAndConcurrencyAndScheduler","type":"[...ObservableInputTuple<A>, number?, SchedulerLike?]","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":true}],"returnType":"Observable<A[number]>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"merge","modulePath":"..\\src\\internal\\observable\\merge.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},"..\\src\\internal\\observable\\never.ts":{"moduleComponents":{"never":{"kind":13,"usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":1,"index":1},"sources":[{"source":{"name":"never","statements":["return NEVER;"],"parameters":[],"typeParameters":[],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Replaced with the {@link NEVER} constant. Will be removed in v8."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[],"functionName":"never","modulePath":"..\\src\\internal\\observable\\never.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},"..\\src\\internal\\observable\\of.ts":{"moduleComponents":{"of":{"kind":13,"usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":1,"index":1},"sources":[{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"value","type":"null","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<null>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"of","modulePath":"..\\src\\internal\\observable\\of.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"value","type":"undefined","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<undefined>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"of","modulePath":"..\\src\\internal\\observable\\of.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"The `scheduler` parameter will be removed in v8. Use `scheduled`. Details: https://rxjs.dev/deprecations/scheduler-argument"}]}],"hasDeclareKeyword":false,"parameters":[{"name":"scheduler","type":"SchedulerLike","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<never>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"of","modulePath":"..\\src\\internal\\observable\\of.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"A","kind":39,"isConst":false,"constraint":"readonly unknown[]","variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"The `scheduler` parameter will be removed in v8. Use `scheduled`. Details: https://rxjs.dev/deprecations/scheduler-argument"}]}],"hasDeclareKeyword":false,"parameters":[{"name":"valuesAndScheduler","type":"[...A, SchedulerLike]","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":true}],"returnType":"Observable<ValueFromArray<A>>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"of","modulePath":"..\\src\\internal\\observable\\of.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[],"docs":[],"hasDeclareKeyword":false,"parameters":[],"returnType":"Observable<never>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"of","modulePath":"..\\src\\internal\\observable\\of.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Do not specify explicit type parameters. Signatures with type parameters that cannot be inferred will be removed in v8."}]}],"hasDeclareKeyword":false,"parameters":[],"returnType":"Observable<T>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"of","modulePath":"..\\src\\internal\\observable\\of.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"value","type":"T","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<T>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"of","modulePath":"..\\src\\internal\\observable\\of.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"A","kind":39,"isConst":false,"constraint":"readonly unknown[]","variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"values","type":"A","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":true}],"returnType":"Observable<ValueFromArray<A>>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"of","modulePath":"..\\src\\internal\\observable\\of.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},"..\\src\\internal\\observable\\onErrorResumeNext.ts":{"moduleComponents":{"onErrorResumeNext":{"kind":13,"usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":1,"index":1},"sources":[{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"A","kind":39,"isConst":false,"constraint":"readonly unknown[]","variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"sources","type":"[...ObservableInputTuple<A>]","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<A[number]>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"onErrorResumeNext","modulePath":"..\\src\\internal\\observable\\onErrorResumeNext.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"A","kind":39,"isConst":false,"constraint":"readonly unknown[]","variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"sources","type":"[...ObservableInputTuple<A>]","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":true}],"returnType":"Observable<A[number]>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"onErrorResumeNext","modulePath":"..\\src\\internal\\observable\\onErrorResumeNext.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},"..\\src\\internal\\observable\\pairs.ts":{"moduleComponents":{"pairs":{"kind":13,"usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":1,"index":1},"sources":[{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Use `from(Object.entries(obj))` instead. Will be removed in v8."}]}],"hasDeclareKeyword":false,"parameters":[{"name":"arr","type":"readonly T[]","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"scheduler","type":"SchedulerLike","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<[string, T]>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"pairs","modulePath":"..\\src\\internal\\observable\\pairs.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"O","kind":39,"isConst":false,"constraint":"Record<string, unknown>","variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Use `from(Object.entries(obj))` instead. Will be removed in v8."}]}],"hasDeclareKeyword":false,"parameters":[{"name":"obj","type":"O","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"scheduler","type":"SchedulerLike","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<[keyof O, O[keyof O]]>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"pairs","modulePath":"..\\src\\internal\\observable\\pairs.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Use `from(Object.entries(obj))` instead. Will be removed in v8."}]}],"hasDeclareKeyword":false,"parameters":[{"name":"iterable","type":"Iterable<T>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"scheduler","type":"SchedulerLike","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<[string, T]>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"pairs","modulePath":"..\\src\\internal\\observable\\pairs.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Use `from(Object.entries(obj))` instead. Will be removed in v8."}]}],"hasDeclareKeyword":false,"parameters":[{"name":"n","type":"number | bigint | boolean | ((...args: any[]) => any) | symbol","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"scheduler","type":"SchedulerLike","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<[never, never]>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"pairs","modulePath":"..\\src\\internal\\observable\\pairs.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},"..\\src\\internal\\observable\\partition.ts":{"moduleComponents":{"partition":{"kind":13,"usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":0.75,"index":0.875},"sources":[{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"U","kind":39,"isConst":false,"constraint":"T","variance":0},{"name":"A","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Use a closure instead of a `thisArg`. Signatures accepting a `thisArg` will be removed in v8."}]}],"hasDeclareKeyword":false,"parameters":[{"name":"source","type":"ObservableInput<T>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"predicate","type":"(this: A, value: T, index: number) => value is U","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"thisArg","type":"A","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"[Observable<U>, Observable<Exclude<T, U>>]","isGenerator":false,"isAsync":false,"kind":14,"functionName":"partition","modulePath":"..\\src\\internal\\observable\\partition.ts"},"usabilityResult":{"index":0.75,"paramLengthComplexity":1,"paramSequenceComplexity":0.5}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"U","kind":39,"isConst":false,"constraint":"T","variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"source","type":"ObservableInput<T>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"predicate","type":"(value: T, index: number) => value is U","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"[Observable<U>, Observable<Exclude<T, U>>]","isGenerator":false,"isAsync":false,"kind":14,"functionName":"partition","modulePath":"..\\src\\internal\\observable\\partition.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"A","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Use a closure instead of a `thisArg`. Signatures accepting a `thisArg` will be removed in v8."}]}],"hasDeclareKeyword":false,"parameters":[{"name":"source","type":"ObservableInput<T>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"predicate","type":"(this: A, value: T, index: number) => boolean","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"thisArg","type":"A","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"[Observable<T>, Observable<T>]","isGenerator":false,"isAsync":false,"kind":14,"functionName":"partition","modulePath":"..\\src\\internal\\observable\\partition.ts"},"usabilityResult":{"index":0.75,"paramLengthComplexity":1,"paramSequenceComplexity":0.5}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"source","type":"ObservableInput<T>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"predicate","type":"(value: T, index: number) => boolean","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"[Observable<T>, Observable<T>]","isGenerator":false,"isAsync":false,"kind":14,"functionName":"partition","modulePath":"..\\src\\internal\\observable\\partition.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]}},"usabilityResult":{"index":0.875,"paramLengthComplexity":1,"paramSequenceComplexity":0.75}},"..\\src\\internal\\observable\\race.ts":{"moduleComponents":{"race":{"kind":13,"usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":1,"index":1},"sources":[{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"constraint":"readonly unknown[]","variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"inputs","type":"[...ObservableInputTuple<T>]","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<T[number]>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"race","modulePath":"..\\src\\internal\\observable\\race.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"constraint":"readonly unknown[]","variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"inputs","type":"[...ObservableInputTuple<T>]","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":true}],"returnType":"Observable<T[number]>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"race","modulePath":"..\\src\\internal\\observable\\race.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},"..\\src\\internal\\observable\\range.ts":{"moduleComponents":{"range":{"kind":13,"usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":0.25,"index":0.625},"sources":[{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"start","type":"number","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"count","type":"number","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<number>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"range","modulePath":"..\\src\\internal\\observable\\range.ts"},"usabilityResult":{"index":0.5,"paramLengthComplexity":1,"paramSequenceComplexity":0}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"The `scheduler` parameter will be removed in v8. Use `range(start, count).pipe(observeOn(scheduler))` instead. Details: Details: https://rxjs.dev/deprecations/scheduler-argument"}]}],"hasDeclareKeyword":false,"parameters":[{"name":"start","type":"number","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"count","type":"number | undefined","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"scheduler","type":"SchedulerLike","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<number>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"range","modulePath":"..\\src\\internal\\observable\\range.ts"},"usabilityResult":{"index":0.75,"paramLengthComplexity":1,"paramSequenceComplexity":0.5}}]}},"usabilityResult":{"index":0.625,"paramLengthComplexity":1,"paramSequenceComplexity":0.25}},"..\\src\\internal\\observable\\throwError.ts":{"moduleComponents":{"throwError":{"kind":13,"usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":0.6666666666666666,"index":0.8333333333333333},"sources":[{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[],"docs":[{"kind":24,"description":"\r\nCreates an observable that will create an error instance and push it to the consumer as an error\r\nimmediately upon subscription.\r\n\r\n<span class=\"informal\">Just errors and does nothing else</span>\r\n\r\n![](throw.png)\r\n\r\nThis creation function is useful for creating an observable that will create an error and error every\r\ntime it is subscribed to. Generally, inside of most operators when you might want to return an errored\r\nobservable, this is unnecessary. In most cases, such as in the inner return of {@link concatMap},\r\n{@link mergeMap}, {@link defer}, and many others, you can simply throw the error, and RxJS will pick\r\nthat up and notify the consumer of the error.\r\n\r\n## Example\r\n\r\nCreate a simple observable that will create a new error with a timestamp and log it\r\nand the message every time you subscribe to it\r\n\r\n```ts\r\nimport { throwError } from 'rxjs';\r\n\r\nlet errorCount = 0;\r\n\r\nconst errorWithTimestamp$ = throwError(() => {\r\n  const error: any = new Error(`This is error number ${ ++errorCount }`);\r\n  error.timestamp = Date.now();\r\n  return error;\r\n});\r\n\r\nerrorWithTimestamp$.subscribe({\r\n  error: err => console.log(err.timestamp, err.message)\r\n});\r\n\r\nerrorWithTimestamp$.subscribe({\r\n  error: err => console.log(err.timestamp, err.message)\r\n});\r\n\r\n// Logs the timestamp and a new error message for each subscription\r\n```\r\n\r\n### Unnecessary usage\r\n\r\nUsing `throwError` inside of an operator or creation function\r\nwith a callback, is usually not necessary\r\n\r\n```ts\r\nimport { of, concatMap, timer, throwError } from 'rxjs';\r\n\r\nconst delays$ = of(1000, 2000, Infinity, 3000);\r\n\r\ndelays$.pipe(\r\n  concatMap(ms => {\r\n    if (ms < 10000) {\r\n      return timer(ms);\r\n    } else {\r\n      // This is probably overkill.\r\n      return throwError(() => new Error(`Invalid time ${ ms }`));\r\n    }\r\n  })\r\n)\r\n.subscribe({\r\n  next: console.log,\r\n  error: console.error\r\n});\r\n```\r\n\r\nYou can just throw the error instead\r\n\r\n```ts\r\nimport { of, concatMap, timer } from 'rxjs';\r\n\r\nconst delays$ = of(1000, 2000, Infinity, 3000);\r\n\r\ndelays$.pipe(\r\n  concatMap(ms => {\r\n    if (ms < 10000) {\r\n      return timer(ms);\r\n    } else {\r\n      // Cleaner and easier to read for most folks.\r\n      throw new Error(`Invalid time ${ ms }`);\r\n    }\r\n  })\r\n)\r\n.subscribe({\r\n  next: console.log,\r\n  error: console.error\r\n});\r\n```\r\n","tags":[{"kind":25,"tagName":"param","text":"errorFactory A factory function that will create the error instance that is pushed."}]}],"hasDeclareKeyword":false,"parameters":[{"name":"errorFactory","type":"() => any","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<never>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"throwError","modulePath":"..\\src\\internal\\observable\\throwError.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[],"docs":[{"kind":24,"description":"\r\nReturns an observable that will error with the specified error immediately upon subscription.\r\n","tags":[{"kind":25,"tagName":"param","text":"error The error instance to emit"},{"kind":25,"tagName":"deprecated","text":"Support for passing an error value will be removed in v8. Instead, pass a factory function to `throwError(() => new Error('test'))`. This is\r\nbecause it will create the error at the moment it should be created and capture a more appropriate stack trace. If\r\nfor some reason you need to create the error ahead of time, you can still do that: `const err = new Error('test'); throwError(() => err);`."}]}],"hasDeclareKeyword":false,"parameters":[{"name":"error","type":"any","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<never>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"throwError","modulePath":"..\\src\\internal\\observable\\throwError.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[],"docs":[{"kind":24,"description":"\r\nNotifies the consumer of an error using a given scheduler by scheduling it at delay `0` upon subscription.\r\n","tags":[{"kind":25,"tagName":"param","text":"errorOrErrorFactory An error instance or error factory"},{"kind":25,"tagName":"param","text":"scheduler A scheduler to use to schedule the error notification"},{"kind":25,"tagName":"deprecated","text":"The `scheduler` parameter will be removed in v8.\r\nUse `throwError` in combination with {@link observeOn}: `throwError(() => new Error('test')).pipe(observeOn(scheduler));`.\r\nDetails: https://rxjs.dev/deprecations/scheduler-argument"}]}],"hasDeclareKeyword":false,"parameters":[{"name":"errorOrErrorFactory","type":"any","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"scheduler","type":"SchedulerLike","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<never>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"throwError","modulePath":"..\\src\\internal\\observable\\throwError.ts"},"usabilityResult":{"index":0.5,"paramLengthComplexity":1,"paramSequenceComplexity":0}}]}},"usabilityResult":{"index":0.8333333333333333,"paramLengthComplexity":1,"paramSequenceComplexity":0.6666666666666666}},"..\\src\\internal\\observable\\timer.ts":{"moduleComponents":{"timer":{"kind":13,"usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":0.8333333333333334,"index":0.9166666666666667},"sources":[{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[],"docs":[{"kind":24,"description":"\r\nCreates an observable that will wait for a specified time period, or exact date, before\r\nemitting the number 0.\r\n\r\n<span class=\"informal\">Used to emit a notification after a delay.</span>\r\n\r\nThis observable is useful for creating delays in code, or racing against other values\r\nfor ad-hoc timeouts.\r\n\r\nThe `delay` is specified by default in milliseconds, however providing a custom scheduler could\r\ncreate a different behavior.\r\n\r\n## Examples\r\n\r\nWait 3 seconds and start another observable\r\n\r\nYou might want to use `timer` to delay subscription to an\r\nobservable by a set amount of time. Here we use a timer with\r\n{@link concatMapTo} or {@link concatMap} in order to wait\r\na few seconds and start a subscription to a source.\r\n\r\n```ts\r\nimport { of, timer, concatMap } from 'rxjs';\r\n\r\n// This could be any observable\r\nconst source = of(1, 2, 3);\r\n\r\ntimer(3000)\r\n  .pipe(concatMap(() => source))\r\n  .subscribe(console.log);\r\n```\r\n\r\nTake all values until the start of the next minute\r\n\r\nUsing a `Date` as the trigger for the first emission, you can\r\ndo things like wait until midnight to fire an event, or in this case,\r\nwait until a new minute starts (chosen so the example wouldn't take\r\ntoo long to run) in order to stop watching a stream. Leveraging\r\n{@link takeUntil}.\r\n\r\n```ts\r\nimport { interval, takeUntil, timer } from 'rxjs';\r\n\r\n// Build a Date object that marks the\r\n// next minute.\r\nconst currentDate = new Date();\r\nconst startOfNextMinute = new Date(\r\n  currentDate.getFullYear(),\r\n  currentDate.getMonth(),\r\n  currentDate.getDate(),\r\n  currentDate.getHours(),\r\n  currentDate.getMinutes() + 1\r\n);\r\n\r\n// This could be any observable stream\r\nconst source = interval(1000);\r\n\r\nconst result = source.pipe(\r\n  takeUntil(timer(startOfNextMinute))\r\n);\r\n\r\nresult.subscribe(console.log);\r\n```\r\n\r\n### Known Limitations\r\n\r\n- The {@link asyncScheduler} uses `setTimeout` which has limitations for how far in the future it can be scheduled.\r\n\r\n- If a `scheduler` is provided that returns a timestamp other than an epoch from `now()`, and\r\na `Date` object is passed to the `dueTime` argument, the calculation for when the first emission\r\nshould occur will be incorrect. In this case, it would be best to do your own calculations\r\nahead of time, and pass a `number` in as the `dueTime`.\r\n","tags":[{"kind":25,"tagName":"param","text":"due If a `number`, the amount of time in milliseconds to wait before emitting.\r\nIf a `Date`, the exact time at which to emit."},{"kind":25,"tagName":"param","text":"scheduler The scheduler to use to schedule the delay. Defaults to {@link asyncScheduler}."}]}],"hasDeclareKeyword":false,"parameters":[{"name":"due","type":"number | Date","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"scheduler","type":"SchedulerLike","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<0>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"timer","modulePath":"..\\src\\internal\\observable\\timer.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[],"docs":[{"kind":24,"description":"\r\nCreates an observable that starts an interval after a specified delay, emitting incrementing numbers -- starting at `0` --\r\non each interval after words.\r\n\r\nThe `delay` and `intervalDuration` are specified by default in milliseconds, however providing a custom scheduler could\r\ncreate a different behavior.\r\n\r\n## Example\r\n\r\n### Start an interval that starts right away\r\n\r\nSince {@link interval} waits for the passed delay before starting,\r\nsometimes that's not ideal. You may want to start an interval immediately.\r\n`timer` works well for this. Here we have both side-by-side so you can\r\nsee them in comparison.\r\n\r\nNote that this observable will never complete.\r\n\r\n```ts\r\nimport { timer, interval } from 'rxjs';\r\n\r\ntimer(0, 1000).subscribe(n => console.log('timer', n));\r\ninterval(1000).subscribe(n => console.log('interval', n));\r\n```\r\n\r\n### Known Limitations\r\n\r\n- The {@link asyncScheduler} uses `setTimeout` which has limitations for how far in the future it can be scheduled.\r\n\r\n- If a `scheduler` is provided that returns a timestamp other than an epoch from `now()`, and\r\na `Date` object is passed to the `dueTime` argument, the calculation for when the first emission\r\nshould occur will be incorrect. In this case, it would be best to do your own calculations\r\nahead of time, and pass a `number` in as the `startDue`.","tags":[{"kind":25,"tagName":"param","text":"startDue If a `number`, is the time to wait before starting the interval.\r\nIf a `Date`, is the exact time at which to start the interval."},{"kind":25,"tagName":"param","text":"intervalDuration The delay between each value emitted in the interval. Passing a\r\nnegative number here will result in immediate completion after the first value is emitted, as though\r\nno `intervalDuration` was passed at all."},{"kind":25,"tagName":"param","text":"scheduler The scheduler to use to schedule the delay. Defaults to {@link asyncScheduler}."}]}],"hasDeclareKeyword":false,"parameters":[{"name":"startDue","type":"number | Date","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"intervalDuration","type":"number","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"scheduler","type":"SchedulerLike","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<number>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"timer","modulePath":"..\\src\\internal\\observable\\timer.ts"},"usabilityResult":{"index":0.75,"paramLengthComplexity":1,"paramSequenceComplexity":0.5}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"The signature allowing `undefined` to be passed for `intervalDuration` will be removed in v8. Use the `timer(dueTime, scheduler?)` signature instead."}]}],"hasDeclareKeyword":false,"parameters":[{"name":"dueTime","type":"number | Date","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"unused","type":"undefined","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"scheduler","type":"SchedulerLike","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<0>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"timer","modulePath":"..\\src\\internal\\observable\\timer.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]}},"usabilityResult":{"index":0.9166666666666667,"paramLengthComplexity":1,"paramSequenceComplexity":0.8333333333333334}},"..\\src\\internal\\observable\\using.ts":{"moduleComponents":{"using":{"kind":13,"usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":1,"index":1},"sources":[{"source":{"name":"using","statements":["return new Observable<ObservedValueOf<T>>((subscriber) => {\r\nconst resource = resourceFactory();\r\nconst result = observableFactory(resource);\r\nconst source = result ? innerFrom(result) : EMPTY;\r\nsource.subscribe(subscriber);\r\nreturn () => {\r\n  // NOTE: Optional chaining did not work here.\r\n  // Related TS Issue: https://github.com/microsoft/TypeScript/issues/40818\r\n  if (resource) {\r\n    resource.unsubscribe();\r\n  }\r\n};\r\n});"],"parameters":[{"name":"resourceFactory","type":"() => Unsubscribable | void","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"observableFactory","type":"(resource: Unsubscribable | void) => T | void","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<ObservedValueOf<T>>","typeParameters":[{"name":"T","kind":39,"isConst":false,"constraint":"ObservableInput<any>","variance":0}],"docs":[{"kind":24,"description":"\r\nCreates an Observable that uses a resource which will be disposed at the same time as the Observable.\r\n\r\n<span class=\"informal\">Use it when you catch yourself cleaning up after an Observable.</span>\r\n\r\n`using` is a factory operator, which accepts two functions. First function returns a disposable resource.\r\nIt can be an arbitrary object that implements `unsubscribe` method. Second function will be injected with\r\nthat object and should return an Observable. That Observable can use resource object during its execution.\r\nBoth functions passed to `using` will be called every time someone subscribes - neither an Observable nor\r\nresource object will be shared in any way between subscriptions.\r\n\r\nWhen Observable returned by `using` is subscribed, Observable returned from the second function will be subscribed\r\nas well. All its notifications (nexted values, completion and error events) will be emitted unchanged by the output\r\nObservable. If however someone unsubscribes from the Observable or source Observable completes or errors by itself,\r\nthe `unsubscribe` method on resource object will be called. This can be used to do any necessary clean up, which\r\notherwise would have to be handled by hand. Note that complete or error notifications are not emitted when someone\r\ncancels subscription to an Observable via `unsubscribe`, so `using` can be used as a hook, allowing you to make\r\nsure that all resources which need to exist during an Observable execution will be disposed at appropriate time.\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link defer}"},{"kind":25,"tagName":"param","text":"{function(): ISubscription} resourceFactory A function which creates any resource object\r\nthat implements `unsubscribe` method."},{"kind":25,"tagName":"param","text":"{function(resource: ISubscription): Observable<T>} observableFactory A function which\r\ncreates an Observable, that can use injected resource object."},{"kind":25,"tagName":"return","text":"{Observable<T>} An Observable that behaves the same as Observable returned by `observableFactory`, but\r\nwhich - when completed, errored or unsubscribed - will also call `unsubscribe` on created resource object."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[],"functionName":"using","modulePath":"..\\src\\internal\\observable\\using.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},"..\\src\\internal\\observable\\zip.ts":{"moduleComponents":{"zip":{"kind":13,"usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":1,"index":1},"sources":[{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"A","kind":39,"isConst":false,"constraint":"readonly unknown[]","variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"sources","type":"[...ObservableInputTuple<A>]","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<A>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"zip","modulePath":"..\\src\\internal\\observable\\zip.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"A","kind":39,"isConst":false,"constraint":"readonly unknown[]","variance":0},{"name":"R","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"sources","type":"[...ObservableInputTuple<A>]","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"resultSelector","type":"(...values: A) => R","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<R>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"zip","modulePath":"..\\src\\internal\\observable\\zip.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"A","kind":39,"isConst":false,"constraint":"readonly unknown[]","variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"sources","type":"[...ObservableInputTuple<A>]","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":true}],"returnType":"Observable<A>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"zip","modulePath":"..\\src\\internal\\observable\\zip.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"A","kind":39,"isConst":false,"constraint":"readonly unknown[]","variance":0},{"name":"R","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"sourcesAndResultSelector","type":"[...ObservableInputTuple<A>, (...values: A) => R]","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":true}],"returnType":"Observable<R>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"zip","modulePath":"..\\src\\internal\\observable\\zip.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},"..\\src\\internal\\scheduled\\scheduled.ts":{"moduleComponents":{"scheduled":{"kind":13,"usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":1,"index":1},"sources":[{"source":{"name":"scheduled","statements":["if (input != null) {\r\nif (isInteropObservable(input)) {\r\n  return scheduleObservable(input, scheduler);\r\n}\r\nif (isArrayLike(input)) {\r\n  return scheduleArray(input, scheduler);\r\n}\r\nif (isPromise(input)) {\r\n  return schedulePromise(input, scheduler);\r\n}\r\nif (isAsyncIterable(input)) {\r\n  return scheduleAsyncIterable(input, scheduler);\r\n}\r\nif (isIterable(input)) {\r\n  return scheduleIterable(input, scheduler);\r\n}\r\nif (isReadableStreamLike(input)) {\r\n  return scheduleReadableStreamLike(input, scheduler);\r\n}\r\n}","throw createInvalidObservableTypeError(input);"],"parameters":[{"name":"input","type":"ObservableInput<T>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"scheduler","type":"SchedulerLike","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<T>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nConverts from a common {@link ObservableInput} type to an observable where subscription and emissions\r\nare scheduled on the provided scheduler.\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link from}"},{"kind":25,"tagName":"see","text":"{@link of}"},{"kind":25,"tagName":"param","text":"input The observable, array, promise, iterable, etc you would like to schedule"},{"kind":25,"tagName":"param","text":"scheduler The scheduler to use to schedule the subscription and emissions from\r\nthe returned observable."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[],"functionName":"scheduled","modulePath":"..\\src\\internal\\scheduled\\scheduled.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},"..\\src\\internal\\operators\\audit.ts":{"moduleComponents":{"audit":{"kind":13,"usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":1,"index":1},"sources":[{"source":{"name":"audit","statements":["return operate((source, subscriber) => {\r\n    let hasValue = false;\r\n    let lastValue: T | null = null;\r\n    let durationSubscriber: Subscriber<any> | null = null;\r\n    let isComplete = false;\r\n\r\n    const endDuration = () => {\r\n      durationSubscriber?.unsubscribe();\r\n      durationSubscriber = null;\r\n      if (hasValue) {\r\n        hasValue = false;\r\n        const value = lastValue!;\r\n        lastValue = null;\r\n        subscriber.next(value);\r\n      }\r\n      isComplete && subscriber.complete();\r\n    };\r\n\r\n    const cleanupDuration = () => {\r\n      durationSubscriber = null;\r\n      isComplete && subscriber.complete();\r\n    };\r\n\r\n    source.subscribe(\r\n      createOperatorSubscriber(\r\n        subscriber,\r\n        (value) => {\r\n          hasValue = true;\r\n          lastValue = value;\r\n          if (!durationSubscriber) {\r\n            innerFrom(durationSelector(value)).subscribe(\r\n              (durationSubscriber = createOperatorSubscriber(subscriber, endDuration, cleanupDuration))\r\n            );\r\n          }\r\n        },\r\n        () => {\r\n          isComplete = true;\r\n          (!hasValue || !durationSubscriber || durationSubscriber.closed) && subscriber.complete();\r\n        }\r\n      )\r\n    );\r\n  });"],"parameters":[{"name":"durationSelector","type":"(value: T) => ObservableInput<any>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"MonoTypeOperatorFunction<T>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nIgnores source values for a duration determined by another Observable, then\r\nemits the most recent value from the source Observable, then repeats this\r\nprocess.\r\n\r\n<span class=\"informal\">It's like {@link auditTime}, but the silencing\r\nduration is determined by a second Observable.</span>\r\n\r\n![](audit.svg)\r\n\r\n`audit` is similar to `throttle`, but emits the last value from the silenced\r\ntime window, instead of the first value. `audit` emits the most recent value\r\nfrom the source Observable on the output Observable as soon as its internal\r\ntimer becomes disabled, and ignores source values while the timer is enabled.\r\nInitially, the timer is disabled. As soon as the first source value arrives,\r\nthe timer is enabled by calling the `durationSelector` function with the\r\nsource value, which returns the \"duration\" Observable. When the duration\r\nObservable emits a value, the timer is disabled, then the most\r\nrecent source value is emitted on the output Observable, and this process\r\nrepeats for the next source value.\r\n\r\n## Example\r\n\r\nEmit clicks at a rate of at most one click per second\r\n\r\n```ts\r\nimport { fromEvent, audit, interval } from 'rxjs';\r\n\r\nconst clicks = fromEvent(document, 'click');\r\nconst result = clicks.pipe(audit(ev => interval(1000)));\r\nresult.subscribe(x => console.log(x));\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link auditTime}"},{"kind":25,"tagName":"see","text":"{@link debounce}"},{"kind":25,"tagName":"see","text":"{@link delayWhen}"},{"kind":25,"tagName":"see","text":"{@link sample}"},{"kind":25,"tagName":"see","text":"{@link throttle}"},{"kind":25,"tagName":"param","text":"durationSelector A function\r\nthat receives a value from the source Observable, for computing the silencing\r\nduration, returned as an Observable or a Promise."},{"kind":25,"tagName":"return","text":"A function that returns an Observable that performs rate-limiting of\r\nemissions from the source Observable."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[],"functionName":"audit","modulePath":"..\\src\\internal\\operators\\audit.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},"..\\src\\internal\\operators\\auditTime.ts":{"moduleComponents":{"auditTime":{"kind":13,"usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":1,"index":1},"sources":[{"source":{"name":"auditTime","statements":["return audit(() => timer(duration, scheduler));"],"parameters":[{"name":"duration","type":"number","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"scheduler","initializer":"asyncScheduler","type":"SchedulerLike","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"MonoTypeOperatorFunction<T>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nIgnores source values for `duration` milliseconds, then emits the most recent\r\nvalue from the source Observable, then repeats this process.\r\n\r\n<span class=\"informal\">When it sees a source value, it ignores that plus\r\nthe next ones for `duration` milliseconds, and then it emits the most recent\r\nvalue from the source.</span>\r\n\r\n![](auditTime.png)\r\n\r\n`auditTime` is similar to `throttleTime`, but emits the last value from the\r\nsilenced time window, instead of the first value. `auditTime` emits the most\r\nrecent value from the source Observable on the output Observable as soon as\r\nits internal timer becomes disabled, and ignores source values while the\r\ntimer is enabled. Initially, the timer is disabled. As soon as the first\r\nsource value arrives, the timer is enabled. After `duration` milliseconds (or\r\nthe time unit determined internally by the optional `scheduler`) has passed,\r\nthe timer is disabled, then the most recent source value is emitted on the\r\noutput Observable, and this process repeats for the next source value.\r\nOptionally takes a {@link SchedulerLike} for managing timers.\r\n\r\n## Example\r\n\r\nEmit clicks at a rate of at most one click per second\r\n\r\n```ts\r\nimport { fromEvent, auditTime } from 'rxjs';\r\n\r\nconst clicks = fromEvent(document, 'click');\r\nconst result = clicks.pipe(auditTime(1000));\r\nresult.subscribe(x => console.log(x));\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link audit}"},{"kind":25,"tagName":"see","text":"{@link debounceTime}"},{"kind":25,"tagName":"see","text":"{@link delay}"},{"kind":25,"tagName":"see","text":"{@link sampleTime}"},{"kind":25,"tagName":"see","text":"{@link throttleTime}"},{"kind":25,"tagName":"param","text":"{number} duration Time to wait before emitting the most recent source\r\nvalue, measured in milliseconds or the time unit determined internally\r\nby the optional `scheduler`."},{"kind":25,"tagName":"param","text":"{SchedulerLike} [scheduler=async] The {@link SchedulerLike} to use for\r\nmanaging the timers that handle the rate-limiting behavior."},{"kind":25,"tagName":"return","text":"A function that returns an Observable that performs rate-limiting of\r\nemissions from the source Observable."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[],"functionName":"auditTime","modulePath":"..\\src\\internal\\operators\\auditTime.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},"..\\src\\internal\\operators\\buffer.ts":{"moduleComponents":{"buffer":{"kind":13,"usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":1,"index":1},"sources":[{"source":{"name":"buffer","statements":["return operate((source, subscriber) => {\r\n    // The current buffered values.\r\n    let currentBuffer: T[] = [];\r\n\r\n    // Subscribe to our source.\r\n    source.subscribe(\r\n      createOperatorSubscriber(\r\n        subscriber,\r\n        (value) => currentBuffer.push(value),\r\n        () => {\r\n          subscriber.next(currentBuffer);\r\n          subscriber.complete();\r\n        }\r\n      )\r\n    );\r\n\r\n    // Subscribe to the closing notifier.\r\n    innerFrom(closingNotifier).subscribe(\r\n      createOperatorSubscriber(\r\n        subscriber,\r\n        () => {\r\n          // Start a new buffer and emit the previous one.\r\n          const b = currentBuffer;\r\n          currentBuffer = [];\r\n          subscriber.next(b);\r\n        },\r\n        noop\r\n      )\r\n    );\r\n\r\n    return () => {\r\n      // Ensure buffered values are released on finalization.\r\n      currentBuffer = null!;\r\n    };\r\n  });"],"parameters":[{"name":"closingNotifier","type":"ObservableInput<any>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, T[]>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nBuffers the source Observable values until `closingNotifier` emits.\r\n\r\n<span class=\"informal\">Collects values from the past as an array, and emits\r\nthat array only when another Observable emits.</span>\r\n\r\n![](buffer.png)\r\n\r\nBuffers the incoming Observable values until the given `closingNotifier`\r\n`ObservableInput` (that internally gets converted to an Observable)\r\nemits a value, at which point it emits the buffer on the output\r\nObservable and starts a new buffer internally, awaiting the next time\r\n`closingNotifier` emits.\r\n\r\n## Example\r\n\r\nOn every click, emit array of most recent interval events\r\n\r\n```ts\r\nimport { fromEvent, interval, buffer } from 'rxjs';\r\n\r\nconst clicks = fromEvent(document, 'click');\r\nconst intervalEvents = interval(1000);\r\nconst buffered = intervalEvents.pipe(buffer(clicks));\r\nbuffered.subscribe(x => console.log(x));\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link bufferCount}"},{"kind":25,"tagName":"see","text":"{@link bufferTime}"},{"kind":25,"tagName":"see","text":"{@link bufferToggle}"},{"kind":25,"tagName":"see","text":"{@link bufferWhen}"},{"kind":25,"tagName":"see","text":"{@link window}"},{"kind":25,"tagName":"param","text":"closingNotifier An `ObservableInput` that signals the\r\nbuffer to be emitted on the output Observable."},{"kind":25,"tagName":"return","text":"A function that returns an Observable of buffers, which are arrays\r\nof values."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[],"functionName":"buffer","modulePath":"..\\src\\internal\\operators\\buffer.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},"..\\src\\internal\\operators\\bufferCount.ts":{"moduleComponents":{"bufferCount":{"kind":13,"usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":0,"index":0.5},"sources":[{"source":{"name":"bufferCount","statements":["startBufferEvery = startBufferEvery ?? bufferSize;","return operate((source, subscriber) => {\r\n    let buffers: T[][] = [];\r\n    let count = 0;\r\n\r\n    source.subscribe(\r\n      createOperatorSubscriber(\r\n        subscriber,\r\n        (value) => {\r\n          let toEmit: T[][] | null = null;\r\n\r\n          // Check to see if we need to start a buffer.\r\n          // This will start one at the first value, and then\r\n          // a new one every N after that.\r\n          if (count++ % startBufferEvery! === 0) {\r\n            buffers.push([]);\r\n          }\r\n\r\n          // Push our value into our active buffers.\r\n          for (const buffer of buffers) {\r\n            buffer.push(value);\r\n            // Check to see if we're over the bufferSize\r\n            // if we are, record it so we can emit it later.\r\n            // If we emitted it now and removed it, it would\r\n            // mutate the `buffers` array while we're looping\r\n            // over it.\r\n            if (bufferSize <= buffer.length) {\r\n              toEmit = toEmit ?? [];\r\n              toEmit.push(buffer);\r\n            }\r\n          }\r\n\r\n          if (toEmit) {\r\n            // We have found some buffers that are over the\r\n            // `bufferSize`. Emit them, and remove them from our\r\n            // buffers list.\r\n            for (const buffer of toEmit) {\r\n              arrRemove(buffers, buffer);\r\n              subscriber.next(buffer);\r\n            }\r\n          }\r\n        },\r\n        () => {\r\n          // When the source completes, emit all of our\r\n          // active buffers.\r\n          for (const buffer of buffers) {\r\n            subscriber.next(buffer);\r\n          }\r\n          subscriber.complete();\r\n        },\r\n        // Pass all errors through to consumer.\r\n        undefined,\r\n        () => {\r\n          // Clean up our memory when we finalize\r\n          buffers = null!;\r\n        }\r\n      )\r\n    );\r\n  });"],"parameters":[{"name":"bufferSize","type":"number","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"startBufferEvery","initializer":"null","type":"number | null","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, T[]>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nBuffers the source Observable values until the size hits the maximum\r\n`bufferSize` given.\r\n\r\n<span class=\"informal\">Collects values from the past as an array, and emits\r\nthat array only when its size reaches `bufferSize`.</span>\r\n\r\n![](bufferCount.png)\r\n\r\nBuffers a number of values from the source Observable by `bufferSize` then\r\nemits the buffer and clears it, and starts a new buffer each\r\n`startBufferEvery` values. If `startBufferEvery` is not provided or is\r\n`null`, then new buffers are started immediately at the start of the source\r\nand when each buffer closes and is emitted.\r\n\r\n## Examples\r\n\r\nEmit the last two click events as an array\r\n\r\n```ts\r\nimport { fromEvent, bufferCount } from 'rxjs';\r\n\r\nconst clicks = fromEvent(document, 'click');\r\nconst buffered = clicks.pipe(bufferCount(2));\r\nbuffered.subscribe(x => console.log(x));\r\n```\r\n\r\nOn every click, emit the last two click events as an array\r\n\r\n```ts\r\nimport { fromEvent, bufferCount } from 'rxjs';\r\n\r\nconst clicks = fromEvent(document, 'click');\r\nconst buffered = clicks.pipe(bufferCount(2, 1));\r\nbuffered.subscribe(x => console.log(x));\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link buffer}"},{"kind":25,"tagName":"see","text":"{@link bufferTime}"},{"kind":25,"tagName":"see","text":"{@link bufferToggle}"},{"kind":25,"tagName":"see","text":"{@link bufferWhen}"},{"kind":25,"tagName":"see","text":"{@link pairwise}"},{"kind":25,"tagName":"see","text":"{@link windowCount}"},{"kind":25,"tagName":"param","text":"{number} bufferSize The maximum size of the buffer emitted."},{"kind":25,"tagName":"param","text":"{number} [startBufferEvery] Interval at which to start a new buffer.\r\nFor example if `startBufferEvery` is `2`, then a new buffer will be started\r\non every other value from the source. A new buffer is started at the\r\nbeginning of the source by default."},{"kind":25,"tagName":"return","text":"A function that returns an Observable of arrays of buffered values."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[],"functionName":"bufferCount","modulePath":"..\\src\\internal\\operators\\bufferCount.ts"},"usabilityResult":{"index":0.5,"paramLengthComplexity":1,"paramSequenceComplexity":0}}]}},"usabilityResult":{"index":0.5,"paramLengthComplexity":1,"paramSequenceComplexity":0}},"..\\src\\internal\\operators\\bufferTime.ts":{"moduleComponents":{"bufferTime":{"kind":13,"usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":0.6111111111111112,"index":0.8055555555555556},"sources":[{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"bufferTimeSpan","type":"number","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"scheduler","type":"SchedulerLike","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, T[]>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"bufferTime","modulePath":"..\\src\\internal\\operators\\bufferTime.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"bufferTimeSpan","type":"number","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"bufferCreationInterval","type":"number | null | undefined","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"scheduler","type":"SchedulerLike","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, T[]>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"bufferTime","modulePath":"..\\src\\internal\\operators\\bufferTime.ts"},"usabilityResult":{"index":0.75,"paramLengthComplexity":1,"paramSequenceComplexity":0.5}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"bufferTimeSpan","type":"number","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"bufferCreationInterval","type":"number | null | undefined","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"maxBufferSize","type":"number","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"scheduler","type":"SchedulerLike","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, T[]>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"bufferTime","modulePath":"..\\src\\internal\\operators\\bufferTime.ts"},"usabilityResult":{"index":0.6666666666666667,"paramLengthComplexity":1,"paramSequenceComplexity":0.33333333333333337}}]}},"usabilityResult":{"index":0.8055555555555556,"paramLengthComplexity":1,"paramSequenceComplexity":0.6111111111111112}},"..\\src\\internal\\operators\\bufferToggle.ts":{"moduleComponents":{"bufferToggle":{"kind":13,"usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":1,"index":1},"sources":[{"source":{"name":"bufferToggle","statements":["return operate((source, subscriber) => {\r\n    const buffers: T[][] = [];\r\n\r\n    // Subscribe to the openings notifier first\r\n    innerFrom(openings).subscribe(\r\n      createOperatorSubscriber(\r\n        subscriber,\r\n        (openValue) => {\r\n          const buffer: T[] = [];\r\n          buffers.push(buffer);\r\n          // We use this composite subscription, so that\r\n          // when the closing notifier emits, we can tear it down.\r\n          const closingSubscription = new Subscription();\r\n\r\n          const emitBuffer = () => {\r\n            arrRemove(buffers, buffer);\r\n            subscriber.next(buffer);\r\n            closingSubscription.unsubscribe();\r\n          };\r\n\r\n          // The line below will add the subscription to the parent subscriber *and* the closing subscription.\r\n          closingSubscription.add(innerFrom(closingSelector(openValue)).subscribe(createOperatorSubscriber(subscriber, emitBuffer, noop)));\r\n        },\r\n        noop\r\n      )\r\n    );\r\n\r\n    source.subscribe(\r\n      createOperatorSubscriber(\r\n        subscriber,\r\n        (value) => {\r\n          // Value from our source. Add it to all pending buffers.\r\n          for (const buffer of buffers) {\r\n            buffer.push(value);\r\n          }\r\n        },\r\n        () => {\r\n          // Source complete. Emit all pending buffers.\r\n          while (buffers.length > 0) {\r\n            subscriber.next(buffers.shift()!);\r\n          }\r\n          subscriber.complete();\r\n        }\r\n      )\r\n    );\r\n  });"],"parameters":[{"name":"openings","type":"ObservableInput<O>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"closingSelector","type":"(value: O) => ObservableInput<any>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, T[]>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"O","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nBuffers the source Observable values starting from an emission from\r\n`openings` and ending when the output of `closingSelector` emits.\r\n\r\n<span class=\"informal\">Collects values from the past as an array. Starts\r\ncollecting only when `opening` emits, and calls the `closingSelector`\r\nfunction to get an Observable that tells when to close the buffer.</span>\r\n\r\n![](bufferToggle.png)\r\n\r\nBuffers values from the source by opening the buffer via signals from an\r\nObservable provided to `openings`, and closing and sending the buffers when\r\na Subscribable or Promise returned by the `closingSelector` function emits.\r\n\r\n## Example\r\n\r\nEvery other second, emit the click events from the next 500ms\r\n\r\n```ts\r\nimport { fromEvent, interval, bufferToggle, EMPTY } from 'rxjs';\r\n\r\nconst clicks = fromEvent(document, 'click');\r\nconst openings = interval(1000);\r\nconst buffered = clicks.pipe(bufferToggle(openings, i =>\r\n  i % 2 ? interval(500) : EMPTY\r\n));\r\nbuffered.subscribe(x => console.log(x));\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link buffer}"},{"kind":25,"tagName":"see","text":"{@link bufferCount}"},{"kind":25,"tagName":"see","text":"{@link bufferTime}"},{"kind":25,"tagName":"see","text":"{@link bufferWhen}"},{"kind":25,"tagName":"see","text":"{@link windowToggle}"},{"kind":25,"tagName":"param","text":"openings A Subscribable or Promise of notifications to start new\r\nbuffers."},{"kind":25,"tagName":"param","text":"closingSelector A function that takes\r\nthe value emitted by the `openings` observable and returns a Subscribable or Promise,\r\nwhich, when it emits, signals that the associated buffer should be emitted\r\nand cleared."},{"kind":25,"tagName":"return","text":"A function that returns an Observable of arrays of buffered values."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[],"functionName":"bufferToggle","modulePath":"..\\src\\internal\\operators\\bufferToggle.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},"..\\src\\internal\\operators\\bufferWhen.ts":{"moduleComponents":{"bufferWhen":{"kind":13,"usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":1,"index":1},"sources":[{"source":{"name":"bufferWhen","statements":["return operate((source, subscriber) => {\r\n    // The buffer we keep and emit.\r\n    let buffer: T[] | null = null;\r\n    // A reference to the subscriber used to subscribe to\r\n    // the closing notifier. We need to hold this so we can\r\n    // end the subscription after the first notification.\r\n    let closingSubscriber: Subscriber<T> | null = null;\r\n\r\n    // Ends the previous closing notifier subscription, so it\r\n    // terminates after the first emission, then emits\r\n    // the current buffer  if there is one, starts a new buffer, and starts a\r\n    // new closing notifier.\r\n    const openBuffer = () => {\r\n      // Make sure to finalize the closing subscription, we only cared\r\n      // about one notification.\r\n      closingSubscriber?.unsubscribe();\r\n      // emit the buffer if we have one, and start a new buffer.\r\n      const b = buffer;\r\n      buffer = [];\r\n      b && subscriber.next(b);\r\n\r\n      // Get a new closing notifier and subscribe to it.\r\n      innerFrom(closingSelector()).subscribe((closingSubscriber = createOperatorSubscriber(subscriber, openBuffer, noop)));\r\n    };\r\n\r\n    // Start the first buffer.\r\n    openBuffer();\r\n\r\n    // Subscribe to our source.\r\n    source.subscribe(\r\n      createOperatorSubscriber(\r\n        subscriber,\r\n        // Add every new value to the current buffer.\r\n        (value) => buffer?.push(value),\r\n        // When we complete, emit the buffer if we have one,\r\n        // then complete the result.\r\n        () => {\r\n          buffer && subscriber.next(buffer);\r\n          subscriber.complete();\r\n        },\r\n        // Pass all errors through to consumer.\r\n        undefined,\r\n        // Release memory on finalization\r\n        () => (buffer = closingSubscriber = null!)\r\n      )\r\n    );\r\n  });"],"parameters":[{"name":"closingSelector","type":"() => ObservableInput<any>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, T[]>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nBuffers the source Observable values, using a factory function of closing\r\nObservables to determine when to close, emit, and reset the buffer.\r\n\r\n<span class=\"informal\">Collects values from the past as an array. When it\r\nstarts collecting values, it calls a function that returns an Observable that\r\ntells when to close the buffer and restart collecting.</span>\r\n\r\n![](bufferWhen.svg)\r\n\r\nOpens a buffer immediately, then closes the buffer when the observable\r\nreturned by calling `closingSelector` function emits a value. When it closes\r\nthe buffer, it immediately opens a new buffer and repeats the process.\r\n\r\n## Example\r\n\r\nEmit an array of the last clicks every [1-5] random seconds\r\n\r\n```ts\r\nimport { fromEvent, bufferWhen, interval } from 'rxjs';\r\n\r\nconst clicks = fromEvent(document, 'click');\r\nconst buffered = clicks.pipe(\r\n  bufferWhen(() => interval(1000 + Math.random() * 4000))\r\n);\r\nbuffered.subscribe(x => console.log(x));\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link buffer}"},{"kind":25,"tagName":"see","text":"{@link bufferCount}"},{"kind":25,"tagName":"see","text":"{@link bufferTime}"},{"kind":25,"tagName":"see","text":"{@link bufferToggle}"},{"kind":25,"tagName":"see","text":"{@link windowWhen}"},{"kind":25,"tagName":"param","text":"{function(): Observable} closingSelector A function that takes no\r\narguments and returns an Observable that signals buffer closure."},{"kind":25,"tagName":"return","text":"A function that returns an Observable of arrays of buffered values."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[],"functionName":"bufferWhen","modulePath":"..\\src\\internal\\operators\\bufferWhen.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},"..\\src\\internal\\operators\\catchError.ts":{"moduleComponents":{"catchError":{"kind":13,"usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":1,"index":1},"sources":[{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"O","kind":39,"isConst":false,"constraint":"ObservableInput<any>","variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"selector","type":"(err: any, caught: Observable<T>) => O","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, T | ObservedValueOf<O>>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"catchError","modulePath":"..\\src\\internal\\operators\\catchError.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},"..\\src\\internal\\operators\\combineLatestAll.ts":{"moduleComponents":{"combineLatestAll":{"kind":13,"usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":1,"index":1},"sources":[{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[],"returnType":"OperatorFunction<ObservableInput<T>, T[]>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"combineLatestAll","modulePath":"..\\src\\internal\\operators\\combineLatestAll.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[],"returnType":"OperatorFunction<any, T[]>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"combineLatestAll","modulePath":"..\\src\\internal\\operators\\combineLatestAll.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"R","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"project","type":"(...values: T[]) => R","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<ObservableInput<T>, R>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"combineLatestAll","modulePath":"..\\src\\internal\\operators\\combineLatestAll.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"R","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"project","type":"(...values: Array<any>) => R","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<any, R>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"combineLatestAll","modulePath":"..\\src\\internal\\operators\\combineLatestAll.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},"..\\src\\internal\\operators\\combineLatestWith.ts":{"moduleComponents":{"combineLatestWith":{"kind":13,"usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":1,"index":1},"sources":[{"source":{"name":"combineLatestWith","statements":["return combineLatest(...otherSources);"],"parameters":[{"name":"otherSources","type":"[...ObservableInputTuple<A>]","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":true}],"returnType":"OperatorFunction<T, Cons<T, A>>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"A","kind":39,"isConst":false,"constraint":"readonly unknown[]","variance":0}],"docs":[{"kind":24,"description":"\r\nCreate an observable that combines the latest values from all passed observables and the source\r\ninto arrays and emits them.\r\n\r\nReturns an observable, that when subscribed to, will subscribe to the source observable and all\r\nsources provided as arguments. Once all sources emit at least one value, all of the latest values\r\nwill be emitted as an array. After that, every time any source emits a value, all of the latest values\r\nwill be emitted as an array.\r\n\r\nThis is a useful operator for eagerly calculating values based off of changed inputs.\r\n\r\n## Example\r\n\r\nSimple concatenation of values from two inputs\r\n\r\n```ts\r\nimport { fromEvent, combineLatestWith, map } from 'rxjs';\r\n\r\n// Setup: Add two inputs to the page\r\nconst input1 = document.createElement('input');\r\ndocument.body.appendChild(input1);\r\nconst input2 = document.createElement('input');\r\ndocument.body.appendChild(input2);\r\n\r\n// Get streams of changes\r\nconst input1Changes$ = fromEvent(input1, 'change');\r\nconst input2Changes$ = fromEvent(input2, 'change');\r\n\r\n// Combine the changes by adding them together\r\ninput1Changes$.pipe(\r\n  combineLatestWith(input2Changes$),\r\n  map(([e1, e2]) => (<HTMLInputElement>e1.target).value + ' - ' + (<HTMLInputElement>e2.target).value)\r\n)\r\n.subscribe(x => console.log(x));\r\n```\r\n","tags":[{"kind":25,"tagName":"param","text":"otherSources the other sources to subscribe to."},{"kind":25,"tagName":"return","text":"A function that returns an Observable that emits the latest\r\nemissions from both source and provided Observables."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[],"functionName":"combineLatestWith","modulePath":"..\\src\\internal\\operators\\combineLatestWith.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},"..\\src\\internal\\operators\\concatAll.ts":{"moduleComponents":{"concatAll":{"kind":13,"usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":1,"index":1},"sources":[{"source":{"name":"concatAll","statements":["return mergeAll(1);"],"parameters":[],"returnType":"OperatorFunction<O, ObservedValueOf<O>>","typeParameters":[{"name":"O","kind":39,"isConst":false,"constraint":"ObservableInput<any>","variance":0}],"docs":[{"kind":24,"description":"\r\nConverts a higher-order Observable into a first-order Observable by\r\nconcatenating the inner Observables in order.\r\n\r\n<span class=\"informal\">Flattens an Observable-of-Observables by putting one\r\ninner Observable after the other.</span>\r\n\r\n![](concatAll.svg)\r\n\r\nJoins every Observable emitted by the source (a higher-order Observable), in\r\na serial fashion. It subscribes to each inner Observable only after the\r\nprevious inner Observable has completed, and merges all of their values into\r\nthe returned observable.\r\n\r\n__Warning:__ If the source Observable emits Observables quickly and\r\nendlessly, and the inner Observables it emits generally complete slower than\r\nthe source emits, you can run into memory issues as the incoming Observables\r\ncollect in an unbounded buffer.\r\n\r\nNote: `concatAll` is equivalent to `mergeAll` with concurrency parameter set\r\nto `1`.\r\n\r\n## Example\r\n\r\nFor each click event, tick every second from 0 to 3, with no concurrency\r\n\r\n```ts\r\nimport { fromEvent, map, interval, take, concatAll } from 'rxjs';\r\n\r\nconst clicks = fromEvent(document, 'click');\r\nconst higherOrder = clicks.pipe(\r\n  map(() => interval(1000).pipe(take(4)))\r\n);\r\nconst firstOrder = higherOrder.pipe(concatAll());\r\nfirstOrder.subscribe(x => console.log(x));\r\n\r\n// Results in the following:\r\n// (results are not concurrent)\r\n// For every click on the \"document\" it will emit values 0 to 3 spaced\r\n// on a 1000ms interval\r\n// one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link combineLatestAll}"},{"kind":25,"tagName":"see","text":"{@link concat}"},{"kind":25,"tagName":"see","text":"{@link concatMap}"},{"kind":25,"tagName":"see","text":"{@link concatMapTo}"},{"kind":25,"tagName":"see","text":"{@link exhaustAll}"},{"kind":25,"tagName":"see","text":"{@link mergeAll}"},{"kind":25,"tagName":"see","text":"{@link switchAll}"},{"kind":25,"tagName":"see","text":"{@link switchMap}"},{"kind":25,"tagName":"see","text":"{@link zipAll}"},{"kind":25,"tagName":"return","text":"A function that returns an Observable emitting values from all the\r\ninner Observables concatenated."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[],"functionName":"concatAll","modulePath":"..\\src\\internal\\operators\\concatAll.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},"..\\src\\internal\\operators\\concatMap.ts":{"moduleComponents":{"concatMap":{"kind":13,"usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":1,"index":1},"sources":[{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"O","kind":39,"isConst":false,"constraint":"ObservableInput<any>","variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"project","type":"(value: T, index: number) => O","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, ObservedValueOf<O>>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"concatMap","modulePath":"..\\src\\internal\\operators\\concatMap.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"O","kind":39,"isConst":false,"constraint":"ObservableInput<any>","variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"The `resultSelector` parameter will be removed in v8. Use an inner `map` instead. Details: https://rxjs.dev/deprecations/resultSelector"}]}],"hasDeclareKeyword":false,"parameters":[{"name":"project","type":"(value: T, index: number) => O","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"resultSelector","type":"undefined","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, ObservedValueOf<O>>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"concatMap","modulePath":"..\\src\\internal\\operators\\concatMap.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"R","kind":39,"isConst":false,"variance":0},{"name":"O","kind":39,"isConst":false,"constraint":"ObservableInput<any>","variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"The `resultSelector` parameter will be removed in v8. Use an inner `map` instead. Details: https://rxjs.dev/deprecations/resultSelector"}]}],"hasDeclareKeyword":false,"parameters":[{"name":"project","type":"(value: T, index: number) => O","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"resultSelector","type":"(outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, R>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"concatMap","modulePath":"..\\src\\internal\\operators\\concatMap.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},"..\\src\\internal\\operators\\concatMapTo.ts":{"moduleComponents":{"concatMapTo":{"kind":13,"usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":1,"index":1},"sources":[{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"O","kind":39,"isConst":false,"constraint":"ObservableInput<unknown>","variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Will be removed in v9. Use {@link concatMap} instead: `concatMap(() => result)`"}]}],"hasDeclareKeyword":false,"parameters":[{"name":"observable","type":"O","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<unknown, ObservedValueOf<O>>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"concatMapTo","modulePath":"..\\src\\internal\\operators\\concatMapTo.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"O","kind":39,"isConst":false,"constraint":"ObservableInput<unknown>","variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"The `resultSelector` parameter will be removed in v8. Use an inner `map` instead. Details: https://rxjs.dev/deprecations/resultSelector"}]}],"hasDeclareKeyword":false,"parameters":[{"name":"observable","type":"O","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"resultSelector","type":"undefined","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<unknown, ObservedValueOf<O>>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"concatMapTo","modulePath":"..\\src\\internal\\operators\\concatMapTo.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"R","kind":39,"isConst":false,"variance":0},{"name":"O","kind":39,"isConst":false,"constraint":"ObservableInput<unknown>","variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"The `resultSelector` parameter will be removed in v8. Use an inner `map` instead. Details: https://rxjs.dev/deprecations/resultSelector"}]}],"hasDeclareKeyword":false,"parameters":[{"name":"observable","type":"O","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"resultSelector","type":"(outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, R>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"concatMapTo","modulePath":"..\\src\\internal\\operators\\concatMapTo.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},"..\\src\\internal\\operators\\concatWith.ts":{"moduleComponents":{"concatWith":{"kind":13,"usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":1,"index":1},"sources":[{"source":{"name":"concatWith","statements":["return concat(...otherSources);"],"parameters":[{"name":"otherSources","type":"[...ObservableInputTuple<A>]","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":true}],"returnType":"OperatorFunction<T, T | A[number]>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"A","kind":39,"isConst":false,"constraint":"readonly unknown[]","variance":0}],"docs":[{"kind":24,"description":"\r\nEmits all of the values from the source observable, then, once it completes, subscribes\r\nto each observable source provided, one at a time, emitting all of their values, and not subscribing\r\nto the next one until it completes.\r\n\r\n`concat(a$, b$, c$)` is the same as `a$.pipe(concatWith(b$, c$))`.\r\n\r\n## Example\r\n\r\nListen for one mouse click, then listen for all mouse moves.\r\n\r\n```ts\r\nimport { fromEvent, map, take, concatWith } from 'rxjs';\r\n\r\nconst clicks$ = fromEvent(document, 'click');\r\nconst moves$ = fromEvent(document, 'mousemove');\r\n\r\nclicks$.pipe(\r\n  map(() => 'click'),\r\n  take(1),\r\n  concatWith(\r\n    moves$.pipe(\r\n      map(() => 'move')\r\n    )\r\n  )\r\n)\r\n.subscribe(x => console.log(x));\r\n\r\n// 'click'\r\n// 'move'\r\n// 'move'\r\n// 'move'\r\n// ...\r\n```\r\n","tags":[{"kind":25,"tagName":"param","text":"otherSources Other observable sources to subscribe to, in sequence, after the original source is complete."},{"kind":25,"tagName":"return","text":"A function that returns an Observable that concatenates\r\nsubscriptions to the source and provided Observables subscribing to the next\r\nonly once the current subscription completes."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[],"functionName":"concatWith","modulePath":"..\\src\\internal\\operators\\concatWith.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},"..\\src\\internal\\operators\\connect.ts":{"moduleComponents":{"connect":{"kind":13,"usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":1,"index":1},"sources":[{"source":{"name":"connect","statements":[{"isExported":false,"isDefaultExport":false,"hasDeclareKeyword":false,"docs":[],"kind":41,"declarationKind":"const","declarations":[{"name":"{ connector }","initializer":"config","hasExclamationToken":false,"kind":40}]},"return operate((source, subscriber) => {\r\nconst subject = connector();\r\ninnerFrom(selector(fromSubscribable(subject))).subscribe(subscriber);\r\nsubscriber.add(source.subscribe(subject));\r\n});"],"parameters":[{"name":"selector","type":"(shared: Observable<T>) => O","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"config","initializer":"DEFAULT_CONFIG","type":"ConnectConfig<T>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, ObservedValueOf<O>>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"O","kind":39,"isConst":false,"constraint":"ObservableInput<unknown>","variance":0}],"docs":[{"kind":24,"description":"\r\nCreates an observable by multicasting the source within a function that\r\nallows the developer to define the usage of the multicast prior to connection.\r\n\r\nThis is particularly useful if the observable source you wish to multicast could\r\nbe synchronous or asynchronous. This sets it apart from {@link share}, which, in the\r\ncase of totally synchronous sources will fail to share a single subscription with\r\nmultiple consumers, as by the time the subscription to the result of {@link share}\r\nhas returned, if the source is synchronous its internal reference count will jump from\r\n0 to 1 back to 0 and reset.\r\n\r\nTo use `connect`, you provide a `selector` function that will give you\r\na multicast observable that is not yet connected. You then use that multicast observable\r\nto create a resulting observable that, when subscribed, will set up your multicast. This is\r\ngenerally, but not always, accomplished with {@link merge}.\r\n\r\nNote that using a {@link takeUntil} inside of `connect`'s `selector` _might_ mean you were looking\r\nto use the {@link takeWhile} operator instead.\r\n\r\nWhen you subscribe to the result of `connect`, the `selector` function will be called. After\r\nthe `selector` function returns, the observable it returns will be subscribed to, _then_ the\r\nmulticast will be connected to the source.\r\n\r\n## Example\r\n\r\nSharing a totally synchronous observable\r\n\r\n```ts\r\nimport { of, tap, connect, merge, map, filter } from 'rxjs';\r\n\r\nconst source$ = of(1, 2, 3, 4, 5).pipe(\r\n  tap({\r\n    subscribe: () => console.log('subscription started'),\r\n    next: n => console.log(`source emitted ${ n }`)\r\n  })\r\n);\r\n\r\nsource$.pipe(\r\n  // Notice in here we're merging 3 subscriptions to `shared$`.\r\n  connect(shared$ => merge(\r\n    shared$.pipe(map(n => `all ${ n }`)),\r\n    shared$.pipe(filter(n => n % 2 === 0), map(n => `even ${ n }`)),\r\n    shared$.pipe(filter(n => n % 2 === 1), map(n => `odd ${ n }`))\r\n  ))\r\n)\r\n.subscribe(console.log);\r\n\r\n// Expected output: (notice only one subscription)\r\n'subscription started'\r\n'source emitted 1'\r\n'all 1'\r\n'odd 1'\r\n'source emitted 2'\r\n'all 2'\r\n'even 2'\r\n'source emitted 3'\r\n'all 3'\r\n'odd 3'\r\n'source emitted 4'\r\n'all 4'\r\n'even 4'\r\n'source emitted 5'\r\n'all 5'\r\n'odd 5'\r\n```\r\n","tags":[{"kind":25,"tagName":"param","text":"selector A function used to set up the multicast. Gives you a multicast observable\r\nthat is not yet connected. With that, you're expected to create and return\r\nand Observable, that when subscribed to, will utilize the multicast observable.\r\nAfter this function is executed -- and its return value subscribed to -- the\r\noperator will subscribe to the source, and the connection will be made."},{"kind":25,"tagName":"param","text":"config The configuration object for `connect`."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[],"functionName":"connect","modulePath":"..\\src\\internal\\operators\\connect.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},"..\\src\\internal\\operators\\count.ts":{"moduleComponents":{"count":{"kind":13,"usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":1,"index":1},"sources":[{"source":{"name":"count","statements":["return reduce((total, value, i) => (!predicate || predicate(value, i) ? total + 1 : total), 0);"],"parameters":[{"name":"predicate","type":"(value: T, index: number) => boolean","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, number>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nCounts the number of emissions on the source and emits that number when the\r\nsource completes.\r\n\r\n<span class=\"informal\">Tells how many values were emitted, when the source\r\ncompletes.</span>\r\n\r\n![](count.png)\r\n\r\n`count` transforms an Observable that emits values into an Observable that\r\nemits a single value that represents the number of values emitted by the\r\nsource Observable. If the source Observable terminates with an error, `count`\r\nwill pass this error notification along without emitting a value first. If\r\nthe source Observable does not terminate at all, `count` will neither emit\r\na value nor terminate. This operator takes an optional `predicate` function\r\nas argument, in which case the output emission will represent the number of\r\nsource values that matched `true` with the `predicate`.\r\n\r\n## Examples\r\n\r\nCounts how many seconds have passed before the first click happened\r\n\r\n```ts\r\nimport { interval, fromEvent, takeUntil, count } from 'rxjs';\r\n\r\nconst seconds = interval(1000);\r\nconst clicks = fromEvent(document, 'click');\r\nconst secondsBeforeClick = seconds.pipe(takeUntil(clicks));\r\nconst result = secondsBeforeClick.pipe(count());\r\nresult.subscribe(x => console.log(x));\r\n```\r\n\r\nCounts how many odd numbers are there between 1 and 7\r\n\r\n```ts\r\nimport { range, count } from 'rxjs';\r\n\r\nconst numbers = range(1, 7);\r\nconst result = numbers.pipe(count(i => i % 2 === 1));\r\nresult.subscribe(x => console.log(x));\r\n// Results in:\r\n// 4\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link max}"},{"kind":25,"tagName":"see","text":"{@link min}"},{"kind":25,"tagName":"see","text":"{@link reduce}"},{"kind":25,"tagName":"param","text":"predicate A function that is used to analyze the value and the index and\r\ndetermine whether or not to increment the count. Return `true` to increment the count,\r\nand return `false` to keep the count the same.\r\nIf the predicate is not provided, every value will be counted."},{"kind":25,"tagName":"return","text":"A function that returns an Observable that emits one number that\r\nrepresents the count of emissions."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[],"functionName":"count","modulePath":"..\\src\\internal\\operators\\count.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},"..\\src\\internal\\operators\\debounce.ts":{"moduleComponents":{"debounce":{"kind":13,"usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":1,"index":1},"sources":[{"source":{"name":"debounce","statements":["return operate((source, subscriber) => {\r\n    let hasValue = false;\r\n    let lastValue: T | null = null;\r\n    // The subscriber/subscription for the current debounce, if there is one.\r\n    let durationSubscriber: Subscriber<any> | null = null;\r\n\r\n    const emit = () => {\r\n      // Unsubscribe any current debounce subscription we have,\r\n      // we only cared about the first notification from it, and we\r\n      // want to clean that subscription up as soon as possible.\r\n      durationSubscriber?.unsubscribe();\r\n      durationSubscriber = null;\r\n      if (hasValue) {\r\n        // We have a value! Free up memory first, then emit the value.\r\n        hasValue = false;\r\n        const value = lastValue!;\r\n        lastValue = null;\r\n        subscriber.next(value);\r\n      }\r\n    };\r\n\r\n    source.subscribe(\r\n      createOperatorSubscriber(\r\n        subscriber,\r\n        (value: T) => {\r\n          // Cancel any pending debounce duration. We don't\r\n          // need to null it out here yet tho, because we're just going\r\n          // to create another one in a few lines.\r\n          durationSubscriber?.unsubscribe();\r\n          hasValue = true;\r\n          lastValue = value;\r\n          // Capture our duration subscriber, so we can unsubscribe it when we're notified\r\n          // and we're going to emit the value.\r\n          durationSubscriber = createOperatorSubscriber(subscriber, emit, noop);\r\n          // Subscribe to the duration.\r\n          innerFrom(durationSelector(value)).subscribe(durationSubscriber);\r\n        },\r\n        () => {\r\n          // Source completed.\r\n          // Emit any pending debounced values then complete\r\n          emit();\r\n          subscriber.complete();\r\n        },\r\n        // Pass all errors through to consumer\r\n        undefined,\r\n        () => {\r\n          // Finalization.\r\n          lastValue = durationSubscriber = null;\r\n        }\r\n      )\r\n    );\r\n  });"],"parameters":[{"name":"durationSelector","type":"(value: T) => ObservableInput<any>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"MonoTypeOperatorFunction<T>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nEmits a notification from the source Observable only after a particular time span\r\ndetermined by another Observable has passed without another source emission.\r\n\r\n<span class=\"informal\">It's like {@link debounceTime}, but the time span of\r\nemission silence is determined by a second Observable.</span>\r\n\r\n![](debounce.svg)\r\n\r\n`debounce` delays notifications emitted by the source Observable, but drops previous\r\npending delayed emissions if a new notification arrives on the source Observable.\r\nThis operator keeps track of the most recent notification from the source\r\nObservable, and spawns a duration Observable by calling the\r\n`durationSelector` function. The notification is emitted only when the duration\r\nObservable emits a next notification, and if no other notification was emitted on\r\nthe source Observable since the duration Observable was spawned. If a new\r\nnotification appears before the duration Observable emits, the previous notification will\r\nnot be emitted and a new duration is scheduled from `durationSelector` is scheduled.\r\nIf the completing event happens during the scheduled duration the last cached notification\r\nis emitted before the completion event is forwarded to the output observable.\r\nIf the error event happens during the scheduled duration or after it only the error event is\r\nforwarded to the output observable. The cache notification is not emitted in this case.\r\n\r\nLike {@link debounceTime}, this is a rate-limiting operator, and also a\r\ndelay-like operator since output emissions do not necessarily occur at the\r\nsame time as they did on the source Observable.\r\n\r\n## Example\r\n\r\nEmit the most recent click after a burst of clicks\r\n\r\n```ts\r\nimport { fromEvent, scan, debounce, interval } from 'rxjs';\r\n\r\nconst clicks = fromEvent(document, 'click');\r\nconst result = clicks.pipe(\r\n  scan(i => ++i, 1),\r\n  debounce(i => interval(200 * i))\r\n);\r\nresult.subscribe(x => console.log(x));\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link audit}"},{"kind":25,"tagName":"see","text":"{@link auditTime}"},{"kind":25,"tagName":"see","text":"{@link debounceTime}"},{"kind":25,"tagName":"see","text":"{@link delay}"},{"kind":25,"tagName":"see","text":"{@link sample}"},{"kind":25,"tagName":"see","text":"{@link sampleTime}"},{"kind":25,"tagName":"see","text":"{@link throttle}"},{"kind":25,"tagName":"see","text":"{@link throttleTime}"},{"kind":25,"tagName":"param","text":"durationSelector A function\r\nthat receives a value from the source Observable, for computing the timeout\r\nduration for each source value, returned as an Observable or a Promise."},{"kind":25,"tagName":"return","text":"A function that returns an Observable that delays the emissions of\r\nthe source Observable by the specified duration Observable returned by\r\n`durationSelector`, and may drop some values if they occur too frequently."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[],"functionName":"debounce","modulePath":"..\\src\\internal\\operators\\debounce.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},"..\\src\\internal\\operators\\debounceTime.ts":{"moduleComponents":{"debounceTime":{"kind":13,"usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":1,"index":1},"sources":[{"source":{"name":"debounceTime","statements":["return operate((source, subscriber) => {\r\n    let activeTask: Subscription | null = null;\r\n    let lastValue: T | null = null;\r\n    let lastTime: number | null = null;\r\n\r\n    const emit = () => {\r\n      if (activeTask) {\r\n        // We have a value! Free up memory first, then emit the value.\r\n        activeTask.unsubscribe();\r\n        activeTask = null;\r\n        const value = lastValue!;\r\n        lastValue = null;\r\n        subscriber.next(value);\r\n      }\r\n    };\r\n    function emitWhenIdle(this: SchedulerAction<unknown>) {\r\n      // This is called `dueTime` after the first value\r\n      // but we might have received new values during this window!\r\n\r\n      const targetTime = lastTime! + dueTime;\r\n      const now = scheduler.now();\r\n      if (now < targetTime) {\r\n        // On that case, re-schedule to the new target\r\n        activeTask = this.schedule(undefined, targetTime - now);\r\n        subscriber.add(activeTask);\r\n        return;\r\n      }\r\n\r\n      emit();\r\n    }\r\n\r\n    source.subscribe(\r\n      createOperatorSubscriber(\r\n        subscriber,\r\n        (value: T) => {\r\n          lastValue = value;\r\n          lastTime = scheduler.now();\r\n\r\n          // Only set up a task if it's not already up\r\n          if (!activeTask) {\r\n            activeTask = scheduler.schedule(emitWhenIdle, dueTime);\r\n            subscriber.add(activeTask);\r\n          }\r\n        },\r\n        () => {\r\n          // Source completed.\r\n          // Emit any pending debounced values then complete\r\n          emit();\r\n          subscriber.complete();\r\n        },\r\n        // Pass all errors through to consumer.\r\n        undefined,\r\n        () => {\r\n          // Finalization.\r\n          lastValue = activeTask = null;\r\n        }\r\n      )\r\n    );\r\n  });"],"parameters":[{"name":"dueTime","type":"number","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"scheduler","initializer":"asyncScheduler","type":"SchedulerLike","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"MonoTypeOperatorFunction<T>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nEmits a notification from the source Observable only after a particular time span\r\nhas passed without another source emission.\r\n\r\n<span class=\"informal\">It's like {@link delay}, but passes only the most\r\nrecent notification from each burst of emissions.</span>\r\n\r\n![](debounceTime.png)\r\n\r\n`debounceTime` delays notifications emitted by the source Observable, but drops\r\nprevious pending delayed emissions if a new notification arrives on the source\r\nObservable. This operator keeps track of the most recent notification from the\r\nsource Observable, and emits that only when `dueTime` has passed\r\nwithout any other notification appearing on the source Observable. If a new value\r\nappears before `dueTime` silence occurs, the previous notification will be dropped\r\nand will not be emitted and a new `dueTime` is scheduled.\r\nIf the completing event happens during `dueTime` the last cached notification\r\nis emitted before the completion event is forwarded to the output observable.\r\nIf the error event happens during `dueTime` or after it only the error event is\r\nforwarded to the output observable. The cache notification is not emitted in this case.\r\n\r\nThis is a rate-limiting operator, because it is impossible for more than one\r\nnotification to be emitted in any time window of duration `dueTime`, but it is also\r\na delay-like operator since output emissions do not occur at the same time as\r\nthey did on the source Observable. Optionally takes a {@link SchedulerLike} for\r\nmanaging timers.\r\n\r\n## Example\r\n\r\nEmit the most recent click after a burst of clicks\r\n\r\n```ts\r\nimport { fromEvent, debounceTime } from 'rxjs';\r\n\r\nconst clicks = fromEvent(document, 'click');\r\nconst result = clicks.pipe(debounceTime(1000));\r\nresult.subscribe(x => console.log(x));\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link audit}"},{"kind":25,"tagName":"see","text":"{@link auditTime}"},{"kind":25,"tagName":"see","text":"{@link debounce}"},{"kind":25,"tagName":"see","text":"{@link sample}"},{"kind":25,"tagName":"see","text":"{@link sampleTime}"},{"kind":25,"tagName":"see","text":"{@link throttle}"},{"kind":25,"tagName":"see","text":"{@link throttleTime}"},{"kind":25,"tagName":"param","text":"{number} dueTime The timeout duration in milliseconds (or the time\r\nunit determined internally by the optional `scheduler`) for the window of\r\ntime required to wait for emission silence before emitting the most recent\r\nsource value."},{"kind":25,"tagName":"param","text":"{SchedulerLike} [scheduler=async] The {@link SchedulerLike} to use for\r\nmanaging the timers that handle the timeout for each value."},{"kind":25,"tagName":"return","text":"A function that returns an Observable that delays the emissions of\r\nthe source Observable by the specified `dueTime`, and may drop some values\r\nif they occur too frequently."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[],"functionName":"debounceTime","modulePath":"..\\src\\internal\\operators\\debounceTime.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},"..\\src\\internal\\operators\\defaultIfEmpty.ts":{"moduleComponents":{"defaultIfEmpty":{"kind":13,"usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":1,"index":1},"sources":[{"source":{"name":"defaultIfEmpty","statements":["return operate((source, subscriber) => {\r\nlet hasValue = false;\r\nsource.subscribe(\r\n  createOperatorSubscriber(\r\n    subscriber,\r\n    (value) => {\r\n      hasValue = true;\r\n      subscriber.next(value);\r\n    },\r\n    () => {\r\n      if (!hasValue) {\r\n        subscriber.next(defaultValue!);\r\n      }\r\n      subscriber.complete();\r\n    }\r\n  )\r\n);\r\n});"],"parameters":[{"name":"defaultValue","type":"R","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, T | R>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"R","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nEmits a given value if the source Observable completes without emitting any\r\n`next` value, otherwise mirrors the source Observable.\r\n\r\n<span class=\"informal\">If the source Observable turns out to be empty, then\r\nthis operator will emit a default value.</span>\r\n\r\n![](defaultIfEmpty.png)\r\n\r\n`defaultIfEmpty` emits the values emitted by the source Observable or a\r\nspecified default value if the source Observable is empty (completes without\r\nhaving emitted any `next` value).\r\n\r\n## Example\r\n\r\nIf no clicks happen in 5 seconds, then emit 'no clicks'\r\n\r\n```ts\r\nimport { fromEvent, takeUntil, interval, defaultIfEmpty } from 'rxjs';\r\n\r\nconst clicks = fromEvent(document, 'click');\r\nconst clicksBeforeFive = clicks.pipe(takeUntil(interval(5000)));\r\nconst result = clicksBeforeFive.pipe(defaultIfEmpty('no clicks'));\r\nresult.subscribe(x => console.log(x));\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link empty}"},{"kind":25,"tagName":"see","text":"{@link last}"},{"kind":25,"tagName":"param","text":"defaultValue The default value used if the source\r\nObservable is empty."},{"kind":25,"tagName":"return","text":"A function that returns an Observable that emits either the\r\nspecified `defaultValue` if the source Observable emits no items, or the\r\nvalues emitted by the source Observable."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[],"functionName":"defaultIfEmpty","modulePath":"..\\src\\internal\\operators\\defaultIfEmpty.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},"..\\src\\internal\\operators\\delay.ts":{"moduleComponents":{"delay":{"kind":13,"usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":1,"index":1},"sources":[{"source":{"name":"delay","statements":[{"isExported":false,"isDefaultExport":false,"hasDeclareKeyword":false,"docs":[],"kind":41,"declarationKind":"const","declarations":[{"name":"duration","initializer":"timer(due, scheduler)","hasExclamationToken":false,"kind":40}]},"return delayWhen(() => duration);"],"parameters":[{"name":"due","type":"number | Date","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"scheduler","initializer":"asyncScheduler","type":"SchedulerLike","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"MonoTypeOperatorFunction<T>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nDelays the emission of items from the source Observable by a given timeout or\r\nuntil a given Date.\r\n\r\n<span class=\"informal\">Time shifts each item by some specified amount of\r\nmilliseconds.</span>\r\n\r\n![](delay.svg)\r\n\r\nIf the delay argument is a Number, this operator time shifts the source\r\nObservable by that amount of time expressed in milliseconds. The relative\r\ntime intervals between the values are preserved.\r\n\r\nIf the delay argument is a Date, this operator time shifts the start of the\r\nObservable execution until the given date occurs.\r\n\r\n## Examples\r\n\r\nDelay each click by one second\r\n\r\n```ts\r\nimport { fromEvent, delay } from 'rxjs';\r\n\r\nconst clicks = fromEvent(document, 'click');\r\nconst delayedClicks = clicks.pipe(delay(1000)); // each click emitted after 1 second\r\ndelayedClicks.subscribe(x => console.log(x));\r\n```\r\n\r\nDelay all clicks until a future date happens\r\n\r\n```ts\r\nimport { fromEvent, delay } from 'rxjs';\r\n\r\nconst clicks = fromEvent(document, 'click');\r\nconst date = new Date('March 15, 2050 12:00:00'); // in the future\r\nconst delayedClicks = clicks.pipe(delay(date)); // click emitted only after that date\r\ndelayedClicks.subscribe(x => console.log(x));\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link delayWhen}"},{"kind":25,"tagName":"see","text":"{@link throttle}"},{"kind":25,"tagName":"see","text":"{@link throttleTime}"},{"kind":25,"tagName":"see","text":"{@link debounce}"},{"kind":25,"tagName":"see","text":"{@link debounceTime}"},{"kind":25,"tagName":"see","text":"{@link sample}"},{"kind":25,"tagName":"see","text":"{@link sampleTime}"},{"kind":25,"tagName":"see","text":"{@link audit}"},{"kind":25,"tagName":"see","text":"{@link auditTime}"},{"kind":25,"tagName":"param","text":"{number|Date} due The delay duration in milliseconds (a `number`) or\r\na `Date` until which the emission of the source items is delayed."},{"kind":25,"tagName":"param","text":"{SchedulerLike} [scheduler=async] The {@link SchedulerLike} to use for\r\nmanaging the timers that handle the time-shift for each item."},{"kind":25,"tagName":"return","text":"A function that returns an Observable that delays the emissions of\r\nthe source Observable by the specified timeout or Date."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[],"functionName":"delay","modulePath":"..\\src\\internal\\operators\\delay.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},"..\\src\\internal\\operators\\delayWhen.ts":{"moduleComponents":{"delayWhen":{"kind":13,"usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":1,"index":1},"sources":[{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"The `subscriptionDelay` parameter will be removed in v8."}]}],"hasDeclareKeyword":false,"parameters":[{"name":"delayDurationSelector","type":"(value: T, index: number) => ObservableInput<any>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"subscriptionDelay","type":"Observable<any>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"MonoTypeOperatorFunction<T>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"delayWhen","modulePath":"..\\src\\internal\\operators\\delayWhen.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"delayDurationSelector","type":"(value: T, index: number) => ObservableInput<any>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"MonoTypeOperatorFunction<T>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"delayWhen","modulePath":"..\\src\\internal\\operators\\delayWhen.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},"..\\src\\internal\\operators\\dematerialize.ts":{"moduleComponents":{"dematerialize":{"kind":13,"usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":1,"index":1},"sources":[{"source":{"name":"dematerialize","statements":["return operate((source, subscriber) => {\r\nsource.subscribe(createOperatorSubscriber(subscriber, (notification) => observeNotification(notification, subscriber)));\r\n});"],"parameters":[],"returnType":"OperatorFunction<N, ValueFromNotification<N>>","typeParameters":[{"name":"N","kind":39,"isConst":false,"constraint":"ObservableNotification<any>","variance":0}],"docs":[{"kind":24,"description":"\r\nConverts an Observable of {@link ObservableNotification} objects into the emissions\r\nthat they represent.\r\n\r\n<span class=\"informal\">Unwraps {@link ObservableNotification} objects as actual `next`,\r\n`error` and `complete` emissions. The opposite of {@link materialize}.</span>\r\n\r\n![](dematerialize.png)\r\n\r\n`dematerialize` is assumed to operate an Observable that only emits\r\n{@link ObservableNotification} objects as `next` emissions, and does not emit any\r\n`error`. Such Observable is the output of a `materialize` operation. Those\r\nnotifications are then unwrapped using the metadata they contain, and emitted\r\nas `next`, `error`, and `complete` on the output Observable.\r\n\r\nUse this operator in conjunction with {@link materialize}.\r\n\r\n## Example\r\n\r\nConvert an Observable of Notifications to an actual Observable\r\n\r\n```ts\r\nimport { NextNotification, ErrorNotification, of, dematerialize } from 'rxjs';\r\n\r\nconst notifA: NextNotification<string> = { kind: 'N', value: 'A' };\r\nconst notifB: NextNotification<string> = { kind: 'N', value: 'B' };\r\nconst notifE: ErrorNotification = { kind: 'E', error: new TypeError('x.toUpperCase is not a function') };\r\n\r\nconst materialized = of(notifA, notifB, notifE);\r\n\r\nconst upperCase = materialized.pipe(dematerialize());\r\nupperCase.subscribe({\r\n  next: x => console.log(x),\r\n  error: e => console.error(e)\r\n});\r\n\r\n// Results in:\r\n// A\r\n// B\r\n// TypeError: x.toUpperCase is not a function\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link materialize}"},{"kind":25,"tagName":"return","text":"A function that returns an Observable that emits items and\r\nnotifications embedded in Notification objects emitted by the source\r\nObservable."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[],"functionName":"dematerialize","modulePath":"..\\src\\internal\\operators\\dematerialize.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},"..\\src\\internal\\operators\\distinct.ts":{"moduleComponents":{"distinct":{"kind":13,"usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":1,"index":1},"sources":[{"source":{"name":"distinct","statements":["return operate((source, subscriber) => {\r\n    const distinctKeys = new Set();\r\n    source.subscribe(\r\n      createOperatorSubscriber(subscriber, (value) => {\r\n        const key = keySelector ? keySelector(value) : value;\r\n        if (!distinctKeys.has(key)) {\r\n          distinctKeys.add(key);\r\n          subscriber.next(value);\r\n        }\r\n      })\r\n    );\r\n\r\n    flushes && innerFrom(flushes).subscribe(createOperatorSubscriber(subscriber, () => distinctKeys.clear(), noop));\r\n  });"],"parameters":[{"name":"keySelector","type":"(value: T) => K","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"flushes","type":"ObservableInput<any>","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"MonoTypeOperatorFunction<T>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"K","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nReturns an Observable that emits all items emitted by the source Observable that are distinct by comparison from previous items.\r\n\r\nIf a `keySelector` function is provided, then it will project each value from the source observable into a new value that it will\r\ncheck for equality with previously projected values. If the `keySelector` function is not provided, it will use each value from the\r\nsource observable directly with an equality check against previous values.\r\n\r\nIn JavaScript runtimes that support `Set`, this operator will use a `Set` to improve performance of the distinct value checking.\r\n\r\nIn other runtimes, this operator will use a minimal implementation of `Set` that relies on an `Array` and `indexOf` under the\r\nhood, so performance will degrade as more values are checked for distinction. Even in newer browsers, a long-running `distinct`\r\nuse might result in memory leaks. To help alleviate this in some scenarios, an optional `flushes` parameter is also provided so\r\nthat the internal `Set` can be \"flushed\", basically clearing it of values.\r\n\r\n## Examples\r\n\r\nA simple example with numbers\r\n\r\n```ts\r\nimport { of, distinct } from 'rxjs';\r\n\r\nof(1, 1, 2, 2, 2, 1, 2, 3, 4, 3, 2, 1)\r\n  .pipe(distinct())\r\n  .subscribe(x => console.log(x));\r\n\r\n// Outputs\r\n// 1\r\n// 2\r\n// 3\r\n// 4\r\n```\r\n\r\nAn example using the `keySelector` function\r\n\r\n```ts\r\nimport { of, distinct } from 'rxjs';\r\n\r\nof(\r\n  { age: 4, name: 'Foo'},\r\n  { age: 7, name: 'Bar'},\r\n  { age: 5, name: 'Foo'}\r\n)\r\n.pipe(distinct(({ name }) => name))\r\n.subscribe(x => console.log(x));\r\n\r\n// Outputs\r\n// { age: 4, name: 'Foo' }\r\n// { age: 7, name: 'Bar' }\r\n```","tags":[{"kind":25,"tagName":"see","text":"{@link distinctUntilChanged}"},{"kind":25,"tagName":"see","text":"{@link distinctUntilKeyChanged}"},{"kind":25,"tagName":"param","text":"keySelector Optional `function` to select which value you want to check as distinct."},{"kind":25,"tagName":"param","text":"flushes Optional `ObservableInput` for flushing the internal HashSet of the operator."},{"kind":25,"tagName":"return","text":"A function that returns an Observable that emits items from the\r\nsource Observable with distinct values."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[],"functionName":"distinct","modulePath":"..\\src\\internal\\operators\\distinct.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},"..\\src\\internal\\operators\\distinctUntilChanged.ts":{"moduleComponents":{"distinctUntilChanged":{"kind":13,"usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":1,"index":1},"sources":[{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"comparator","type":"(previous: T, current: T) => boolean","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"MonoTypeOperatorFunction<T>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"distinctUntilChanged","modulePath":"..\\src\\internal\\operators\\distinctUntilChanged.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"K","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"comparator","type":"(previous: K, current: K) => boolean","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"keySelector","type":"(value: T) => K","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"MonoTypeOperatorFunction<T>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"distinctUntilChanged","modulePath":"..\\src\\internal\\operators\\distinctUntilChanged.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},"..\\src\\internal\\operators\\distinctUntilKeyChanged.ts":{"moduleComponents":{"distinctUntilKeyChanged":{"kind":13,"usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":1,"index":1},"sources":[{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"key","type":"keyof T","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"MonoTypeOperatorFunction<T>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"distinctUntilKeyChanged","modulePath":"..\\src\\internal\\operators\\distinctUntilKeyChanged.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"K","kind":39,"isConst":false,"constraint":"keyof T","variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"key","type":"K","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"compare","type":"(x: T[K], y: T[K]) => boolean","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"MonoTypeOperatorFunction<T>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"distinctUntilKeyChanged","modulePath":"..\\src\\internal\\operators\\distinctUntilKeyChanged.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},"..\\src\\internal\\operators\\elementAt.ts":{"moduleComponents":{"elementAt":{"kind":13,"usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":1,"index":1},"sources":[{"source":{"name":"elementAt","statements":["if (index < 0) {\r\nthrow new ArgumentOutOfRangeError();\r\n}",{"isExported":false,"isDefaultExport":false,"hasDeclareKeyword":false,"docs":[],"kind":41,"declarationKind":"const","declarations":[{"name":"hasDefaultValue","initializer":"arguments.length >= 2","hasExclamationToken":false,"kind":40}]},"return (source: Observable<T>) =>\r\nsource.pipe(\r\n  filter((v, i) => i === index),\r\n  take(1),\r\n  hasDefaultValue ? defaultIfEmpty(defaultValue!) : throwIfEmpty(() => new ArgumentOutOfRangeError())\r\n);"],"parameters":[{"name":"index","type":"number","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"defaultValue","type":"D","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, T | D>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"D","kind":39,"isConst":false,"default":"T","variance":0}],"docs":[{"kind":24,"description":"\r\nEmits the single value at the specified `index` in a sequence of emissions\r\nfrom the source Observable.\r\n\r\n<span class=\"informal\">Emits only the i-th value, then completes.</span>\r\n\r\n![](elementAt.png)\r\n\r\n`elementAt` returns an Observable that emits the item at the specified\r\n`index` in the source Observable, or a default value if that `index` is out\r\nof range and the `default` argument is provided. If the `default` argument is\r\nnot given and the `index` is out of range, the output Observable will emit an\r\n`ArgumentOutOfRangeError` error.\r\n\r\n## Example\r\n\r\nEmit only the third click event\r\n\r\n```ts\r\nimport { fromEvent, elementAt } from 'rxjs';\r\n\r\nconst clicks = fromEvent(document, 'click');\r\nconst result = clicks.pipe(elementAt(2));\r\nresult.subscribe(x => console.log(x));\r\n\r\n// Results in:\r\n// click 1 = nothing\r\n// click 2 = nothing\r\n// click 3 = MouseEvent object logged to console\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link first}"},{"kind":25,"tagName":"see","text":"{@link last}"},{"kind":25,"tagName":"see","text":"{@link skip}"},{"kind":25,"tagName":"see","text":"{@link single}"},{"kind":25,"tagName":"see","text":"{@link take}"},{"kind":25,"tagName":"throws","text":"{ArgumentOutOfRangeError} When using `elementAt(i)`, it delivers an\r\nArgumentOutOfRangeError to the Observer's `error` callback if `i < 0` or the\r\nObservable has completed before emitting the i-th `next` notification."},{"kind":25,"tagName":"param","text":"{number} index Is the number `i` for the i-th source emission that has\r\nhappened since the subscription, starting from the number `0`."},{"kind":25,"tagName":"param","text":"{T} [defaultValue] The default value returned for missing indices."},{"kind":25,"tagName":"return","text":"A function that returns an Observable that emits a single item, if\r\nit is found. Otherwise, it will emit the default value if given. If not, it\r\nemits an error."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[],"functionName":"elementAt","modulePath":"..\\src\\internal\\operators\\elementAt.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},"..\\src\\internal\\operators\\endWith.ts":{"moduleComponents":{"endWith":{"kind":13,"usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":1,"index":1},"sources":[{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"The `scheduler` parameter will be removed in v8. Use `scheduled` and `concatAll`. Details: https://rxjs.dev/deprecations/scheduler-argument"}]}],"hasDeclareKeyword":false,"parameters":[{"name":"scheduler","type":"SchedulerLike","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"MonoTypeOperatorFunction<T>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"endWith","modulePath":"..\\src\\internal\\operators\\endWith.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"A","kind":39,"isConst":false,"constraint":"unknown[]","default":"T[]","variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"The `scheduler` parameter will be removed in v8. Use `scheduled` and `concatAll`. Details: https://rxjs.dev/deprecations/scheduler-argument"}]}],"hasDeclareKeyword":false,"parameters":[{"name":"valuesAndScheduler","type":"[...A, SchedulerLike]","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":true}],"returnType":"OperatorFunction<T, T | ValueFromArray<A>>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"endWith","modulePath":"..\\src\\internal\\operators\\endWith.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"A","kind":39,"isConst":false,"constraint":"unknown[]","default":"T[]","variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"values","type":"A","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":true}],"returnType":"OperatorFunction<T, T | ValueFromArray<A>>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"endWith","modulePath":"..\\src\\internal\\operators\\endWith.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},"..\\src\\internal\\operators\\every.ts":{"moduleComponents":{"every":{"kind":13,"usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":0.5,"index":0.75},"sources":[{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"predicate","type":"BooleanConstructor","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, Exclude<T, Falsy> extends never ? false : boolean>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"every","modulePath":"..\\src\\internal\\operators\\every.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Use a closure instead of a `thisArg`. Signatures accepting a `thisArg` will be removed in v8."}]}],"hasDeclareKeyword":false,"parameters":[{"name":"predicate","type":"BooleanConstructor","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"thisArg","type":"any","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, Exclude<T, Falsy> extends never ? false : boolean>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"every","modulePath":"..\\src\\internal\\operators\\every.ts"},"usabilityResult":{"index":0.5,"paramLengthComplexity":1,"paramSequenceComplexity":0}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"A","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Use a closure instead of a `thisArg`. Signatures accepting a `thisArg` will be removed in v8."}]}],"hasDeclareKeyword":false,"parameters":[{"name":"predicate","type":"(this: A, value: T, index: number, source: Observable<T>) => boolean","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"thisArg","type":"A","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, boolean>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"every","modulePath":"..\\src\\internal\\operators\\every.ts"},"usabilityResult":{"index":0.5,"paramLengthComplexity":1,"paramSequenceComplexity":0}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"predicate","type":"(value: T, index: number, source: Observable<T>) => boolean","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, boolean>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"every","modulePath":"..\\src\\internal\\operators\\every.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]}},"usabilityResult":{"index":0.75,"paramLengthComplexity":1,"paramSequenceComplexity":0.5}},"..\\src\\internal\\operators\\exhaustAll.ts":{"moduleComponents":{"exhaustAll":{"kind":13,"usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":1,"index":1},"sources":[{"source":{"name":"exhaustAll","statements":["return exhaustMap(identity);"],"parameters":[],"returnType":"OperatorFunction<O, ObservedValueOf<O>>","typeParameters":[{"name":"O","kind":39,"isConst":false,"constraint":"ObservableInput<any>","variance":0}],"docs":[{"kind":24,"description":"\r\nConverts a higher-order Observable into a first-order Observable by dropping\r\ninner Observables while the previous inner Observable has not yet completed.\r\n\r\n<span class=\"informal\">Flattens an Observable-of-Observables by dropping the\r\nnext inner Observables while the current inner is still executing.</span>\r\n\r\n![](exhaustAll.svg)\r\n\r\n`exhaustAll` subscribes to an Observable that emits Observables, also known as a\r\nhigher-order Observable. Each time it observes one of these emitted inner\r\nObservables, the output Observable begins emitting the items emitted by that\r\ninner Observable. So far, it behaves like {@link mergeAll}. However,\r\n`exhaustAll` ignores every new inner Observable if the previous Observable has\r\nnot yet completed. Once that one completes, it will accept and flatten the\r\nnext inner Observable and repeat this process.\r\n\r\n## Example\r\n\r\nRun a finite timer for each click, only if there is no currently active timer\r\n\r\n```ts\r\nimport { fromEvent, map, interval, take, exhaustAll } from 'rxjs';\r\n\r\nconst clicks = fromEvent(document, 'click');\r\nconst higherOrder = clicks.pipe(\r\n  map(() => interval(1000).pipe(take(5)))\r\n);\r\nconst result = higherOrder.pipe(exhaustAll());\r\nresult.subscribe(x => console.log(x));\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link combineLatestAll}"},{"kind":25,"tagName":"see","text":"{@link concatAll}"},{"kind":25,"tagName":"see","text":"{@link switchAll}"},{"kind":25,"tagName":"see","text":"{@link switchMap}"},{"kind":25,"tagName":"see","text":"{@link mergeAll}"},{"kind":25,"tagName":"see","text":"{@link exhaustMap}"},{"kind":25,"tagName":"see","text":"{@link zipAll}"},{"kind":25,"tagName":"return","text":"A function that returns an Observable that takes a source of\r\nObservables and propagates the first Observable exclusively until it\r\ncompletes before subscribing to the next."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[],"functionName":"exhaustAll","modulePath":"..\\src\\internal\\operators\\exhaustAll.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},"..\\src\\internal\\operators\\exhaustMap.ts":{"moduleComponents":{"exhaustMap":{"kind":13,"usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":1,"index":1},"sources":[{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"O","kind":39,"isConst":false,"constraint":"ObservableInput<any>","variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"project","type":"(value: T, index: number) => O","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, ObservedValueOf<O>>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"exhaustMap","modulePath":"..\\src\\internal\\operators\\exhaustMap.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"O","kind":39,"isConst":false,"constraint":"ObservableInput<any>","variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"The `resultSelector` parameter will be removed in v8. Use an inner `map` instead. Details: https://rxjs.dev/deprecations/resultSelector"}]}],"hasDeclareKeyword":false,"parameters":[{"name":"project","type":"(value: T, index: number) => O","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"resultSelector","type":"undefined","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, ObservedValueOf<O>>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"exhaustMap","modulePath":"..\\src\\internal\\operators\\exhaustMap.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"I","kind":39,"isConst":false,"variance":0},{"name":"R","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"The `resultSelector` parameter will be removed in v8. Use an inner `map` instead. Details: https://rxjs.dev/deprecations/resultSelector"}]}],"hasDeclareKeyword":false,"parameters":[{"name":"project","type":"(value: T, index: number) => ObservableInput<I>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"resultSelector","type":"(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, R>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"exhaustMap","modulePath":"..\\src\\internal\\operators\\exhaustMap.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},"..\\src\\internal\\operators\\expand.ts":{"moduleComponents":{"expand":{"kind":13,"usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":1,"index":1},"sources":[{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"O","kind":39,"isConst":false,"constraint":"ObservableInput<unknown>","variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"project","type":"(value: T, index: number) => O","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"concurrent","type":"number","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"scheduler","type":"SchedulerLike","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, ObservedValueOf<O>>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"expand","modulePath":"..\\src\\internal\\operators\\expand.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"O","kind":39,"isConst":false,"constraint":"ObservableInput<unknown>","variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"The `scheduler` parameter will be removed in v8. If you need to schedule the inner subscription,\r\nuse `subscribeOn` within the projection function: `expand((value) => fn(value).pipe(subscribeOn(scheduler)))`.\r\nDetails: Details: https://rxjs.dev/deprecations/scheduler-argument"}]}],"hasDeclareKeyword":false,"parameters":[{"name":"project","type":"(value: T, index: number) => O","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"concurrent","type":"number | undefined","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"scheduler","type":"SchedulerLike","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, ObservedValueOf<O>>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"expand","modulePath":"..\\src\\internal\\operators\\expand.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},"..\\src\\internal\\operators\\filter.ts":{"moduleComponents":{"filter":{"kind":13,"usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":0.6,"index":0.8},"sources":[{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"S","kind":39,"isConst":false,"constraint":"T","variance":0},{"name":"A","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Use a closure instead of a `thisArg`. Signatures accepting a `thisArg` will be removed in v8."}]}],"hasDeclareKeyword":false,"parameters":[{"name":"predicate","type":"(this: A, value: T, index: number) => value is S","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"thisArg","type":"A","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, S>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"filter","modulePath":"..\\src\\internal\\operators\\filter.ts"},"usabilityResult":{"index":0.5,"paramLengthComplexity":1,"paramSequenceComplexity":0}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"S","kind":39,"isConst":false,"constraint":"T","variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"predicate","type":"(value: T, index: number) => value is S","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, S>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"filter","modulePath":"..\\src\\internal\\operators\\filter.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"predicate","type":"BooleanConstructor","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, TruthyTypesOf<T>>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"filter","modulePath":"..\\src\\internal\\operators\\filter.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"A","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Use a closure instead of a `thisArg`. Signatures accepting a `thisArg` will be removed in v8."}]}],"hasDeclareKeyword":false,"parameters":[{"name":"predicate","type":"(this: A, value: T, index: number) => boolean","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"thisArg","type":"A","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"MonoTypeOperatorFunction<T>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"filter","modulePath":"..\\src\\internal\\operators\\filter.ts"},"usabilityResult":{"index":0.5,"paramLengthComplexity":1,"paramSequenceComplexity":0}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"predicate","type":"(value: T, index: number) => boolean","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"MonoTypeOperatorFunction<T>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"filter","modulePath":"..\\src\\internal\\operators\\filter.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]}},"usabilityResult":{"index":0.8,"paramLengthComplexity":1,"paramSequenceComplexity":0.6}},"..\\src\\internal\\operators\\finalize.ts":{"moduleComponents":{"finalize":{"kind":13,"usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":1,"index":1},"sources":[{"source":{"name":"finalize","statements":["return operate((source, subscriber) => {\r\n// TODO: This try/finally was only added for `useDeprecatedSynchronousErrorHandling`.\r\n// REMOVE THIS WHEN THAT HOT GARBAGE IS REMOVED IN V8.\r\ntry {\r\n  source.subscribe(subscriber);\r\n} finally {\r\n  subscriber.add(callback);\r\n}\r\n});"],"parameters":[{"name":"callback","type":"() => void","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"MonoTypeOperatorFunction<T>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nReturns an Observable that mirrors the source Observable, but will call a specified function when\r\nthe source terminates on complete or error.\r\nThe specified function will also be called when the subscriber explicitly unsubscribes.\r\n\r\n## Examples\r\n\r\nExecute callback function when the observable completes\r\n\r\n```ts\r\nimport { interval, take, finalize } from 'rxjs';\r\n\r\n// emit value in sequence every 1 second\r\nconst source = interval(1000);\r\nconst example = source.pipe(\r\n  take(5), //take only the first 5 values\r\n  finalize(() => console.log('Sequence complete')) // Execute when the observable completes\r\n);\r\nconst subscribe = example.subscribe(val => console.log(val));\r\n\r\n// results:\r\n// 0\r\n// 1\r\n// 2\r\n// 3\r\n// 4\r\n// 'Sequence complete'\r\n```\r\n\r\nExecute callback function when the subscriber explicitly unsubscribes\r\n\r\n```ts\r\nimport { interval, finalize, tap, noop, timer } from 'rxjs';\r\n\r\nconst source = interval(100).pipe(\r\n  finalize(() => console.log('[finalize] Called')),\r\n  tap({\r\n    next: () => console.log('[next] Called'),\r\n    error: () => console.log('[error] Not called'),\r\n    complete: () => console.log('[tap complete] Not called')\r\n  })\r\n);\r\n\r\nconst sub = source.subscribe({\r\n  next: x => console.log(x),\r\n  error: noop,\r\n  complete: () => console.log('[complete] Not called')\r\n});\r\n\r\ntimer(150).subscribe(() => sub.unsubscribe());\r\n\r\n// results:\r\n// '[next] Called'\r\n// 0\r\n// '[finalize] Called'\r\n```\r\n","tags":[{"kind":25,"tagName":"param","text":"{function} callback Function to be called when source terminates."},{"kind":25,"tagName":"return","text":"A function that returns an Observable that mirrors the source, but\r\nwill call the specified function on termination."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[],"functionName":"finalize","modulePath":"..\\src\\internal\\operators\\finalize.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},"..\\src\\internal\\operators\\find.ts":{"moduleComponents":{"find":{"kind":13,"usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":0.6,"index":0.8},"sources":[{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"predicate","type":"BooleanConstructor","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, TruthyTypesOf<T>>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"find","modulePath":"..\\src\\internal\\operators\\find.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"S","kind":39,"isConst":false,"constraint":"T","variance":0},{"name":"A","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Use a closure instead of a `thisArg`. Signatures accepting a `thisArg` will be removed in v8."}]}],"hasDeclareKeyword":false,"parameters":[{"name":"predicate","type":"(this: A, value: T, index: number, source: Observable<T>) => value is S","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"thisArg","type":"A","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, S | undefined>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"find","modulePath":"..\\src\\internal\\operators\\find.ts"},"usabilityResult":{"index":0.5,"paramLengthComplexity":1,"paramSequenceComplexity":0}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"S","kind":39,"isConst":false,"constraint":"T","variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"predicate","type":"(value: T, index: number, source: Observable<T>) => value is S","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, S | undefined>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"find","modulePath":"..\\src\\internal\\operators\\find.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"A","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Use a closure instead of a `thisArg`. Signatures accepting a `thisArg` will be removed in v8."}]}],"hasDeclareKeyword":false,"parameters":[{"name":"predicate","type":"(this: A, value: T, index: number, source: Observable<T>) => boolean","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"thisArg","type":"A","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, T | undefined>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"find","modulePath":"..\\src\\internal\\operators\\find.ts"},"usabilityResult":{"index":0.5,"paramLengthComplexity":1,"paramSequenceComplexity":0}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"predicate","type":"(value: T, index: number, source: Observable<T>) => boolean","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, T | undefined>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"find","modulePath":"..\\src\\internal\\operators\\find.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]}},"usabilityResult":{"index":0.8,"paramLengthComplexity":1,"paramSequenceComplexity":0.6}},"..\\src\\internal\\operators\\findIndex.ts":{"moduleComponents":{"findIndex":{"kind":13,"usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":0.5,"index":0.75},"sources":[{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"predicate","type":"BooleanConstructor","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, T extends Falsy ? -1 : number>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"findIndex","modulePath":"..\\src\\internal\\operators\\findIndex.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Use a closure instead of a `thisArg`. Signatures accepting a `thisArg` will be removed in v8."}]}],"hasDeclareKeyword":false,"parameters":[{"name":"predicate","type":"BooleanConstructor","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"thisArg","type":"any","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, T extends Falsy ? -1 : number>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"findIndex","modulePath":"..\\src\\internal\\operators\\findIndex.ts"},"usabilityResult":{"index":0.5,"paramLengthComplexity":1,"paramSequenceComplexity":0}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"A","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Use a closure instead of a `thisArg`. Signatures accepting a `thisArg` will be removed in v8."}]}],"hasDeclareKeyword":false,"parameters":[{"name":"predicate","type":"(this: A, value: T, index: number, source: Observable<T>) => boolean","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"thisArg","type":"A","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, number>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"findIndex","modulePath":"..\\src\\internal\\operators\\findIndex.ts"},"usabilityResult":{"index":0.5,"paramLengthComplexity":1,"paramSequenceComplexity":0}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"predicate","type":"(value: T, index: number, source: Observable<T>) => boolean","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, number>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"findIndex","modulePath":"..\\src\\internal\\operators\\findIndex.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]}},"usabilityResult":{"index":0.75,"paramLengthComplexity":1,"paramSequenceComplexity":0.5}},"..\\src\\internal\\operators\\first.ts":{"moduleComponents":{"first":{"kind":13,"usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":0.6666666666666666,"index":0.8333333333333333},"sources":[{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"D","kind":39,"isConst":false,"default":"T","variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"predicate","type":"null","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"defaultValue","type":"D","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, T | D>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"first","modulePath":"..\\src\\internal\\operators\\first.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"predicate","type":"BooleanConstructor","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, TruthyTypesOf<T>>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"first","modulePath":"..\\src\\internal\\operators\\first.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"D","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"predicate","type":"BooleanConstructor","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"defaultValue","type":"D","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, TruthyTypesOf<T> | D>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"first","modulePath":"..\\src\\internal\\operators\\first.ts"},"usabilityResult":{"index":0.5,"paramLengthComplexity":1,"paramSequenceComplexity":0}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"S","kind":39,"isConst":false,"constraint":"T","variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"predicate","type":"(value: T, index: number, source: Observable<T>) => value is S","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"defaultValue","type":"S","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, S>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"first","modulePath":"..\\src\\internal\\operators\\first.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"S","kind":39,"isConst":false,"constraint":"T","variance":0},{"name":"D","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"predicate","type":"(value: T, index: number, source: Observable<T>) => value is S","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"defaultValue","type":"D","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, S | D>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"first","modulePath":"..\\src\\internal\\operators\\first.ts"},"usabilityResult":{"index":0.5,"paramLengthComplexity":1,"paramSequenceComplexity":0}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"D","kind":39,"isConst":false,"default":"T","variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"predicate","type":"(value: T, index: number, source: Observable<T>) => boolean","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"defaultValue","type":"D","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, T | D>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"first","modulePath":"..\\src\\internal\\operators\\first.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]}},"usabilityResult":{"index":0.8333333333333333,"paramLengthComplexity":1,"paramSequenceComplexity":0.6666666666666666}},"..\\src\\internal\\operators\\groupBy.ts":{"moduleComponents":{"groupBy":{"kind":13,"usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":0.7619047619047619,"index":0.8809523809523809},"sources":[{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"K","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"key","type":"(value: T) => K","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"options","type":"BasicGroupByOptions<K, T>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, GroupedObservable<K, T>>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"groupBy","modulePath":"..\\src\\internal\\operators\\groupBy.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"K","kind":39,"isConst":false,"variance":0},{"name":"E","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"key","type":"(value: T) => K","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"options","type":"GroupByOptionsWithElement<K, E, T>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, GroupedObservable<K, E>>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"groupBy","modulePath":"..\\src\\internal\\operators\\groupBy.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"K","kind":39,"isConst":false,"constraint":"T","variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"key","type":"(value: T) => value is K","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, GroupedObservable<true, K> | GroupedObservable<false, Exclude<T, K>>>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"groupBy","modulePath":"..\\src\\internal\\operators\\groupBy.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"K","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"key","type":"(value: T) => K","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, GroupedObservable<K, T>>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"groupBy","modulePath":"..\\src\\internal\\operators\\groupBy.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"K","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"use the options parameter instead."}]}],"hasDeclareKeyword":false,"parameters":[{"name":"key","type":"(value: T) => K","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"element","type":"void","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"duration","type":"(grouped: GroupedObservable<K, T>) => Observable<any>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, GroupedObservable<K, T>>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"groupBy","modulePath":"..\\src\\internal\\operators\\groupBy.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"K","kind":39,"isConst":false,"variance":0},{"name":"R","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"use the options parameter instead."}]}],"hasDeclareKeyword":false,"parameters":[{"name":"key","type":"(value: T) => K","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"element","type":"(value: T) => R","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"duration","type":"(grouped: GroupedObservable<K, R>) => Observable<any>","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, GroupedObservable<K, R>>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"groupBy","modulePath":"..\\src\\internal\\operators\\groupBy.ts"},"usabilityResult":{"index":0.5,"paramLengthComplexity":1,"paramSequenceComplexity":0}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"K","kind":39,"isConst":false,"variance":0},{"name":"R","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nGroups the items emitted by an Observable according to a specified criterion,\r\nand emits these grouped items as `GroupedObservables`, one\r\n{@link GroupedObservable} per group.\r\n\r\n![](groupBy.png)\r\n\r\nWhen the Observable emits an item, a key is computed for this item with the key function.\r\n\r\nIf a {@link GroupedObservable} for this key exists, this {@link GroupedObservable} emits. Otherwise, a new\r\n{@link GroupedObservable} for this key is created and emits.\r\n\r\nA {@link GroupedObservable} represents values belonging to the same group represented by a common key. The common\r\nkey is available as the `key` field of a {@link GroupedObservable} instance.\r\n\r\nThe elements emitted by {@link GroupedObservable}s are by default the items emitted by the Observable, or elements\r\nreturned by the element function.\r\n\r\n## Examples\r\n\r\nGroup objects by `id` and return as array\r\n\r\n```ts\r\nimport { of, groupBy, mergeMap, reduce } from 'rxjs';\r\n\r\nof(\r\n  { id: 1, name: 'JavaScript' },\r\n  { id: 2, name: 'Parcel' },\r\n  { id: 2, name: 'webpack' },\r\n  { id: 1, name: 'TypeScript' },\r\n  { id: 3, name: 'TSLint' }\r\n).pipe(\r\n  groupBy(p => p.id),\r\n  mergeMap(group$ => group$.pipe(reduce((acc, cur) => [...acc, cur], [])))\r\n)\r\n.subscribe(p => console.log(p));\r\n\r\n// displays:\r\n// [{ id: 1, name: 'JavaScript' }, { id: 1, name: 'TypeScript'}]\r\n// [{ id: 2, name: 'Parcel' }, { id: 2, name: 'webpack'}]\r\n// [{ id: 3, name: 'TSLint' }]\r\n```\r\n\r\nPivot data on the `id` field\r\n\r\n```ts\r\nimport { of, groupBy, mergeMap, reduce, map } from 'rxjs';\r\n\r\nof(\r\n  { id: 1, name: 'JavaScript' },\r\n  { id: 2, name: 'Parcel' },\r\n  { id: 2, name: 'webpack' },\r\n  { id: 1, name: 'TypeScript' },\r\n  { id: 3, name: 'TSLint' }\r\n).pipe(\r\n  groupBy(p => p.id, { element: p => p.name }),\r\n  mergeMap(group$ => group$.pipe(reduce((acc, cur) => [...acc, cur], [`${ group$.key }`]))),\r\n  map(arr => ({ id: parseInt(arr[0], 10), values: arr.slice(1) }))\r\n)\r\n.subscribe(p => console.log(p));\r\n\r\n// displays:\r\n// { id: 1, values: [ 'JavaScript', 'TypeScript' ] }\r\n// { id: 2, values: [ 'Parcel', 'webpack' ] }\r\n// { id: 3, values: [ 'TSLint' ] }\r\n```\r\n","tags":[{"kind":25,"tagName":"param","text":"key A function that extracts the key\r\nfor each item."},{"kind":25,"tagName":"param","text":"element A function that extracts the\r\nreturn element for each item."},{"kind":25,"tagName":"param","text":"duration\r\nA function that returns an Observable to determine how long each group should\r\nexist."},{"kind":25,"tagName":"param","text":"connector Factory function to create an\r\nintermediate Subject through which grouped elements are emitted."},{"kind":25,"tagName":"return","text":"A function that returns an Observable that emits GroupedObservables,\r\neach of which corresponds to a unique key value and each of which emits\r\nthose items from the source Observable that share that key value."},{"kind":25,"tagName":"deprecated","text":"Use the options parameter instead."}]}],"hasDeclareKeyword":false,"parameters":[{"name":"key","type":"(value: T) => K","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"element","type":"(value: T) => R","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"duration","type":"(grouped: GroupedObservable<K, R>) => Observable<any>","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"connector","type":"() => Subject<R>","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, GroupedObservable<K, R>>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"groupBy","modulePath":"..\\src\\internal\\operators\\groupBy.ts"},"usabilityResult":{"index":0.6666666666666667,"paramLengthComplexity":1,"paramSequenceComplexity":0.33333333333333337}}]}},"usabilityResult":{"index":0.8809523809523809,"paramLengthComplexity":1,"paramSequenceComplexity":0.7619047619047619}},"..\\src\\internal\\operators\\ignoreElements.ts":{"moduleComponents":{"ignoreElements":{"kind":13,"usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":1,"index":1},"sources":[{"source":{"name":"ignoreElements","statements":["return operate((source, subscriber) => {\r\nsource.subscribe(createOperatorSubscriber(subscriber, noop));\r\n});"],"parameters":[],"returnType":"OperatorFunction<unknown, never>","typeParameters":[],"docs":[{"kind":24,"description":"\r\nIgnores all items emitted by the source Observable and only passes calls of `complete` or `error`.\r\n\r\n![](ignoreElements.png)\r\n\r\nThe `ignoreElements` operator suppresses all items emitted by the source Observable,\r\nbut allows its termination notification (either `error` or `complete`) to pass through unchanged.\r\n\r\nIf you do not care about the items being emitted by an Observable, but you do want to be notified\r\nwhen it completes or when it terminates with an error, you can apply the `ignoreElements` operator\r\nto the Observable, which will ensure that it will never call its observers’ `next` handlers.\r\n\r\n## Example\r\n\r\nIgnore all `next` emissions from the source\r\n\r\n```ts\r\nimport { of, ignoreElements } from 'rxjs';\r\n\r\nof('you', 'talking', 'to', 'me')\r\n  .pipe(ignoreElements())\r\n  .subscribe({\r\n    next: word => console.log(word),\r\n    error: err => console.log('error:', err),\r\n    complete: () => console.log('the end'),\r\n  });\r\n\r\n// result:\r\n// 'the end'\r\n```\r\n","tags":[{"kind":25,"tagName":"return","text":"A function that returns an empty Observable that only calls\r\n`complete` or `error`, based on which one is called by the source\r\nObservable."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[],"functionName":"ignoreElements","modulePath":"..\\src\\internal\\operators\\ignoreElements.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},"..\\src\\internal\\operators\\isEmpty.ts":{"moduleComponents":{"isEmpty":{"kind":13,"usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":1,"index":1},"sources":[{"source":{"name":"isEmpty","statements":["return operate((source, subscriber) => {\r\nsource.subscribe(\r\n  createOperatorSubscriber(\r\n    subscriber,\r\n    () => {\r\n      subscriber.next(false);\r\n      subscriber.complete();\r\n    },\r\n    () => {\r\n      subscriber.next(true);\r\n      subscriber.complete();\r\n    }\r\n  )\r\n);\r\n});"],"parameters":[],"returnType":"OperatorFunction<T, boolean>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nEmits `false` if the input Observable emits any values, or emits `true` if the\r\ninput Observable completes without emitting any values.\r\n\r\n<span class=\"informal\">Tells whether any values are emitted by an Observable.</span>\r\n\r\n![](isEmpty.png)\r\n\r\n`isEmpty` transforms an Observable that emits values into an Observable that\r\nemits a single boolean value representing whether or not any values were\r\nemitted by the source Observable. As soon as the source Observable emits a\r\nvalue, `isEmpty` will emit a `false` and complete.  If the source Observable\r\ncompletes having not emitted anything, `isEmpty` will emit a `true` and\r\ncomplete.\r\n\r\nA similar effect could be achieved with {@link count}, but `isEmpty` can emit\r\na `false` value sooner.\r\n\r\n## Examples\r\n\r\nEmit `false` for a non-empty Observable\r\n\r\n```ts\r\nimport { Subject, isEmpty } from 'rxjs';\r\n\r\nconst source = new Subject<string>();\r\nconst result = source.pipe(isEmpty());\r\n\r\nsource.subscribe(x => console.log(x));\r\nresult.subscribe(x => console.log(x));\r\n\r\nsource.next('a');\r\nsource.next('b');\r\nsource.next('c');\r\nsource.complete();\r\n\r\n// Outputs\r\n// 'a'\r\n// false\r\n// 'b'\r\n// 'c'\r\n```\r\n\r\nEmit `true` for an empty Observable\r\n\r\n```ts\r\nimport { EMPTY, isEmpty } from 'rxjs';\r\n\r\nconst result = EMPTY.pipe(isEmpty());\r\nresult.subscribe(x => console.log(x));\r\n\r\n// Outputs\r\n// true\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link count}"},{"kind":25,"tagName":"see","text":"{@link EMPTY}"},{"kind":25,"tagName":"return","text":"A function that returns an Observable that emits boolean value\r\nindicating whether the source Observable was empty or not."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[],"functionName":"isEmpty","modulePath":"..\\src\\internal\\operators\\isEmpty.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},"..\\src\\internal\\operators\\last.ts":{"moduleComponents":{"last":{"kind":13,"usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":0.8,"index":0.9},"sources":[{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"predicate","type":"BooleanConstructor","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, TruthyTypesOf<T>>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"last","modulePath":"..\\src\\internal\\operators\\last.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"D","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"predicate","type":"BooleanConstructor","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"defaultValue","type":"D","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, TruthyTypesOf<T> | D>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"last","modulePath":"..\\src\\internal\\operators\\last.ts"},"usabilityResult":{"index":0.5,"paramLengthComplexity":1,"paramSequenceComplexity":0}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"D","kind":39,"isConst":false,"default":"T","variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"predicate","type":"null","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"defaultValue","type":"D","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, T | D>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"last","modulePath":"..\\src\\internal\\operators\\last.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"S","kind":39,"isConst":false,"constraint":"T","variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"predicate","type":"(value: T, index: number, source: Observable<T>) => value is S","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"defaultValue","type":"S","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, S>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"last","modulePath":"..\\src\\internal\\operators\\last.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"D","kind":39,"isConst":false,"default":"T","variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"predicate","type":"(value: T, index: number, source: Observable<T>) => boolean","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"defaultValue","type":"D","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, T | D>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"last","modulePath":"..\\src\\internal\\operators\\last.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]}},"usabilityResult":{"index":0.9,"paramLengthComplexity":1,"paramSequenceComplexity":0.8}},"..\\src\\internal\\operators\\map.ts":{"moduleComponents":{"map":{"kind":13,"usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":0.5,"index":0.75},"sources":[{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"R","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"project","type":"(value: T, index: number) => R","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, R>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"map","modulePath":"..\\src\\internal\\operators\\map.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"R","kind":39,"isConst":false,"variance":0},{"name":"A","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Use a closure instead of a `thisArg`. Signatures accepting a `thisArg` will be removed in v8."}]}],"hasDeclareKeyword":false,"parameters":[{"name":"project","type":"(this: A, value: T, index: number) => R","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"thisArg","type":"A","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, R>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"map","modulePath":"..\\src\\internal\\operators\\map.ts"},"usabilityResult":{"index":0.5,"paramLengthComplexity":1,"paramSequenceComplexity":0}}]}},"usabilityResult":{"index":0.75,"paramLengthComplexity":1,"paramSequenceComplexity":0.5}},"..\\src\\internal\\operators\\mapTo.ts":{"moduleComponents":{"mapTo":{"kind":13,"usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":1,"index":1},"sources":[{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"R","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"To be removed in v9. Use {@link map} instead: `map(() => value)`."}]}],"hasDeclareKeyword":false,"parameters":[{"name":"value","type":"R","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<unknown, R>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"mapTo","modulePath":"..\\src\\internal\\operators\\mapTo.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"R","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Do not specify explicit type parameters. Signatures with type parameters\r\nthat cannot be inferred will be removed in v8. `mapTo` itself will be removed in v9,\r\nuse {@link map} instead: `map(() => value)`."}]}],"hasDeclareKeyword":false,"parameters":[{"name":"value","type":"R","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, R>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"mapTo","modulePath":"..\\src\\internal\\operators\\mapTo.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},"..\\src\\internal\\operators\\materialize.ts":{"moduleComponents":{"materialize":{"kind":13,"usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":1,"index":1},"sources":[{"source":{"name":"materialize","statements":["return operate((source, subscriber) => {\r\nsource.subscribe(\r\n  createOperatorSubscriber(\r\n    subscriber,\r\n    (value) => {\r\n      subscriber.next(Notification.createNext(value));\r\n    },\r\n    () => {\r\n      subscriber.next(Notification.createComplete());\r\n      subscriber.complete();\r\n    },\r\n    (err) => {\r\n      subscriber.next(Notification.createError(err));\r\n      subscriber.complete();\r\n    }\r\n  )\r\n);\r\n});"],"parameters":[],"returnType":"OperatorFunction<T, Notification<T> & ObservableNotification<T>>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nRepresents all of the notifications from the source Observable as `next`\r\nemissions marked with their original types within {@link Notification}\r\nobjects.\r\n\r\n<span class=\"informal\">Wraps `next`, `error` and `complete` emissions in\r\n{@link Notification} objects, emitted as `next` on the output Observable.\r\n</span>\r\n\r\n![](materialize.png)\r\n\r\n`materialize` returns an Observable that emits a `next` notification for each\r\n`next`, `error`, or `complete` emission of the source Observable. When the\r\nsource Observable emits `complete`, the output Observable will emit `next` as\r\na Notification of type \"complete\", and then it will emit `complete` as well.\r\nWhen the source Observable emits `error`, the output will emit `next` as a\r\nNotification of type \"error\", and then `complete`.\r\n\r\nThis operator is useful for producing metadata of the source Observable, to\r\nbe consumed as `next` emissions. Use it in conjunction with\r\n{@link dematerialize}.\r\n\r\n## Example\r\n\r\nConvert a faulty Observable to an Observable of Notifications\r\n\r\n```ts\r\nimport { of, materialize, map } from 'rxjs';\r\n\r\nconst letters = of('a', 'b', 13, 'd');\r\nconst upperCase = letters.pipe(map((x: any) => x.toUpperCase()));\r\nconst materialized = upperCase.pipe(materialize());\r\n\r\nmaterialized.subscribe(x => console.log(x));\r\n\r\n// Results in the following:\r\n// - Notification { kind: 'N', value: 'A', error: undefined, hasValue: true }\r\n// - Notification { kind: 'N', value: 'B', error: undefined, hasValue: true }\r\n// - Notification { kind: 'E', value: undefined, error: TypeError { message: x.toUpperCase is not a function }, hasValue: false }\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link Notification}"},{"kind":25,"tagName":"see","text":"{@link dematerialize}"},{"kind":25,"tagName":"return","text":"A function that returns an Observable that emits\r\n{@link Notification} objects that wrap the original emissions from the\r\nsource Observable with metadata."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[],"functionName":"materialize","modulePath":"..\\src\\internal\\operators\\materialize.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},"..\\src\\internal\\operators\\max.ts":{"moduleComponents":{"max":{"kind":13,"usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":1,"index":1},"sources":[{"source":{"name":"max","statements":["return reduce(isFunction(comparer) ? (x, y) => (comparer(x, y) > 0 ? x : y) : (x, y) => (x > y ? x : y));"],"parameters":[{"name":"comparer","type":"(x: T, y: T) => number","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"MonoTypeOperatorFunction<T>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nThe Max operator operates on an Observable that emits numbers (or items that can be compared with a provided function),\r\nand when source Observable completes it emits a single item: the item with the largest value.\r\n\r\n![](max.png)\r\n\r\n## Examples\r\n\r\nGet the maximal value of a series of numbers\r\n\r\n```ts\r\nimport { of, max } from 'rxjs';\r\n\r\nof(5, 4, 7, 2, 8)\r\n  .pipe(max())\r\n  .subscribe(x => console.log(x));\r\n\r\n// Outputs\r\n// 8\r\n```\r\n\r\nUse a comparer function to get the maximal item\r\n\r\n```ts\r\nimport { of, max } from 'rxjs';\r\n\r\nof(\r\n  { age: 7, name: 'Foo' },\r\n  { age: 5, name: 'Bar' },\r\n  { age: 9, name: 'Beer' }\r\n).pipe(\r\n  max((a, b) => a.age < b.age ? -1 : 1)\r\n)\r\n.subscribe(x => console.log(x.name));\r\n\r\n// Outputs\r\n// 'Beer'\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link min}"},{"kind":25,"tagName":"param","text":"{Function} [comparer] - Optional comparer function that it will use instead of its default to compare the\r\nvalue of two items."},{"kind":25,"tagName":"return","text":"A function that returns an Observable that emits item with the\r\nlargest value."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[],"functionName":"max","modulePath":"..\\src\\internal\\operators\\max.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},"..\\src\\internal\\operators\\mergeAll.ts":{"moduleComponents":{"mergeAll":{"kind":13,"usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":1,"index":1},"sources":[{"source":{"name":"mergeAll","statements":["return mergeMap(identity, concurrent);"],"parameters":[{"name":"concurrent","initializer":"Infinity","type":"number","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<O, ObservedValueOf<O>>","typeParameters":[{"name":"O","kind":39,"isConst":false,"constraint":"ObservableInput<any>","variance":0}],"docs":[{"kind":24,"description":"\r\nConverts a higher-order Observable into a first-order Observable which\r\nconcurrently delivers all values that are emitted on the inner Observables.\r\n\r\n<span class=\"informal\">Flattens an Observable-of-Observables.</span>\r\n\r\n![](mergeAll.png)\r\n\r\n`mergeAll` subscribes to an Observable that emits Observables, also known as\r\na higher-order Observable. Each time it observes one of these emitted inner\r\nObservables, it subscribes to that and delivers all the values from the\r\ninner Observable on the output Observable. The output Observable only\r\ncompletes once all inner Observables have completed. Any error delivered by\r\na inner Observable will be immediately emitted on the output Observable.\r\n\r\n## Examples\r\n\r\nSpawn a new interval Observable for each click event, and blend their outputs as one Observable\r\n\r\n```ts\r\nimport { fromEvent, map, interval, mergeAll } from 'rxjs';\r\n\r\nconst clicks = fromEvent(document, 'click');\r\nconst higherOrder = clicks.pipe(map(() => interval(1000)));\r\nconst firstOrder = higherOrder.pipe(mergeAll());\r\n\r\nfirstOrder.subscribe(x => console.log(x));\r\n```\r\n\r\nCount from 0 to 9 every second for each click, but only allow 2 concurrent timers\r\n\r\n```ts\r\nimport { fromEvent, map, interval, take, mergeAll } from 'rxjs';\r\n\r\nconst clicks = fromEvent(document, 'click');\r\nconst higherOrder = clicks.pipe(\r\n  map(() => interval(1000).pipe(take(10)))\r\n);\r\nconst firstOrder = higherOrder.pipe(mergeAll(2));\r\n\r\nfirstOrder.subscribe(x => console.log(x));\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link combineLatestAll}"},{"kind":25,"tagName":"see","text":"{@link concatAll}"},{"kind":25,"tagName":"see","text":"{@link exhaustAll}"},{"kind":25,"tagName":"see","text":"{@link merge}"},{"kind":25,"tagName":"see","text":"{@link mergeMap}"},{"kind":25,"tagName":"see","text":"{@link mergeMapTo}"},{"kind":25,"tagName":"see","text":"{@link mergeScan}"},{"kind":25,"tagName":"see","text":"{@link switchAll}"},{"kind":25,"tagName":"see","text":"{@link switchMap}"},{"kind":25,"tagName":"see","text":"{@link zipAll}"},{"kind":25,"tagName":"param","text":"{number} [concurrent=Infinity] Maximum number of inner\r\nObservables being subscribed to concurrently."},{"kind":25,"tagName":"return","text":"A function that returns an Observable that emits values coming from\r\nall the inner Observables emitted by the source Observable."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[],"functionName":"mergeAll","modulePath":"..\\src\\internal\\operators\\mergeAll.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},"..\\src\\internal\\operators\\mergeMap.ts":{"moduleComponents":{"mergeMap":{"kind":13,"usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":1,"index":1},"sources":[{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"O","kind":39,"isConst":false,"constraint":"ObservableInput<any>","variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"project","type":"(value: T, index: number) => O","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"concurrent","type":"number","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, ObservedValueOf<O>>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"mergeMap","modulePath":"..\\src\\internal\\operators\\mergeMap.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"O","kind":39,"isConst":false,"constraint":"ObservableInput<any>","variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"The `resultSelector` parameter will be removed in v8. Use an inner `map` instead. Details: https://rxjs.dev/deprecations/resultSelector"}]}],"hasDeclareKeyword":false,"parameters":[{"name":"project","type":"(value: T, index: number) => O","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"resultSelector","type":"undefined","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"concurrent","type":"number","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, ObservedValueOf<O>>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"mergeMap","modulePath":"..\\src\\internal\\operators\\mergeMap.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"R","kind":39,"isConst":false,"variance":0},{"name":"O","kind":39,"isConst":false,"constraint":"ObservableInput<any>","variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"The `resultSelector` parameter will be removed in v8. Use an inner `map` instead. Details: https://rxjs.dev/deprecations/resultSelector"}]}],"hasDeclareKeyword":false,"parameters":[{"name":"project","type":"(value: T, index: number) => O","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"resultSelector","type":"(outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"concurrent","type":"number","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, R>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"mergeMap","modulePath":"..\\src\\internal\\operators\\mergeMap.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},"..\\src\\internal\\operators\\mergeMapTo.ts":{"moduleComponents":{"mergeMapTo":{"kind":13,"usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":1,"index":1},"sources":[{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"O","kind":39,"isConst":false,"constraint":"ObservableInput<unknown>","variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Will be removed in v9. Use {@link mergeMap} instead: `mergeMap(() => result)`"}]}],"hasDeclareKeyword":false,"parameters":[{"name":"innerObservable","type":"O","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"concurrent","type":"number","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<unknown, ObservedValueOf<O>>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"mergeMapTo","modulePath":"..\\src\\internal\\operators\\mergeMapTo.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"R","kind":39,"isConst":false,"variance":0},{"name":"O","kind":39,"isConst":false,"constraint":"ObservableInput<unknown>","variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"The `resultSelector` parameter will be removed in v8. Use an inner `map` instead.\r\nDetails: https://rxjs.dev/deprecations/resultSelector"}]}],"hasDeclareKeyword":false,"parameters":[{"name":"innerObservable","type":"O","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"resultSelector","type":"(outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"concurrent","type":"number","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, R>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"mergeMapTo","modulePath":"..\\src\\internal\\operators\\mergeMapTo.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},"..\\src\\internal\\operators\\mergeScan.ts":{"moduleComponents":{"mergeScan":{"kind":13,"usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":0,"index":0.5},"sources":[{"source":{"name":"mergeScan","statements":["return operate((source, subscriber) => {\r\n    // The accumulated state.\r\n    let state = seed;\r\n\r\n    return mergeInternals(\r\n      source,\r\n      subscriber,\r\n      (value, index) => accumulator(state, value, index),\r\n      concurrent,\r\n      (value) => {\r\n        state = value;\r\n      },\r\n      false,\r\n      undefined,\r\n      () => (state = null!)\r\n    );\r\n  });"],"parameters":[{"name":"accumulator","type":"(acc: R, value: T, index: number) => ObservableInput<R>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"seed","type":"R","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"concurrent","initializer":"Infinity","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, R>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"R","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nApplies an accumulator function over the source Observable where the\r\naccumulator function itself returns an Observable, then each intermediate\r\nObservable returned is merged into the output Observable.\r\n\r\n<span class=\"informal\">It's like {@link scan}, but the Observables returned\r\nby the accumulator are merged into the outer Observable.</span>\r\n\r\nThe first parameter of the `mergeScan` is an `accumulator` function which is\r\nbeing called every time the source Observable emits a value. `mergeScan` will\r\nsubscribe to the value returned by the `accumulator` function and will emit\r\nvalues to the subscriber emitted by inner Observable.\r\n\r\nThe `accumulator` function is being called with three parameters passed to it:\r\n`acc`, `value` and `index`. The `acc` parameter is used as the state parameter\r\nwhose value is initially set to the `seed` parameter (the second parameter\r\npassed to the `mergeScan` operator).\r\n\r\n`mergeScan` internally keeps the value of the `acc` parameter: as long as the\r\nsource Observable emits without inner Observable emitting, the `acc` will be\r\nset to `seed`. The next time the inner Observable emits a value, `mergeScan`\r\nwill internally remember it and it will be passed to the `accumulator`\r\nfunction as `acc` parameter the next time source emits.\r\n\r\nThe `value` parameter of the `accumulator` function is the value emitted by the\r\nsource Observable, while the `index` is a number which represent the order of the\r\ncurrent emission by the source Observable. It starts with 0.\r\n\r\nThe last parameter to the `mergeScan` is the `concurrent` value which defaults\r\nto Infinity. It represents the maximum number of inner Observable subscriptions\r\nat a time.\r\n\r\n## Example\r\n\r\nCount the number of click events\r\n\r\n```ts\r\nimport { fromEvent, map, mergeScan, of } from 'rxjs';\r\n\r\nconst click$ = fromEvent(document, 'click');\r\nconst one$ = click$.pipe(map(() => 1));\r\nconst seed = 0;\r\nconst count$ = one$.pipe(\r\n  mergeScan((acc, one) => of(acc + one), seed)\r\n);\r\n\r\ncount$.subscribe(x => console.log(x));\r\n\r\n// Results:\r\n// 1\r\n// 2\r\n// 3\r\n// 4\r\n// ...and so on for each click\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link scan}"},{"kind":25,"tagName":"see","text":"{@link switchScan}"},{"kind":25,"tagName":"param","text":"{function(acc: R, value: T): Observable<R>} accumulator\r\nThe accumulator function called on each source value."},{"kind":25,"tagName":"param","text":"seed The initial accumulation value."},{"kind":25,"tagName":"param","text":"{number} [concurrent=Infinity] Maximum number of\r\ninput Observables being subscribed to concurrently."},{"kind":25,"tagName":"return","text":"A function that returns an Observable of the accumulated values."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[],"functionName":"mergeScan","modulePath":"..\\src\\internal\\operators\\mergeScan.ts"},"usabilityResult":{"index":0.5,"paramLengthComplexity":1,"paramSequenceComplexity":0}}]}},"usabilityResult":{"index":0.5,"paramLengthComplexity":1,"paramSequenceComplexity":0}},"..\\src\\internal\\operators\\mergeWith.ts":{"moduleComponents":{"mergeWith":{"kind":13,"usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":1,"index":1},"sources":[{"source":{"name":"mergeWith","statements":["return merge(...otherSources);"],"parameters":[{"name":"otherSources","type":"[...ObservableInputTuple<A>]","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":true}],"returnType":"OperatorFunction<T, T | A[number]>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"A","kind":39,"isConst":false,"constraint":"readonly unknown[]","variance":0}],"docs":[{"kind":24,"description":"\r\nMerge the values from all observables to a single observable result.\r\n\r\nCreates an observable, that when subscribed to, subscribes to the source\r\nobservable, and all other sources provided as arguments. All values from\r\nevery source are emitted from the resulting subscription.\r\n\r\nWhen all sources complete, the resulting observable will complete.\r\n\r\nWhen any source errors, the resulting observable will error.\r\n\r\n## Example\r\n\r\nJoining all outputs from multiple user input event streams\r\n\r\n```ts\r\nimport { fromEvent, map, mergeWith } from 'rxjs';\r\n\r\nconst clicks$ = fromEvent(document, 'click').pipe(map(() => 'click'));\r\nconst mousemoves$ = fromEvent(document, 'mousemove').pipe(map(() => 'mousemove'));\r\nconst dblclicks$ = fromEvent(document, 'dblclick').pipe(map(() => 'dblclick'));\r\n\r\nmousemoves$\r\n  .pipe(mergeWith(clicks$, dblclicks$))\r\n  .subscribe(x => console.log(x));\r\n\r\n// result (assuming user interactions)\r\n// 'mousemove'\r\n// 'mousemove'\r\n// 'mousemove'\r\n// 'click'\r\n// 'click'\r\n// 'dblclick'\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link merge}"},{"kind":25,"tagName":"param","text":"otherSources the sources to combine the current source with."},{"kind":25,"tagName":"return","text":"A function that returns an Observable that merges the values from\r\nall given Observables."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[],"functionName":"mergeWith","modulePath":"..\\src\\internal\\operators\\mergeWith.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},"..\\src\\internal\\operators\\min.ts":{"moduleComponents":{"min":{"kind":13,"usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":1,"index":1},"sources":[{"source":{"name":"min","statements":["return reduce(isFunction(comparer) ? (x, y) => (comparer(x, y) < 0 ? x : y) : (x, y) => (x < y ? x : y));"],"parameters":[{"name":"comparer","type":"(x: T, y: T) => number","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"MonoTypeOperatorFunction<T>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nThe Min operator operates on an Observable that emits numbers (or items that can be compared with a provided function),\r\nand when source Observable completes it emits a single item: the item with the smallest value.\r\n\r\n![](min.png)\r\n\r\n## Examples\r\n\r\nGet the minimal value of a series of numbers\r\n\r\n```ts\r\nimport { of, min } from 'rxjs';\r\n\r\nof(5, 4, 7, 2, 8)\r\n  .pipe(min())\r\n  .subscribe(x => console.log(x));\r\n\r\n// Outputs\r\n// 2\r\n```\r\n\r\nUse a comparer function to get the minimal item\r\n\r\n```ts\r\nimport { of, min } from 'rxjs';\r\n\r\nof(\r\n  { age: 7, name: 'Foo' },\r\n  { age: 5, name: 'Bar' },\r\n  { age: 9, name: 'Beer' }\r\n).pipe(\r\n  min((a, b) => a.age < b.age ? -1 : 1)\r\n)\r\n.subscribe(x => console.log(x.name));\r\n\r\n// Outputs\r\n// 'Bar'\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link max}"},{"kind":25,"tagName":"param","text":"{Function} [comparer] - Optional comparer function that it will use instead of its default to compare the\r\nvalue of two items."},{"kind":25,"tagName":"return","text":"A function that returns an Observable that emits item with the\r\nsmallest value."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[],"functionName":"min","modulePath":"..\\src\\internal\\operators\\min.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},"..\\src\\internal\\operators\\multicast.ts":{"moduleComponents":{"multicast":{"kind":13,"usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":1,"index":1},"sources":[{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nAn operator that creates a {@link ConnectableObservable}, that when connected,\r\nwith the `connect` method, will use the provided subject to multicast the values\r\nfrom the source to all consumers.\r\n","tags":[{"kind":25,"tagName":"param","text":"subject The subject to multicast through."},{"kind":25,"tagName":"return","text":"A function that returns a {@link ConnectableObservable}"},{"kind":25,"tagName":"deprecated","text":"Will be removed in v8. To create a connectable observable, use {@link connectable}.\r\nIf you're using {@link refCount} after `multicast`, use the {@link share} operator instead.\r\n`multicast(subject), refCount()` is equivalent to\r\n`share({ connector: () => subject, resetOnError: false, resetOnComplete: false, resetOnRefCountZero: false })`.\r\nDetails: https://rxjs.dev/deprecations/multicasting"}]}],"hasDeclareKeyword":false,"parameters":[{"name":"subject","type":"Subject<T>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"UnaryFunction<Observable<T>, ConnectableObservable<T>>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"multicast","modulePath":"..\\src\\internal\\operators\\multicast.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"O","kind":39,"isConst":false,"constraint":"ObservableInput<any>","variance":0}],"docs":[{"kind":24,"description":"\r\nBecause this is deprecated in favor of the {@link connect} operator, and was otherwise poorly documented,\r\nrather than duplicate the effort of documenting the same behavior, please see documentation for the\r\n{@link connect} operator.\r\n","tags":[{"kind":25,"tagName":"param","text":"subject The subject used to multicast."},{"kind":25,"tagName":"param","text":"selector A setup function to setup the multicast"},{"kind":25,"tagName":"return","text":"A function that returns an observable that mirrors the observable returned by the selector."},{"kind":25,"tagName":"deprecated","text":"Will be removed in v8. Use the {@link connect} operator instead.\r\n`multicast(subject, selector)` is equivalent to\r\n`connect(selector, { connector: () => subject })`.\r\nDetails: https://rxjs.dev/deprecations/multicasting"}]}],"hasDeclareKeyword":false,"parameters":[{"name":"subject","type":"Subject<T>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"selector","type":"(shared: Observable<T>) => O","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, ObservedValueOf<O>>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"multicast","modulePath":"..\\src\\internal\\operators\\multicast.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nAn operator that creates a {@link ConnectableObservable}, that when connected,\r\nwith the `connect` method, will use the provided subject to multicast the values\r\nfrom the source to all consumers.\r\n","tags":[{"kind":25,"tagName":"param","text":"subjectFactory A factory that will be called to create the subject. Passing a function here\r\nwill cause the underlying subject to be \"reset\" on error, completion, or refCounted unsubscription of\r\nthe source."},{"kind":25,"tagName":"return","text":"A function that returns a {@link ConnectableObservable}"},{"kind":25,"tagName":"deprecated","text":"Will be removed in v8. To create a connectable observable, use {@link connectable}.\r\nIf you're using {@link refCount} after `multicast`, use the {@link share} operator instead.\r\n`multicast(() => new BehaviorSubject('test')), refCount()` is equivalent to\r\n`share({ connector: () => new BehaviorSubject('test') })`.\r\nDetails: https://rxjs.dev/deprecations/multicasting"}]}],"hasDeclareKeyword":false,"parameters":[{"name":"subjectFactory","type":"() => Subject<T>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"UnaryFunction<Observable<T>, ConnectableObservable<T>>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"multicast","modulePath":"..\\src\\internal\\operators\\multicast.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"O","kind":39,"isConst":false,"constraint":"ObservableInput<any>","variance":0}],"docs":[{"kind":24,"description":"\r\nBecause this is deprecated in favor of the {@link connect} operator, and was otherwise poorly documented,\r\nrather than duplicate the effort of documenting the same behavior, please see documentation for the\r\n{@link connect} operator.\r\n","tags":[{"kind":25,"tagName":"param","text":"subjectFactory A factory that creates the subject used to multicast."},{"kind":25,"tagName":"param","text":"selector A function to setup the multicast and select the output."},{"kind":25,"tagName":"return","text":"A function that returns an observable that mirrors the observable returned by the selector."},{"kind":25,"tagName":"deprecated","text":"Will be removed in v8. Use the {@link connect} operator instead.\r\n`multicast(subjectFactory, selector)` is equivalent to\r\n`connect(selector, { connector: subjectFactory })`.\r\nDetails: https://rxjs.dev/deprecations/multicasting"}]}],"hasDeclareKeyword":false,"parameters":[{"name":"subjectFactory","type":"() => Subject<T>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"selector","type":"(shared: Observable<T>) => O","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, ObservedValueOf<O>>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"multicast","modulePath":"..\\src\\internal\\operators\\multicast.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},"..\\src\\internal\\operators\\observeOn.ts":{"moduleComponents":{"observeOn":{"kind":13,"usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":1,"index":1},"sources":[{"source":{"name":"observeOn","statements":["return operate((source, subscriber) => {\r\nsource.subscribe(\r\n  createOperatorSubscriber(\r\n    subscriber,\r\n    (value) => executeSchedule(subscriber, scheduler, () => subscriber.next(value), delay),\r\n    () => executeSchedule(subscriber, scheduler, () => subscriber.complete(), delay),\r\n    (err) => executeSchedule(subscriber, scheduler, () => subscriber.error(err), delay)\r\n  )\r\n);\r\n});"],"parameters":[{"name":"scheduler","type":"SchedulerLike","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"delay","initializer":"0","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"MonoTypeOperatorFunction<T>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nRe-emits all notifications from source Observable with specified scheduler.\r\n\r\n<span class=\"informal\">Ensure a specific scheduler is used, from outside of an Observable.</span>\r\n\r\n`observeOn` is an operator that accepts a scheduler as a first parameter, which will be used to reschedule\r\nnotifications emitted by the source Observable. It might be useful, if you do not have control over\r\ninternal scheduler of a given Observable, but want to control when its values are emitted nevertheless.\r\n\r\nReturned Observable emits the same notifications (nexted values, complete and error events) as the source Observable,\r\nbut rescheduled with provided scheduler. Note that this doesn't mean that source Observables internal\r\nscheduler will be replaced in any way. Original scheduler still will be used, but when the source Observable emits\r\nnotification, it will be immediately scheduled again - this time with scheduler passed to `observeOn`.\r\nAn anti-pattern would be calling `observeOn` on Observable that emits lots of values synchronously, to split\r\nthat emissions into asynchronous chunks. For this to happen, scheduler would have to be passed into the source\r\nObservable directly (usually into the operator that creates it). `observeOn` simply delays notifications a\r\nlittle bit more, to ensure that they are emitted at expected moments.\r\n\r\nAs a matter of fact, `observeOn` accepts second parameter, which specifies in milliseconds with what delay notifications\r\nwill be emitted. The main difference between {@link delay} operator and `observeOn` is that `observeOn`\r\nwill delay all notifications - including error notifications - while `delay` will pass through error\r\nfrom source Observable immediately when it is emitted. In general it is highly recommended to use `delay` operator\r\nfor any kind of delaying of values in the stream, while using `observeOn` to specify which scheduler should be used\r\nfor notification emissions in general.\r\n\r\n## Example\r\n\r\nEnsure values in subscribe are called just before browser repaint\r\n\r\n```ts\r\nimport { interval, observeOn, animationFrameScheduler } from 'rxjs';\r\n\r\nconst someDiv = document.createElement('div');\r\nsomeDiv.style.cssText = 'width: 200px;background: #09c';\r\ndocument.body.appendChild(someDiv);\r\nconst intervals = interval(10);      // Intervals are scheduled\r\n                                     // with async scheduler by default...\r\nintervals.pipe(\r\n  observeOn(animationFrameScheduler) // ...but we will observe on animationFrame\r\n)                                    // scheduler to ensure smooth animation.\r\n.subscribe(val => {\r\n  someDiv.style.height = val + 'px';\r\n});\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link delay}"},{"kind":25,"tagName":"param","text":"scheduler Scheduler that will be used to reschedule notifications from source Observable."},{"kind":25,"tagName":"param","text":"delay Number of milliseconds that states with what delay every notification should be rescheduled."},{"kind":25,"tagName":"return","text":"A function that returns an Observable that emits the same\r\nnotifications as the source Observable, but with provided scheduler."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[],"functionName":"observeOn","modulePath":"..\\src\\internal\\operators\\observeOn.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},"..\\src\\internal\\operators\\onErrorResumeNextWith.ts":{"moduleComponents":{"onErrorResumeNextWith":{"kind":13,"usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":1,"index":1},"sources":[{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"A","kind":39,"isConst":false,"constraint":"readonly unknown[]","variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"sources","type":"[...ObservableInputTuple<A>]","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, T | A[number]>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"onErrorResumeNextWith","modulePath":"..\\src\\internal\\operators\\onErrorResumeNextWith.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"A","kind":39,"isConst":false,"constraint":"readonly unknown[]","variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"sources","type":"[...ObservableInputTuple<A>]","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":true}],"returnType":"OperatorFunction<T, T | A[number]>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"onErrorResumeNextWith","modulePath":"..\\src\\internal\\operators\\onErrorResumeNextWith.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},"..\\src\\internal\\operators\\pairwise.ts":{"moduleComponents":{"pairwise":{"kind":13,"usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":1,"index":1},"sources":[{"source":{"name":"pairwise","statements":["return operate((source, subscriber) => {\r\nlet prev: T;\r\nlet hasPrev = false;\r\nsource.subscribe(\r\n  createOperatorSubscriber(subscriber, (value) => {\r\n    const p = prev;\r\n    prev = value;\r\n    hasPrev && subscriber.next([p, value]);\r\n    hasPrev = true;\r\n  })\r\n);\r\n});"],"parameters":[],"returnType":"OperatorFunction<T, [T, T]>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nGroups pairs of consecutive emissions together and emits them as an array of\r\ntwo values.\r\n\r\n<span class=\"informal\">Puts the current value and previous value together as\r\nan array, and emits that.</span>\r\n\r\n![](pairwise.png)\r\n\r\nThe Nth emission from the source Observable will cause the output Observable\r\nto emit an array [(N-1)th, Nth] of the previous and the current value, as a\r\npair. For this reason, `pairwise` emits on the second and subsequent\r\nemissions from the source Observable, but not on the first emission, because\r\nthere is no previous value in that case.\r\n\r\n## Example\r\n\r\nOn every click (starting from the second), emit the relative distance to the previous click\r\n\r\n```ts\r\nimport { fromEvent, pairwise, map } from 'rxjs';\r\n\r\nconst clicks = fromEvent<PointerEvent>(document, 'click');\r\nconst pairs = clicks.pipe(pairwise());\r\nconst distance = pairs.pipe(\r\n  map(([first, second]) => {\r\n    const x0 = first.clientX;\r\n    const y0 = first.clientY;\r\n    const x1 = second.clientX;\r\n    const y1 = second.clientY;\r\n    return Math.sqrt(Math.pow(x0 - x1, 2) + Math.pow(y0 - y1, 2));\r\n  })\r\n);\r\n\r\ndistance.subscribe(x => console.log(x));\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link buffer}"},{"kind":25,"tagName":"see","text":"{@link bufferCount}"},{"kind":25,"tagName":"return","text":"A function that returns an Observable of pairs (as arrays) of\r\nconsecutive values from the source Observable."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[],"functionName":"pairwise","modulePath":"..\\src\\internal\\operators\\pairwise.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},"..\\src\\internal\\operators\\pluck.ts":{"moduleComponents":{"pluck":{"kind":13,"usabilityResult":{"paramLengthComplexity":0.6941252240969898,"paramSequenceComplexity":0.25,"index":0.4720626120484949},"sources":[{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"K1","kind":39,"isConst":false,"constraint":"keyof T","variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Use {@link map} and optional chaining: `pluck('foo', 'bar')` is `map(x => x?.foo?.bar)`. Will be removed in v8."}]}],"hasDeclareKeyword":false,"parameters":[{"name":"k1","type":"K1","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, T[K1]>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"pluck","modulePath":"..\\src\\internal\\operators\\pluck.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"K1","kind":39,"isConst":false,"constraint":"keyof T","variance":0},{"name":"K2","kind":39,"isConst":false,"constraint":"keyof T[K1]","variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Use {@link map} and optional chaining: `pluck('foo', 'bar')` is `map(x => x?.foo?.bar)`. Will be removed in v8."}]}],"hasDeclareKeyword":false,"parameters":[{"name":"k1","type":"K1","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"k2","type":"K2","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, T[K1][K2]>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"pluck","modulePath":"..\\src\\internal\\operators\\pluck.ts"},"usabilityResult":{"index":0.5,"paramLengthComplexity":1,"paramSequenceComplexity":0}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"K1","kind":39,"isConst":false,"constraint":"keyof T","variance":0},{"name":"K2","kind":39,"isConst":false,"constraint":"keyof T[K1]","variance":0},{"name":"K3","kind":39,"isConst":false,"constraint":"keyof T[K1][K2]","variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Use {@link map} and optional chaining: `pluck('foo', 'bar')` is `map(x => x?.foo?.bar)`. Will be removed in v8."}]}],"hasDeclareKeyword":false,"parameters":[{"name":"k1","type":"K1","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"k2","type":"K2","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"k3","type":"K3","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, T[K1][K2][K3]>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"pluck","modulePath":"..\\src\\internal\\operators\\pluck.ts"},"usabilityResult":{"index":0.5,"paramLengthComplexity":1,"paramSequenceComplexity":0}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"K1","kind":39,"isConst":false,"constraint":"keyof T","variance":0},{"name":"K2","kind":39,"isConst":false,"constraint":"keyof T[K1]","variance":0},{"name":"K3","kind":39,"isConst":false,"constraint":"keyof T[K1][K2]","variance":0},{"name":"K4","kind":39,"isConst":false,"constraint":"keyof T[K1][K2][K3]","variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Use {@link map} and optional chaining: `pluck('foo', 'bar')` is `map(x => x?.foo?.bar)`. Will be removed in v8."}]}],"hasDeclareKeyword":false,"parameters":[{"name":"k1","type":"K1","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"k2","type":"K2","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"k3","type":"K3","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"k4","type":"K4","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, T[K1][K2][K3][K4]>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"pluck","modulePath":"..\\src\\internal\\operators\\pluck.ts"},"usabilityResult":{"index":0.5,"paramLengthComplexity":1,"paramSequenceComplexity":0}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"K1","kind":39,"isConst":false,"constraint":"keyof T","variance":0},{"name":"K2","kind":39,"isConst":false,"constraint":"keyof T[K1]","variance":0},{"name":"K3","kind":39,"isConst":false,"constraint":"keyof T[K1][K2]","variance":0},{"name":"K4","kind":39,"isConst":false,"constraint":"keyof T[K1][K2][K3]","variance":0},{"name":"K5","kind":39,"isConst":false,"constraint":"keyof T[K1][K2][K3][K4]","variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Use {@link map} and optional chaining: `pluck('foo', 'bar')` is `map(x => x?.foo?.bar)`. Will be removed in v8."}]}],"hasDeclareKeyword":false,"parameters":[{"name":"k1","type":"K1","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"k2","type":"K2","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"k3","type":"K3","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"k4","type":"K4","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"k5","type":"K5","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, T[K1][K2][K3][K4][K5]>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"pluck","modulePath":"..\\src\\internal\\operators\\pluck.ts"},"usabilityResult":{"index":0.18393972058572117,"paramLengthComplexity":0.36787944117144233,"paramSequenceComplexity":0}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"K1","kind":39,"isConst":false,"constraint":"keyof T","variance":0},{"name":"K2","kind":39,"isConst":false,"constraint":"keyof T[K1]","variance":0},{"name":"K3","kind":39,"isConst":false,"constraint":"keyof T[K1][K2]","variance":0},{"name":"K4","kind":39,"isConst":false,"constraint":"keyof T[K1][K2][K3]","variance":0},{"name":"K5","kind":39,"isConst":false,"constraint":"keyof T[K1][K2][K3][K4]","variance":0},{"name":"K6","kind":39,"isConst":false,"constraint":"keyof T[K1][K2][K3][K4][K5]","variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Use {@link map} and optional chaining: `pluck('foo', 'bar')` is `map(x => x?.foo?.bar)`. Will be removed in v8."}]}],"hasDeclareKeyword":false,"parameters":[{"name":"k1","type":"K1","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"k2","type":"K2","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"k3","type":"K3","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"k4","type":"K4","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"k5","type":"K5","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"k6","type":"K6","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, T[K1][K2][K3][K4][K5][K6]>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"pluck","modulePath":"..\\src\\internal\\operators\\pluck.ts"},"usabilityResult":{"index":0.06766764161830635,"paramLengthComplexity":0.1353352832366127,"paramSequenceComplexity":0}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"K1","kind":39,"isConst":false,"constraint":"keyof T","variance":0},{"name":"K2","kind":39,"isConst":false,"constraint":"keyof T[K1]","variance":0},{"name":"K3","kind":39,"isConst":false,"constraint":"keyof T[K1][K2]","variance":0},{"name":"K4","kind":39,"isConst":false,"constraint":"keyof T[K1][K2][K3]","variance":0},{"name":"K5","kind":39,"isConst":false,"constraint":"keyof T[K1][K2][K3][K4]","variance":0},{"name":"K6","kind":39,"isConst":false,"constraint":"keyof T[K1][K2][K3][K4][K5]","variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Use {@link map} and optional chaining: `pluck('foo', 'bar')` is `map(x => x?.foo?.bar)`. Will be removed in v8."}]}],"hasDeclareKeyword":false,"parameters":[{"name":"k1","type":"K1","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"k2","type":"K2","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"k3","type":"K3","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"k4","type":"K4","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"k5","type":"K5","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"k6","type":"K6","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"rest","type":"string[]","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":true}],"returnType":"OperatorFunction<T, unknown>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"pluck","modulePath":"..\\src\\internal\\operators\\pluck.ts"},"usabilityResult":{"index":0.024893534183931972,"paramLengthComplexity":0.049787068367863944,"paramSequenceComplexity":0}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Use {@link map} and optional chaining: `pluck('foo', 'bar')` is `map(x => x?.foo?.bar)`. Will be removed in v8."}]}],"hasDeclareKeyword":false,"parameters":[{"name":"properties","type":"string[]","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":true}],"returnType":"OperatorFunction<T, unknown>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"pluck","modulePath":"..\\src\\internal\\operators\\pluck.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]}},"usabilityResult":{"index":0.4720626120484949,"paramLengthComplexity":0.6941252240969898,"paramSequenceComplexity":0.25}},"..\\src\\internal\\operators\\publish.ts":{"moduleComponents":{"publish":{"kind":13,"usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":1,"index":1},"sources":[{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nReturns a connectable observable that, when connected, will multicast\r\nall values through a single underlying {@link Subject} instance.\r\n","tags":[{"kind":25,"tagName":"deprecated","text":"Will be removed in v8. To create a connectable observable, use {@link connectable}.\r\n`source.pipe(publish())` is equivalent to\r\n`connectable(source, { connector: () => new Subject(), resetOnDisconnect: false })`.\r\nIf you're using {@link refCount} after `publish`, use {@link share} operator instead.\r\n`source.pipe(publish(), refCount())` is equivalent to\r\n`source.pipe(share({ resetOnError: false, resetOnComplete: false, resetOnRefCountZero: false }))`.\r\nDetails: https://rxjs.dev/deprecations/multicasting"}]}],"hasDeclareKeyword":false,"parameters":[],"returnType":"UnaryFunction<Observable<T>, ConnectableObservable<T>>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"publish","modulePath":"..\\src\\internal\\operators\\publish.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"O","kind":39,"isConst":false,"constraint":"ObservableInput<any>","variance":0}],"docs":[{"kind":24,"description":"\r\nReturns an observable, that when subscribed to, creates an underlying {@link Subject},\r\nprovides an observable view of it to a `selector` function, takes the observable result of\r\nthat selector function and subscribes to it, sending its values to the consumer, _then_ connects\r\nthe subject to the original source.\r\n","tags":[{"kind":25,"tagName":"param","text":"selector A function used to setup multicasting prior to automatic connection."},{"kind":25,"tagName":"deprecated","text":"Will be removed in v8. Use the {@link connect} operator instead.\r\n`publish(selector)` is equivalent to `connect(selector)`.\r\nDetails: https://rxjs.dev/deprecations/multicasting"}]}],"hasDeclareKeyword":false,"parameters":[{"name":"selector","type":"(shared: Observable<T>) => O","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, ObservedValueOf<O>>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"publish","modulePath":"..\\src\\internal\\operators\\publish.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},"..\\src\\internal\\operators\\publishBehavior.ts":{"moduleComponents":{"publishBehavior":{"kind":13,"usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":1,"index":1},"sources":[{"source":{"name":"publishBehavior","statements":["return (source) => {\r\nconst subject = new BehaviorSubject<T>(initialValue);\r\nreturn new ConnectableObservable(source, () => subject);\r\n};"],"parameters":[{"name":"initialValue","type":"T","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"UnaryFunction<Observable<T>, ConnectableObservable<T>>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nCreates a {@link ConnectableObservable} that utilizes a {@link BehaviorSubject}.\r\n","tags":[{"kind":25,"tagName":"param","text":"initialValue The initial value passed to the {@link BehaviorSubject}."},{"kind":25,"tagName":"return","text":"A function that returns a {@link ConnectableObservable}"},{"kind":25,"tagName":"deprecated","text":"Will be removed in v8. To create a connectable observable that uses a\r\n{@link BehaviorSubject} under the hood, use {@link connectable}.\r\n`source.pipe(publishBehavior(initValue))` is equivalent to\r\n`connectable(source, { connector: () => new BehaviorSubject(initValue), resetOnDisconnect: false })`.\r\nIf you're using {@link refCount} after `publishBehavior`, use the {@link share} operator instead.\r\n`source.pipe(publishBehavior(initValue), refCount())` is equivalent to\r\n`source.pipe(share({ connector: () => new BehaviorSubject(initValue), resetOnError: false, resetOnComplete: false, resetOnRefCountZero: false  }))`.\r\nDetails: https://rxjs.dev/deprecations/multicasting"}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[],"functionName":"publishBehavior","modulePath":"..\\src\\internal\\operators\\publishBehavior.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},"..\\src\\internal\\operators\\publishLast.ts":{"moduleComponents":{"publishLast":{"kind":13,"usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":1,"index":1},"sources":[{"source":{"name":"publishLast","statements":["return (source) => {\r\nconst subject = new AsyncSubject<T>();\r\nreturn new ConnectableObservable(source, () => subject);\r\n};"],"parameters":[],"returnType":"UnaryFunction<Observable<T>, ConnectableObservable<T>>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nReturns a connectable observable sequence that shares a single subscription to the\r\nunderlying sequence containing only the last notification.\r\n\r\n![](publishLast.png)\r\n\r\nSimilar to {@link publish}, but it waits until the source observable completes and stores\r\nthe last emitted value.\r\nSimilarly to {@link publishReplay} and {@link publishBehavior}, this keeps storing the last\r\nvalue even if it has no more subscribers. If subsequent subscriptions happen, they will\r\nimmediately get that last stored value and complete.\r\n\r\n## Example\r\n\r\n```ts\r\nimport { ConnectableObservable, interval, publishLast, tap, take } from 'rxjs';\r\n\r\nconst connectable = <ConnectableObservable<number>>interval(1000)\r\n  .pipe(\r\n    tap(x => console.log('side effect', x)),\r\n    take(3),\r\n    publishLast()\r\n  );\r\n\r\nconnectable.subscribe({\r\n  next: x => console.log('Sub. A', x),\r\n  error: err => console.log('Sub. A Error', err),\r\n  complete: () => console.log('Sub. A Complete')\r\n});\r\n\r\nconnectable.subscribe({\r\n  next: x => console.log('Sub. B', x),\r\n  error: err => console.log('Sub. B Error', err),\r\n  complete: () => console.log('Sub. B Complete')\r\n});\r\n\r\nconnectable.connect();\r\n\r\n// Results:\r\n// 'side effect 0'   - after one second\r\n// 'side effect 1'   - after two seconds\r\n// 'side effect 2'   - after three seconds\r\n// 'Sub. A 2'        - immediately after 'side effect 2'\r\n// 'Sub. B 2'\r\n// 'Sub. A Complete'\r\n// 'Sub. B Complete'\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link ConnectableObservable}"},{"kind":25,"tagName":"see","text":"{@link publish}"},{"kind":25,"tagName":"see","text":"{@link publishReplay}"},{"kind":25,"tagName":"see","text":"{@link publishBehavior}"},{"kind":25,"tagName":"return","text":"A function that returns an Observable that emits elements of a\r\nsequence produced by multicasting the source sequence."},{"kind":25,"tagName":"deprecated","text":"Will be removed in v8. To create a connectable observable with an\r\n{@link AsyncSubject} under the hood, use {@link connectable}.\r\n`source.pipe(publishLast())` is equivalent to\r\n`connectable(source, { connector: () => new AsyncSubject(), resetOnDisconnect: false })`.\r\nIf you're using {@link refCount} after `publishLast`, use the {@link share} operator instead.\r\n`source.pipe(publishLast(), refCount())` is equivalent to\r\n`source.pipe(share({ connector: () => new AsyncSubject(), resetOnError: false, resetOnComplete: false, resetOnRefCountZero: false }))`.\r\nDetails: https://rxjs.dev/deprecations/multicasting"}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[],"functionName":"publishLast","modulePath":"..\\src\\internal\\operators\\publishLast.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},"..\\src\\internal\\operators\\publishReplay.ts":{"moduleComponents":{"publishReplay":{"kind":13,"usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":0.5,"index":0.75},"sources":[{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nCreates a {@link ConnectableObservable} that uses a {@link ReplaySubject}\r\ninternally.\r\n","tags":[{"kind":25,"tagName":"param","text":"bufferSize The buffer size for the underlying {@link ReplaySubject}."},{"kind":25,"tagName":"param","text":"windowTime The window time for the underlying {@link ReplaySubject}."},{"kind":25,"tagName":"param","text":"timestampProvider The timestamp provider for the underlying {@link ReplaySubject}."},{"kind":25,"tagName":"deprecated","text":"Will be removed in v8. To create a connectable observable that uses a\r\n{@link ReplaySubject} under the hood, use {@link connectable}.\r\n`source.pipe(publishReplay(size, time, scheduler))` is equivalent to\r\n`connectable(source, { connector: () => new ReplaySubject(size, time, scheduler), resetOnDisconnect: false })`.\r\nIf you're using {@link refCount} after `publishReplay`, use the {@link share} operator instead.\r\n`publishReplay(size, time, scheduler), refCount()` is equivalent to\r\n`share({ connector: () => new ReplaySubject(size, time, scheduler), resetOnError: false, resetOnComplete: false, resetOnRefCountZero: false })`.\r\nDetails: https://rxjs.dev/deprecations/multicasting"}]}],"hasDeclareKeyword":false,"parameters":[{"name":"bufferSize","type":"number","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"windowTime","type":"number","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"timestampProvider","type":"TimestampProvider","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"MonoTypeOperatorFunction<T>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"publishReplay","modulePath":"..\\src\\internal\\operators\\publishReplay.ts"},"usabilityResult":{"index":0.75,"paramLengthComplexity":1,"paramSequenceComplexity":0.5}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"O","kind":39,"isConst":false,"constraint":"ObservableInput<any>","variance":0}],"docs":[{"kind":24,"description":"\r\nCreates an observable, that when subscribed to, will create a {@link ReplaySubject},\r\nand pass an observable from it (using [asObservable](api/index/class/Subject#asObservable)) to\r\nthe `selector` function, which then returns an observable that is subscribed to before\r\n\"connecting\" the source to the internal `ReplaySubject`.\r\n\r\nSince this is deprecated, for additional details see the documentation for {@link connect}.\r\n","tags":[{"kind":25,"tagName":"param","text":"bufferSize The buffer size for the underlying {@link ReplaySubject}."},{"kind":25,"tagName":"param","text":"windowTime The window time for the underlying {@link ReplaySubject}."},{"kind":25,"tagName":"param","text":"selector A function used to setup the multicast."},{"kind":25,"tagName":"param","text":"timestampProvider The timestamp provider for the underlying {@link ReplaySubject}."},{"kind":25,"tagName":"deprecated","text":"Will be removed in v8. Use the {@link connect} operator instead.\r\n`source.pipe(publishReplay(size, window, selector, scheduler))` is equivalent to\r\n`source.pipe(connect(selector, { connector: () => new ReplaySubject(size, window, scheduler) }))`.\r\nDetails: https://rxjs.dev/deprecations/multicasting"}]}],"hasDeclareKeyword":false,"parameters":[{"name":"bufferSize","type":"number | undefined","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"windowTime","type":"number | undefined","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"selector","type":"(shared: Observable<T>) => O","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"timestampProvider","type":"TimestampProvider","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, ObservedValueOf<O>>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"publishReplay","modulePath":"..\\src\\internal\\operators\\publishReplay.ts"},"usabilityResult":{"index":0.8333333333333334,"paramLengthComplexity":1,"paramSequenceComplexity":0.6666666666666667}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"O","kind":39,"isConst":false,"constraint":"ObservableInput<any>","variance":0}],"docs":[{"kind":24,"description":"\r\nCreates a {@link ConnectableObservable} that uses a {@link ReplaySubject}\r\ninternally.\r\n","tags":[{"kind":25,"tagName":"param","text":"bufferSize The buffer size for the underlying {@link ReplaySubject}."},{"kind":25,"tagName":"param","text":"windowTime The window time for the underlying {@link ReplaySubject}."},{"kind":25,"tagName":"param","text":"selector Passing `undefined` here determines that this operator will return a {@link ConnectableObservable}."},{"kind":25,"tagName":"param","text":"timestampProvider The timestamp provider for the underlying {@link ReplaySubject}."},{"kind":25,"tagName":"deprecated","text":"Will be removed in v8. To create a connectable observable that uses a\r\n{@link ReplaySubject} under the hood, use {@link connectable}.\r\n`source.pipe(publishReplay(size, time, scheduler))` is equivalent to\r\n`connectable(source, { connector: () => new ReplaySubject(size, time, scheduler), resetOnDisconnect: false })`.\r\nIf you're using {@link refCount} after `publishReplay`, use the {@link share} operator instead.\r\n`publishReplay(size, time, scheduler), refCount()` is equivalent to\r\n`share({ connector: () => new ReplaySubject(size, time, scheduler), resetOnError: false, resetOnComplete: false, resetOnRefCountZero: false })`.\r\nDetails: https://rxjs.dev/deprecations/multicasting"}]}],"hasDeclareKeyword":false,"parameters":[{"name":"bufferSize","type":"number | undefined","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"windowTime","type":"number | undefined","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"selector","type":"undefined","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"timestampProvider","type":"TimestampProvider","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, ObservedValueOf<O>>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"publishReplay","modulePath":"..\\src\\internal\\operators\\publishReplay.ts"},"usabilityResult":{"index":0.6666666666666667,"paramLengthComplexity":1,"paramSequenceComplexity":0.33333333333333337}}]}},"usabilityResult":{"index":0.75,"paramLengthComplexity":1,"paramSequenceComplexity":0.5}},"..\\src\\internal\\operators\\raceWith.ts":{"moduleComponents":{"raceWith":{"kind":13,"usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":1,"index":1},"sources":[{"source":{"name":"raceWith","statements":["return !otherSources.length\r\n? identity\r\n: operate((source, subscriber) => {\r\n    raceInit<T | A[number]>([source, ...otherSources])(subscriber);\r\n  });"],"parameters":[{"name":"otherSources","type":"[...ObservableInputTuple<A>]","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":true}],"returnType":"OperatorFunction<T, T | A[number]>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"A","kind":39,"isConst":false,"constraint":"readonly unknown[]","variance":0}],"docs":[{"kind":24,"description":"\r\nCreates an Observable that mirrors the first source Observable to emit a next,\r\nerror or complete notification from the combination of the Observable to which\r\nthe operator is applied and supplied Observables.\r\n\r\n## Example\r\n\r\n```ts\r\nimport { interval, map, raceWith } from 'rxjs';\r\n\r\nconst obs1 = interval(7000).pipe(map(() => 'slow one'));\r\nconst obs2 = interval(3000).pipe(map(() => 'fast one'));\r\nconst obs3 = interval(5000).pipe(map(() => 'medium one'));\r\n\r\nobs1\r\n  .pipe(raceWith(obs2, obs3))\r\n  .subscribe(winner => console.log(winner));\r\n\r\n// Outputs\r\n// a series of 'fast one'\r\n```\r\n","tags":[{"kind":25,"tagName":"param","text":"otherSources Sources used to race for which Observable emits first."},{"kind":25,"tagName":"return","text":"A function that returns an Observable that mirrors the output of the\r\nfirst Observable to emit an item."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[],"functionName":"raceWith","modulePath":"..\\src\\internal\\operators\\raceWith.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},"..\\src\\internal\\operators\\reduce.ts":{"moduleComponents":{"reduce":{"kind":13,"usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":0.6666666666666666,"index":0.8333333333333333},"sources":[{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"V","kind":39,"isConst":false,"variance":0},{"name":"A","kind":39,"isConst":false,"default":"V","variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"accumulator","type":"(acc: A | V, value: V, index: number) => A","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<V, V | A>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"reduce","modulePath":"..\\src\\internal\\operators\\reduce.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"V","kind":39,"isConst":false,"variance":0},{"name":"A","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"accumulator","type":"(acc: A, value: V, index: number) => A","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"seed","type":"A","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<V, A>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"reduce","modulePath":"..\\src\\internal\\operators\\reduce.ts"},"usabilityResult":{"index":0.5,"paramLengthComplexity":1,"paramSequenceComplexity":0}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"V","kind":39,"isConst":false,"variance":0},{"name":"A","kind":39,"isConst":false,"variance":0},{"name":"S","kind":39,"isConst":false,"default":"A","variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"accumulator","type":"(acc: A | S, value: V, index: number) => A","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"seed","type":"S","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<V, A>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"reduce","modulePath":"..\\src\\internal\\operators\\reduce.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]}},"usabilityResult":{"index":0.8333333333333333,"paramLengthComplexity":1,"paramSequenceComplexity":0.6666666666666666}},"..\\src\\internal\\operators\\repeat.ts":{"moduleComponents":{"repeat":{"kind":13,"usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":1,"index":1},"sources":[{"source":{"name":"repeat","statements":[{"isExported":false,"isDefaultExport":false,"hasDeclareKeyword":false,"docs":[],"kind":41,"declarationKind":"let","declarations":[{"name":"count","initializer":"Infinity","hasExclamationToken":false,"kind":40}]},{"isExported":false,"isDefaultExport":false,"hasDeclareKeyword":false,"docs":[],"kind":41,"declarationKind":"let","declarations":[{"name":"delay","type":"RepeatConfig['delay']","hasExclamationToken":false,"kind":40}]},"if (countOrConfig != null) {\r\nif (typeof countOrConfig === 'object') {\r\n  ({ count = Infinity, delay } = countOrConfig);\r\n} else {\r\n  count = countOrConfig;\r\n}\r\n}","return count <= 0\r\n    ? () => EMPTY\r\n    : operate((source, subscriber) => {\r\n        let soFar = 0;\r\n        let sourceSub: Subscription | null;\r\n\r\n        const resubscribe = () => {\r\n          sourceSub?.unsubscribe();\r\n          sourceSub = null;\r\n          if (delay != null) {\r\n            const notifier = typeof delay === 'number' ? timer(delay) : innerFrom(delay(soFar));\r\n            const notifierSubscriber = createOperatorSubscriber(subscriber, () => {\r\n              notifierSubscriber.unsubscribe();\r\n              subscribeToSource();\r\n            });\r\n            notifier.subscribe(notifierSubscriber);\r\n          } else {\r\n            subscribeToSource();\r\n          }\r\n        };\r\n\r\n        const subscribeToSource = () => {\r\n          let syncUnsub = false;\r\n          sourceSub = source.subscribe(\r\n            createOperatorSubscriber(subscriber, undefined, () => {\r\n              if (++soFar < count) {\r\n                if (sourceSub) {\r\n                  resubscribe();\r\n                } else {\r\n                  syncUnsub = true;\r\n                }\r\n              } else {\r\n                subscriber.complete();\r\n              }\r\n            })\r\n          );\r\n\r\n          if (syncUnsub) {\r\n            resubscribe();\r\n          }\r\n        };\r\n\r\n        subscribeToSource();\r\n      });"],"parameters":[{"name":"countOrConfig","type":"number | RepeatConfig","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"MonoTypeOperatorFunction<T>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nReturns an Observable that will resubscribe to the source stream when the source stream completes.\r\n\r\n<span class=\"informal\">Repeats all values emitted on the source. It's like {@link retry}, but for non error cases.</span>\r\n\r\n![](repeat.png)\r\n\r\nRepeat will output values from a source until the source completes, then it will resubscribe to the\r\nsource a specified number of times, with a specified delay. Repeat can be particularly useful in\r\ncombination with closing operators like {@link take}, {@link takeUntil}, {@link first}, or {@link takeWhile},\r\nas it can be used to restart a source again from scratch.\r\n\r\nRepeat is very similar to {@link retry}, where {@link retry} will resubscribe to the source in the error case, but\r\n`repeat` will resubscribe if the source completes.\r\n\r\nNote that `repeat` will _not_ catch errors. Use {@link retry} for that.\r\n\r\n- `repeat(0)` returns an empty observable\r\n- `repeat()` will repeat forever\r\n- `repeat({ delay: 200 })` will repeat forever, with a delay of 200ms between repetitions.\r\n- `repeat({ count: 2, delay: 400 })` will repeat twice, with a delay of 400ms between repetitions.\r\n- `repeat({ delay: (count) => timer(count * 1000) })` will repeat forever, but will have a delay that grows by one second for each repetition.\r\n\r\n## Example\r\n\r\nRepeat a message stream\r\n\r\n```ts\r\nimport { of, repeat } from 'rxjs';\r\n\r\nconst source = of('Repeat message');\r\nconst result = source.pipe(repeat(3));\r\n\r\nresult.subscribe(x => console.log(x));\r\n\r\n// Results\r\n// 'Repeat message'\r\n// 'Repeat message'\r\n// 'Repeat message'\r\n```\r\n\r\nRepeat 3 values, 2 times\r\n\r\n```ts\r\nimport { interval, take, repeat } from 'rxjs';\r\n\r\nconst source = interval(1000);\r\nconst result = source.pipe(take(3), repeat(2));\r\n\r\nresult.subscribe(x => console.log(x));\r\n\r\n// Results every second\r\n// 0\r\n// 1\r\n// 2\r\n// 0\r\n// 1\r\n// 2\r\n```\r\n\r\nDefining two complex repeats with delays on the same source.\r\nNote that the second repeat cannot be called until the first\r\nrepeat as exhausted it's count.\r\n\r\n```ts\r\nimport { defer, of, repeat } from 'rxjs';\r\n\r\nconst source = defer(() => {\r\n   return of(`Hello, it is ${new Date()}`)\r\n});\r\n\r\nsource.pipe(\r\n   // Repeat 3 times with a delay of 1 second between repetitions\r\n   repeat({\r\n     count: 3,\r\n     delay: 1000,\r\n   }),\r\n\r\n   // *Then* repeat forever, but with an exponential step-back\r\n   // maxing out at 1 minute.\r\n   repeat({\r\n     delay: (count) => timer(Math.min(60000, 2 ^ count * 1000))\r\n   })\r\n)\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link repeatWhen}"},{"kind":25,"tagName":"see","text":"{@link retry}"},{"kind":25,"tagName":"param","text":"count The number of times the source Observable items are repeated, a count of 0 will yield\r\nan empty Observable."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[],"functionName":"repeat","modulePath":"..\\src\\internal\\operators\\repeat.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},"..\\src\\internal\\operators\\repeatWhen.ts":{"moduleComponents":{"repeatWhen":{"kind":13,"usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":1,"index":1},"sources":[{"source":{"name":"repeatWhen","statements":["return operate((source, subscriber) => {\r\n    let innerSub: Subscription | null;\r\n    let syncResub = false;\r\n    let completions$: Subject<void>;\r\n    let isNotifierComplete = false;\r\n    let isMainComplete = false;\r\n\r\n    /**\r\n     * Checks to see if we can complete the result, completes it, and returns `true` if it was completed.\r\n     */\r\n    const checkComplete = () => isMainComplete && isNotifierComplete && (subscriber.complete(), true);\r\n    /**\r\n     * Gets the subject to send errors through. If it doesn't exist,\r\n     * we know we need to setup the notifier.\r\n     */\r\n    const getCompletionSubject = () => {\r\n      if (!completions$) {\r\n        completions$ = new Subject();\r\n\r\n        // If the call to `notifier` throws, it will be caught by the OperatorSubscriber\r\n        // In the main subscription -- in `subscribeForRepeatWhen`.\r\n        innerFrom(notifier(completions$)).subscribe(\r\n          createOperatorSubscriber(\r\n            subscriber,\r\n            () => {\r\n              if (innerSub) {\r\n                subscribeForRepeatWhen();\r\n              } else {\r\n                // If we don't have an innerSub yet, that's because the inner subscription\r\n                // call hasn't even returned yet. We've arrived here synchronously.\r\n                // So we flag that we want to resub, such that we can ensure finalization\r\n                // happens before we resubscribe.\r\n                syncResub = true;\r\n              }\r\n            },\r\n            () => {\r\n              isNotifierComplete = true;\r\n              checkComplete();\r\n            }\r\n          )\r\n        );\r\n      }\r\n      return completions$;\r\n    };\r\n\r\n    const subscribeForRepeatWhen = () => {\r\n      isMainComplete = false;\r\n\r\n      innerSub = source.subscribe(\r\n        createOperatorSubscriber(subscriber, undefined, () => {\r\n          isMainComplete = true;\r\n          // Check to see if we are complete, and complete if so.\r\n          // If we are not complete. Get the subject. This calls the `notifier` function.\r\n          // If that function fails, it will throw and `.next()` will not be reached on this\r\n          // line. The thrown error is caught by the _complete handler in this\r\n          // `OperatorSubscriber` and handled appropriately.\r\n          !checkComplete() && getCompletionSubject().next();\r\n        })\r\n      );\r\n\r\n      if (syncResub) {\r\n        // Ensure that the inner subscription is torn down before\r\n        // moving on to the next subscription in the synchronous case.\r\n        // If we don't do this here, all inner subscriptions will not be\r\n        // torn down until the entire observable is done.\r\n        innerSub.unsubscribe();\r\n        // It is important to null this out. Not only to free up memory, but\r\n        // to make sure code above knows we are in a subscribing state to\r\n        // handle synchronous resubscription.\r\n        innerSub = null;\r\n        // We may need to do this multiple times, so reset the flags.\r\n        syncResub = false;\r\n        // Resubscribe\r\n        subscribeForRepeatWhen();\r\n      }\r\n    };\r\n\r\n    // Start the subscription\r\n    subscribeForRepeatWhen();\r\n  });"],"parameters":[{"name":"notifier","type":"(notifications: Observable<void>) => ObservableInput<any>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"MonoTypeOperatorFunction<T>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nReturns an Observable that mirrors the source Observable with the exception of a `complete`. If the source\r\nObservable calls `complete`, this method will emit to the Observable returned from `notifier`. If that Observable\r\ncalls `complete` or `error`, then this method will call `complete` or `error` on the child subscription. Otherwise\r\nthis method will resubscribe to the source Observable.\r\n\r\n![](repeatWhen.png)\r\n\r\n## Example\r\n\r\nRepeat a message stream on click\r\n\r\n```ts\r\nimport { of, fromEvent, repeatWhen } from 'rxjs';\r\n\r\nconst source = of('Repeat message');\r\nconst documentClick$ = fromEvent(document, 'click');\r\n\r\nconst result = source.pipe(repeatWhen(() => documentClick$));\r\n\r\nresult.subscribe(data => console.log(data))\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link repeat}"},{"kind":25,"tagName":"see","text":"{@link retry}"},{"kind":25,"tagName":"see","text":"{@link retryWhen}"},{"kind":25,"tagName":"param","text":"notifier Function that receives an Observable of notifications with\r\nwhich a user can `complete` or `error`, aborting the repetition."},{"kind":25,"tagName":"return","text":"A function that returns an `ObservableInput` that mirrors the source\r\nObservable with the exception of a `complete`."},{"kind":25,"tagName":"deprecated","text":"Will be removed in v9 or v10. Use {@link repeat}'s {@link RepeatConfig#delay delay} option instead.\r\nInstead of `repeatWhen(() => notify$)`, use: `repeat({ delay: () => notify$ })`."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[],"functionName":"repeatWhen","modulePath":"..\\src\\internal\\operators\\repeatWhen.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},"..\\src\\internal\\operators\\retry.ts":{"moduleComponents":{"retry":{"kind":13,"usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":1,"index":1},"sources":[{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"count","type":"number","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"MonoTypeOperatorFunction<T>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"retry","modulePath":"..\\src\\internal\\operators\\retry.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"config","type":"RetryConfig","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"MonoTypeOperatorFunction<T>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"retry","modulePath":"..\\src\\internal\\operators\\retry.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},"..\\src\\internal\\operators\\retryWhen.ts":{"moduleComponents":{"retryWhen":{"kind":13,"usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":1,"index":1},"sources":[{"source":{"name":"retryWhen","statements":["return operate((source, subscriber) => {\r\n    let innerSub: Subscription | null;\r\n    let syncResub = false;\r\n    let errors$: Subject<any>;\r\n\r\n    const subscribeForRetryWhen = () => {\r\n      innerSub = source.subscribe(\r\n        createOperatorSubscriber(subscriber, undefined, undefined, (err) => {\r\n          if (!errors$) {\r\n            errors$ = new Subject();\r\n            innerFrom(notifier(errors$)).subscribe(\r\n              createOperatorSubscriber(subscriber, () =>\r\n                // If we have an innerSub, this was an asynchronous call, kick off the retry.\r\n                // Otherwise, if we don't have an innerSub yet, that's because the inner subscription\r\n                // call hasn't even returned yet. We've arrived here synchronously.\r\n                // So we flag that we want to resub, such that we can ensure finalization\r\n                // happens before we resubscribe.\r\n                innerSub ? subscribeForRetryWhen() : (syncResub = true)\r\n              )\r\n            );\r\n          }\r\n          if (errors$) {\r\n            // We have set up the notifier without error.\r\n            errors$.next(err);\r\n          }\r\n        })\r\n      );\r\n\r\n      if (syncResub) {\r\n        // Ensure that the inner subscription is torn down before\r\n        // moving on to the next subscription in the synchronous case.\r\n        // If we don't do this here, all inner subscriptions will not be\r\n        // torn down until the entire observable is done.\r\n        innerSub.unsubscribe();\r\n        innerSub = null;\r\n        // We may need to do this multiple times, so reset the flag.\r\n        syncResub = false;\r\n        // Resubscribe\r\n        subscribeForRetryWhen();\r\n      }\r\n    };\r\n\r\n    // Start the subscription\r\n    subscribeForRetryWhen();\r\n  });"],"parameters":[{"name":"notifier","type":"(errors: Observable<any>) => ObservableInput<any>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"MonoTypeOperatorFunction<T>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nReturns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\r\ncalls `error`, this method will emit the Throwable that caused the error to the `ObservableInput` returned from `notifier`.\r\nIf that Observable calls `complete` or `error` then this method will call `complete` or `error` on the child\r\nsubscription. Otherwise this method will resubscribe to the source Observable.\r\n\r\n![](retryWhen.png)\r\n\r\nRetry an observable sequence on error based on custom criteria.\r\n\r\n## Example\r\n\r\n```ts\r\nimport { interval, map, retryWhen, tap, delayWhen, timer } from 'rxjs';\r\n\r\nconst source = interval(1000);\r\nconst result = source.pipe(\r\n  map(value => {\r\n    if (value > 5) {\r\n      // error will be picked up by retryWhen\r\n      throw value;\r\n    }\r\n    return value;\r\n  }),\r\n  retryWhen(errors =>\r\n    errors.pipe(\r\n      // log error message\r\n      tap(value => console.log(`Value ${ value } was too high!`)),\r\n      // restart in 5 seconds\r\n      delayWhen(value => timer(value * 1000))\r\n    )\r\n  )\r\n);\r\n\r\nresult.subscribe(value => console.log(value));\r\n\r\n// results:\r\n// 0\r\n// 1\r\n// 2\r\n// 3\r\n// 4\r\n// 5\r\n// 'Value 6 was too high!'\r\n// - Wait 5 seconds then repeat\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link retry}"},{"kind":25,"tagName":"param","text":"notifier Function that receives an Observable of notifications with which a\r\nuser can `complete` or `error`, aborting the retry."},{"kind":25,"tagName":"return","text":"A function that returns an `ObservableInput` that mirrors the source\r\nObservable with the exception of an `error`."},{"kind":25,"tagName":"deprecated","text":"Will be removed in v9 or v10, use {@link retry}'s `delay` option instead.\r\nWill be removed in v9 or v10. Use {@link retry}'s {@link RetryConfig#delay delay} option instead.\r\nInstead of `retryWhen(() => notify$)`, use: `retry({ delay: () => notify$ })`."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[],"functionName":"retryWhen","modulePath":"..\\src\\internal\\operators\\retryWhen.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},"..\\src\\internal\\operators\\refCount.ts":{"moduleComponents":{"refCount":{"kind":13,"usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":1,"index":1},"sources":[{"source":{"name":"refCount","statements":["return operate((source, subscriber) => {\r\n    let connection: Subscription | null = null;\r\n\r\n    (source as any)._refCount++;\r\n\r\n    const refCounter = createOperatorSubscriber(subscriber, undefined, undefined, undefined, () => {\r\n      if (!source || (source as any)._refCount <= 0 || 0 < --(source as any)._refCount) {\r\n        connection = null;\r\n        return;\r\n      }\r\n\r\n      ///\r\n      // Compare the local RefCountSubscriber's connection Subscription to the\r\n      // connection Subscription on the shared ConnectableObservable. In cases\r\n      // where the ConnectableObservable source synchronously emits values, and\r\n      // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\r\n      // execution continues to here before the RefCountOperator has a chance to\r\n      // supply the RefCountSubscriber with the shared connection Subscription.\r\n      // For example:\r\n      // ```\r\n      // range(0, 10).pipe(\r\n      //   publish(),\r\n      //   refCount(),\r\n      //   take(5),\r\n      // )\r\n      // .subscribe();\r\n      // ```\r\n      // In order to account for this case, RefCountSubscriber should only dispose\r\n      // the ConnectableObservable's shared connection Subscription if the\r\n      // connection Subscription exists, *and* either:\r\n      //   a. RefCountSubscriber doesn't have a reference to the shared connection\r\n      //      Subscription yet, or,\r\n      //   b. RefCountSubscriber's connection Subscription reference is identical\r\n      //      to the shared connection Subscription\r\n      ///\r\n\r\n      const sharedConnection = (source as any)._connection;\r\n      const conn = connection;\r\n      connection = null;\r\n\r\n      if (sharedConnection && (!conn || sharedConnection === conn)) {\r\n        sharedConnection.unsubscribe();\r\n      }\r\n\r\n      subscriber.unsubscribe();\r\n    });\r\n\r\n    source.subscribe(refCounter);\r\n\r\n    if (!refCounter.closed) {\r\n      connection = (source as ConnectableObservable<T>).connect();\r\n    }\r\n  });"],"parameters":[],"returnType":"MonoTypeOperatorFunction<T>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nMake a {@link ConnectableObservable} behave like a ordinary observable and automates the way\r\nyou can connect to it.\r\n\r\nInternally it counts the subscriptions to the observable and subscribes (only once) to the source if\r\nthe number of subscriptions is larger than 0. If the number of subscriptions is smaller than 1, it\r\nunsubscribes from the source. This way you can make sure that everything before the *published*\r\nrefCount has only a single subscription independently of the number of subscribers to the target\r\nobservable.\r\n\r\nNote that using the {@link share} operator is exactly the same as using the `multicast(() => new Subject())` operator\r\n(making the observable hot) and the *refCount* operator in a sequence.\r\n\r\n![](refCount.png)\r\n\r\n## Example\r\n\r\nIn the following example there are two intervals turned into connectable observables\r\nby using the *publish* operator. The first one uses the *refCount* operator, the\r\nsecond one does not use it. You will notice that a connectable observable does nothing\r\nuntil you call its connect function.\r\n\r\n```ts\r\nimport { interval, tap, publish, refCount } from 'rxjs';\r\n\r\n// Turn the interval observable into a ConnectableObservable (hot)\r\nconst refCountInterval = interval(400).pipe(\r\n  tap(num => console.log(`refCount ${ num }`)),\r\n  publish(),\r\n  refCount()\r\n);\r\n\r\nconst publishedInterval = interval(400).pipe(\r\n  tap(num => console.log(`publish ${ num }`)),\r\n  publish()\r\n);\r\n\r\nrefCountInterval.subscribe();\r\nrefCountInterval.subscribe();\r\n// 'refCount 0' -----> 'refCount 1' -----> etc\r\n// All subscriptions will receive the same value and the tap (and\r\n// every other operator) before the `publish` operator will be executed\r\n// only once per event independently of the number of subscriptions.\r\n\r\npublishedInterval.subscribe();\r\n// Nothing happens until you call .connect() on the observable.\r\n```\r\n","tags":[{"kind":25,"tagName":"return","text":"A function that returns an Observable that automates the connection\r\nto ConnectableObservable."},{"kind":25,"tagName":"see","text":"{@link ConnectableObservable}"},{"kind":25,"tagName":"see","text":"{@link share}"},{"kind":25,"tagName":"see","text":"{@link publish}"},{"kind":25,"tagName":"deprecated","text":"Replaced with the {@link share} operator. How `share` is used\r\nwill depend on the connectable observable you created just prior to the\r\n`refCount` operator.\r\nDetails: https://rxjs.dev/deprecations/multicasting"}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[],"functionName":"refCount","modulePath":"..\\src\\internal\\operators\\refCount.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},"..\\src\\internal\\operators\\sample.ts":{"moduleComponents":{"sample":{"kind":13,"usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":1,"index":1},"sources":[{"source":{"name":"sample","statements":["return operate((source, subscriber) => {\r\nlet hasValue = false;\r\nlet lastValue: T | null = null;\r\nsource.subscribe(\r\n  createOperatorSubscriber(subscriber, (value) => {\r\n    hasValue = true;\r\n    lastValue = value;\r\n  })\r\n);\r\ninnerFrom(notifier).subscribe(\r\n  createOperatorSubscriber(\r\n    subscriber,\r\n    () => {\r\n      if (hasValue) {\r\n        hasValue = false;\r\n        const value = lastValue!;\r\n        lastValue = null;\r\n        subscriber.next(value);\r\n      }\r\n    },\r\n    noop\r\n  )\r\n);\r\n});"],"parameters":[{"name":"notifier","type":"ObservableInput<any>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"MonoTypeOperatorFunction<T>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nEmits the most recently emitted value from the source Observable whenever\r\nanother Observable, the `notifier`, emits.\r\n\r\n<span class=\"informal\">It's like {@link sampleTime}, but samples whenever\r\nthe `notifier` `ObservableInput` emits something.</span>\r\n\r\n![](sample.png)\r\n\r\nWhenever the `notifier` `ObservableInput` emits a value, `sample`\r\nlooks at the source Observable and emits whichever value it has most recently\r\nemitted since the previous sampling, unless the source has not emitted\r\nanything since the previous sampling. The `notifier` is subscribed to as soon\r\nas the output Observable is subscribed.\r\n\r\n## Example\r\n\r\nOn every click, sample the most recent `seconds` timer\r\n\r\n```ts\r\nimport { fromEvent, interval, sample } from 'rxjs';\r\n\r\nconst seconds = interval(1000);\r\nconst clicks = fromEvent(document, 'click');\r\nconst result = seconds.pipe(sample(clicks));\r\n\r\nresult.subscribe(x => console.log(x));\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link audit}"},{"kind":25,"tagName":"see","text":"{@link debounce}"},{"kind":25,"tagName":"see","text":"{@link sampleTime}"},{"kind":25,"tagName":"see","text":"{@link throttle}"},{"kind":25,"tagName":"param","text":"notifier The `ObservableInput` to use for sampling the\r\nsource Observable."},{"kind":25,"tagName":"return","text":"A function that returns an Observable that emits the results of\r\nsampling the values emitted by the source Observable whenever the notifier\r\nObservable emits value or completes."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[],"functionName":"sample","modulePath":"..\\src\\internal\\operators\\sample.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},"..\\src\\internal\\operators\\sampleTime.ts":{"moduleComponents":{"sampleTime":{"kind":13,"usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":1,"index":1},"sources":[{"source":{"name":"sampleTime","statements":["return sample(interval(period, scheduler));"],"parameters":[{"name":"period","type":"number","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"scheduler","initializer":"asyncScheduler","type":"SchedulerLike","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"MonoTypeOperatorFunction<T>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nEmits the most recently emitted value from the source Observable within\r\nperiodic time intervals.\r\n\r\n<span class=\"informal\">Samples the source Observable at periodic time\r\nintervals, emitting what it samples.</span>\r\n\r\n![](sampleTime.png)\r\n\r\n`sampleTime` periodically looks at the source Observable and emits whichever\r\nvalue it has most recently emitted since the previous sampling, unless the\r\nsource has not emitted anything since the previous sampling. The sampling\r\nhappens periodically in time every `period` milliseconds (or the time unit\r\ndefined by the optional `scheduler` argument). The sampling starts as soon as\r\nthe output Observable is subscribed.\r\n\r\n## Example\r\n\r\nEvery second, emit the most recent click at most once\r\n\r\n```ts\r\nimport { fromEvent, sampleTime } from 'rxjs';\r\n\r\nconst clicks = fromEvent(document, 'click');\r\nconst result = clicks.pipe(sampleTime(1000));\r\n\r\nresult.subscribe(x => console.log(x));\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link auditTime}"},{"kind":25,"tagName":"see","text":"{@link debounceTime}"},{"kind":25,"tagName":"see","text":"{@link delay}"},{"kind":25,"tagName":"see","text":"{@link sample}"},{"kind":25,"tagName":"see","text":"{@link throttleTime}"},{"kind":25,"tagName":"param","text":"{number} period The sampling period expressed in milliseconds or the\r\ntime unit determined internally by the optional `scheduler`."},{"kind":25,"tagName":"param","text":"{SchedulerLike} [scheduler=async] The {@link SchedulerLike} to use for\r\nmanaging the timers that handle the sampling."},{"kind":25,"tagName":"return","text":"A function that returns an Observable that emits the results of\r\nsampling the values emitted by the source Observable at the specified time\r\ninterval."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[],"functionName":"sampleTime","modulePath":"..\\src\\internal\\operators\\sampleTime.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},"..\\src\\internal\\operators\\scan.ts":{"moduleComponents":{"scan":{"kind":13,"usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":0.3333333333333333,"index":0.6666666666666666},"sources":[{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"V","kind":39,"isConst":false,"variance":0},{"name":"A","kind":39,"isConst":false,"default":"V","variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"accumulator","type":"(acc: A | V, value: V, index: number) => A","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<V, V | A>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"scan","modulePath":"..\\src\\internal\\operators\\scan.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"V","kind":39,"isConst":false,"variance":0},{"name":"A","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"accumulator","type":"(acc: A, value: V, index: number) => A","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"seed","type":"A","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<V, A>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"scan","modulePath":"..\\src\\internal\\operators\\scan.ts"},"usabilityResult":{"index":0.5,"paramLengthComplexity":1,"paramSequenceComplexity":0}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"V","kind":39,"isConst":false,"variance":0},{"name":"A","kind":39,"isConst":false,"variance":0},{"name":"S","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"accumulator","type":"(acc: A | S, value: V, index: number) => A","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"seed","type":"S","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<V, A>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"scan","modulePath":"..\\src\\internal\\operators\\scan.ts"},"usabilityResult":{"index":0.5,"paramLengthComplexity":1,"paramSequenceComplexity":0}}]}},"usabilityResult":{"index":0.6666666666666666,"paramLengthComplexity":1,"paramSequenceComplexity":0.3333333333333333}},"..\\src\\internal\\operators\\sequenceEqual.ts":{"moduleComponents":{"sequenceEqual":{"kind":13,"usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":1,"index":1},"sources":[{"source":{"name":"sequenceEqual","statements":["return operate((source, subscriber) => {\r\n    // The state for the source observable\r\n    const aState = createState<T>();\r\n    // The state for the compareTo observable;\r\n    const bState = createState<T>();\r\n\r\n    /** A utility to emit and complete */\r\n    const emit = (isEqual: boolean) => {\r\n      subscriber.next(isEqual);\r\n      subscriber.complete();\r\n    };\r\n\r\n    /**\r\n     * Creates a subscriber that subscribes to one of the sources, and compares its collected\r\n     * state -- `selfState` -- to the other source's collected state -- `otherState`. This\r\n     * is used for both streams.\r\n     */\r\n    const createSubscriber = (selfState: SequenceState<T>, otherState: SequenceState<T>) => {\r\n      const sequenceEqualSubscriber = createOperatorSubscriber(\r\n        subscriber,\r\n        (a: T) => {\r\n          const { buffer, complete } = otherState;\r\n          if (buffer.length === 0) {\r\n            // If there's no values in the other buffer\r\n            // and the other stream is complete, we know\r\n            // this isn't a match, because we got one more value.\r\n            // Otherwise, we push onto our buffer, so when the other\r\n            // stream emits, it can pull this value off our buffer and check it\r\n            // at the appropriate time.\r\n            complete ? emit(false) : selfState.buffer.push(a);\r\n          } else {\r\n            // If the other stream *does* have values in its buffer,\r\n            // pull the oldest one off so we can compare it to what we\r\n            // just got. If it wasn't a match, emit `false` and complete.\r\n            !comparator(a, buffer.shift()!) && emit(false);\r\n          }\r\n        },\r\n        () => {\r\n          // Or observable completed\r\n          selfState.complete = true;\r\n          const { complete, buffer } = otherState;\r\n          // If the other observable is also complete, and there's\r\n          // still stuff left in their buffer, it doesn't match, if their\r\n          // buffer is empty, then it does match. This is because we can't\r\n          // possibly get more values here anymore.\r\n          complete && emit(buffer.length === 0);\r\n          // Be sure to clean up our stream as soon as possible if we can.\r\n          sequenceEqualSubscriber?.unsubscribe();\r\n        }\r\n      );\r\n\r\n      return sequenceEqualSubscriber;\r\n    };\r\n\r\n    // Subscribe to each source.\r\n    source.subscribe(createSubscriber(aState, bState));\r\n    innerFrom(compareTo).subscribe(createSubscriber(bState, aState));\r\n  });"],"parameters":[{"name":"compareTo","type":"ObservableInput<T>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"comparator","initializer":"(a, b) => a === b","type":"(a: T, b: T) => boolean","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, boolean>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nCompares all values of two observables in sequence using an optional comparator function\r\nand returns an observable of a single boolean value representing whether or not the two sequences\r\nare equal.\r\n\r\n<span class=\"informal\">Checks to see of all values emitted by both observables are equal, in order.</span>\r\n\r\n![](sequenceEqual.png)\r\n\r\n`sequenceEqual` subscribes to source observable and `compareTo` `ObservableInput` (that internally\r\ngets converted to an observable) and buffers incoming values from each observable. Whenever either\r\nobservable emits a value, the value is buffered and the buffers are shifted and compared from the bottom\r\nup; If any value pair doesn't match, the returned observable will emit `false` and complete. If one of the\r\nobservables completes, the operator will wait for the other observable to complete; If the other\r\nobservable emits before completing, the returned observable will emit `false` and complete. If one observable never\r\ncompletes or emits after the other completes, the returned observable will never complete.\r\n\r\n## Example\r\n\r\nFigure out if the Konami code matches\r\n\r\n```ts\r\nimport { from, fromEvent, map, bufferCount, mergeMap, sequenceEqual } from 'rxjs';\r\n\r\nconst codes = from([\r\n  'ArrowUp',\r\n  'ArrowUp',\r\n  'ArrowDown',\r\n  'ArrowDown',\r\n  'ArrowLeft',\r\n  'ArrowRight',\r\n  'ArrowLeft',\r\n  'ArrowRight',\r\n  'KeyB',\r\n  'KeyA',\r\n  'Enter', // no start key, clearly.\r\n]);\r\n\r\nconst keys = fromEvent<KeyboardEvent>(document, 'keyup').pipe(map(e => e.code));\r\nconst matches = keys.pipe(\r\n  bufferCount(11, 1),\r\n  mergeMap(last11 => from(last11).pipe(sequenceEqual(codes)))\r\n);\r\nmatches.subscribe(matched => console.log('Successful cheat at Contra? ', matched));\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link combineLatest}"},{"kind":25,"tagName":"see","text":"{@link zip}"},{"kind":25,"tagName":"see","text":"{@link withLatestFrom}"},{"kind":25,"tagName":"param","text":"compareTo The `ObservableInput` sequence to compare the source sequence to."},{"kind":25,"tagName":"param","text":"comparator An optional function to compare each value pair."},{"kind":25,"tagName":"return","text":"A function that returns an Observable that emits a single boolean\r\nvalue representing whether or not the values emitted by the source\r\nObservable and provided `ObservableInput` were equal in sequence."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[],"functionName":"sequenceEqual","modulePath":"..\\src\\internal\\operators\\sequenceEqual.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},"..\\src\\internal\\operators\\share.ts":{"moduleComponents":{"share":{"kind":13,"usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":1,"index":1},"sources":[{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[],"returnType":"MonoTypeOperatorFunction<T>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"share","modulePath":"..\\src\\internal\\operators\\share.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"options","type":"ShareConfig<T>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"MonoTypeOperatorFunction<T>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"share","modulePath":"..\\src\\internal\\operators\\share.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},"..\\src\\internal\\operators\\shareReplay.ts":{"moduleComponents":{"shareReplay":{"kind":13,"usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":0.75,"index":0.875},"sources":[{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"config","type":"ShareReplayConfig","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"MonoTypeOperatorFunction<T>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"shareReplay","modulePath":"..\\src\\internal\\operators\\shareReplay.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"bufferSize","type":"number","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"windowTime","type":"number","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"scheduler","type":"SchedulerLike","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"MonoTypeOperatorFunction<T>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"shareReplay","modulePath":"..\\src\\internal\\operators\\shareReplay.ts"},"usabilityResult":{"index":0.75,"paramLengthComplexity":1,"paramSequenceComplexity":0.5}}]}},"usabilityResult":{"index":0.875,"paramLengthComplexity":1,"paramSequenceComplexity":0.75}},"..\\src\\internal\\operators\\single.ts":{"moduleComponents":{"single":{"kind":13,"usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":1,"index":1},"sources":[{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"predicate","type":"BooleanConstructor","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, TruthyTypesOf<T>>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"single","modulePath":"..\\src\\internal\\operators\\single.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"predicate","type":"(value: T, index: number, source: Observable<T>) => boolean","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"MonoTypeOperatorFunction<T>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"single","modulePath":"..\\src\\internal\\operators\\single.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},"..\\src\\internal\\operators\\skip.ts":{"moduleComponents":{"skip":{"kind":13,"usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":1,"index":1},"sources":[{"source":{"name":"skip","statements":["return filter((_, index) => count <= index);"],"parameters":[{"name":"count","type":"number","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"MonoTypeOperatorFunction<T>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nReturns an Observable that skips the first `count` items emitted by the source Observable.\r\n\r\n![](skip.png)\r\n\r\nSkips the values until the sent notifications are equal or less than provided skip count. It raises\r\nan error if skip count is equal or more than the actual number of emits and source raises an error.\r\n\r\n## Example\r\n\r\nSkip the values before the emission\r\n\r\n```ts\r\nimport { interval, skip } from 'rxjs';\r\n\r\n// emit every half second\r\nconst source = interval(500);\r\n// skip the first 10 emitted values\r\nconst result = source.pipe(skip(10));\r\n\r\nresult.subscribe(value => console.log(value));\r\n// output: 10...11...12...13...\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link last}"},{"kind":25,"tagName":"see","text":"{@link skipWhile}"},{"kind":25,"tagName":"see","text":"{@link skipUntil}"},{"kind":25,"tagName":"see","text":"{@link skipLast}"},{"kind":25,"tagName":"param","text":"{Number} count - The number of times, items emitted by source Observable should be skipped."},{"kind":25,"tagName":"return","text":"A function that returns an Observable that skips the first `count`\r\nvalues emitted by the source Observable."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[],"functionName":"skip","modulePath":"..\\src\\internal\\operators\\skip.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},"..\\src\\internal\\operators\\skipLast.ts":{"moduleComponents":{"skipLast":{"kind":13,"usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":1,"index":1},"sources":[{"source":{"name":"skipLast","statements":["return skipCount <= 0\r\n    ? // For skipCounts less than or equal to zero, we are just mirroring the source.\r\n      identity\r\n    : operate((source, subscriber) => {\r\n        // A ring buffer to hold the values while we wait to see\r\n        // if we can emit it or it's part of the \"skipped\" last values.\r\n        // Note that it is the _same size_ as the skip count.\r\n        let ring: T[] = new Array(skipCount);\r\n        // The number of values seen so far. This is used to get\r\n        // the index of the current value when it arrives.\r\n        let seen = 0;\r\n        source.subscribe(\r\n          createOperatorSubscriber(subscriber, (value) => {\r\n            // Get the index of the value we have right now\r\n            // relative to all other values we've seen, then\r\n            // increment `seen`. This ensures we've moved to\r\n            // the next slot in our ring buffer.\r\n            const valueIndex = seen++;\r\n            if (valueIndex < skipCount) {\r\n              // If we haven't seen enough values to fill our buffer yet,\r\n              // Then we aren't to a number of seen values where we can\r\n              // emit anything, so let's just start by filling the ring buffer.\r\n              ring[valueIndex] = value;\r\n            } else {\r\n              // We are traversing over the ring array in such\r\n              // a way that when we get to the end, we loop back\r\n              // and go to the start.\r\n              const index = valueIndex % skipCount;\r\n              // Pull the oldest value out so we can emit it,\r\n              // and stuff the new value in it's place.\r\n              const oldValue = ring[index];\r\n              ring[index] = value;\r\n              // Emit the old value. It is important that this happens\r\n              // after we swap the value in the buffer, if it happens\r\n              // before we swap the value in the buffer, then a synchronous\r\n              // source can get the buffer out of whack.\r\n              subscriber.next(oldValue);\r\n            }\r\n          })\r\n        );\r\n\r\n        return () => {\r\n          // Release our values in memory\r\n          ring = null!;\r\n        };\r\n      });"],"parameters":[{"name":"skipCount","type":"number","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"MonoTypeOperatorFunction<T>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nSkip a specified number of values before the completion of an observable.\r\n\r\n![](skipLast.png)\r\n\r\nReturns an observable that will emit values as soon as it can, given a number of\r\nskipped values. For example, if you `skipLast(3)` on a source, when the source\r\nemits its fourth value, the first value the source emitted will finally be emitted\r\nfrom the returned observable, as it is no longer part of what needs to be skipped.\r\n\r\nAll values emitted by the result of `skipLast(N)` will be delayed by `N` emissions,\r\nas each value is held in a buffer until enough values have been emitted that that\r\nthe buffered value may finally be sent to the consumer.\r\n\r\nAfter subscribing, unsubscribing will not result in the emission of the buffered\r\nskipped values.\r\n\r\n## Example\r\n\r\nSkip the last 2 values of an observable with many values\r\n\r\n```ts\r\nimport { of, skipLast } from 'rxjs';\r\n\r\nconst numbers = of(1, 2, 3, 4, 5);\r\nconst skipLastTwo = numbers.pipe(skipLast(2));\r\nskipLastTwo.subscribe(x => console.log(x));\r\n\r\n// Results in:\r\n// 1 2 3\r\n// (4 and 5 are skipped)\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link skip}"},{"kind":25,"tagName":"see","text":"{@link skipUntil}"},{"kind":25,"tagName":"see","text":"{@link skipWhile}"},{"kind":25,"tagName":"see","text":"{@link take}"},{"kind":25,"tagName":"param","text":"skipCount Number of elements to skip from the end of the source Observable."},{"kind":25,"tagName":"return","text":"A function that returns an Observable that skips the last `count`\r\nvalues emitted by the source Observable."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[],"functionName":"skipLast","modulePath":"..\\src\\internal\\operators\\skipLast.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},"..\\src\\internal\\operators\\skipUntil.ts":{"moduleComponents":{"skipUntil":{"kind":13,"usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":1,"index":1},"sources":[{"source":{"name":"skipUntil","statements":["return operate((source, subscriber) => {\r\n    let taking = false;\r\n\r\n    const skipSubscriber = createOperatorSubscriber(\r\n      subscriber,\r\n      () => {\r\n        skipSubscriber?.unsubscribe();\r\n        taking = true;\r\n      },\r\n      noop\r\n    );\r\n\r\n    innerFrom(notifier).subscribe(skipSubscriber);\r\n\r\n    source.subscribe(createOperatorSubscriber(subscriber, (value) => taking && subscriber.next(value)));\r\n  });"],"parameters":[{"name":"notifier","type":"ObservableInput<any>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"MonoTypeOperatorFunction<T>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nReturns an Observable that skips items emitted by the source Observable until a second Observable emits an item.\r\n\r\nThe `skipUntil` operator causes the observable stream to skip the emission of values until the passed in observable\r\nemits the first value. This can be particularly useful in combination with user interactions, responses of HTTP\r\nrequests or waiting for specific times to pass by.\r\n\r\n![](skipUntil.png)\r\n\r\nInternally, the `skipUntil` operator subscribes to the passed in `notifier` `ObservableInput` (which gets converted\r\nto an Observable) in order to recognize the emission of its first value. When `notifier` emits next, the operator\r\nunsubscribes from it and starts emitting the values of the *source* observable until it completes or errors. It\r\nwill never let the *source* observable emit any values if the `notifier` completes or throws an error without\r\nemitting a value before.\r\n\r\n## Example\r\n\r\nIn the following example, all emitted values of the interval observable are skipped until the user clicks anywhere\r\nwithin the page\r\n\r\n```ts\r\nimport { interval, fromEvent, skipUntil } from 'rxjs';\r\n\r\nconst intervalObservable = interval(1000);\r\nconst click = fromEvent(document, 'click');\r\n\r\nconst emitAfterClick = intervalObservable.pipe(\r\n  skipUntil(click)\r\n);\r\n// clicked at 4.6s. output: 5...6...7...8........ or\r\n// clicked at 7.3s. output: 8...9...10..11.......\r\nemitAfterClick.subscribe(value => console.log(value));\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link last}"},{"kind":25,"tagName":"see","text":"{@link skip}"},{"kind":25,"tagName":"see","text":"{@link skipWhile}"},{"kind":25,"tagName":"see","text":"{@link skipLast}"},{"kind":25,"tagName":"param","text":"notifier An `ObservableInput` that has to emit an item before the source Observable elements begin to\r\nbe mirrored by the resulting Observable."},{"kind":25,"tagName":"return","text":"A function that returns an Observable that skips items from the\r\nsource Observable until the `notifier` Observable emits an item, then emits the\r\nremaining items."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[],"functionName":"skipUntil","modulePath":"..\\src\\internal\\operators\\skipUntil.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},"..\\src\\internal\\operators\\skipWhile.ts":{"moduleComponents":{"skipWhile":{"kind":13,"usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":1,"index":1},"sources":[{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"predicate","type":"BooleanConstructor","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, Extract<T, Falsy> extends never ? never : T>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"skipWhile","modulePath":"..\\src\\internal\\operators\\skipWhile.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"predicate","type":"(value: T, index: number) => true","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, never>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"skipWhile","modulePath":"..\\src\\internal\\operators\\skipWhile.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"predicate","type":"(value: T, index: number) => boolean","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"MonoTypeOperatorFunction<T>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"skipWhile","modulePath":"..\\src\\internal\\operators\\skipWhile.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},"..\\src\\internal\\operators\\startWith.ts":{"moduleComponents":{"startWith":{"kind":13,"usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":1,"index":1},"sources":[{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"value","type":"null","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, T | null>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"startWith","modulePath":"..\\src\\internal\\operators\\startWith.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"value","type":"undefined","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, T | undefined>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"startWith","modulePath":"..\\src\\internal\\operators\\startWith.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"A","kind":39,"isConst":false,"constraint":"readonly unknown[]","default":"T[]","variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"The `scheduler` parameter will be removed in v8. Use `scheduled` and `concatAll`. Details: https://rxjs.dev/deprecations/scheduler-argument"}]}],"hasDeclareKeyword":false,"parameters":[{"name":"valuesAndScheduler","type":"[...A, SchedulerLike]","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":true}],"returnType":"OperatorFunction<T, T | ValueFromArray<A>>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"startWith","modulePath":"..\\src\\internal\\operators\\startWith.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"A","kind":39,"isConst":false,"constraint":"readonly unknown[]","default":"T[]","variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"values","type":"A","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":true}],"returnType":"OperatorFunction<T, T | ValueFromArray<A>>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"startWith","modulePath":"..\\src\\internal\\operators\\startWith.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},"..\\src\\internal\\operators\\subscribeOn.ts":{"moduleComponents":{"subscribeOn":{"kind":13,"usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":1,"index":1},"sources":[{"source":{"name":"subscribeOn","statements":["return operate((source, subscriber) => {\r\nsubscriber.add(scheduler.schedule(() => source.subscribe(subscriber), delay));\r\n});"],"parameters":[{"name":"scheduler","type":"SchedulerLike","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"delay","initializer":"0","type":"number","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"MonoTypeOperatorFunction<T>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nAsynchronously subscribes Observers to this Observable on the specified {@link SchedulerLike}.\r\n\r\nWith `subscribeOn` you can decide what type of scheduler a specific Observable will be using when it is subscribed to.\r\n\r\nSchedulers control the speed and order of emissions to observers from an Observable stream.\r\n\r\n![](subscribeOn.png)\r\n\r\n## Example\r\n\r\nGiven the following code:\r\n\r\n```ts\r\nimport { of, merge } from 'rxjs';\r\n\r\nconst a = of(1, 2, 3);\r\nconst b = of(4, 5, 6);\r\n\r\nmerge(a, b).subscribe(console.log);\r\n\r\n// Outputs\r\n// 1\r\n// 2\r\n// 3\r\n// 4\r\n// 5\r\n// 6\r\n```\r\n\r\nBoth Observable `a` and `b` will emit their values directly and synchronously once they are subscribed to.\r\n\r\nIf we instead use the `subscribeOn` operator declaring that we want to use the {@link asyncScheduler} for values emitted by Observable `a`:\r\n\r\n```ts\r\nimport { of, subscribeOn, asyncScheduler, merge } from 'rxjs';\r\n\r\nconst a = of(1, 2, 3).pipe(subscribeOn(asyncScheduler));\r\nconst b = of(4, 5, 6);\r\n\r\nmerge(a, b).subscribe(console.log);\r\n\r\n// Outputs\r\n// 4\r\n// 5\r\n// 6\r\n// 1\r\n// 2\r\n// 3\r\n```\r\n\r\nThe reason for this is that Observable `b` emits its values directly and synchronously like before\r\nbut the emissions from `a` are scheduled on the event loop because we are now using the {@link asyncScheduler} for that specific Observable.\r\n","tags":[{"kind":25,"tagName":"param","text":"scheduler The {@link SchedulerLike} to perform subscription actions on."},{"kind":25,"tagName":"param","text":"delay A delay to pass to the scheduler to delay subscriptions"},{"kind":25,"tagName":"return","text":"A function that returns an Observable modified so that its\r\nsubscriptions happen on the specified {@link SchedulerLike}."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[],"functionName":"subscribeOn","modulePath":"..\\src\\internal\\operators\\subscribeOn.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},"..\\src\\internal\\operators\\switchAll.ts":{"moduleComponents":{"switchAll":{"kind":13,"usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":1,"index":1},"sources":[{"source":{"name":"switchAll","statements":["return switchMap(identity);"],"parameters":[],"returnType":"OperatorFunction<O, ObservedValueOf<O>>","typeParameters":[{"name":"O","kind":39,"isConst":false,"constraint":"ObservableInput<any>","variance":0}],"docs":[{"kind":24,"description":"\r\nConverts a higher-order Observable into a first-order Observable\r\nproducing values only from the most recent observable sequence\r\n\r\n<span class=\"informal\">Flattens an Observable-of-Observables.</span>\r\n\r\n![](switchAll.png)\r\n\r\n`switchAll` subscribes to a source that is an observable of observables, also known as a\r\n\"higher-order observable\" (or `Observable<Observable<T>>`). It subscribes to the most recently\r\nprovided \"inner observable\" emitted by the source, unsubscribing from any previously subscribed\r\nto inner observable, such that only the most recent inner observable may be subscribed to at\r\nany point in time. The resulting observable returned by `switchAll` will only complete if the\r\nsource observable completes, *and* any currently subscribed to inner observable also has completed,\r\nif there are any.\r\n\r\n## Examples\r\n\r\nSpawn a new interval observable for each click event, but for every new\r\nclick, cancel the previous interval and subscribe to the new one\r\n\r\n```ts\r\nimport { fromEvent, tap, map, interval, switchAll } from 'rxjs';\r\n\r\nconst clicks = fromEvent(document, 'click').pipe(tap(() => console.log('click')));\r\nconst source = clicks.pipe(map(() => interval(1000)));\r\n\r\nsource\r\n  .pipe(switchAll())\r\n  .subscribe(x => console.log(x));\r\n\r\n// Output\r\n// click\r\n// 0\r\n// 1\r\n// 2\r\n// 3\r\n// ...\r\n// click\r\n// 0\r\n// 1\r\n// 2\r\n// ...\r\n// click\r\n// ...\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link combineLatestAll}"},{"kind":25,"tagName":"see","text":"{@link concatAll}"},{"kind":25,"tagName":"see","text":"{@link exhaustAll}"},{"kind":25,"tagName":"see","text":"{@link switchMap}"},{"kind":25,"tagName":"see","text":"{@link switchMapTo}"},{"kind":25,"tagName":"see","text":"{@link mergeAll}"},{"kind":25,"tagName":"return","text":"A function that returns an Observable that converts a higher-order\r\nObservable into a first-order Observable producing values only from the most\r\nrecent Observable sequence."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[],"functionName":"switchAll","modulePath":"..\\src\\internal\\operators\\switchAll.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},"..\\src\\internal\\operators\\switchMap.ts":{"moduleComponents":{"switchMap":{"kind":13,"usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":1,"index":1},"sources":[{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"O","kind":39,"isConst":false,"constraint":"ObservableInput<any>","variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"project","type":"(value: T, index: number) => O","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, ObservedValueOf<O>>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"switchMap","modulePath":"..\\src\\internal\\operators\\switchMap.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"O","kind":39,"isConst":false,"constraint":"ObservableInput<any>","variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"The `resultSelector` parameter will be removed in v8. Use an inner `map` instead. Details: https://rxjs.dev/deprecations/resultSelector"}]}],"hasDeclareKeyword":false,"parameters":[{"name":"project","type":"(value: T, index: number) => O","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"resultSelector","type":"undefined","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, ObservedValueOf<O>>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"switchMap","modulePath":"..\\src\\internal\\operators\\switchMap.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"R","kind":39,"isConst":false,"variance":0},{"name":"O","kind":39,"isConst":false,"constraint":"ObservableInput<any>","variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"The `resultSelector` parameter will be removed in v8. Use an inner `map` instead. Details: https://rxjs.dev/deprecations/resultSelector"}]}],"hasDeclareKeyword":false,"parameters":[{"name":"project","type":"(value: T, index: number) => O","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"resultSelector","type":"(outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, R>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"switchMap","modulePath":"..\\src\\internal\\operators\\switchMap.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},"..\\src\\internal\\operators\\switchMapTo.ts":{"moduleComponents":{"switchMapTo":{"kind":13,"usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":1,"index":1},"sources":[{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"O","kind":39,"isConst":false,"constraint":"ObservableInput<unknown>","variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Will be removed in v9. Use {@link switchMap} instead: `switchMap(() => result)`"}]}],"hasDeclareKeyword":false,"parameters":[{"name":"observable","type":"O","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<unknown, ObservedValueOf<O>>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"switchMapTo","modulePath":"..\\src\\internal\\operators\\switchMapTo.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"O","kind":39,"isConst":false,"constraint":"ObservableInput<unknown>","variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"The `resultSelector` parameter will be removed in v8. Use an inner `map` instead. Details: https://rxjs.dev/deprecations/resultSelector"}]}],"hasDeclareKeyword":false,"parameters":[{"name":"observable","type":"O","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"resultSelector","type":"undefined","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<unknown, ObservedValueOf<O>>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"switchMapTo","modulePath":"..\\src\\internal\\operators\\switchMapTo.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"R","kind":39,"isConst":false,"variance":0},{"name":"O","kind":39,"isConst":false,"constraint":"ObservableInput<unknown>","variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"The `resultSelector` parameter will be removed in v8. Use an inner `map` instead. Details: https://rxjs.dev/deprecations/resultSelector"}]}],"hasDeclareKeyword":false,"parameters":[{"name":"observable","type":"O","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"resultSelector","type":"(outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, R>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"switchMapTo","modulePath":"..\\src\\internal\\operators\\switchMapTo.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},"..\\src\\internal\\operators\\switchScan.ts":{"moduleComponents":{"switchScan":{"kind":13,"usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":0,"index":0.5},"sources":[{"source":{"name":"switchScan","statements":["return operate((source, subscriber) => {\r\n    // The state we will keep up to date to pass into our\r\n    // accumulator function at each new value from the source.\r\n    let state = seed;\r\n\r\n    // Use `switchMap` on our `source` to do the work of creating\r\n    // this operator. Note the backwards order here of `switchMap()(source)`\r\n    // to avoid needing to use `pipe` unnecessarily\r\n    switchMap(\r\n      // On each value from the source, call the accumulator with\r\n      // our previous state, the value and the index.\r\n      (value: T, index) => accumulator(state, value, index),\r\n      // Using the deprecated result selector here as a dirty trick\r\n      // to update our state with the flattened value.\r\n      (_, innerValue) => ((state = innerValue), innerValue)\r\n    )(source).subscribe(subscriber);\r\n\r\n    return () => {\r\n      // Release state on finalization\r\n      state = null!;\r\n    };\r\n  });"],"parameters":[{"name":"accumulator","type":"(acc: R, value: T, index: number) => O","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"seed","type":"R","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, ObservedValueOf<O>>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"R","kind":39,"isConst":false,"variance":0},{"name":"O","kind":39,"isConst":false,"constraint":"ObservableInput<any>","variance":0}],"docs":[{"kind":24,"description":"\r\nApplies an accumulator function over the source Observable where the\r\naccumulator function itself returns an Observable, emitting values\r\nonly from the most recently returned Observable.\r\n\r\n<span class=\"informal\">It's like {@link mergeScan}, but only the most recent\r\nObservable returned by the accumulator is merged into the outer Observable.</span>\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link scan}"},{"kind":25,"tagName":"see","text":"{@link mergeScan}"},{"kind":25,"tagName":"see","text":"{@link switchMap}"},{"kind":25,"tagName":"param","text":"accumulator\r\nThe accumulator function called on each source value."},{"kind":25,"tagName":"param","text":"seed The initial accumulation value."},{"kind":25,"tagName":"return","text":"A function that returns an observable of the accumulated values."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[],"functionName":"switchScan","modulePath":"..\\src\\internal\\operators\\switchScan.ts"},"usabilityResult":{"index":0.5,"paramLengthComplexity":1,"paramSequenceComplexity":0}}]}},"usabilityResult":{"index":0.5,"paramLengthComplexity":1,"paramSequenceComplexity":0}},"..\\src\\internal\\operators\\take.ts":{"moduleComponents":{"take":{"kind":13,"usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":1,"index":1},"sources":[{"source":{"name":"take","statements":["return count <= 0\r\n? // If we are taking no values, that's empty.\r\n  () => EMPTY\r\n: operate((source, subscriber) => {\r\n    let seen = 0;\r\n    source.subscribe(\r\n      createOperatorSubscriber(subscriber, (value) => {\r\n        // Increment the number of values we have seen,\r\n        // then check it against the allowed count to see\r\n        // if we are still letting values through.\r\n        if (++seen <= count) {\r\n          subscriber.next(value);\r\n          // If we have met or passed our allowed count,\r\n          // we need to complete. We have to do <= here,\r\n          // because re-entrant code will increment `seen` twice.\r\n          if (count <= seen) {\r\n            subscriber.complete();\r\n          }\r\n        }\r\n      })\r\n    );\r\n  });"],"parameters":[{"name":"count","type":"number","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"MonoTypeOperatorFunction<T>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nEmits only the first `count` values emitted by the source Observable.\r\n\r\n<span class=\"informal\">Takes the first `count` values from the source, then\r\ncompletes.</span>\r\n\r\n![](take.png)\r\n\r\n`take` returns an Observable that emits only the first `count` values emitted\r\nby the source Observable. If the source emits fewer than `count` values then\r\nall of its values are emitted. After that, it completes, regardless if the\r\nsource completes.\r\n\r\n## Example\r\n\r\nTake the first 5 seconds of an infinite 1-second interval Observable\r\n\r\n```ts\r\nimport { interval, take } from 'rxjs';\r\n\r\nconst intervalCount = interval(1000);\r\nconst takeFive = intervalCount.pipe(take(5));\r\ntakeFive.subscribe(x => console.log(x));\r\n\r\n// Logs:\r\n// 0\r\n// 1\r\n// 2\r\n// 3\r\n// 4\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link takeLast}"},{"kind":25,"tagName":"see","text":"{@link takeUntil}"},{"kind":25,"tagName":"see","text":"{@link takeWhile}"},{"kind":25,"tagName":"see","text":"{@link skip}"},{"kind":25,"tagName":"param","text":"count The maximum number of `next` values to emit."},{"kind":25,"tagName":"return","text":"A function that returns an Observable that emits only the first\r\n`count` values emitted by the source Observable, or all of the values from\r\nthe source if the source emits fewer than `count` values."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[],"functionName":"take","modulePath":"..\\src\\internal\\operators\\take.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},"..\\src\\internal\\operators\\takeLast.ts":{"moduleComponents":{"takeLast":{"kind":13,"usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":1,"index":1},"sources":[{"source":{"name":"takeLast","statements":["return count <= 0\r\n? () => EMPTY\r\n: operate((source, subscriber) => {\r\n    // This buffer will hold the values we are going to emit\r\n    // when the source completes. Since we only want to take the\r\n    // last N values, we can't emit until we're sure we're not getting\r\n    // any more values.\r\n    let buffer: T[] = [];\r\n    source.subscribe(\r\n      createOperatorSubscriber(\r\n        subscriber,\r\n        (value) => {\r\n          // Add the most recent value onto the end of our buffer.\r\n          buffer.push(value);\r\n          // If our buffer is now larger than the number of values we\r\n          // want to take, we remove the oldest value from the buffer.\r\n          count < buffer.length && buffer.shift();\r\n        },\r\n        () => {\r\n          // The source completed, we now know what are last values\r\n          // are, emit them in the order they were received.\r\n          for (const value of buffer) {\r\n            subscriber.next(value);\r\n          }\r\n          subscriber.complete();\r\n        },\r\n        // Errors are passed through to the consumer\r\n        undefined,\r\n        () => {\r\n          // During finalization release the values in our buffer.\r\n          buffer = null!;\r\n        }\r\n      )\r\n    );\r\n  });"],"parameters":[{"name":"count","type":"number","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"MonoTypeOperatorFunction<T>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nWaits for the source to complete, then emits the last N values from the source,\r\nas specified by the `count` argument.\r\n\r\n![](takeLast.png)\r\n\r\n`takeLast` results in an observable that will hold values up to `count` values in memory,\r\nuntil the source completes. It then pushes all values in memory to the consumer, in the\r\norder they were received from the source, then notifies the consumer that it is\r\ncomplete.\r\n\r\nIf for some reason the source completes before the `count` supplied to `takeLast` is reached,\r\nall values received until that point are emitted, and then completion is notified.\r\n\r\n**Warning**: Using `takeLast` with an observable that never completes will result\r\nin an observable that never emits a value.\r\n\r\n## Example\r\n\r\nTake the last 3 values of an Observable with many values\r\n\r\n```ts\r\nimport { range, takeLast } from 'rxjs';\r\n\r\nconst many = range(1, 100);\r\nconst lastThree = many.pipe(takeLast(3));\r\nlastThree.subscribe(x => console.log(x));\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link take}"},{"kind":25,"tagName":"see","text":"{@link takeUntil}"},{"kind":25,"tagName":"see","text":"{@link takeWhile}"},{"kind":25,"tagName":"see","text":"{@link skip}"},{"kind":25,"tagName":"param","text":"count The maximum number of values to emit from the end of\r\nthe sequence of values emitted by the source Observable."},{"kind":25,"tagName":"return","text":"A function that returns an Observable that emits at most the last\r\n`count` values emitted by the source Observable."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[],"functionName":"takeLast","modulePath":"..\\src\\internal\\operators\\takeLast.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},"..\\src\\internal\\operators\\takeUntil.ts":{"moduleComponents":{"takeUntil":{"kind":13,"usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":1,"index":1},"sources":[{"source":{"name":"takeUntil","statements":["return operate((source, subscriber) => {\r\ninnerFrom(notifier).subscribe(createOperatorSubscriber(subscriber, () => subscriber.complete(), noop));\r\n!subscriber.closed && source.subscribe(subscriber);\r\n});"],"parameters":[{"name":"notifier","type":"ObservableInput<any>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"MonoTypeOperatorFunction<T>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nEmits the values emitted by the source Observable until a `notifier`\r\nObservable emits a value.\r\n\r\n<span class=\"informal\">Lets values pass until a second Observable,\r\n`notifier`, emits a value. Then, it completes.</span>\r\n\r\n![](takeUntil.png)\r\n\r\n`takeUntil` subscribes and begins mirroring the source Observable. It also\r\nmonitors a second Observable, `notifier` that you provide. If the `notifier`\r\nemits a value, the output Observable stops mirroring the source Observable\r\nand completes. If the `notifier` doesn't emit any value and completes\r\nthen `takeUntil` will pass all values.\r\n\r\n## Example\r\n\r\nTick every second until the first click happens\r\n\r\n```ts\r\nimport { interval, fromEvent, takeUntil } from 'rxjs';\r\n\r\nconst source = interval(1000);\r\nconst clicks = fromEvent(document, 'click');\r\nconst result = source.pipe(takeUntil(clicks));\r\nresult.subscribe(x => console.log(x));\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link take}"},{"kind":25,"tagName":"see","text":"{@link takeLast}"},{"kind":25,"tagName":"see","text":"{@link takeWhile}"},{"kind":25,"tagName":"see","text":"{@link skip}"},{"kind":25,"tagName":"param","text":"{Observable} notifier The Observable whose first emitted value will\r\ncause the output Observable of `takeUntil` to stop emitting values from the\r\nsource Observable."},{"kind":25,"tagName":"return","text":"A function that returns an Observable that emits the values from the\r\nsource Observable until `notifier` emits its first value."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[],"functionName":"takeUntil","modulePath":"..\\src\\internal\\operators\\takeUntil.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},"..\\src\\internal\\operators\\takeWhile.ts":{"moduleComponents":{"takeWhile":{"kind":13,"usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":1,"index":1},"sources":[{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"predicate","type":"BooleanConstructor","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"inclusive","type":"true","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"MonoTypeOperatorFunction<T>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"takeWhile","modulePath":"..\\src\\internal\\operators\\takeWhile.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"predicate","type":"BooleanConstructor","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"inclusive","type":"false","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, TruthyTypesOf<T>>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"takeWhile","modulePath":"..\\src\\internal\\operators\\takeWhile.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"predicate","type":"BooleanConstructor","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, TruthyTypesOf<T>>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"takeWhile","modulePath":"..\\src\\internal\\operators\\takeWhile.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"S","kind":39,"isConst":false,"constraint":"T","variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"predicate","type":"(value: T, index: number) => value is S","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, S>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"takeWhile","modulePath":"..\\src\\internal\\operators\\takeWhile.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"S","kind":39,"isConst":false,"constraint":"T","variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"predicate","type":"(value: T, index: number) => value is S","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"inclusive","type":"false","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, S>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"takeWhile","modulePath":"..\\src\\internal\\operators\\takeWhile.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"predicate","type":"(value: T, index: number) => boolean","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"inclusive","type":"boolean","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"MonoTypeOperatorFunction<T>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"takeWhile","modulePath":"..\\src\\internal\\operators\\takeWhile.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},"..\\src\\internal\\operators\\tap.ts":{"moduleComponents":{"tap":{"kind":13,"usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":0.5,"index":0.75},"sources":[{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"observerOrNext","type":"Partial<TapObserver<T>> | ((value: T) => void)","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"MonoTypeOperatorFunction<T>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"tap","modulePath":"..\\src\\internal\\operators\\tap.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Instead of passing separate callback arguments, use an observer argument. Signatures taking separate callback arguments will be removed in v8. Details: https://rxjs.dev/deprecations/subscribe-arguments"}]}],"hasDeclareKeyword":false,"parameters":[{"name":"next","type":"((value: T) => void) | null","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"error","type":"((error: any) => void) | null","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"complete","type":"(() => void) | null","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"MonoTypeOperatorFunction<T>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"tap","modulePath":"..\\src\\internal\\operators\\tap.ts"},"usabilityResult":{"index":0.5,"paramLengthComplexity":1,"paramSequenceComplexity":0}}]}},"usabilityResult":{"index":0.75,"paramLengthComplexity":1,"paramSequenceComplexity":0.5}},"..\\src\\internal\\operators\\throttle.ts":{"moduleComponents":{"throttle":{"kind":13,"usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":1,"index":1},"sources":[{"source":{"name":"throttle","statements":["return operate((source, subscriber) => {\r\n    const { leading = true, trailing = false } = config ?? {};\r\n    let hasValue = false;\r\n    let sendValue: T | null = null;\r\n    let throttled: Subscription | null = null;\r\n    let isComplete = false;\r\n\r\n    const endThrottling = () => {\r\n      throttled?.unsubscribe();\r\n      throttled = null;\r\n      if (trailing) {\r\n        send();\r\n        isComplete && subscriber.complete();\r\n      }\r\n    };\r\n\r\n    const cleanupThrottling = () => {\r\n      throttled = null;\r\n      isComplete && subscriber.complete();\r\n    };\r\n\r\n    const startThrottle = (value: T) =>\r\n      (throttled = innerFrom(durationSelector(value)).subscribe(createOperatorSubscriber(subscriber, endThrottling, cleanupThrottling)));\r\n\r\n    const send = () => {\r\n      if (hasValue) {\r\n        // Ensure we clear out our value and hasValue flag\r\n        // before we emit, otherwise reentrant code can cause\r\n        // issues here.\r\n        hasValue = false;\r\n        const value = sendValue!;\r\n        sendValue = null;\r\n        // Emit the value.\r\n        subscriber.next(value);\r\n        !isComplete && startThrottle(value);\r\n      }\r\n    };\r\n\r\n    source.subscribe(\r\n      createOperatorSubscriber(\r\n        subscriber,\r\n        // Regarding the presence of throttled.closed in the following\r\n        // conditions, if a synchronous duration selector is specified - weird,\r\n        // but legal - an already-closed subscription will be assigned to\r\n        // throttled, so the subscription's closed property needs to be checked,\r\n        // too.\r\n        (value) => {\r\n          hasValue = true;\r\n          sendValue = value;\r\n          !(throttled && !throttled.closed) && (leading ? send() : startThrottle(value));\r\n        },\r\n        () => {\r\n          isComplete = true;\r\n          !(trailing && hasValue && throttled && !throttled.closed) && subscriber.complete();\r\n        }\r\n      )\r\n    );\r\n  });"],"parameters":[{"name":"durationSelector","type":"(value: T) => ObservableInput<any>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"config","type":"ThrottleConfig","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"MonoTypeOperatorFunction<T>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nEmits a value from the source Observable, then ignores subsequent source\r\nvalues for a duration determined by another Observable, then repeats this\r\nprocess.\r\n\r\n<span class=\"informal\">It's like {@link throttleTime}, but the silencing\r\nduration is determined by a second Observable.</span>\r\n\r\n![](throttle.svg)\r\n\r\n`throttle` emits the source Observable values on the output Observable\r\nwhen its internal timer is disabled, and ignores source values when the timer\r\nis enabled. Initially, the timer is disabled. As soon as the first source\r\nvalue arrives, it is forwarded to the output Observable, and then the timer\r\nis enabled by calling the `durationSelector` function with the source value,\r\nwhich returns the \"duration\" Observable. When the duration Observable emits a\r\nvalue, the timer is disabled, and this process repeats for the\r\nnext source value.\r\n\r\n## Example\r\n\r\nEmit clicks at a rate of at most one click per second\r\n\r\n```ts\r\nimport { fromEvent, throttle, interval } from 'rxjs';\r\n\r\nconst clicks = fromEvent(document, 'click');\r\nconst result = clicks.pipe(throttle(() => interval(1000)));\r\n\r\nresult.subscribe(x => console.log(x));\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link audit}"},{"kind":25,"tagName":"see","text":"{@link debounce}"},{"kind":25,"tagName":"see","text":"{@link delayWhen}"},{"kind":25,"tagName":"see","text":"{@link sample}"},{"kind":25,"tagName":"see","text":"{@link throttleTime}"},{"kind":25,"tagName":"param","text":"durationSelector A function that receives a value from the source\r\nObservable, for computing the silencing duration for each source value,\r\nreturned as an `ObservableInput`."},{"kind":25,"tagName":"param","text":"config A configuration object to define `leading` and `trailing`\r\nbehavior. Defaults to `{ leading: true, trailing: false }`."},{"kind":25,"tagName":"return","text":"A function that returns an Observable that performs the throttle\r\noperation to limit the rate of emissions from the source."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[],"functionName":"throttle","modulePath":"..\\src\\internal\\operators\\throttle.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},"..\\src\\internal\\operators\\throttleTime.ts":{"moduleComponents":{"throttleTime":{"kind":13,"usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":1,"index":1},"sources":[{"source":{"name":"throttleTime","statements":[{"isExported":false,"isDefaultExport":false,"hasDeclareKeyword":false,"docs":[],"kind":41,"declarationKind":"const","declarations":[{"name":"duration$","initializer":"timer(duration, scheduler)","hasExclamationToken":false,"kind":40}]},"return throttle(() => duration$, config);"],"parameters":[{"name":"duration","type":"number","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"scheduler","initializer":"asyncScheduler","type":"SchedulerLike","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"config","type":"ThrottleConfig","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"MonoTypeOperatorFunction<T>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nEmits a value from the source Observable, then ignores subsequent source\r\nvalues for `duration` milliseconds, then repeats this process.\r\n\r\n<span class=\"informal\">Lets a value pass, then ignores source values for the\r\nnext `duration` milliseconds.</span>\r\n\r\n![](throttleTime.png)\r\n\r\n`throttleTime` emits the source Observable values on the output Observable\r\nwhen its internal timer is disabled, and ignores source values when the timer\r\nis enabled. Initially, the timer is disabled. As soon as the first source\r\nvalue arrives, it is forwarded to the output Observable, and then the timer\r\nis enabled. After `duration` milliseconds (or the time unit determined\r\ninternally by the optional `scheduler`) has passed, the timer is disabled,\r\nand this process repeats for the next source value. Optionally takes a\r\n{@link SchedulerLike} for managing timers.\r\n\r\n## Examples\r\n\r\n### Limit click rate\r\n\r\nEmit clicks at a rate of at most one click per second\r\n\r\n```ts\r\nimport { fromEvent, throttleTime } from 'rxjs';\r\n\r\nconst clicks = fromEvent(document, 'click');\r\nconst result = clicks.pipe(throttleTime(1000));\r\n\r\nresult.subscribe(x => console.log(x));\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link auditTime}"},{"kind":25,"tagName":"see","text":"{@link debounceTime}"},{"kind":25,"tagName":"see","text":"{@link delay}"},{"kind":25,"tagName":"see","text":"{@link sampleTime}"},{"kind":25,"tagName":"see","text":"{@link throttle}"},{"kind":25,"tagName":"param","text":"duration Time to wait before emitting another value after\r\nemitting the last value, measured in milliseconds or the time unit determined\r\ninternally by the optional `scheduler`."},{"kind":25,"tagName":"param","text":"scheduler The {@link SchedulerLike} to use for\r\nmanaging the timers that handle the throttling. Defaults to {@link asyncScheduler}."},{"kind":25,"tagName":"param","text":"config A configuration object to define `leading` and\r\n`trailing` behavior. Defaults to `{ leading: true, trailing: false }`."},{"kind":25,"tagName":"return","text":"A function that returns an Observable that performs the throttle\r\noperation to limit the rate of emissions from the source."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[],"functionName":"throttleTime","modulePath":"..\\src\\internal\\operators\\throttleTime.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},"..\\src\\internal\\operators\\throwIfEmpty.ts":{"moduleComponents":{"throwIfEmpty":{"kind":13,"usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":1,"index":1},"sources":[{"source":{"name":"throwIfEmpty","statements":["return operate((source, subscriber) => {\r\nlet hasValue = false;\r\nsource.subscribe(\r\n  createOperatorSubscriber(\r\n    subscriber,\r\n    (value) => {\r\n      hasValue = true;\r\n      subscriber.next(value);\r\n    },\r\n    () => (hasValue ? subscriber.complete() : subscriber.error(errorFactory()))\r\n  )\r\n);\r\n});"],"parameters":[{"name":"errorFactory","initializer":"defaultErrorFactory","type":"() => any","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"MonoTypeOperatorFunction<T>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nIf the source observable completes without emitting a value, it will emit\r\nan error. The error will be created at that time by the optional\r\n`errorFactory` argument, otherwise, the error will be {@link EmptyError}.\r\n\r\n![](throwIfEmpty.png)\r\n\r\n## Example\r\n\r\nThrow an error if the document wasn't clicked within 1 second\r\n\r\n```ts\r\nimport { fromEvent, takeUntil, timer, throwIfEmpty } from 'rxjs';\r\n\r\nconst click$ = fromEvent(document, 'click');\r\n\r\nclick$.pipe(\r\n  takeUntil(timer(1000)),\r\n  throwIfEmpty(() => new Error('The document was not clicked within 1 second'))\r\n)\r\n.subscribe({\r\n  next() {\r\n   console.log('The document was clicked');\r\n  },\r\n  error(err) {\r\n    console.error(err.message);\r\n  }\r\n});\r\n```\r\n","tags":[{"kind":25,"tagName":"param","text":"errorFactory A factory function called to produce the\r\nerror to be thrown when the source observable completes without emitting a\r\nvalue."},{"kind":25,"tagName":"return","text":"A function that returns an Observable that throws an error if the\r\nsource Observable completed without emitting."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[],"functionName":"throwIfEmpty","modulePath":"..\\src\\internal\\operators\\throwIfEmpty.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},"..\\src\\internal\\operators\\timeInterval.ts":{"moduleComponents":{"timeInterval":{"kind":13,"usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":1,"index":1},"sources":[{"source":{"name":"timeInterval","statements":["return operate((source, subscriber) => {\r\nlet last = scheduler.now();\r\nsource.subscribe(\r\n  createOperatorSubscriber(subscriber, (value) => {\r\n    const now = scheduler.now();\r\n    const interval = now - last;\r\n    last = now;\r\n    subscriber.next(new TimeInterval(value, interval));\r\n  })\r\n);\r\n});"],"parameters":[{"name":"scheduler","initializer":"asyncScheduler","type":"SchedulerLike","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, TimeInterval<T>>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nEmits an object containing the current value, and the time that has\r\npassed between emitting the current value and the previous value, which is\r\ncalculated by using the provided `scheduler`'s `now()` method to retrieve\r\nthe current time at each emission, then calculating the difference. The `scheduler`\r\ndefaults to {@link asyncScheduler}, so by default, the `interval` will be in\r\nmilliseconds.\r\n\r\n<span class=\"informal\">Convert an Observable that emits items into one that\r\nemits indications of the amount of time elapsed between those emissions.</span>\r\n\r\n![](timeInterval.png)\r\n\r\n## Example\r\n\r\nEmit interval between current value with the last value\r\n\r\n```ts\r\nimport { interval, timeInterval } from 'rxjs';\r\n\r\nconst seconds = interval(1000);\r\n\r\nseconds\r\n  .pipe(timeInterval())\r\n  .subscribe(value => console.log(value));\r\n\r\n// NOTE: The values will never be this precise,\r\n// intervals created with `interval` or `setInterval`\r\n// are non-deterministic.\r\n\r\n// { value: 0, interval: 1000 }\r\n// { value: 1, interval: 1000 }\r\n// { value: 2, interval: 1000 }\r\n```\r\n","tags":[{"kind":25,"tagName":"param","text":"{SchedulerLike} [scheduler] Scheduler used to get the current time."},{"kind":25,"tagName":"return","text":"A function that returns an Observable that emits information about\r\nvalue and interval."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[],"functionName":"timeInterval","modulePath":"..\\src\\internal\\operators\\timeInterval.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},"..\\src\\internal\\operators\\timeout.ts":{"moduleComponents":{"timeout":{"kind":13,"usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":1,"index":1},"sources":[{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"O","kind":39,"isConst":false,"constraint":"ObservableInput<unknown>","variance":0},{"name":"M","kind":39,"isConst":false,"default":"unknown","variance":0}],"docs":[{"kind":24,"description":"\r\nIf `with` is provided, this will return an observable that will switch to a different observable if the source\r\ndoes not push values within the specified time parameters.\r\n\r\n<span class=\"informal\">The most flexible option for creating a timeout behavior.</span>\r\n\r\nThe first thing to know about the configuration is if you do not provide a `with` property to the configuration,\r\nwhen timeout conditions are met, this operator will emit a {@link TimeoutError}. Otherwise, it will use the factory\r\nfunction provided by `with`, and switch your subscription to the result of that. Timeout conditions are provided by\r\nthe settings in `first` and `each`.\r\n\r\nThe `first` property can be either a `Date` for a specific time, a `number` for a time period relative to the\r\npoint of subscription, or it can be skipped. This property is to check timeout conditions for the arrival of\r\nthe first value from the source _only_. The timings of all subsequent values  from the source will be checked\r\nagainst the time period provided by `each`, if it was provided.\r\n\r\nThe `each` property can be either a `number` or skipped. If a value for `each` is provided, it represents the amount of\r\ntime the resulting observable will wait between the arrival of values from the source before timing out. Note that if\r\n`first` is _not_ provided, the value from `each` will be used to check timeout conditions for the arrival of the first\r\nvalue and all subsequent values. If `first` _is_ provided, `each` will only be use to check all values after the first.\r\n\r\n## Examples\r\n\r\nEmit a custom error if there is too much time between values\r\n\r\n```ts\r\nimport { interval, timeout, throwError } from 'rxjs';\r\n\r\nclass CustomTimeoutError extends Error {\r\n  constructor() {\r\n    super('It was too slow');\r\n    this.name = 'CustomTimeoutError';\r\n  }\r\n}\r\n\r\nconst slow$ = interval(900);\r\n\r\nslow$.pipe(\r\n  timeout({\r\n    each: 1000,\r\n    with: () => throwError(() => new CustomTimeoutError())\r\n  })\r\n)\r\n.subscribe({\r\n  error: console.error\r\n});\r\n```\r\n\r\nSwitch to a faster observable if your source is slow.\r\n\r\n```ts\r\nimport { interval, timeout } from 'rxjs';\r\n\r\nconst slow$ = interval(900);\r\nconst fast$ = interval(500);\r\n\r\nslow$.pipe(\r\n  timeout({\r\n    each: 1000,\r\n    with: () => fast$,\r\n  })\r\n)\r\n.subscribe(console.log);\r\n```","tags":[{"kind":25,"tagName":"param","text":"config The configuration for the timeout."}]}],"hasDeclareKeyword":false,"parameters":[{"name":"config","type":"TimeoutConfig<T, O, M> & { with: (info: TimeoutInfo<T, M>) => O }","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, T | ObservedValueOf<O>>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"timeout","modulePath":"..\\src\\internal\\operators\\timeout.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"M","kind":39,"isConst":false,"default":"unknown","variance":0}],"docs":[{"kind":24,"description":"\r\nReturns an observable that will error or switch to a different observable if the source does not push values\r\nwithin the specified time parameters.\r\n\r\n<span class=\"informal\">The most flexible option for creating a timeout behavior.</span>\r\n\r\nThe first thing to know about the configuration is if you do not provide a `with` property to the configuration,\r\nwhen timeout conditions are met, this operator will emit a {@link TimeoutError}. Otherwise, it will use the factory\r\nfunction provided by `with`, and switch your subscription to the result of that. Timeout conditions are provided by\r\nthe settings in `first` and `each`.\r\n\r\nThe `first` property can be either a `Date` for a specific time, a `number` for a time period relative to the\r\npoint of subscription, or it can be skipped. This property is to check timeout conditions for the arrival of\r\nthe first value from the source _only_. The timings of all subsequent values  from the source will be checked\r\nagainst the time period provided by `each`, if it was provided.\r\n\r\nThe `each` property can be either a `number` or skipped. If a value for `each` is provided, it represents the amount of\r\ntime the resulting observable will wait between the arrival of values from the source before timing out. Note that if\r\n`first` is _not_ provided, the value from `each` will be used to check timeout conditions for the arrival of the first\r\nvalue and all subsequent values. If `first` _is_ provided, `each` will only be use to check all values after the first.\r\n\r\n### Handling TimeoutErrors\r\n\r\nIf no `with` property was provided, subscriptions to the resulting observable may emit an error of {@link TimeoutError}.\r\nThe timeout error provides useful information you can examine when you're handling the error. The most common way to handle\r\nthe error would be with {@link catchError}, although you could use {@link tap} or just the error handler in your `subscribe` call\r\ndirectly, if your error handling is only a side effect (such as notifying the user, or logging).\r\n\r\nIn this case, you would check the error for `instanceof TimeoutError` to validate that the error was indeed from `timeout`, and\r\nnot from some other source. If it's not from `timeout`, you should probably rethrow it if you're in a `catchError`.\r\n\r\n## Examples\r\n\r\nEmit a {@link TimeoutError} if the first value, and _only_ the first value, does not arrive within 5 seconds\r\n\r\n```ts\r\nimport { interval, timeout } from 'rxjs';\r\n\r\n// A random interval that lasts between 0 and 10 seconds per tick\r\nconst source$ = interval(Math.round(Math.random() * 10_000));\r\n\r\nsource$.pipe(\r\n  timeout({ first: 5_000 })\r\n)\r\n.subscribe({\r\n  next: console.log,\r\n  error: console.error\r\n});\r\n```\r\n\r\nEmit a {@link TimeoutError} if the source waits longer than 5 seconds between any two values or the first value\r\nand subscription.\r\n\r\n```ts\r\nimport { timer, timeout, expand } from 'rxjs';\r\n\r\nconst getRandomTime = () => Math.round(Math.random() * 10_000);\r\n\r\n// An observable that waits a random amount of time between each delivered value\r\nconst source$ = timer(getRandomTime())\r\n  .pipe(expand(() => timer(getRandomTime())));\r\n\r\nsource$\r\n  .pipe(timeout({ each: 5_000 }))\r\n  .subscribe({\r\n    next: console.log,\r\n    error: console.error\r\n  });\r\n```\r\n\r\nEmit a {@link TimeoutError} if the source does not emit before 7 seconds, _or_ if the source waits longer than\r\n5 seconds between any two values after the first.\r\n\r\n```ts\r\nimport { timer, timeout, expand } from 'rxjs';\r\n\r\nconst getRandomTime = () => Math.round(Math.random() * 10_000);\r\n\r\n// An observable that waits a random amount of time between each delivered value\r\nconst source$ = timer(getRandomTime())\r\n  .pipe(expand(() => timer(getRandomTime())));\r\n\r\nsource$\r\n  .pipe(timeout({ first: 7_000, each: 5_000 }))\r\n  .subscribe({\r\n    next: console.log,\r\n    error: console.error\r\n  });\r\n```","tags":[]}],"hasDeclareKeyword":false,"parameters":[{"name":"config","type":"Omit<TimeoutConfig<T, any, M>, 'with'>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, T>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"timeout","modulePath":"..\\src\\internal\\operators\\timeout.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nReturns an observable that will error if the source does not push its first value before the specified time passed as a `Date`.\r\nThis is functionally the same as `timeout({ first: someDate })`.\r\n\r\n<span class=\"informal\">Errors if the first value doesn't show up before the given date and time</span>\r\n\r\n![](timeout.png)\r\n","tags":[{"kind":25,"tagName":"param","text":"first The date to at which the resulting observable will timeout if the source observable\r\ndoes not emit at least one value."},{"kind":25,"tagName":"param","text":"scheduler The scheduler to use. Defaults to {@link asyncScheduler}."}]}],"hasDeclareKeyword":false,"parameters":[{"name":"first","type":"Date","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"scheduler","type":"SchedulerLike","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"MonoTypeOperatorFunction<T>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"timeout","modulePath":"..\\src\\internal\\operators\\timeout.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nReturns an observable that will error if the source does not push a value within the specified time in milliseconds.\r\nThis is functionally the same as `timeout({ each: milliseconds })`.\r\n\r\n<span class=\"informal\">Errors if it waits too long between any value</span>\r\n\r\n![](timeout.png)\r\n","tags":[{"kind":25,"tagName":"param","text":"each The time allowed between each pushed value from the source before the resulting observable\r\nwill timeout."},{"kind":25,"tagName":"param","text":"scheduler The scheduler to use. Defaults to {@link asyncScheduler}."}]}],"hasDeclareKeyword":false,"parameters":[{"name":"each","type":"number","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"scheduler","type":"SchedulerLike","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"MonoTypeOperatorFunction<T>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"timeout","modulePath":"..\\src\\internal\\operators\\timeout.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},"..\\src\\internal\\operators\\timeoutWith.ts":{"moduleComponents":{"timeoutWith":{"kind":13,"usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":1,"index":1},"sources":[{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"R","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Replaced with {@link timeout}. Instead of `timeoutWith(someDate, a$, scheduler)`, use the configuration object\r\n`timeout({ first: someDate, with: () => a$, scheduler })`. Will be removed in v8."}]}],"hasDeclareKeyword":false,"parameters":[{"name":"dueBy","type":"Date","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"switchTo","type":"ObservableInput<R>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"scheduler","type":"SchedulerLike","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, T | R>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"timeoutWith","modulePath":"..\\src\\internal\\operators\\timeoutWith.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"R","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Replaced with {@link timeout}. Instead of `timeoutWith(100, a$, scheduler)`, use the configuration object\r\n `timeout({ each: 100, with: () => a$, scheduler })`. Will be removed in v8."}]}],"hasDeclareKeyword":false,"parameters":[{"name":"waitFor","type":"number","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"switchTo","type":"ObservableInput<R>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"scheduler","type":"SchedulerLike","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, T | R>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"timeoutWith","modulePath":"..\\src\\internal\\operators\\timeoutWith.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},"..\\src\\internal\\operators\\timestamp.ts":{"moduleComponents":{"timestamp":{"kind":13,"usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":1,"index":1},"sources":[{"source":{"name":"timestamp","statements":["return map((value: T) => ({ value, timestamp: timestampProvider.now() }));"],"parameters":[{"name":"timestampProvider","initializer":"dateTimestampProvider","type":"TimestampProvider","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, Timestamp<T>>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nAttaches a timestamp to each item emitted by an observable indicating when it was emitted\r\n\r\nThe `timestamp` operator maps the *source* observable stream to an object of type\r\n`{value: T, timestamp: R}`. The properties are generically typed. The `value` property contains the value\r\nand type of the *source* observable. The `timestamp` is generated by the schedulers `now` function. By\r\ndefault, it uses the `asyncScheduler` which simply returns `Date.now()` (milliseconds since 1970/01/01\r\n00:00:00:000) and therefore is of type `number`.\r\n\r\n![](timestamp.png)\r\n\r\n## Example\r\n\r\nIn this example there is a timestamp attached to the document's click events\r\n\r\n```ts\r\nimport { fromEvent, timestamp } from 'rxjs';\r\n\r\nconst clickWithTimestamp = fromEvent(document, 'click').pipe(\r\n  timestamp()\r\n);\r\n\r\n// Emits data of type { value: PointerEvent, timestamp: number }\r\nclickWithTimestamp.subscribe(data => {\r\n  console.log(data);\r\n});\r\n```\r\n","tags":[{"kind":25,"tagName":"param","text":"timestampProvider An object with a `now()` method used to get the current timestamp."},{"kind":25,"tagName":"return","text":"A function that returns an Observable that attaches a timestamp to\r\neach item emitted by the source Observable indicating when it was emitted."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[],"functionName":"timestamp","modulePath":"..\\src\\internal\\operators\\timestamp.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},"..\\src\\internal\\operators\\toArray.ts":{"moduleComponents":{"toArray":{"kind":13,"usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":1,"index":1},"sources":[{"source":{"name":"toArray","statements":["return operate((source, subscriber) => {\r\nreduce(arrReducer, [] as T[])(source).subscribe(subscriber);\r\n});"],"parameters":[],"returnType":"OperatorFunction<T, T[]>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nCollects all source emissions and emits them as an array when the source completes.\r\n\r\n<span class=\"informal\">Get all values inside an array when the source completes</span>\r\n\r\n![](toArray.png)\r\n\r\n`toArray` will wait until the source Observable completes before emitting\r\nthe array containing all emissions. When the source Observable errors no\r\narray will be emitted.\r\n\r\n## Example\r\n\r\n```ts\r\nimport { interval, take, toArray } from 'rxjs';\r\n\r\nconst source = interval(1000);\r\nconst example = source.pipe(\r\n  take(10),\r\n  toArray()\r\n);\r\n\r\nexample.subscribe(value => console.log(value));\r\n\r\n// output: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\r\n```\r\n","tags":[{"kind":25,"tagName":"return","text":"A function that returns an Observable that emits an array of items\r\nemitted by the source Observable when source completes."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[],"functionName":"toArray","modulePath":"..\\src\\internal\\operators\\toArray.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},"..\\src\\internal\\operators\\window.ts":{"moduleComponents":{"window":{"kind":13,"usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":1,"index":1},"sources":[{"source":{"name":"window","statements":["return operate((source, subscriber) => {\r\n    let windowSubject: Subject<T> = new Subject<T>();\r\n\r\n    subscriber.next(windowSubject.asObservable());\r\n\r\n    const errorHandler = (err: any) => {\r\n      windowSubject.error(err);\r\n      subscriber.error(err);\r\n    };\r\n\r\n    // Subscribe to our source\r\n    source.subscribe(\r\n      createOperatorSubscriber(\r\n        subscriber,\r\n        (value) => windowSubject?.next(value),\r\n        () => {\r\n          windowSubject.complete();\r\n          subscriber.complete();\r\n        },\r\n        errorHandler\r\n      )\r\n    );\r\n\r\n    // Subscribe to the window boundaries.\r\n    innerFrom(windowBoundaries).subscribe(\r\n      createOperatorSubscriber(\r\n        subscriber,\r\n        () => {\r\n          windowSubject.complete();\r\n          subscriber.next((windowSubject = new Subject()));\r\n        },\r\n        noop,\r\n        errorHandler\r\n      )\r\n    );\r\n\r\n    return () => {\r\n      // Unsubscribing the subject ensures that anyone who has captured\r\n      // a reference to this window that tries to use it after it can\r\n      // no longer get values from the source will get an ObjectUnsubscribedError.\r\n      windowSubject?.unsubscribe();\r\n      windowSubject = null!;\r\n    };\r\n  });"],"parameters":[{"name":"windowBoundaries","type":"ObservableInput<any>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, Observable<T>>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nBranch out the source Observable values as a nested Observable whenever\r\n`windowBoundaries` emits.\r\n\r\n<span class=\"informal\">It's like {@link buffer}, but emits a nested Observable\r\ninstead of an array.</span>\r\n\r\n![](window.png)\r\n\r\nReturns an Observable that emits windows of items it collects from the source\r\nObservable. The output Observable emits connected, non-overlapping\r\nwindows. It emits the current window and opens a new one whenever the\r\n`windowBoundaries` emits an item. `windowBoundaries` can be any type that\r\n`ObservableInput` accepts. It internally gets converted to an Observable.\r\nBecause each window is an Observable, the output is a higher-order Observable.\r\n\r\n## Example\r\n\r\nIn every window of 1 second each, emit at most 2 click events\r\n\r\n```ts\r\nimport { fromEvent, interval, window, map, take, mergeAll } from 'rxjs';\r\n\r\nconst clicks = fromEvent(document, 'click');\r\nconst sec = interval(1000);\r\nconst result = clicks.pipe(\r\n  window(sec),\r\n  map(win => win.pipe(take(2))), // take at most 2 emissions from each window\r\n  mergeAll()                     // flatten the Observable-of-Observables\r\n);\r\nresult.subscribe(x => console.log(x));\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link windowCount}"},{"kind":25,"tagName":"see","text":"{@link windowTime}"},{"kind":25,"tagName":"see","text":"{@link windowToggle}"},{"kind":25,"tagName":"see","text":"{@link windowWhen}"},{"kind":25,"tagName":"see","text":"{@link buffer}"},{"kind":25,"tagName":"param","text":"windowBoundaries An `ObservableInput` that completes the\r\nprevious window and starts a new window."},{"kind":25,"tagName":"return","text":"A function that returns an Observable of windows, which are\r\nObservables emitting values of the source Observable."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[],"functionName":"window","modulePath":"..\\src\\internal\\operators\\window.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},"..\\src\\internal\\operators\\windowCount.ts":{"moduleComponents":{"windowCount":{"kind":13,"usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":0,"index":0.5},"sources":[{"source":{"name":"windowCount","statements":[{"isExported":false,"isDefaultExport":false,"hasDeclareKeyword":false,"docs":[],"kind":41,"declarationKind":"const","declarations":[{"name":"startEvery","initializer":"startWindowEvery > 0 ? startWindowEvery : windowSize","hasExclamationToken":false,"kind":40}]},"return operate((source, subscriber) => {\r\n    let windows = [new Subject<T>()];\r\n    let starts: number[] = [];\r\n    let count = 0;\r\n\r\n    // Open the first window.\r\n    subscriber.next(windows[0].asObservable());\r\n\r\n    source.subscribe(\r\n      createOperatorSubscriber(\r\n        subscriber,\r\n        (value: T) => {\r\n          // Emit the value through all current windows.\r\n          // We don't need to create a new window yet, we\r\n          // do that as soon as we close one.\r\n          for (const window of windows) {\r\n            window.next(value);\r\n          }\r\n          // Here we're using the size of the window array to figure\r\n          // out if the oldest window has emitted enough values. We can do this\r\n          // because the size of the window array is a function of the values\r\n          // seen by the subscription. If it's time to close it, we complete\r\n          // it and remove it.\r\n          const c = count - windowSize + 1;\r\n          if (c >= 0 && c % startEvery === 0) {\r\n            windows.shift()!.complete();\r\n          }\r\n\r\n          // Look to see if the next count tells us it's time to open a new window.\r\n          // TODO: We need to figure out if this really makes sense. We're technically\r\n          // emitting windows *before* we have a value to emit them for. It's probably\r\n          // more expected that we should be emitting the window when the start\r\n          // count is reached -- not before.\r\n          if (++count % startEvery === 0) {\r\n            const window = new Subject<T>();\r\n            windows.push(window);\r\n            subscriber.next(window.asObservable());\r\n          }\r\n        },\r\n        () => {\r\n          while (windows.length > 0) {\r\n            windows.shift()!.complete();\r\n          }\r\n          subscriber.complete();\r\n        },\r\n        (err) => {\r\n          while (windows.length > 0) {\r\n            windows.shift()!.error(err);\r\n          }\r\n          subscriber.error(err);\r\n        },\r\n        () => {\r\n          starts = null!;\r\n          windows = null!;\r\n        }\r\n      )\r\n    );\r\n  });"],"parameters":[{"name":"windowSize","type":"number","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"startWindowEvery","initializer":"0","type":"number","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, Observable<T>>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nBranch out the source Observable values as a nested Observable with each\r\nnested Observable emitting at most `windowSize` values.\r\n\r\n<span class=\"informal\">It's like {@link bufferCount}, but emits a nested\r\nObservable instead of an array.</span>\r\n\r\n![](windowCount.png)\r\n\r\nReturns an Observable that emits windows of items it collects from the source\r\nObservable. The output Observable emits windows every `startWindowEvery`\r\nitems, each containing no more than `windowSize` items. When the source\r\nObservable completes or encounters an error, the output Observable emits\r\nthe current window and propagates the notification from the source\r\nObservable. If `startWindowEvery` is not provided, then new windows are\r\nstarted immediately at the start of the source and when each window completes\r\nwith size `windowSize`.\r\n\r\n## Examples\r\n\r\nIgnore every 3rd click event, starting from the first one\r\n\r\n```ts\r\nimport { fromEvent, windowCount, map, skip, mergeAll } from 'rxjs';\r\n\r\nconst clicks = fromEvent(document, 'click');\r\nconst result = clicks.pipe(\r\n  windowCount(3),\r\n  map(win => win.pipe(skip(1))), // skip first of every 3 clicks\r\n  mergeAll()                     // flatten the Observable-of-Observables\r\n);\r\nresult.subscribe(x => console.log(x));\r\n```\r\n\r\nIgnore every 3rd click event, starting from the third one\r\n\r\n```ts\r\nimport { fromEvent, windowCount, mergeAll } from 'rxjs';\r\n\r\nconst clicks = fromEvent(document, 'click');\r\nconst result = clicks.pipe(\r\n  windowCount(2, 3),\r\n  mergeAll() // flatten the Observable-of-Observables\r\n);\r\nresult.subscribe(x => console.log(x));\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link window}"},{"kind":25,"tagName":"see","text":"{@link windowTime}"},{"kind":25,"tagName":"see","text":"{@link windowToggle}"},{"kind":25,"tagName":"see","text":"{@link windowWhen}"},{"kind":25,"tagName":"see","text":"{@link bufferCount}"},{"kind":25,"tagName":"param","text":"{number} windowSize The maximum number of values emitted by each\r\nwindow."},{"kind":25,"tagName":"param","text":"{number} [startWindowEvery] Interval at which to start a new window.\r\nFor example if `startWindowEvery` is `2`, then a new window will be started\r\non every other value from the source. A new window is started at the\r\nbeginning of the source by default."},{"kind":25,"tagName":"return","text":"A function that returns an Observable of windows, which in turn are\r\nObservable of values."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[],"functionName":"windowCount","modulePath":"..\\src\\internal\\operators\\windowCount.ts"},"usabilityResult":{"index":0.5,"paramLengthComplexity":1,"paramSequenceComplexity":0}}]}},"usabilityResult":{"index":0.5,"paramLengthComplexity":1,"paramSequenceComplexity":0}},"..\\src\\internal\\operators\\windowTime.ts":{"moduleComponents":{"windowTime":{"kind":13,"usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":0.6111111111111112,"index":0.8055555555555556},"sources":[{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"windowTimeSpan","type":"number","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"scheduler","type":"SchedulerLike","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, Observable<T>>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"windowTime","modulePath":"..\\src\\internal\\operators\\windowTime.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"windowTimeSpan","type":"number","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"windowCreationInterval","type":"number","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"scheduler","type":"SchedulerLike","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, Observable<T>>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"windowTime","modulePath":"..\\src\\internal\\operators\\windowTime.ts"},"usabilityResult":{"index":0.75,"paramLengthComplexity":1,"paramSequenceComplexity":0.5}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"windowTimeSpan","type":"number","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"windowCreationInterval","type":"number | null | void","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"maxWindowSize","type":"number","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"scheduler","type":"SchedulerLike","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, Observable<T>>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"windowTime","modulePath":"..\\src\\internal\\operators\\windowTime.ts"},"usabilityResult":{"index":0.6666666666666667,"paramLengthComplexity":1,"paramSequenceComplexity":0.33333333333333337}}]}},"usabilityResult":{"index":0.8055555555555556,"paramLengthComplexity":1,"paramSequenceComplexity":0.6111111111111112}},"..\\src\\internal\\operators\\windowToggle.ts":{"moduleComponents":{"windowToggle":{"kind":13,"usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":1,"index":1},"sources":[{"source":{"name":"windowToggle","statements":["return operate((source, subscriber) => {\r\n    const windows: Subject<T>[] = [];\r\n\r\n    const handleError = (err: any) => {\r\n      while (0 < windows.length) {\r\n        windows.shift()!.error(err);\r\n      }\r\n      subscriber.error(err);\r\n    };\r\n\r\n    innerFrom(openings).subscribe(\r\n      createOperatorSubscriber(\r\n        subscriber,\r\n        (openValue) => {\r\n          const window = new Subject<T>();\r\n          windows.push(window);\r\n          const closingSubscription = new Subscription();\r\n          const closeWindow = () => {\r\n            arrRemove(windows, window);\r\n            window.complete();\r\n            closingSubscription.unsubscribe();\r\n          };\r\n\r\n          let closingNotifier: Observable<any>;\r\n          try {\r\n            closingNotifier = innerFrom(closingSelector(openValue));\r\n          } catch (err) {\r\n            handleError(err);\r\n            return;\r\n          }\r\n\r\n          subscriber.next(window.asObservable());\r\n\r\n          closingSubscription.add(closingNotifier.subscribe(createOperatorSubscriber(subscriber, closeWindow, noop, handleError)));\r\n        },\r\n        noop\r\n      )\r\n    );\r\n\r\n    // Subscribe to the source to get things started.\r\n    source.subscribe(\r\n      createOperatorSubscriber(\r\n        subscriber,\r\n        (value: T) => {\r\n          // Copy the windows array before we emit to\r\n          // make sure we don't have issues with reentrant code.\r\n          const windowsCopy = windows.slice();\r\n          for (const window of windowsCopy) {\r\n            window.next(value);\r\n          }\r\n        },\r\n        () => {\r\n          // Complete all of our windows before we complete.\r\n          while (0 < windows.length) {\r\n            windows.shift()!.complete();\r\n          }\r\n          subscriber.complete();\r\n        },\r\n        handleError,\r\n        () => {\r\n          // Add this finalization so that all window subjects are\r\n          // disposed of. This way, if a user tries to subscribe\r\n          // to a window *after* the outer subscription has been unsubscribed,\r\n          // they will get an error, instead of waiting forever to\r\n          // see if a value arrives.\r\n          while (0 < windows.length) {\r\n            windows.shift()!.unsubscribe();\r\n          }\r\n        }\r\n      )\r\n    );\r\n  });"],"parameters":[{"name":"openings","type":"ObservableInput<O>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"closingSelector","type":"(openValue: O) => ObservableInput<any>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, Observable<T>>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"O","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nBranch out the source Observable values as a nested Observable starting from\r\nan emission from `openings` and ending when the output of `closingSelector`\r\nemits.\r\n\r\n<span class=\"informal\">It's like {@link bufferToggle}, but emits a nested\r\nObservable instead of an array.</span>\r\n\r\n![](windowToggle.png)\r\n\r\nReturns an Observable that emits windows of items it collects from the source\r\nObservable. The output Observable emits windows that contain those items\r\nemitted by the source Observable between the time when the `openings`\r\nObservable emits an item and when the Observable returned by\r\n`closingSelector` emits an item.\r\n\r\n## Example\r\n\r\nEvery other second, emit the click events from the next 500ms\r\n\r\n```ts\r\nimport { fromEvent, interval, windowToggle, EMPTY, mergeAll } from 'rxjs';\r\n\r\nconst clicks = fromEvent(document, 'click');\r\nconst openings = interval(1000);\r\nconst result = clicks.pipe(\r\n  windowToggle(openings, i => i % 2 ? interval(500) : EMPTY),\r\n  mergeAll()\r\n);\r\nresult.subscribe(x => console.log(x));\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link window}"},{"kind":25,"tagName":"see","text":"{@link windowCount}"},{"kind":25,"tagName":"see","text":"{@link windowTime}"},{"kind":25,"tagName":"see","text":"{@link windowWhen}"},{"kind":25,"tagName":"see","text":"{@link bufferToggle}"},{"kind":25,"tagName":"param","text":"{Observable<O>} openings An observable of notifications to start new\r\nwindows."},{"kind":25,"tagName":"param","text":"{function(value: O): Observable} closingSelector A function that takes\r\nthe value emitted by the `openings` observable and returns an Observable,\r\nwhich, when it emits a next notification, signals that the\r\nassociated window should complete."},{"kind":25,"tagName":"return","text":"A function that returns an Observable of windows, which in turn are\r\nObservables."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[],"functionName":"windowToggle","modulePath":"..\\src\\internal\\operators\\windowToggle.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},"..\\src\\internal\\operators\\windowWhen.ts":{"moduleComponents":{"windowWhen":{"kind":13,"usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":1,"index":1},"sources":[{"source":{"name":"windowWhen","statements":["return operate((source, subscriber) => {\r\n    let window: Subject<T> | null;\r\n    let closingSubscriber: Subscriber<any> | undefined;\r\n\r\n    /**\r\n     * When we get an error, we have to notify both the\r\n     * destination subscriber and the window.\r\n     */\r\n    const handleError = (err: any) => {\r\n      window!.error(err);\r\n      subscriber.error(err);\r\n    };\r\n\r\n    /**\r\n     * Called every time we need to open a window.\r\n     * Recursive, as it will start the closing notifier, which\r\n     * inevitably *should* call openWindow -- but may not if\r\n     * it is a \"never\" observable.\r\n     */\r\n    const openWindow = () => {\r\n      // We need to clean up our closing subscription,\r\n      // we only cared about the first next or complete notification.\r\n      closingSubscriber?.unsubscribe();\r\n\r\n      // Close our window before starting a new one.\r\n      window?.complete();\r\n\r\n      // Start the new window.\r\n      window = new Subject<T>();\r\n      subscriber.next(window.asObservable());\r\n\r\n      // Get our closing notifier.\r\n      let closingNotifier: Observable<any>;\r\n      try {\r\n        closingNotifier = innerFrom(closingSelector());\r\n      } catch (err) {\r\n        handleError(err);\r\n        return;\r\n      }\r\n\r\n      // Subscribe to the closing notifier, be sure\r\n      // to capture the subscriber (aka Subscription)\r\n      // so we can clean it up when we close the window\r\n      // and open a new one.\r\n      closingNotifier.subscribe((closingSubscriber = createOperatorSubscriber(subscriber, openWindow, openWindow, handleError)));\r\n    };\r\n\r\n    // Start the first window.\r\n    openWindow();\r\n\r\n    // Subscribe to the source\r\n    source.subscribe(\r\n      createOperatorSubscriber(\r\n        subscriber,\r\n        (value) => window!.next(value),\r\n        () => {\r\n          // The source completed, close the window and complete.\r\n          window!.complete();\r\n          subscriber.complete();\r\n        },\r\n        handleError,\r\n        () => {\r\n          // Be sure to clean up our closing subscription\r\n          // when this tears down.\r\n          closingSubscriber?.unsubscribe();\r\n          window = null!;\r\n        }\r\n      )\r\n    );\r\n  });"],"parameters":[{"name":"closingSelector","type":"() => ObservableInput<any>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, Observable<T>>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nBranch out the source Observable values as a nested Observable using a\r\nfactory function of closing Observables to determine when to start a new\r\nwindow.\r\n\r\n<span class=\"informal\">It's like {@link bufferWhen}, but emits a nested\r\nObservable instead of an array.</span>\r\n\r\n![](windowWhen.png)\r\n\r\nReturns an Observable that emits windows of items it collects from the source\r\nObservable. The output Observable emits connected, non-overlapping windows.\r\nIt emits the current window and opens a new one whenever the Observable\r\nproduced by the specified `closingSelector` function emits an item. The first\r\nwindow is opened immediately when subscribing to the output Observable.\r\n\r\n## Example\r\n\r\nEmit only the first two clicks events in every window of [1-5] random seconds\r\n\r\n```ts\r\nimport { fromEvent, windowWhen, interval, map, take, mergeAll } from 'rxjs';\r\n\r\nconst clicks = fromEvent(document, 'click');\r\nconst result = clicks.pipe(\r\n  windowWhen(() => interval(1000 + Math.random() * 4000)),\r\n  map(win => win.pipe(take(2))), // take at most 2 emissions from each window\r\n  mergeAll()                     // flatten the Observable-of-Observables\r\n);\r\nresult.subscribe(x => console.log(x));\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link window}"},{"kind":25,"tagName":"see","text":"{@link windowCount}"},{"kind":25,"tagName":"see","text":"{@link windowTime}"},{"kind":25,"tagName":"see","text":"{@link windowToggle}"},{"kind":25,"tagName":"see","text":"{@link bufferWhen}"},{"kind":25,"tagName":"param","text":"{function(): Observable} closingSelector A function that takes no\r\narguments and returns an Observable that signals (on either `next` or\r\n`complete`) when to close the previous window and start a new one."},{"kind":25,"tagName":"return","text":"A function that returns an Observable of windows, which in turn are\r\nObservables."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[],"functionName":"windowWhen","modulePath":"..\\src\\internal\\operators\\windowWhen.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},"..\\src\\internal\\operators\\withLatestFrom.ts":{"moduleComponents":{"withLatestFrom":{"kind":13,"usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":1,"index":1},"sources":[{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"O","kind":39,"isConst":false,"constraint":"unknown[]","variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"inputs","type":"[...ObservableInputTuple<O>]","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":true}],"returnType":"OperatorFunction<T, [T, ...O]>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"withLatestFrom","modulePath":"..\\src\\internal\\operators\\withLatestFrom.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"O","kind":39,"isConst":false,"constraint":"unknown[]","variance":0},{"name":"R","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"inputs","type":"[...ObservableInputTuple<O>, (...value: [T, ...O]) => R]","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":true}],"returnType":"OperatorFunction<T, R>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"withLatestFrom","modulePath":"..\\src\\internal\\operators\\withLatestFrom.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},"..\\src\\internal\\operators\\zipAll.ts":{"moduleComponents":{"zipAll":{"kind":13,"usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":1,"index":1},"sources":[{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nCollects all observable inner sources from the source, once the source completes,\r\nit will subscribe to all inner sources, combining their values by index and emitting\r\nthem.\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link zipWith}"},{"kind":25,"tagName":"see","text":"{@link zip}"}]}],"hasDeclareKeyword":false,"parameters":[],"returnType":"OperatorFunction<ObservableInput<T>, T[]>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"zipAll","modulePath":"..\\src\\internal\\operators\\zipAll.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[],"returnType":"OperatorFunction<any, T[]>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"zipAll","modulePath":"..\\src\\internal\\operators\\zipAll.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"R","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"project","type":"(...values: T[]) => R","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<ObservableInput<T>, R>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"zipAll","modulePath":"..\\src\\internal\\operators\\zipAll.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},{"source":{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"R","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"project","type":"(...values: Array<any>) => R","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<any, R>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"zipAll","modulePath":"..\\src\\internal\\operators\\zipAll.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}},"..\\src\\internal\\operators\\zipWith.ts":{"moduleComponents":{"zipWith":{"kind":13,"usabilityResult":{"paramLengthComplexity":1,"paramSequenceComplexity":1,"index":1},"sources":[{"source":{"name":"zipWith","statements":["return zip(...otherInputs);"],"parameters":[{"name":"otherInputs","type":"[...ObservableInputTuple<A>]","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":true}],"returnType":"OperatorFunction<T, Cons<T, A>>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"A","kind":39,"isConst":false,"constraint":"readonly unknown[]","variance":0}],"docs":[{"kind":24,"description":"\r\nSubscribes to the source, and the observable inputs provided as arguments, and combines their values, by index, into arrays.\r\n\r\nWhat is meant by \"combine by index\": The first value from each will be made into a single array, then emitted,\r\nthen the second value from each will be combined into a single array and emitted, then the third value\r\nfrom each will be combined into a single array and emitted, and so on.\r\n\r\nThis will continue until it is no longer able to combine values of the same index into an array.\r\n\r\nAfter the last value from any one completed source is emitted in an array, the resulting observable will complete,\r\nas there is no way to continue \"zipping\" values together by index.\r\n\r\nUse-cases for this operator are limited. There are memory concerns if one of the streams is emitting\r\nvalues at a much faster rate than the others. Usage should likely be limited to streams that emit\r\nat a similar pace, or finite streams of known length.\r\n\r\nIn many cases, authors want `combineLatestWith` and not `zipWith`.\r\n","tags":[{"kind":25,"tagName":"param","text":"otherInputs other observable inputs to collate values from."},{"kind":25,"tagName":"return","text":"A function that returns an Observable that emits items by index\r\ncombined from the source Observable and provided Observables, in form of an\r\narray."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[],"functionName":"zipWith","modulePath":"..\\src\\internal\\operators\\zipWith.ts"},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}]}},"usabilityResult":{"index":1,"paramLengthComplexity":1,"paramSequenceComplexity":1}}}}