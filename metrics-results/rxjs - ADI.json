{"projectName":"rxjs","metric":"ADI","usabilityResult":{"index":0.8829530201342282},"modules":{"..\\src\\internal\\Observable.ts":{"moduleComponents":{"Observable":{"kind":2,"usabilityResult":{"wordCount":0,"index":0},"methods":[{"name":"lift","usabilityResult":{"index":0,"wordCount":null},"sources":{"name":"lift","statements":[{"isExported":false,"isDefaultExport":false,"hasDeclareKeyword":false,"docs":[],"kind":41,"declarationKind":"const","declarations":[{"name":"observable","initializer":"new Observable<R>()","hasExclamationToken":false,"kind":40}]},"observable.source = this;","observable.operator = operator;","return observable;"],"parameters":[{"name":"operator","type":"Operator<T, R>","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<R>","typeParameters":[{"name":"R","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nCreates a new Observable, with this Observable instance as the source, and the passed\r\noperator defined as the new observable's operator.","tags":[{"kind":25,"tagName":"method","text":"lift"},{"kind":25,"tagName":"param","text":"operator the operator defining the operation to take on the observable"},{"kind":25,"tagName":"return","text":"a new observable with the Operator applied"},{"kind":25,"tagName":"deprecated","text":"Internal implementation detail, do not use directly. Will be made internal in v8.\r\nIf you have implemented an operator using `lift`, it is recommended that you create an\r\noperator by simply returning `new Observable()` directly. See \"Creating new operators from\r\nscratch\" section here: https://rxjs.dev/guide/operators"}]}],"isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"isAbstract":false,"decorators":[],"hasOverrideKeyword":false,"kind":26,"overloads":[],"declarationInfo":{"className":"Observable","modulePath":"..\\src\\internal\\Observable.ts"}}},{"name":"subscribe","usabilityResult":{"index":0,"wordCount":null},"sources":{"name":"subscribe","statements":[{"isExported":false,"isDefaultExport":false,"hasDeclareKeyword":false,"docs":[],"kind":41,"declarationKind":"const","declarations":[{"name":"subscriber","initializer":"isSubscriber(observerOrNext) ? observerOrNext : new SafeSubscriber(observerOrNext, error, complete)","hasExclamationToken":false,"kind":40}]},"errorContext(() => {\r\n  const { operator, source } = this;\r\n  subscriber.add(\r\n    operator\r\n      ? // We're dealing with a subscription in the\r\n        // operator chain to one of our lifted operators.\r\n        operator.call(subscriber, source)\r\n      : source\r\n      ? // If `source` has a value, but `operator` does not, something that\r\n        // had intimate knowledge of our API, like our `Subject`, must have\r\n        // set it. We're going to just call `_subscribe` directly.\r\n        this._subscribe(subscriber)\r\n      : // In all other cases, we're likely wrapping a user-provided initializer\r\n        // function, so we need to catch errors and handle them appropriately.\r\n        this._trySubscribe(subscriber)\r\n  );\r\n});","return subscriber;"],"parameters":[{"name":"observerOrNext","type":"Partial<Observer<T>> | ((value: T) => void) | null","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"error","type":"((error: any) => void) | null","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"complete","type":"(() => void) | null","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Subscription","typeParameters":[],"docs":[{"kind":24,"description":"\r\nInvokes an execution of an Observable and registers Observer handlers for notifications it will emit.\r\n\r\n<span class=\"informal\">Use it when you have all these Observables, but still nothing is happening.</span>\r\n\r\n`subscribe` is not a regular operator, but a method that calls Observable's internal `subscribe` function. It\r\nmight be for example a function that you passed to Observable's constructor, but most of the time it is\r\na library implementation, which defines what will be emitted by an Observable, and when it be will emitted. This means\r\nthat calling `subscribe` is actually the moment when Observable starts its work, not when it is created, as it is often\r\nthe thought.\r\n\r\nApart from starting the execution of an Observable, this method allows you to listen for values\r\nthat an Observable emits, as well as for when it completes or errors. You can achieve this in two\r\nof the following ways.\r\n\r\nThe first way is creating an object that implements {@link Observer} interface. It should have methods\r\ndefined by that interface, but note that it should be just a regular JavaScript object, which you can create\r\nyourself in any way you want (ES6 class, classic function constructor, object literal etc.). In particular, do\r\nnot attempt to use any RxJS implementation details to create Observers - you don't need them. Remember also\r\nthat your object does not have to implement all methods. If you find yourself creating a method that doesn't\r\ndo anything, you can simply omit it. Note however, if the `error` method is not provided and an error happens,\r\nit will be thrown asynchronously. Errors thrown asynchronously cannot be caught using `try`/`catch`. Instead,\r\nuse the {@link onUnhandledError} configuration option or use a runtime handler (like `window.onerror` or\r\n`process.on('error)`) to be notified of unhandled errors. Because of this, it's recommended that you provide\r\nan `error` method to avoid missing thrown errors.\r\n\r\nThe second way is to give up on Observer object altogether and simply provide callback functions in place of its methods.\r\nThis means you can provide three functions as arguments to `subscribe`, where the first function is equivalent\r\nof a `next` method, the second of an `error` method and the third of a `complete` method. Just as in case of an Observer,\r\nif you do not need to listen for something, you can omit a function by passing `undefined` or `null`,\r\nsince `subscribe` recognizes these functions by where they were placed in function call. When it comes\r\nto the `error` function, as with an Observer, if not provided, errors emitted by an Observable will be thrown asynchronously.\r\n\r\nYou can, however, subscribe with no parameters at all. This may be the case where you're not interested in terminal events\r\nand you also handled emissions internally by using operators (e.g. using `tap`).\r\n\r\nWhichever style of calling `subscribe` you use, in both cases it returns a Subscription object.\r\nThis object allows you to call `unsubscribe` on it, which in turn will stop the work that an Observable does and will clean\r\nup all resources that an Observable used. Note that cancelling a subscription will not call `complete` callback\r\nprovided to `subscribe` function, which is reserved for a regular completion signal that comes from an Observable.\r\n\r\nRemember that callbacks provided to `subscribe` are not guaranteed to be called asynchronously.\r\nIt is an Observable itself that decides when these functions will be called. For example {@link of}\r\nby default emits all its values synchronously. Always check documentation for how given Observable\r\nwill behave when subscribed and if its default behavior can be modified with a `scheduler`.\r\n\r\n#### Examples\r\n\r\nSubscribe with an {@link guide/observer Observer}\r\n\r\n```ts\r\nimport { of } from 'rxjs';\r\n\r\nconst sumObserver = {\r\n  sum: 0,\r\n  next(value) {\r\n    console.log('Adding: ' + value);\r\n    this.sum = this.sum + value;\r\n  },\r\n  error() {\r\n    // We actually could just remove this method,\r\n    // since we do not really care about errors right now.\r\n  },\r\n  complete() {\r\n    console.log('Sum equals: ' + this.sum);\r\n  }\r\n};\r\n\r\nof(1, 2, 3) // Synchronously emits 1, 2, 3 and then completes.\r\n  .subscribe(sumObserver);\r\n\r\n// Logs:\r\n// 'Adding: 1'\r\n// 'Adding: 2'\r\n// 'Adding: 3'\r\n// 'Sum equals: 6'\r\n```\r\n\r\nSubscribe with functions ({@link deprecations/subscribe-arguments deprecated})\r\n\r\n```ts\r\nimport { of } from 'rxjs'\r\n\r\nlet sum = 0;\r\n\r\nof(1, 2, 3).subscribe(\r\n  value => {\r\n    console.log('Adding: ' + value);\r\n    sum = sum + value;\r\n  },\r\n  undefined,\r\n  () => console.log('Sum equals: ' + sum)\r\n);\r\n\r\n// Logs:\r\n// 'Adding: 1'\r\n// 'Adding: 2'\r\n// 'Adding: 3'\r\n// 'Sum equals: 6'\r\n```\r\n\r\nCancel a subscription\r\n\r\n```ts\r\nimport { interval } from 'rxjs';\r\n\r\nconst subscription = interval(1000).subscribe({\r\n  next(num) {\r\n    console.log(num)\r\n  },\r\n  complete() {\r\n    // Will not be called, even when cancelling subscription.\r\n    console.log('completed!');\r\n  }\r\n});\r\n\r\nsetTimeout(() => {\r\n  subscription.unsubscribe();\r\n  console.log('unsubscribed!');\r\n}, 2500);\r\n\r\n// Logs:\r\n// 0 after 1s\r\n// 1 after 2s\r\n// 'unsubscribed!' after 2.5s\r\n```\r\n","tags":[{"kind":25,"tagName":"param","text":"{Observer|Function} observerOrNext (optional) Either an observer with methods to be called,\r\nor the first of three possible handlers, which is the handler for each value emitted from the subscribed\r\nObservable."},{"kind":25,"tagName":"param","text":"{Function} error (optional) A handler for a terminal event resulting from an error. If no error handler is provided,\r\nthe error will be thrown asynchronously as unhandled."},{"kind":25,"tagName":"param","text":"{Function} complete (optional) A handler for a terminal event resulting from successful completion."},{"kind":25,"tagName":"return","text":"{Subscription} a subscription reference to the registered handlers"},{"kind":25,"tagName":"method","text":"subscribe"}]}],"isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"isAbstract":false,"decorators":[],"hasOverrideKeyword":false,"kind":26,"overloads":[{"parameters":[{"name":"observerOrNext","type":"Partial<Observer<T>> | ((value: T) => void)","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Subscription","isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"isAbstract":false,"typeParameters":[],"hasOverrideKeyword":false,"docs":[],"kind":27,"declarationInfo":{"className":"Observable","modulePath":"..\\src\\internal\\Observable.ts"}},{"parameters":[{"name":"next","type":"((value: T) => void) | null","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"error","type":"((error: any) => void) | null","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"complete","type":"(() => void) | null","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Subscription","isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"isAbstract":false,"typeParameters":[],"hasOverrideKeyword":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Instead of passing separate callback arguments, use an observer argument. Signatures taking separate callback arguments will be removed in v8. Details: https://rxjs.dev/deprecations/subscribe-arguments"}]}],"kind":27,"declarationInfo":{"className":"Observable","modulePath":"..\\src\\internal\\Observable.ts"}}]}},{"name":"forEach","usabilityResult":{"index":0,"wordCount":null},"sources":{"name":"forEach","statements":["promiseCtor = getPromiseCtor(promiseCtor);","return new promiseCtor<void>((resolve, reject) => {\r\n  const subscriber = new SafeSubscriber<T>({\r\n    next: (value) => {\r\n      try {\r\n        next(value);\r\n      } catch (err) {\r\n        reject(err);\r\n        subscriber.unsubscribe();\r\n      }\r\n    },\r\n    error: reject,\r\n    complete: resolve,\r\n  });\r\n  this.subscribe(subscriber);\r\n}) as Promise<void>;"],"parameters":[{"name":"next","type":"(value: T) => void","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"promiseCtor","type":"PromiseConstructorLike","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Promise<void>","typeParameters":[],"docs":[],"isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"isAbstract":false,"decorators":[],"hasOverrideKeyword":false,"kind":26,"overloads":[{"parameters":[{"name":"next","type":"(value: T) => void","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Promise<void>","isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"isAbstract":false,"typeParameters":[],"hasOverrideKeyword":false,"docs":[{"kind":24,"description":"\r\nUsed as a NON-CANCELLABLE means of subscribing to an observable, for use with\r\nAPIs that expect promises, like `async/await`. You cannot unsubscribe from this.\r\n\r\n**WARNING**: Only use this with observables you *know* will complete. If the source\r\nobservable does not complete, you will end up with a promise that is hung up, and\r\npotentially all of the state of an async function hanging out in memory. To avoid\r\nthis situation, look into adding something like {@link timeout}, {@link take},\r\n{@link takeWhile}, or {@link takeUntil} amongst others.\r\n\r\n#### Example\r\n\r\n```ts\r\nimport { interval, take } from 'rxjs';\r\n\r\nconst source$ = interval(1000).pipe(take(4));\r\n\r\nasync function getTotal() {\r\n  let total = 0;\r\n\r\n  await source$.forEach(value => {\r\n    total += value;\r\n    console.log('observable -> ' + value);\r\n  });\r\n\r\n  return total;\r\n}\r\n\r\ngetTotal().then(\r\n  total => console.log('Total: ' + total)\r\n);\r\n\r\n// Expected:\r\n// 'observable -> 0'\r\n// 'observable -> 1'\r\n// 'observable -> 2'\r\n// 'observable -> 3'\r\n// 'Total: 6'\r\n```\r\n","tags":[{"kind":25,"tagName":"param","text":"next a handler for each value emitted by the observable"},{"kind":25,"tagName":"return","text":"a promise that either resolves on observable completion or\r\n rejects with the handled error"}]}],"kind":27,"declarationInfo":{"className":"Observable","modulePath":"..\\src\\internal\\Observable.ts"}},{"parameters":[{"name":"next","type":"(value: T) => void","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"promiseCtor","type":"PromiseConstructorLike","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Promise<void>","isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"isAbstract":false,"typeParameters":[],"hasOverrideKeyword":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"param","text":"next a handler for each value emitted by the observable"},{"kind":25,"tagName":"param","text":"promiseCtor a constructor function used to instantiate the Promise"},{"kind":25,"tagName":"return","text":"a promise that either resolves on observable completion or\r\n rejects with the handled error"},{"kind":25,"tagName":"deprecated","text":"Passing a Promise constructor will no longer be available\r\nin upcoming versions of RxJS. This is because it adds weight to the library, for very\r\nlittle benefit. If you need this functionality, it is recommended that you either\r\npolyfill Promise, or you create an adapter to convert the returned native promise\r\nto whatever promise implementation you wanted. Will be removed in v8."}]}],"kind":27,"declarationInfo":{"className":"Observable","modulePath":"..\\src\\internal\\Observable.ts"}}]}},{"name":"[Symbol_observable]","usabilityResult":{"index":0,"wordCount":null},"sources":{"name":"[Symbol_observable]","statements":["return this;"],"parameters":[],"typeParameters":[],"docs":[{"kind":24,"description":"\r\nAn interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable","tags":[{"kind":25,"tagName":"method","text":"Symbol.observable"},{"kind":25,"tagName":"return","text":"{Observable} this instance of the observable"}]}],"isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"isAbstract":false,"decorators":[],"hasOverrideKeyword":false,"kind":26,"overloads":[],"declarationInfo":{"className":"Observable","modulePath":"..\\src\\internal\\Observable.ts"}}},{"name":"pipe","usabilityResult":{"index":0,"wordCount":null},"sources":{"name":"pipe","statements":["return pipeFromArray(operations)(this);"],"parameters":[{"name":"operations","type":"OperatorFunction<any, any>[]","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":true}],"returnType":"Observable<any>","typeParameters":[],"docs":[{"kind":24,"description":"\r\nUsed to stitch together functional operators into a chain.","tags":[{"kind":25,"tagName":"method","text":"pipe"},{"kind":25,"tagName":"return","text":"{Observable} the Observable result of all of the operators having\r\nbeen called in the order they were passed in.\r\n\r\n## Example\r\n\r\n```ts\r\nimport { interval, filter, map, scan } from 'rxjs';\r\n\r\ninterval(1000)\r\n  .pipe(\r\n    filter(x => x % 2 === 0),\r\n    map(x => x + x),\r\n    scan((acc, x) => acc + x)\r\n  )\r\n  .subscribe(x => console.log(x));\r\n```"}]}],"isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"isAbstract":false,"decorators":[],"hasOverrideKeyword":false,"kind":26,"overloads":[{"parameters":[],"returnType":"Observable<T>","isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"isAbstract":false,"typeParameters":[],"hasOverrideKeyword":false,"docs":[],"kind":27,"declarationInfo":{"className":"Observable","modulePath":"..\\src\\internal\\Observable.ts"}},{"parameters":[{"name":"op1","type":"OperatorFunction<T, A>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<A>","isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"isAbstract":false,"typeParameters":[{"name":"A","kind":39,"isConst":false,"variance":0}],"hasOverrideKeyword":false,"docs":[],"kind":27,"declarationInfo":{"className":"Observable","modulePath":"..\\src\\internal\\Observable.ts"}},{"parameters":[{"name":"op1","type":"OperatorFunction<T, A>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"op2","type":"OperatorFunction<A, B>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<B>","isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"isAbstract":false,"typeParameters":[{"name":"A","kind":39,"isConst":false,"variance":0},{"name":"B","kind":39,"isConst":false,"variance":0}],"hasOverrideKeyword":false,"docs":[],"kind":27,"declarationInfo":{"className":"Observable","modulePath":"..\\src\\internal\\Observable.ts"}},{"parameters":[{"name":"op1","type":"OperatorFunction<T, A>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"op2","type":"OperatorFunction<A, B>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"op3","type":"OperatorFunction<B, C>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<C>","isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"isAbstract":false,"typeParameters":[{"name":"A","kind":39,"isConst":false,"variance":0},{"name":"B","kind":39,"isConst":false,"variance":0},{"name":"C","kind":39,"isConst":false,"variance":0}],"hasOverrideKeyword":false,"docs":[],"kind":27,"declarationInfo":{"className":"Observable","modulePath":"..\\src\\internal\\Observable.ts"}},{"parameters":[{"name":"op1","type":"OperatorFunction<T, A>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"op2","type":"OperatorFunction<A, B>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"op3","type":"OperatorFunction<B, C>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"op4","type":"OperatorFunction<C, D>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<D>","isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"isAbstract":false,"typeParameters":[{"name":"A","kind":39,"isConst":false,"variance":0},{"name":"B","kind":39,"isConst":false,"variance":0},{"name":"C","kind":39,"isConst":false,"variance":0},{"name":"D","kind":39,"isConst":false,"variance":0}],"hasOverrideKeyword":false,"docs":[],"kind":27,"declarationInfo":{"className":"Observable","modulePath":"..\\src\\internal\\Observable.ts"}},{"parameters":[{"name":"op1","type":"OperatorFunction<T, A>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"op2","type":"OperatorFunction<A, B>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"op3","type":"OperatorFunction<B, C>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"op4","type":"OperatorFunction<C, D>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"op5","type":"OperatorFunction<D, E>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<E>","isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"isAbstract":false,"typeParameters":[{"name":"A","kind":39,"isConst":false,"variance":0},{"name":"B","kind":39,"isConst":false,"variance":0},{"name":"C","kind":39,"isConst":false,"variance":0},{"name":"D","kind":39,"isConst":false,"variance":0},{"name":"E","kind":39,"isConst":false,"variance":0}],"hasOverrideKeyword":false,"docs":[],"kind":27,"declarationInfo":{"className":"Observable","modulePath":"..\\src\\internal\\Observable.ts"}},{"parameters":[{"name":"op1","type":"OperatorFunction<T, A>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"op2","type":"OperatorFunction<A, B>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"op3","type":"OperatorFunction<B, C>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"op4","type":"OperatorFunction<C, D>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"op5","type":"OperatorFunction<D, E>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"op6","type":"OperatorFunction<E, F>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<F>","isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"isAbstract":false,"typeParameters":[{"name":"A","kind":39,"isConst":false,"variance":0},{"name":"B","kind":39,"isConst":false,"variance":0},{"name":"C","kind":39,"isConst":false,"variance":0},{"name":"D","kind":39,"isConst":false,"variance":0},{"name":"E","kind":39,"isConst":false,"variance":0},{"name":"F","kind":39,"isConst":false,"variance":0}],"hasOverrideKeyword":false,"docs":[],"kind":27,"declarationInfo":{"className":"Observable","modulePath":"..\\src\\internal\\Observable.ts"}},{"parameters":[{"name":"op1","type":"OperatorFunction<T, A>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"op2","type":"OperatorFunction<A, B>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"op3","type":"OperatorFunction<B, C>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"op4","type":"OperatorFunction<C, D>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"op5","type":"OperatorFunction<D, E>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"op6","type":"OperatorFunction<E, F>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"op7","type":"OperatorFunction<F, G>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<G>","isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"isAbstract":false,"typeParameters":[{"name":"A","kind":39,"isConst":false,"variance":0},{"name":"B","kind":39,"isConst":false,"variance":0},{"name":"C","kind":39,"isConst":false,"variance":0},{"name":"D","kind":39,"isConst":false,"variance":0},{"name":"E","kind":39,"isConst":false,"variance":0},{"name":"F","kind":39,"isConst":false,"variance":0},{"name":"G","kind":39,"isConst":false,"variance":0}],"hasOverrideKeyword":false,"docs":[],"kind":27,"declarationInfo":{"className":"Observable","modulePath":"..\\src\\internal\\Observable.ts"}},{"parameters":[{"name":"op1","type":"OperatorFunction<T, A>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"op2","type":"OperatorFunction<A, B>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"op3","type":"OperatorFunction<B, C>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"op4","type":"OperatorFunction<C, D>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"op5","type":"OperatorFunction<D, E>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"op6","type":"OperatorFunction<E, F>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"op7","type":"OperatorFunction<F, G>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"op8","type":"OperatorFunction<G, H>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<H>","isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"isAbstract":false,"typeParameters":[{"name":"A","kind":39,"isConst":false,"variance":0},{"name":"B","kind":39,"isConst":false,"variance":0},{"name":"C","kind":39,"isConst":false,"variance":0},{"name":"D","kind":39,"isConst":false,"variance":0},{"name":"E","kind":39,"isConst":false,"variance":0},{"name":"F","kind":39,"isConst":false,"variance":0},{"name":"G","kind":39,"isConst":false,"variance":0},{"name":"H","kind":39,"isConst":false,"variance":0}],"hasOverrideKeyword":false,"docs":[],"kind":27,"declarationInfo":{"className":"Observable","modulePath":"..\\src\\internal\\Observable.ts"}},{"parameters":[{"name":"op1","type":"OperatorFunction<T, A>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"op2","type":"OperatorFunction<A, B>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"op3","type":"OperatorFunction<B, C>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"op4","type":"OperatorFunction<C, D>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"op5","type":"OperatorFunction<D, E>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"op6","type":"OperatorFunction<E, F>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"op7","type":"OperatorFunction<F, G>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"op8","type":"OperatorFunction<G, H>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"op9","type":"OperatorFunction<H, I>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<I>","isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"isAbstract":false,"typeParameters":[{"name":"A","kind":39,"isConst":false,"variance":0},{"name":"B","kind":39,"isConst":false,"variance":0},{"name":"C","kind":39,"isConst":false,"variance":0},{"name":"D","kind":39,"isConst":false,"variance":0},{"name":"E","kind":39,"isConst":false,"variance":0},{"name":"F","kind":39,"isConst":false,"variance":0},{"name":"G","kind":39,"isConst":false,"variance":0},{"name":"H","kind":39,"isConst":false,"variance":0},{"name":"I","kind":39,"isConst":false,"variance":0}],"hasOverrideKeyword":false,"docs":[],"kind":27,"declarationInfo":{"className":"Observable","modulePath":"..\\src\\internal\\Observable.ts"}},{"parameters":[{"name":"op1","type":"OperatorFunction<T, A>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"op2","type":"OperatorFunction<A, B>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"op3","type":"OperatorFunction<B, C>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"op4","type":"OperatorFunction<C, D>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"op5","type":"OperatorFunction<D, E>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"op6","type":"OperatorFunction<E, F>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"op7","type":"OperatorFunction<F, G>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"op8","type":"OperatorFunction<G, H>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"op9","type":"OperatorFunction<H, I>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"operations","type":"OperatorFunction<any, any>[]","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":true}],"returnType":"Observable<unknown>","isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"isAbstract":false,"typeParameters":[{"name":"A","kind":39,"isConst":false,"variance":0},{"name":"B","kind":39,"isConst":false,"variance":0},{"name":"C","kind":39,"isConst":false,"variance":0},{"name":"D","kind":39,"isConst":false,"variance":0},{"name":"E","kind":39,"isConst":false,"variance":0},{"name":"F","kind":39,"isConst":false,"variance":0},{"name":"G","kind":39,"isConst":false,"variance":0},{"name":"H","kind":39,"isConst":false,"variance":0},{"name":"I","kind":39,"isConst":false,"variance":0}],"hasOverrideKeyword":false,"docs":[],"kind":27,"declarationInfo":{"className":"Observable","modulePath":"..\\src\\internal\\Observable.ts"}}]}},{"name":"toPromise","usabilityResult":{"index":0,"wordCount":null},"sources":{"name":"toPromise","statements":["promiseCtor = getPromiseCtor(promiseCtor);","return new promiseCtor((resolve, reject) => {\r\n  let value: T | undefined;\r\n  this.subscribe(\r\n    (x: T) => (value = x),\r\n    (err: any) => reject(err),\r\n    () => resolve(value)\r\n  );\r\n}) as Promise<T | undefined>;"],"parameters":[{"name":"promiseCtor","type":"PromiseConstructorLike","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Promise<T | undefined>","typeParameters":[],"docs":[{"kind":24,"description":"\r\nSubscribe to this Observable and get a Promise resolving on\r\n`complete` with the last emission (if any).\r\n\r\n**WARNING**: Only use this with observables you *know* will complete. If the source\r\nobservable does not complete, you will end up with a promise that is hung up, and\r\npotentially all of the state of an async function hanging out in memory. To avoid\r\nthis situation, look into adding something like {@link timeout}, {@link take},\r\n{@link takeWhile}, or {@link takeUntil} amongst others.\r\n","tags":[{"kind":25,"tagName":"method","text":"toPromise"},{"kind":25,"tagName":"param","text":"[promiseCtor] a constructor function used to instantiate\r\nthe Promise"},{"kind":25,"tagName":"return","text":"A Promise that resolves with the last value emit, or\r\nrejects on an error. If there were no emissions, Promise\r\nresolves with undefined."},{"kind":25,"tagName":"deprecated","text":"Replaced with {@link firstValueFrom} and {@link lastValueFrom}. Will be removed in v8. Details: https://rxjs.dev/deprecations/to-promise"}]}],"isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"isAbstract":false,"decorators":[],"hasOverrideKeyword":false,"kind":26,"overloads":[{"parameters":[],"returnType":"Promise<T | undefined>","isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"isAbstract":false,"typeParameters":[],"hasOverrideKeyword":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Replaced with {@link firstValueFrom} and {@link lastValueFrom}. Will be removed in v8. Details: https://rxjs.dev/deprecations/to-promise"}]}],"kind":27,"declarationInfo":{"className":"Observable","modulePath":"..\\src\\internal\\Observable.ts"}},{"parameters":[{"name":"PromiseCtor","type":"typeof Promise","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Promise<T | undefined>","isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"isAbstract":false,"typeParameters":[],"hasOverrideKeyword":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Replaced with {@link firstValueFrom} and {@link lastValueFrom}. Will be removed in v8. Details: https://rxjs.dev/deprecations/to-promise"}]}],"kind":27,"declarationInfo":{"className":"Observable","modulePath":"..\\src\\internal\\Observable.ts"}},{"parameters":[{"name":"PromiseCtor","type":"PromiseConstructorLike","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Promise<T | undefined>","isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"isAbstract":false,"typeParameters":[],"hasOverrideKeyword":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Replaced with {@link firstValueFrom} and {@link lastValueFrom}. Will be removed in v8. Details: https://rxjs.dev/deprecations/to-promise"}]}],"kind":27,"declarationInfo":{"className":"Observable","modulePath":"..\\src\\internal\\Observable.ts"}}]}}]}},"usabilityResult":{"index":0}},"..\\src\\internal\\observable\\ConnectableObservable.ts":{"moduleComponents":{"ConnectableObservable":{"kind":2,"usabilityResult":{"wordCount":0,"index":0},"methods":[{"name":"connect","usabilityResult":{"index":0,"wordCount":null},"sources":{"name":"connect","statements":[{"isExported":false,"isDefaultExport":false,"hasDeclareKeyword":false,"docs":[],"kind":41,"declarationKind":"let","declarations":[{"name":"connection","initializer":"this._connection","hasExclamationToken":false,"kind":40}]},"if (!connection) {\r\n      connection = this._connection = new Subscription();\r\n      const subject = this.getSubject();\r\n      connection.add(\r\n        this.source.subscribe(\r\n          createOperatorSubscriber(\r\n            subject as any,\r\n            undefined,\r\n            () => {\r\n              this._teardown();\r\n              subject.complete();\r\n            },\r\n            (err) => {\r\n              this._teardown();\r\n              subject.error(err);\r\n            },\r\n            () => this._teardown()\r\n          )\r\n        )\r\n      );\r\n\r\n      if (connection.closed) {\r\n        this._connection = null;\r\n        connection = Subscription.EMPTY;\r\n      }\r\n    }","return connection;"],"parameters":[],"returnType":"Subscription","typeParameters":[],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"{@link ConnectableObservable} will be removed in v8. Use {@link connectable} instead.\r\nDetails: https://rxjs.dev/deprecations/multicasting"}]}],"isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"isAbstract":false,"decorators":[],"hasOverrideKeyword":false,"kind":26,"overloads":[],"declarationInfo":{"className":"ConnectableObservable","modulePath":"..\\src\\internal\\observable\\ConnectableObservable.ts"}}},{"name":"refCount","usabilityResult":{"index":0,"wordCount":null},"sources":{"name":"refCount","statements":["return higherOrderRefCount()(this) as Observable<T>;"],"parameters":[],"returnType":"Observable<T>","typeParameters":[],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"{@link ConnectableObservable} will be removed in v8. Use the {@link share} operator instead.\r\nDetails: https://rxjs.dev/deprecations/multicasting"}]}],"isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"isAbstract":false,"decorators":[],"hasOverrideKeyword":false,"kind":26,"overloads":[],"declarationInfo":{"className":"ConnectableObservable","modulePath":"..\\src\\internal\\observable\\ConnectableObservable.ts"}}}]}},"usabilityResult":{"index":0}},"..\\src\\internal\\observable\\dom\\animationFrames.ts":{"moduleComponents":{"animationFrames":{"kind":13,"usabilityResult":{"wordCount":300,"index":1},"sources":{"name":"animationFrames","statements":["return timestampProvider ? animationFramesFactory(timestampProvider) : DEFAULT_ANIMATION_FRAMES;"],"parameters":[{"name":"timestampProvider","type":"TimestampProvider","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"typeParameters":[],"docs":[{"kind":24,"description":"\r\nAn observable of animation frames\r\n\r\nEmits the amount of time elapsed since subscription and the timestamp on each animation frame.\r\nDefaults to milliseconds provided to the requestAnimationFrame's callback. Does not end on its own.\r\n\r\nEvery subscription will start a separate animation loop. Since animation frames are always scheduled\r\nby the browser to occur directly before a repaint, scheduling more than one animation frame synchronously\r\nshould not be much different or have more overhead than looping over an array of events during\r\na single animation frame. However, if for some reason the developer would like to ensure the\r\nexecution of animation-related handlers are all executed during the same task by the engine,\r\nthe `share` operator can be used.\r\n\r\nThis is useful for setting up animations with RxJS.\r\n\r\n## Examples\r\n\r\nTweening a div to move it on the screen\r\n\r\n```ts\r\nimport { animationFrames, map, takeWhile, endWith } from 'rxjs';\r\n\r\nfunction tween(start: number, end: number, duration: number) {\r\n  const diff = end - start;\r\n  return animationFrames().pipe(\r\n    // Figure out what percentage of time has passed\r\n    map(({ elapsed }) => elapsed / duration),\r\n    // Take the vector while less than 100%\r\n    takeWhile(v => v < 1),\r\n    // Finish with 100%\r\n    endWith(1),\r\n    // Calculate the distance traveled between start and end\r\n    map(v => v * diff + start)\r\n  );\r\n}\r\n\r\n// Setup a div for us to move around\r\nconst div = document.createElement('div');\r\ndocument.body.appendChild(div);\r\ndiv.style.position = 'absolute';\r\ndiv.style.width = '40px';\r\ndiv.style.height = '40px';\r\ndiv.style.backgroundColor = 'lime';\r\ndiv.style.transform = 'translate3d(10px, 0, 0)';\r\n\r\ntween(10, 200, 4000).subscribe(x => {\r\n  div.style.transform = `translate3d(${ x }px, 0, 0)`;\r\n});\r\n```\r\n\r\nProviding a custom timestamp provider\r\n\r\n```ts\r\nimport { animationFrames, TimestampProvider } from 'rxjs';\r\n\r\n// A custom timestamp provider\r\nlet now = 0;\r\nconst customTSProvider: TimestampProvider = {\r\n  now() { return now++; }\r\n};\r\n\r\nconst source$ = animationFrames(customTSProvider);\r\n\r\n// Log increasing numbers 0...1...2... on every animation frame.\r\nsource$.subscribe(({ elapsed }) => console.log(elapsed));\r\n```\r\n","tags":[{"kind":25,"tagName":"param","text":"timestampProvider An object with a `now` method that provides a numeric timestamp"}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[],"functionName":"animationFrames","modulePath":"..\\src\\internal\\observable\\dom\\animationFrames.ts"}}},"usabilityResult":{"index":1}},"..\\src\\internal\\Subject.ts":{"moduleComponents":{"Subject":{"kind":2,"usabilityResult":{"wordCount":0,"index":0},"methods":[{"name":"lift","usabilityResult":{"index":0,"wordCount":null},"sources":{"name":"lift","statements":[{"isExported":false,"isDefaultExport":false,"hasDeclareKeyword":false,"docs":[],"kind":41,"declarationKind":"const","declarations":[{"name":"subject","initializer":"new AnonymousSubject(this, this)","hasExclamationToken":false,"kind":40}]},"subject.operator = operator as any;","return subject as any;"],"parameters":[{"name":"operator","type":"Operator<T, R>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<R>","typeParameters":[{"name":"R","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Internal implementation detail, do not use directly. Will be made internal in v8."}]}],"isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"isAbstract":false,"decorators":[],"hasOverrideKeyword":false,"kind":26,"overloads":[],"declarationInfo":{"className":"Subject","modulePath":"..\\src\\internal\\Subject.ts"}}},{"name":"next","usabilityResult":{"index":0,"wordCount":null},"sources":{"name":"next","statements":["errorContext(() => {\r\n  this._throwIfClosed();\r\n  if (!this.isStopped) {\r\n    if (!this.currentObservers) {\r\n      this.currentObservers = Array.from(this.observers);\r\n    }\r\n    for (const observer of this.currentObservers) {\r\n      observer.next(value);\r\n    }\r\n  }\r\n});"],"parameters":[{"name":"value","type":"T","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"typeParameters":[],"docs":[],"isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"isAbstract":false,"decorators":[],"hasOverrideKeyword":false,"kind":26,"overloads":[],"declarationInfo":{"className":"Subject","modulePath":"..\\src\\internal\\Subject.ts"}}},{"name":"error","usabilityResult":{"index":0,"wordCount":null},"sources":{"name":"error","statements":["errorContext(() => {\r\n  this._throwIfClosed();\r\n  if (!this.isStopped) {\r\n    this.hasError = this.isStopped = true;\r\n    this.thrownError = err;\r\n    const { observers } = this;\r\n    while (observers.length) {\r\n      observers.shift()!.error(err);\r\n    }\r\n  }\r\n});"],"parameters":[{"name":"err","type":"any","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"typeParameters":[],"docs":[],"isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"isAbstract":false,"decorators":[],"hasOverrideKeyword":false,"kind":26,"overloads":[],"declarationInfo":{"className":"Subject","modulePath":"..\\src\\internal\\Subject.ts"}}},{"name":"complete","usabilityResult":{"index":0,"wordCount":null},"sources":{"name":"complete","statements":["errorContext(() => {\r\n  this._throwIfClosed();\r\n  if (!this.isStopped) {\r\n    this.isStopped = true;\r\n    const { observers } = this;\r\n    while (observers.length) {\r\n      observers.shift()!.complete();\r\n    }\r\n  }\r\n});"],"parameters":[],"typeParameters":[],"docs":[],"isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"isAbstract":false,"decorators":[],"hasOverrideKeyword":false,"kind":26,"overloads":[],"declarationInfo":{"className":"Subject","modulePath":"..\\src\\internal\\Subject.ts"}}},{"name":"unsubscribe","usabilityResult":{"index":0,"wordCount":null},"sources":{"name":"unsubscribe","statements":["this.isStopped = this.closed = true;","this.observers = this.currentObservers = null!;"],"parameters":[],"typeParameters":[],"docs":[],"isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"isAbstract":false,"decorators":[],"hasOverrideKeyword":false,"kind":26,"overloads":[],"declarationInfo":{"className":"Subject","modulePath":"..\\src\\internal\\Subject.ts"}}},{"name":"asObservable","usabilityResult":{"index":0,"wordCount":null},"sources":{"name":"asObservable","statements":[{"isExported":false,"isDefaultExport":false,"hasDeclareKeyword":false,"docs":[],"kind":41,"declarationKind":"const","declarations":[{"name":"observable","initializer":"new Observable<T>()","type":"any","hasExclamationToken":false,"kind":40}]},"observable.source = this;","return observable;"],"parameters":[],"returnType":"Observable<T>","typeParameters":[],"docs":[{"kind":24,"description":"\r\nCreates a new Observable with this Subject as the source. You can do this\r\nto create custom Observer-side logic of the Subject and conceal it from\r\ncode that uses the Observable.","tags":[{"kind":25,"tagName":"return","text":"{Observable} Observable that the Subject casts to"}]}],"isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"isAbstract":false,"decorators":[],"hasOverrideKeyword":false,"kind":26,"overloads":[],"declarationInfo":{"className":"Subject","modulePath":"..\\src\\internal\\Subject.ts"}}}]}},"usabilityResult":{"index":0}},"..\\src\\internal\\BehaviorSubject.ts":{"moduleComponents":{"BehaviorSubject":{"kind":2,"usabilityResult":{"wordCount":0,"index":0},"methods":[{"name":"getValue","usabilityResult":{"index":0,"wordCount":null},"sources":{"name":"getValue","statements":[{"isExported":false,"isDefaultExport":false,"hasDeclareKeyword":false,"docs":[],"kind":41,"declarationKind":"const","declarations":[{"name":"{ hasError, thrownError, _value }","initializer":"this","hasExclamationToken":false,"kind":40}]},"if (hasError) {\r\n  throw thrownError;\r\n}","this._throwIfClosed();","return _value;"],"parameters":[],"returnType":"T","typeParameters":[],"docs":[],"isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"isAbstract":false,"decorators":[],"hasOverrideKeyword":false,"kind":26,"overloads":[],"declarationInfo":{"className":"BehaviorSubject","modulePath":"..\\src\\internal\\BehaviorSubject.ts"}}},{"name":"next","usabilityResult":{"index":0,"wordCount":null},"sources":{"name":"next","statements":["super.next((this._value = value));"],"parameters":[{"name":"value","type":"T","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"void","typeParameters":[],"docs":[],"isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"isAbstract":false,"decorators":[],"hasOverrideKeyword":false,"kind":26,"overloads":[],"declarationInfo":{"className":"BehaviorSubject","modulePath":"..\\src\\internal\\BehaviorSubject.ts"}}}]}},"usabilityResult":{"index":0}},"..\\src\\internal\\ReplaySubject.ts":{"moduleComponents":{"ReplaySubject":{"kind":2,"usabilityResult":{"wordCount":0,"index":0},"methods":[{"name":"next","usabilityResult":{"index":0,"wordCount":null},"sources":{"name":"next","statements":[{"isExported":false,"isDefaultExport":false,"hasDeclareKeyword":false,"docs":[],"kind":41,"declarationKind":"const","declarations":[{"name":"{ isStopped, _buffer, _infiniteTimeWindow, _timestampProvider, _windowTime }","initializer":"this","hasExclamationToken":false,"kind":40}]},"if (!isStopped) {\r\n  _buffer.push(value);\r\n  !_infiniteTimeWindow && _buffer.push(_timestampProvider.now() + _windowTime);\r\n}","this._trimBuffer();","super.next(value);"],"parameters":[{"name":"value","type":"T","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"void","typeParameters":[],"docs":[],"isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"isAbstract":false,"decorators":[],"hasOverrideKeyword":false,"kind":26,"overloads":[],"declarationInfo":{"className":"ReplaySubject","modulePath":"..\\src\\internal\\ReplaySubject.ts"}}}]}},"usabilityResult":{"index":0}},"..\\src\\internal\\AsyncSubject.ts":{"moduleComponents":{"AsyncSubject":{"kind":2,"usabilityResult":{"wordCount":0,"index":0},"methods":[{"name":"next","usabilityResult":{"index":0,"wordCount":null},"sources":{"name":"next","statements":["if (!this.isStopped) {\r\n  this._value = value;\r\n  this._hasValue = true;\r\n}"],"parameters":[{"name":"value","type":"T","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"void","typeParameters":[],"docs":[],"isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"isAbstract":false,"decorators":[],"hasOverrideKeyword":false,"kind":26,"overloads":[],"declarationInfo":{"className":"AsyncSubject","modulePath":"..\\src\\internal\\AsyncSubject.ts"}}},{"name":"complete","usabilityResult":{"index":0,"wordCount":null},"sources":{"name":"complete","statements":[{"isExported":false,"isDefaultExport":false,"hasDeclareKeyword":false,"docs":[],"kind":41,"declarationKind":"const","declarations":[{"name":"{ _hasValue, _value, _isComplete }","initializer":"this","hasExclamationToken":false,"kind":40}]},"if (!_isComplete) {\r\n  this._isComplete = true;\r\n  _hasValue && super.next(_value!);\r\n  super.complete();\r\n}"],"parameters":[],"returnType":"void","typeParameters":[],"docs":[],"isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"isAbstract":false,"decorators":[],"hasOverrideKeyword":false,"kind":26,"overloads":[],"declarationInfo":{"className":"AsyncSubject","modulePath":"..\\src\\internal\\AsyncSubject.ts"}}}]}},"usabilityResult":{"index":0}},"..\\src\\internal\\scheduler\\VirtualTimeScheduler.ts":{"moduleComponents":{"VirtualTimeScheduler":{"kind":2,"usabilityResult":{"wordCount":0,"index":0},"methods":[{"name":"flush","usabilityResult":{"index":0,"wordCount":null},"sources":{"name":"flush","statements":[{"isExported":false,"isDefaultExport":false,"hasDeclareKeyword":false,"docs":[],"kind":41,"declarationKind":"const","declarations":[{"name":"{ actions, maxFrames }","initializer":"this","hasExclamationToken":false,"kind":40}]},{"isExported":false,"isDefaultExport":false,"hasDeclareKeyword":false,"docs":[],"kind":41,"declarationKind":"let","declarations":[{"name":"error","type":"any","hasExclamationToken":false,"kind":40}]},{"isExported":false,"isDefaultExport":false,"hasDeclareKeyword":false,"docs":[],"kind":41,"declarationKind":"let","declarations":[{"name":"action","type":"AsyncAction<any> | undefined","hasExclamationToken":false,"kind":40}]},"while ((action = actions[0]) && action.delay <= maxFrames) {\r\n      actions.shift();\r\n      this.frame = action.delay;\r\n\r\n      if ((error = action.execute(action.state, action.delay))) {\r\n        break;\r\n      }\r\n    }","if (error) {\r\n  while ((action = actions.shift())) {\r\n    action.unsubscribe();\r\n  }\r\n  throw error;\r\n}"],"parameters":[],"returnType":"void","typeParameters":[],"docs":[{"kind":24,"description":"\r\nPrompt the Scheduler to execute all of its queued actions, therefore\r\nclearing its queue.","tags":[{"kind":25,"tagName":"return","text":"{void}"}]}],"isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"scope":"public","isAbstract":false,"decorators":[],"hasOverrideKeyword":false,"kind":26,"overloads":[],"declarationInfo":{"className":"VirtualTimeScheduler","modulePath":"..\\src\\internal\\scheduler\\VirtualTimeScheduler.ts"}}}]},"VirtualAction":{"kind":2,"usabilityResult":{"wordCount":0,"index":0},"methods":[{"name":"schedule","usabilityResult":{"index":0,"wordCount":null},"sources":{"name":"schedule","statements":["if (Number.isFinite(delay)) {\r\n  if (!this.id) {\r\n    return super.schedule(state, delay);\r\n  }\r\n  this.active = false;\r\n  // If an action is rescheduled, we save allocations by mutating its state,\r\n  // pushing it to the end of the scheduler queue, and recycling the action.\r\n  // But since the VirtualTimeScheduler is used for testing, VirtualActions\r\n  // must be immutable so they can be inspected later.\r\n  const action = new VirtualAction(this.scheduler, this.work);\r\n  this.add(action);\r\n  return action.schedule(state, delay);\r\n} else {\r\n  // If someone schedules something with Infinity, it'll never happen. So we\r\n  // don't even schedule it.\r\n  return Subscription.EMPTY;\r\n}"],"parameters":[{"name":"state","type":"T","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"delay","initializer":"0","type":"number","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Subscription","typeParameters":[],"docs":[],"isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"scope":"public","isAbstract":false,"decorators":[],"hasOverrideKeyword":false,"kind":26,"overloads":[],"declarationInfo":{"className":"VirtualAction","modulePath":"..\\src\\internal\\scheduler\\VirtualTimeScheduler.ts"}}}]}},"usabilityResult":{"index":0}},"..\\src\\internal\\Scheduler.ts":{"moduleComponents":{"Scheduler":{"kind":2,"usabilityResult":{"wordCount":0,"index":0},"methods":[{"name":"schedule","usabilityResult":{"index":0,"wordCount":null},"sources":{"name":"schedule","statements":["return new this.schedulerActionCtor<T>(this, work).schedule(state, delay);"],"parameters":[{"name":"work","type":"(this: SchedulerAction<T>, state?: T) => void","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"delay","initializer":"0","type":"number","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"state","type":"T","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Subscription","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nSchedules a function, `work`, for execution. May happen at some point in\r\nthe future, according to the `delay` parameter, if specified. May be passed\r\nsome context object, `state`, which will be passed to the `work` function.\r\n\r\nThe given arguments will be processed an stored as an Action object in a\r\nqueue of actions.\r\n","tags":[{"kind":25,"tagName":"param","text":"{function(state: ?T): ?Subscription} work A function representing a\r\ntask, or some unit of work to be executed by the Scheduler."},{"kind":25,"tagName":"param","text":"{number} [delay] Time to wait before executing the work, where the\r\ntime unit is implicit and defined by the Scheduler itself."},{"kind":25,"tagName":"param","text":"{T} [state] Some contextual data that the `work` function uses when\r\ncalled by the Scheduler."},{"kind":25,"tagName":"return","text":"{Subscription} A subscription in order to be able to unsubscribe\r\nthe scheduled work."}]}],"isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"scope":"public","isAbstract":false,"decorators":[],"hasOverrideKeyword":false,"kind":26,"overloads":[],"declarationInfo":{"className":"Scheduler","modulePath":"..\\src\\internal\\Scheduler.ts"}}}]}},"usabilityResult":{"index":0}},"..\\src\\internal\\Subscription.ts":{"moduleComponents":{"Subscription":{"kind":2,"usabilityResult":{"wordCount":0,"index":0},"methods":[{"name":"unsubscribe","usabilityResult":{"index":0,"wordCount":null},"sources":{"name":"unsubscribe","statements":[{"isExported":false,"isDefaultExport":false,"hasDeclareKeyword":false,"docs":[],"kind":41,"declarationKind":"let","declarations":[{"name":"errors","type":"any[] | undefined","hasExclamationToken":false,"kind":40}]},"if (!this.closed) {\r\n      this.closed = true;\r\n\r\n      // Remove this from it's parents.\r\n      const { _parentage } = this;\r\n      if (_parentage) {\r\n        this._parentage = null;\r\n        if (Array.isArray(_parentage)) {\r\n          for (const parent of _parentage) {\r\n            parent.remove(this);\r\n          }\r\n        } else {\r\n          _parentage.remove(this);\r\n        }\r\n      }\r\n\r\n      const { initialTeardown: initialFinalizer } = this;\r\n      if (isFunction(initialFinalizer)) {\r\n        try {\r\n          initialFinalizer();\r\n        } catch (e) {\r\n          errors = e instanceof UnsubscriptionError ? e.errors : [e];\r\n        }\r\n      }\r\n\r\n      const { _finalizers } = this;\r\n      if (_finalizers) {\r\n        this._finalizers = null;\r\n        for (const finalizer of _finalizers) {\r\n          try {\r\n            execFinalizer(finalizer);\r\n          } catch (err) {\r\n            errors = errors ?? [];\r\n            if (err instanceof UnsubscriptionError) {\r\n              errors = [...errors, ...err.errors];\r\n            } else {\r\n              errors.push(err);\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      if (errors) {\r\n        throw new UnsubscriptionError(errors);\r\n      }\r\n    }"],"parameters":[],"returnType":"void","typeParameters":[],"docs":[{"kind":24,"description":"\r\nDisposes the resources held by the subscription. May, for instance, cancel\r\nan ongoing Observable execution or cancel any other type of work that\r\nstarted when the Subscription was created.","tags":[{"kind":25,"tagName":"return","text":"{void}"}]}],"isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"isAbstract":false,"decorators":[],"hasOverrideKeyword":false,"kind":26,"overloads":[],"declarationInfo":{"className":"Subscription","modulePath":"..\\src\\internal\\Subscription.ts"}}},{"name":"add","usabilityResult":{"index":0,"wordCount":null},"sources":{"name":"add","statements":["if (teardown && teardown !== this) {\r\n  if (this.closed) {\r\n    // If this subscription is already closed,\r\n    // execute whatever finalizer is handed to it automatically.\r\n    execFinalizer(teardown);\r\n  } else {\r\n    if (teardown instanceof Subscription) {\r\n      // We don't add closed subscriptions, and we don't add the same subscription\r\n      // twice. Subscription unsubscribe is idempotent.\r\n      if (teardown.closed || teardown._hasParent(this)) {\r\n        return;\r\n      }\r\n      teardown._addParent(this);\r\n    }\r\n    (this._finalizers = this._finalizers ?? []).push(teardown);\r\n  }\r\n}"],"parameters":[{"name":"teardown","type":"TeardownLogic","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"void","typeParameters":[],"docs":[{"kind":24,"description":"\r\nAdds a finalizer to this subscription, so that finalization will be unsubscribed/called\r\nwhen this subscription is unsubscribed. If this subscription is already {@link #closed},\r\nbecause it has already been unsubscribed, then whatever finalizer is passed to it\r\nwill automatically be executed (unless the finalizer itself is also a closed subscription).\r\n\r\nClosed Subscriptions cannot be added as finalizers to any subscription. Adding a closed\r\nsubscription to a any subscription will result in no operation. (A noop).\r\n\r\nAdding a subscription to itself, or adding `null` or `undefined` will not perform any\r\noperation at all. (A noop).\r\n\r\n`Subscription` instances that are added to this instance will automatically remove themselves\r\nif they are unsubscribed. Functions and {@link Unsubscribable} objects that you wish to remove\r\nwill need to be removed manually with {@link #remove}\r\n","tags":[{"kind":25,"tagName":"param","text":"teardown The finalization logic to add to this subscription."}]}],"isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"isAbstract":false,"decorators":[],"hasOverrideKeyword":false,"kind":26,"overloads":[],"declarationInfo":{"className":"Subscription","modulePath":"..\\src\\internal\\Subscription.ts"}}},{"name":"remove","usabilityResult":{"index":0,"wordCount":null},"sources":{"name":"remove","statements":[{"isExported":false,"isDefaultExport":false,"hasDeclareKeyword":false,"docs":[],"kind":41,"declarationKind":"const","declarations":[{"name":"{ _finalizers }","initializer":"this","hasExclamationToken":false,"kind":40}]},"_finalizers && arrRemove(_finalizers, teardown);","if (teardown instanceof Subscription) {\r\n  teardown._removeParent(this);\r\n}"],"parameters":[{"name":"teardown","type":"Exclude<TeardownLogic, void>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"void","typeParameters":[],"docs":[{"kind":24,"description":"\r\nRemoves a finalizer from this subscription that was previously added with the {@link #add} method.\r\n\r\nNote that `Subscription` instances, when unsubscribed, will automatically remove themselves\r\nfrom every other `Subscription` they have been added to. This means that using the `remove` method\r\nis not a common thing and should be used thoughtfully.\r\n\r\nIf you add the same finalizer instance of a function or an unsubscribable object to a `Subscription` instance\r\nmore than once, you will need to call `remove` the same number of times to remove all instances.\r\n\r\nAll finalizer instances are removed to free up memory upon unsubscription.\r\n","tags":[{"kind":25,"tagName":"param","text":"teardown The finalizer to remove from this subscription"}]}],"isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"isAbstract":false,"decorators":[],"hasOverrideKeyword":false,"kind":26,"overloads":[],"declarationInfo":{"className":"Subscription","modulePath":"..\\src\\internal\\Subscription.ts"}}}]}},"usabilityResult":{"index":0}},"..\\src\\internal\\Subscriber.ts":{"moduleComponents":{"Subscriber":{"kind":2,"usabilityResult":{"wordCount":0,"index":0},"methods":[{"name":"create","usabilityResult":{"index":0,"wordCount":null},"sources":{"name":"create","statements":["return new SafeSubscriber(next, error, complete);"],"parameters":[{"name":"next","type":"(x?: T) => void","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"error","type":"(e?: any) => void","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"complete","type":"() => void","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Subscriber<T>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nA static factory for a Subscriber, given a (potentially partial) definition\r\nof an Observer.","tags":[{"kind":25,"tagName":"param","text":"next The `next` callback of an Observer."},{"kind":25,"tagName":"param","text":"error The `error` callback of an\r\nObserver."},{"kind":25,"tagName":"param","text":"complete The `complete` callback of an\r\nObserver."},{"kind":25,"tagName":"return","text":"A Subscriber wrapping the (partially defined)\r\nObserver represented by the given arguments."},{"kind":25,"tagName":"nocollapse"},{"kind":25,"tagName":"deprecated","text":"Do not use. Will be removed in v8. There is no replacement for this\r\nmethod, and there is no reason to be creating instances of `Subscriber` directly.\r\nIf you have a specific use case, please file an issue."}]}],"isGenerator":false,"isAsync":false,"isStatic":true,"hasQuestionToken":false,"isAbstract":false,"decorators":[],"hasOverrideKeyword":false,"kind":26,"overloads":[],"declarationInfo":{"className":"Subscriber","modulePath":"..\\src\\internal\\Subscriber.ts"}}},{"name":"next","usabilityResult":{"index":0,"wordCount":null},"sources":{"name":"next","statements":["if (this.isStopped) {\r\n  handleStoppedNotification(nextNotification(value), this);\r\n} else {\r\n  this._next(value!);\r\n}"],"parameters":[{"name":"value","type":"T","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"void","typeParameters":[],"docs":[{"kind":24,"description":"\r\nThe {@link Observer} callback to receive notifications of type `next` from\r\nthe Observable, with a value. The Observable may call this method 0 or more\r\ntimes.","tags":[{"kind":25,"tagName":"param","text":"{T} [value] The `next` value."},{"kind":25,"tagName":"return","text":"{void}"}]}],"isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"isAbstract":false,"decorators":[],"hasOverrideKeyword":false,"kind":26,"overloads":[],"declarationInfo":{"className":"Subscriber","modulePath":"..\\src\\internal\\Subscriber.ts"}}},{"name":"error","usabilityResult":{"index":0,"wordCount":null},"sources":{"name":"error","statements":["if (this.isStopped) {\r\n  handleStoppedNotification(errorNotification(err), this);\r\n} else {\r\n  this.isStopped = true;\r\n  this._error(err);\r\n}"],"parameters":[{"name":"err","type":"any","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"void","typeParameters":[],"docs":[{"kind":24,"description":"\r\nThe {@link Observer} callback to receive notifications of type `error` from\r\nthe Observable, with an attached `Error`. Notifies the Observer that\r\nthe Observable has experienced an error condition.","tags":[{"kind":25,"tagName":"param","text":"{any} [err] The `error` exception."},{"kind":25,"tagName":"return","text":"{void}"}]}],"isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"isAbstract":false,"decorators":[],"hasOverrideKeyword":false,"kind":26,"overloads":[],"declarationInfo":{"className":"Subscriber","modulePath":"..\\src\\internal\\Subscriber.ts"}}},{"name":"complete","usabilityResult":{"index":0,"wordCount":null},"sources":{"name":"complete","statements":["if (this.isStopped) {\r\n  handleStoppedNotification(COMPLETE_NOTIFICATION, this);\r\n} else {\r\n  this.isStopped = true;\r\n  this._complete();\r\n}"],"parameters":[],"returnType":"void","typeParameters":[],"docs":[{"kind":24,"description":"\r\nThe {@link Observer} callback to receive a valueless notification of type\r\n`complete` from the Observable. Notifies the Observer that the Observable\r\nhas finished sending push-based notifications.","tags":[{"kind":25,"tagName":"return","text":"{void}"}]}],"isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"isAbstract":false,"decorators":[],"hasOverrideKeyword":false,"kind":26,"overloads":[],"declarationInfo":{"className":"Subscriber","modulePath":"..\\src\\internal\\Subscriber.ts"}}},{"name":"unsubscribe","usabilityResult":{"index":0,"wordCount":null},"sources":{"name":"unsubscribe","statements":["if (!this.closed) {\r\n  this.isStopped = true;\r\n  super.unsubscribe();\r\n  this.destination = null!;\r\n}"],"parameters":[],"returnType":"void","typeParameters":[],"docs":[],"isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"isAbstract":false,"decorators":[],"hasOverrideKeyword":false,"kind":26,"overloads":[],"declarationInfo":{"className":"Subscriber","modulePath":"..\\src\\internal\\Subscriber.ts"}}}]}},"usabilityResult":{"index":0}},"..\\src\\internal\\Notification.ts":{"moduleComponents":{"Notification":{"kind":2,"usabilityResult":{"wordCount":0,"index":0},"methods":[{"name":"observe","usabilityResult":{"index":0,"wordCount":null},"sources":{"name":"observe","statements":["return observeNotification(this as ObservableNotification<T>, observer);"],"parameters":[{"name":"observer","type":"PartialObserver<T>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"void","typeParameters":[],"docs":[{"kind":24,"description":"\r\nExecutes the appropriate handler on a passed `observer` given the `kind` of notification.\r\nIf the handler is missing it will do nothing. Even if the notification is an error, if\r\nthere is no error handler on the observer, an error will not be thrown, it will noop.","tags":[{"kind":25,"tagName":"param","text":"observer The observer to notify."}]}],"isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"isAbstract":false,"decorators":[],"hasOverrideKeyword":false,"kind":26,"overloads":[],"declarationInfo":{"className":"Notification","modulePath":"..\\src\\internal\\Notification.ts"}}},{"name":"do","usabilityResult":{"index":0,"wordCount":null},"sources":{"name":"do","statements":[{"isExported":false,"isDefaultExport":false,"hasDeclareKeyword":false,"docs":[],"kind":41,"declarationKind":"const","declarations":[{"name":"{ kind, value, error }","initializer":"this","hasExclamationToken":false,"kind":40}]},"return kind === 'N' ? nextHandler?.(value!) : kind === 'E' ? errorHandler?.(error) : completeHandler?.();"],"parameters":[{"name":"nextHandler","type":"(value: T) => void","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"errorHandler","type":"(err: any) => void","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"completeHandler","type":"() => void","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"void","typeParameters":[],"docs":[],"isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"isAbstract":false,"decorators":[],"hasOverrideKeyword":false,"kind":26,"overloads":[{"parameters":[{"name":"next","type":"(value: T) => void","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"error","type":"(err: any) => void","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"complete","type":"() => void","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"void","isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"isAbstract":false,"typeParameters":[],"hasOverrideKeyword":false,"docs":[{"kind":24,"description":"\r\nExecutes a notification on the appropriate handler from a list provided.\r\nIf a handler is missing for the kind of notification, nothing is called\r\nand no error is thrown, it will be a noop.","tags":[{"kind":25,"tagName":"param","text":"next A next handler"},{"kind":25,"tagName":"param","text":"error An error handler"},{"kind":25,"tagName":"param","text":"complete A complete handler"},{"kind":25,"tagName":"deprecated","text":"Replaced with {@link Notification#observe observe}. Will be removed in v8."}]}],"kind":27,"declarationInfo":{"className":"Notification","modulePath":"..\\src\\internal\\Notification.ts"}},{"parameters":[{"name":"next","type":"(value: T) => void","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"error","type":"(err: any) => void","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"void","isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"isAbstract":false,"typeParameters":[],"hasOverrideKeyword":false,"docs":[{"kind":24,"description":"\r\nExecutes a notification on the appropriate handler from a list provided.\r\nIf a handler is missing for the kind of notification, nothing is called\r\nand no error is thrown, it will be a noop.","tags":[{"kind":25,"tagName":"param","text":"next A next handler"},{"kind":25,"tagName":"param","text":"error An error handler"},{"kind":25,"tagName":"deprecated","text":"Replaced with {@link Notification#observe observe}. Will be removed in v8."}]}],"kind":27,"declarationInfo":{"className":"Notification","modulePath":"..\\src\\internal\\Notification.ts"}},{"parameters":[{"name":"next","type":"(value: T) => void","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"void","isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"isAbstract":false,"typeParameters":[],"hasOverrideKeyword":false,"docs":[{"kind":24,"description":"\r\nExecutes the next handler if the Notification is of `kind` `\"N\"`. Otherwise\r\nthis will not error, and it will be a noop.","tags":[{"kind":25,"tagName":"param","text":"next The next handler"},{"kind":25,"tagName":"deprecated","text":"Replaced with {@link Notification#observe observe}. Will be removed in v8."}]}],"kind":27,"declarationInfo":{"className":"Notification","modulePath":"..\\src\\internal\\Notification.ts"}}]}},{"name":"accept","usabilityResult":{"index":0,"wordCount":null},"sources":{"name":"accept","statements":["return isFunction((nextOrObserver as any)?.next)\r\n? this.observe(nextOrObserver as PartialObserver<T>)\r\n: this.do(nextOrObserver as (value: T) => void, error as any, complete as any);"],"parameters":[{"name":"nextOrObserver","type":"PartialObserver<T> | ((value: T) => void)","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"error","type":"(err: any) => void","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"complete","type":"() => void","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"typeParameters":[],"docs":[],"isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"isAbstract":false,"decorators":[],"hasOverrideKeyword":false,"kind":26,"overloads":[{"parameters":[{"name":"next","type":"(value: T) => void","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"error","type":"(err: any) => void","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"complete","type":"() => void","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"void","isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"isAbstract":false,"typeParameters":[],"hasOverrideKeyword":false,"docs":[{"kind":24,"description":"\r\nExecutes a notification on the appropriate handler from a list provided.\r\nIf a handler is missing for the kind of notification, nothing is called\r\nand no error is thrown, it will be a noop.","tags":[{"kind":25,"tagName":"param","text":"next A next handler"},{"kind":25,"tagName":"param","text":"error An error handler"},{"kind":25,"tagName":"param","text":"complete A complete handler"},{"kind":25,"tagName":"deprecated","text":"Replaced with {@link Notification#observe observe}. Will be removed in v8."}]}],"kind":27,"declarationInfo":{"className":"Notification","modulePath":"..\\src\\internal\\Notification.ts"}},{"parameters":[{"name":"next","type":"(value: T) => void","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"error","type":"(err: any) => void","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"void","isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"isAbstract":false,"typeParameters":[],"hasOverrideKeyword":false,"docs":[{"kind":24,"description":"\r\nExecutes a notification on the appropriate handler from a list provided.\r\nIf a handler is missing for the kind of notification, nothing is called\r\nand no error is thrown, it will be a noop.","tags":[{"kind":25,"tagName":"param","text":"next A next handler"},{"kind":25,"tagName":"param","text":"error An error handler"},{"kind":25,"tagName":"deprecated","text":"Replaced with {@link Notification#observe observe}. Will be removed in v8."}]}],"kind":27,"declarationInfo":{"className":"Notification","modulePath":"..\\src\\internal\\Notification.ts"}},{"parameters":[{"name":"next","type":"(value: T) => void","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"void","isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"isAbstract":false,"typeParameters":[],"hasOverrideKeyword":false,"docs":[{"kind":24,"description":"\r\nExecutes the next handler if the Notification is of `kind` `\"N\"`. Otherwise\r\nthis will not error, and it will be a noop.","tags":[{"kind":25,"tagName":"param","text":"next The next handler"},{"kind":25,"tagName":"deprecated","text":"Replaced with {@link Notification#observe observe}. Will be removed in v8."}]}],"kind":27,"declarationInfo":{"className":"Notification","modulePath":"..\\src\\internal\\Notification.ts"}},{"parameters":[{"name":"observer","type":"PartialObserver<T>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"void","isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"isAbstract":false,"typeParameters":[],"hasOverrideKeyword":false,"docs":[{"kind":24,"description":"\r\nExecutes the appropriate handler on a passed `observer` given the `kind` of notification.\r\nIf the handler is missing it will do nothing. Even if the notification is an error, if\r\nthere is no error handler on the observer, an error will not be thrown, it will noop.","tags":[{"kind":25,"tagName":"param","text":"observer The observer to notify."},{"kind":25,"tagName":"deprecated","text":"Replaced with {@link Notification#observe observe}. Will be removed in v8."}]}],"kind":27,"declarationInfo":{"className":"Notification","modulePath":"..\\src\\internal\\Notification.ts"}}]}},{"name":"toObservable","usabilityResult":{"index":0,"wordCount":null},"sources":{"name":"toObservable","statements":[{"isExported":false,"isDefaultExport":false,"hasDeclareKeyword":false,"docs":[],"kind":41,"declarationKind":"const","declarations":[{"name":"{ kind, value, error }","initializer":"this","hasExclamationToken":false,"kind":40}]},{"isExported":false,"isDefaultExport":false,"hasDeclareKeyword":false,"docs":[],"kind":41,"declarationKind":"const","declarations":[{"name":"result","initializer":"kind === 'N'\r\n        ? // Next kind. Return an observable of that value.\r\n          of(value!)\r\n        : //\r\n        kind === 'E'\r\n        ? // Error kind. Return an observable that emits the error.\r\n          throwError(() => error)\r\n        : //\r\n        kind === 'C'\r\n        ? // Completion kind. Kind is \"C\", return an observable that just completes.\r\n          EMPTY\r\n        : // Unknown kind, return falsy, so we error below.\r\n          0","hasExclamationToken":false,"kind":40}]},"if (!result) {\r\n  // TODO: consider removing this check. The only way to cause this would be to\r\n  // use the Notification constructor directly in a way that is not type-safe.\r\n  // and direct use of the Notification constructor is deprecated.\r\n  throw new TypeError(`Unexpected notification kind ${kind}`);\r\n}","return result;"],"parameters":[],"returnType":"Observable<T>","typeParameters":[],"docs":[{"kind":24,"description":"\r\nReturns a simple Observable that just delivers the notification represented\r\nby this Notification instance.\r\n","tags":[{"kind":25,"tagName":"deprecated","text":"Will be removed in v8. To convert a `Notification` to an {@link Observable},\r\nuse {@link of} and {@link dematerialize}: `of(notification).pipe(dematerialize())`."}]}],"isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"isAbstract":false,"decorators":[],"hasOverrideKeyword":false,"kind":26,"overloads":[],"declarationInfo":{"className":"Notification","modulePath":"..\\src\\internal\\Notification.ts"}}},{"name":"createNext","usabilityResult":{"index":0,"wordCount":null},"sources":{"name":"createNext","statements":["return new Notification('N', value) as Notification<T> & NextNotification<T>;"],"parameters":[{"name":"value","type":"T","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nA shortcut to create a Notification instance of the type `next` from a\r\ngiven value.","tags":[{"kind":25,"tagName":"param","text":"{T} value The `next` value."},{"kind":25,"tagName":"return","text":"{Notification<T>} The \"next\" Notification representing the\r\nargument."},{"kind":25,"tagName":"nocollapse"},{"kind":25,"tagName":"deprecated","text":"It is NOT recommended to create instances of `Notification` directly.\r\nRather, try to create POJOs matching the signature outlined in {@link ObservableNotification}.\r\nFor example: `{ kind: 'N', value: 1 }`, `{ kind: 'E', error: new Error('bad') }`, or `{ kind: 'C' }`.\r\nWill be removed in v8."}]}],"isGenerator":false,"isAsync":false,"isStatic":true,"hasQuestionToken":false,"isAbstract":false,"decorators":[],"hasOverrideKeyword":false,"kind":26,"overloads":[],"declarationInfo":{"className":"Notification","modulePath":"..\\src\\internal\\Notification.ts"}}},{"name":"createError","usabilityResult":{"index":0,"wordCount":null},"sources":{"name":"createError","statements":["return new Notification('E', undefined, err) as Notification<never> & ErrorNotification;"],"parameters":[{"name":"err","type":"any","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"typeParameters":[],"docs":[{"kind":24,"description":"\r\nA shortcut to create a Notification instance of the type `error` from a\r\ngiven error.","tags":[{"kind":25,"tagName":"param","text":"{any} [err] The `error` error."},{"kind":25,"tagName":"return","text":"{Notification<T>} The \"error\" Notification representing the\r\nargument."},{"kind":25,"tagName":"nocollapse"},{"kind":25,"tagName":"deprecated","text":"It is NOT recommended to create instances of `Notification` directly.\r\nRather, try to create POJOs matching the signature outlined in {@link ObservableNotification}.\r\nFor example: `{ kind: 'N', value: 1 }`, `{ kind: 'E', error: new Error('bad') }`, or `{ kind: 'C' }`.\r\nWill be removed in v8."}]}],"isGenerator":false,"isAsync":false,"isStatic":true,"hasQuestionToken":false,"isAbstract":false,"decorators":[],"hasOverrideKeyword":false,"kind":26,"overloads":[],"declarationInfo":{"className":"Notification","modulePath":"..\\src\\internal\\Notification.ts"}}},{"name":"createComplete","usabilityResult":{"index":0,"wordCount":null},"sources":{"name":"createComplete","statements":["return Notification.completeNotification;"],"parameters":[],"returnType":"Notification<never> & CompleteNotification","typeParameters":[],"docs":[{"kind":24,"description":"\r\nA shortcut to create a Notification instance of the type `complete`.","tags":[{"kind":25,"tagName":"return","text":"{Notification<any>} The valueless \"complete\" Notification."},{"kind":25,"tagName":"nocollapse"},{"kind":25,"tagName":"deprecated","text":"It is NOT recommended to create instances of `Notification` directly.\r\nRather, try to create POJOs matching the signature outlined in {@link ObservableNotification}.\r\nFor example: `{ kind: 'N', value: 1 }`, `{ kind: 'E', error: new Error('bad') }`, or `{ kind: 'C' }`.\r\nWill be removed in v8."}]}],"isGenerator":false,"isAsync":false,"isStatic":true,"hasQuestionToken":false,"isAbstract":false,"decorators":[],"hasOverrideKeyword":false,"kind":26,"overloads":[],"declarationInfo":{"className":"Notification","modulePath":"..\\src\\internal\\Notification.ts"}}}]}},"usabilityResult":{"index":0}},"..\\src\\internal\\util\\pipe.ts":{"moduleComponents":{"pipe":{"kind":13,"usabilityResult":{"wordCount":57,"index":1},"sources":{"name":"pipe","statements":["return pipeFromArray(fns);"],"parameters":[{"name":"fns","type":"Array<UnaryFunction<any, any>>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":true}],"returnType":"UnaryFunction<any, any>","typeParameters":[],"docs":[{"kind":24,"description":"\r\npipe() can be called on one or more functions, each of which can take one argument (\"UnaryFunction\")\r\nand uses it to return a value.\r\nIt returns a function that takes one argument, passes it to the first UnaryFunction, and then\r\npasses the result to the next one, passes that result to the next one, and so on.  ","tags":[]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[{"isExported":true,"isDefaultExport":false,"typeParameters":[],"docs":[],"hasDeclareKeyword":false,"parameters":[],"returnType":"typeof identity","isGenerator":false,"isAsync":false,"kind":14,"functionName":"pipe","modulePath":"..\\src\\internal\\util\\pipe.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"A","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"fn1","type":"UnaryFunction<T, A>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"UnaryFunction<T, A>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"pipe","modulePath":"..\\src\\internal\\util\\pipe.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"A","kind":39,"isConst":false,"variance":0},{"name":"B","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"fn1","type":"UnaryFunction<T, A>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"fn2","type":"UnaryFunction<A, B>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"UnaryFunction<T, B>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"pipe","modulePath":"..\\src\\internal\\util\\pipe.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"A","kind":39,"isConst":false,"variance":0},{"name":"B","kind":39,"isConst":false,"variance":0},{"name":"C","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"fn1","type":"UnaryFunction<T, A>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"fn2","type":"UnaryFunction<A, B>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"fn3","type":"UnaryFunction<B, C>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"UnaryFunction<T, C>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"pipe","modulePath":"..\\src\\internal\\util\\pipe.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"A","kind":39,"isConst":false,"variance":0},{"name":"B","kind":39,"isConst":false,"variance":0},{"name":"C","kind":39,"isConst":false,"variance":0},{"name":"D","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"fn1","type":"UnaryFunction<T, A>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"fn2","type":"UnaryFunction<A, B>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"fn3","type":"UnaryFunction<B, C>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"fn4","type":"UnaryFunction<C, D>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"UnaryFunction<T, D>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"pipe","modulePath":"..\\src\\internal\\util\\pipe.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"A","kind":39,"isConst":false,"variance":0},{"name":"B","kind":39,"isConst":false,"variance":0},{"name":"C","kind":39,"isConst":false,"variance":0},{"name":"D","kind":39,"isConst":false,"variance":0},{"name":"E","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"fn1","type":"UnaryFunction<T, A>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"fn2","type":"UnaryFunction<A, B>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"fn3","type":"UnaryFunction<B, C>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"fn4","type":"UnaryFunction<C, D>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"fn5","type":"UnaryFunction<D, E>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"UnaryFunction<T, E>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"pipe","modulePath":"..\\src\\internal\\util\\pipe.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"A","kind":39,"isConst":false,"variance":0},{"name":"B","kind":39,"isConst":false,"variance":0},{"name":"C","kind":39,"isConst":false,"variance":0},{"name":"D","kind":39,"isConst":false,"variance":0},{"name":"E","kind":39,"isConst":false,"variance":0},{"name":"F","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"fn1","type":"UnaryFunction<T, A>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"fn2","type":"UnaryFunction<A, B>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"fn3","type":"UnaryFunction<B, C>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"fn4","type":"UnaryFunction<C, D>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"fn5","type":"UnaryFunction<D, E>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"fn6","type":"UnaryFunction<E, F>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"UnaryFunction<T, F>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"pipe","modulePath":"..\\src\\internal\\util\\pipe.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"A","kind":39,"isConst":false,"variance":0},{"name":"B","kind":39,"isConst":false,"variance":0},{"name":"C","kind":39,"isConst":false,"variance":0},{"name":"D","kind":39,"isConst":false,"variance":0},{"name":"E","kind":39,"isConst":false,"variance":0},{"name":"F","kind":39,"isConst":false,"variance":0},{"name":"G","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"fn1","type":"UnaryFunction<T, A>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"fn2","type":"UnaryFunction<A, B>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"fn3","type":"UnaryFunction<B, C>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"fn4","type":"UnaryFunction<C, D>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"fn5","type":"UnaryFunction<D, E>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"fn6","type":"UnaryFunction<E, F>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"fn7","type":"UnaryFunction<F, G>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"UnaryFunction<T, G>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"pipe","modulePath":"..\\src\\internal\\util\\pipe.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"A","kind":39,"isConst":false,"variance":0},{"name":"B","kind":39,"isConst":false,"variance":0},{"name":"C","kind":39,"isConst":false,"variance":0},{"name":"D","kind":39,"isConst":false,"variance":0},{"name":"E","kind":39,"isConst":false,"variance":0},{"name":"F","kind":39,"isConst":false,"variance":0},{"name":"G","kind":39,"isConst":false,"variance":0},{"name":"H","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"fn1","type":"UnaryFunction<T, A>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"fn2","type":"UnaryFunction<A, B>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"fn3","type":"UnaryFunction<B, C>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"fn4","type":"UnaryFunction<C, D>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"fn5","type":"UnaryFunction<D, E>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"fn6","type":"UnaryFunction<E, F>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"fn7","type":"UnaryFunction<F, G>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"fn8","type":"UnaryFunction<G, H>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"UnaryFunction<T, H>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"pipe","modulePath":"..\\src\\internal\\util\\pipe.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"A","kind":39,"isConst":false,"variance":0},{"name":"B","kind":39,"isConst":false,"variance":0},{"name":"C","kind":39,"isConst":false,"variance":0},{"name":"D","kind":39,"isConst":false,"variance":0},{"name":"E","kind":39,"isConst":false,"variance":0},{"name":"F","kind":39,"isConst":false,"variance":0},{"name":"G","kind":39,"isConst":false,"variance":0},{"name":"H","kind":39,"isConst":false,"variance":0},{"name":"I","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"fn1","type":"UnaryFunction<T, A>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"fn2","type":"UnaryFunction<A, B>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"fn3","type":"UnaryFunction<B, C>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"fn4","type":"UnaryFunction<C, D>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"fn5","type":"UnaryFunction<D, E>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"fn6","type":"UnaryFunction<E, F>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"fn7","type":"UnaryFunction<F, G>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"fn8","type":"UnaryFunction<G, H>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"fn9","type":"UnaryFunction<H, I>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"UnaryFunction<T, I>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"pipe","modulePath":"..\\src\\internal\\util\\pipe.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"A","kind":39,"isConst":false,"variance":0},{"name":"B","kind":39,"isConst":false,"variance":0},{"name":"C","kind":39,"isConst":false,"variance":0},{"name":"D","kind":39,"isConst":false,"variance":0},{"name":"E","kind":39,"isConst":false,"variance":0},{"name":"F","kind":39,"isConst":false,"variance":0},{"name":"G","kind":39,"isConst":false,"variance":0},{"name":"H","kind":39,"isConst":false,"variance":0},{"name":"I","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"fn1","type":"UnaryFunction<T, A>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"fn2","type":"UnaryFunction<A, B>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"fn3","type":"UnaryFunction<B, C>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"fn4","type":"UnaryFunction<C, D>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"fn5","type":"UnaryFunction<D, E>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"fn6","type":"UnaryFunction<E, F>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"fn7","type":"UnaryFunction<F, G>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"fn8","type":"UnaryFunction<G, H>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"fn9","type":"UnaryFunction<H, I>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"fns","type":"UnaryFunction<any, any>[]","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":true}],"returnType":"UnaryFunction<T, unknown>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"pipe","modulePath":"..\\src\\internal\\util\\pipe.ts"}]}}},"usabilityResult":{"index":1}},"..\\src\\internal\\util\\noop.ts":{"moduleComponents":{"noop":{"kind":13,"usabilityResult":{"wordCount":0,"index":0},"sources":{"name":"noop","statements":[],"parameters":[],"typeParameters":[],"docs":[],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[],"functionName":"noop","modulePath":"..\\src\\internal\\util\\noop.ts"}}},"usabilityResult":{"index":0}},"..\\src\\internal\\util\\identity.ts":{"moduleComponents":{"identity":{"kind":13,"usabilityResult":{"wordCount":107,"index":1},"sources":{"name":"identity","statements":["return x;"],"parameters":[{"name":"x","type":"T","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"T","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nThis function takes one parameter and just returns it. Simply put,\r\nthis is like `<T>(x: T): T => x`.\r\n\r\n## Examples\r\n\r\nThis is useful in some cases when using things like `mergeMap`\r\n\r\n```ts\r\nimport { interval, take, map, range, mergeMap, identity } from 'rxjs';\r\n\r\nconst source$ = interval(1000).pipe(take(5));\r\n\r\nconst result$ = source$.pipe(\r\n  map(i => range(i)),\r\n  mergeMap(identity) // same as mergeMap(x => x)\r\n);\r\n\r\nresult$.subscribe({\r\n  next: console.log\r\n});\r\n```\r\n\r\nOr when you want to selectively apply an operator\r\n\r\n```ts\r\nimport { interval, take, identity } from 'rxjs';\r\n\r\nconst shouldLimit = () => Math.random() < 0.5;\r\n\r\nconst source$ = interval(1000);\r\n\r\nconst result$ = source$.pipe(shouldLimit() ? take(5) : identity);\r\n\r\nresult$.subscribe({\r\n  next: console.log\r\n});\r\n```\r\n","tags":[{"kind":25,"tagName":"param","text":"x Any value that is returned by this function"},{"kind":25,"tagName":"returns","text":"The value passed as the first parameter to this function"}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[],"functionName":"identity","modulePath":"..\\src\\internal\\util\\identity.ts"}}},"usabilityResult":{"index":1}},"..\\src\\internal\\util\\isObservable.ts":{"moduleComponents":{"isObservable":{"kind":13,"usabilityResult":{"wordCount":11,"index":0.22},"sources":{"name":"isObservable","statements":["return !!obj && (obj instanceof Observable || (isFunction(obj.lift) && isFunction(obj.subscribe)));"],"parameters":[{"name":"obj","type":"any","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"obj is Observable<unknown>","typeParameters":[],"docs":[{"kind":24,"description":"\r\nTests to see if the object is an RxJS {@link Observable}","tags":[{"kind":25,"tagName":"param","text":"obj the object to test"}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[],"functionName":"isObservable","modulePath":"..\\src\\internal\\util\\isObservable.ts"}}},"usabilityResult":{"index":0.22}},"..\\src\\internal\\lastValueFrom.ts":{"moduleComponents":{"lastValueFrom":{"kind":13,"usabilityResult":{"wordCount":192,"index":1},"sources":{"name":"lastValueFrom","statements":[{"isExported":false,"isDefaultExport":false,"hasDeclareKeyword":false,"docs":[],"kind":41,"declarationKind":"const","declarations":[{"name":"hasConfig","initializer":"typeof config === 'object'","hasExclamationToken":false,"kind":40}]},"return new Promise<T | D>((resolve, reject) => {\r\nlet _hasValue = false;\r\nlet _value: T;\r\nsource.subscribe({\r\n  next: (value) => {\r\n    _value = value;\r\n    _hasValue = true;\r\n  },\r\n  error: reject,\r\n  complete: () => {\r\n    if (_hasValue) {\r\n      resolve(_value);\r\n    } else if (hasConfig) {\r\n      resolve(config!.defaultValue);\r\n    } else {\r\n      reject(new EmptyError());\r\n    }\r\n  },\r\n});\r\n});"],"parameters":[{"name":"source","type":"Observable<T>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"config","type":"LastValueFromConfig<D>","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Promise<T | D>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"D","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nConverts an observable to a promise by subscribing to the observable,\r\nwaiting for it to complete, and resolving the returned promise with the\r\nlast value from the observed stream.\r\n\r\nIf the observable stream completes before any values were emitted, the\r\nreturned promise will reject with {@link EmptyError} or will resolve\r\nwith the default value if a default was specified.\r\n\r\nIf the observable stream emits an error, the returned promise will reject\r\nwith that error.\r\n\r\n**WARNING**: Only use this with observables you *know* will complete. If the source\r\nobservable does not complete, you will end up with a promise that is hung up, and\r\npotentially all of the state of an async function hanging out in memory. To avoid\r\nthis situation, look into adding something like {@link timeout}, {@link take},\r\n{@link takeWhile}, or {@link takeUntil} amongst others.\r\n\r\n## Example\r\n\r\nWait for the last value from a stream and emit it from a promise in\r\nan async function\r\n\r\n```ts\r\nimport { interval, take, lastValueFrom } from 'rxjs';\r\n\r\nasync function execute() {\r\n  const source$ = interval(2000).pipe(take(10));\r\n  const finalNumber = await lastValueFrom(source$);\r\n  console.log(`The final number is ${ finalNumber }`);\r\n}\r\n\r\nexecute();\r\n\r\n// Expected output:\r\n// 'The final number is 9'\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link firstValueFrom}"},{"kind":25,"tagName":"param","text":"source the observable to convert to a promise"},{"kind":25,"tagName":"param","text":"config a configuration object to define the `defaultValue` to use if the source completes without emitting a value"}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"D","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"source","type":"Observable<T>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"config","type":"LastValueFromConfig<D>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Promise<T | D>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"lastValueFrom","modulePath":"..\\src\\internal\\lastValueFrom.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"source","type":"Observable<T>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Promise<T>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"lastValueFrom","modulePath":"..\\src\\internal\\lastValueFrom.ts"}]}}},"usabilityResult":{"index":1}},"..\\src\\internal\\firstValueFrom.ts":{"moduleComponents":{"firstValueFrom":{"kind":13,"usabilityResult":{"wordCount":203,"index":1},"sources":{"name":"firstValueFrom","statements":[{"isExported":false,"isDefaultExport":false,"hasDeclareKeyword":false,"docs":[],"kind":41,"declarationKind":"const","declarations":[{"name":"hasConfig","initializer":"typeof config === 'object'","hasExclamationToken":false,"kind":40}]},"return new Promise<T | D>((resolve, reject) => {\r\nconst subscriber = new SafeSubscriber<T>({\r\n  next: (value) => {\r\n    resolve(value);\r\n    subscriber.unsubscribe();\r\n  },\r\n  error: reject,\r\n  complete: () => {\r\n    if (hasConfig) {\r\n      resolve(config!.defaultValue);\r\n    } else {\r\n      reject(new EmptyError());\r\n    }\r\n  },\r\n});\r\nsource.subscribe(subscriber);\r\n});"],"parameters":[{"name":"source","type":"Observable<T>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"config","type":"FirstValueFromConfig<D>","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Promise<T | D>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"D","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nConverts an observable to a promise by subscribing to the observable,\r\nand returning a promise that will resolve as soon as the first value\r\narrives from the observable. The subscription will then be closed.\r\n\r\nIf the observable stream completes before any values were emitted, the\r\nreturned promise will reject with {@link EmptyError} or will resolve\r\nwith the default value if a default was specified.\r\n\r\nIf the observable stream emits an error, the returned promise will reject\r\nwith that error.\r\n\r\n**WARNING**: Only use this with observables you *know* will emit at least one value,\r\n*OR* complete. If the source observable does not emit one value or complete, you will\r\nend up with a promise that is hung up, and potentially all of the state of an\r\nasync function hanging out in memory. To avoid this situation, look into adding\r\nsomething like {@link timeout}, {@link take}, {@link takeWhile}, or {@link takeUntil}\r\namongst others.\r\n\r\n## Example\r\n\r\nWait for the first value from a stream and emit it from a promise in\r\nan async function\r\n\r\n```ts\r\nimport { interval, firstValueFrom } from 'rxjs';\r\n\r\nasync function execute() {\r\n  const source$ = interval(2000);\r\n  const firstNumber = await firstValueFrom(source$);\r\n  console.log(`The first number is ${ firstNumber }`);\r\n}\r\n\r\nexecute();\r\n\r\n// Expected output:\r\n// 'The first number is 0'\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link lastValueFrom}"},{"kind":25,"tagName":"param","text":"source the observable to convert to a promise"},{"kind":25,"tagName":"param","text":"config a configuration object to define the `defaultValue` to use if the source completes without emitting a value"}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"D","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"source","type":"Observable<T>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"config","type":"FirstValueFromConfig<D>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Promise<T | D>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"firstValueFrom","modulePath":"..\\src\\internal\\firstValueFrom.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"source","type":"Observable<T>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Promise<T>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"firstValueFrom","modulePath":"..\\src\\internal\\firstValueFrom.ts"}]}}},"usabilityResult":{"index":1}},"..\\src\\internal\\observable\\bindCallback.ts":{"moduleComponents":{"bindCallback":{"kind":13,"usabilityResult":{"wordCount":738,"index":1},"sources":{"name":"bindCallback","statements":["return bindCallbackInternals(false, callbackFunc, resultSelector, scheduler);"],"parameters":[{"name":"callbackFunc","type":"(...args: [...any[], (...res: any) => void]) => void","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"resultSelector","type":"((...args: any[]) => any) | SchedulerLike","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"scheduler","type":"SchedulerLike","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"(...args: any[]) => Observable<unknown>","typeParameters":[],"docs":[{"kind":24,"description":"\r\nConverts a callback API to a function that returns an Observable.\r\n\r\n<span class=\"informal\">Give it a function `f` of type `f(x, callback)` and\r\nit will return a function `g` that when called as `g(x)` will output an\r\nObservable.</span>\r\n\r\n`bindCallback` is not an operator because its input and output are not\r\nObservables. The input is a function `func` with some parameters. The\r\nlast parameter must be a callback function that `func` calls when it is\r\ndone.\r\n\r\nThe output of `bindCallback` is a function that takes the same parameters\r\nas `func`, except the last one (the callback). When the output function\r\nis called with arguments it will return an Observable. If function `func`\r\ncalls its callback with one argument, the Observable will emit that value.\r\nIf on the other hand the callback is called with multiple values the resulting\r\nObservable will emit an array with said values as arguments.\r\n\r\nIt is **very important** to remember that input function `func` is not called\r\nwhen the output function is, but rather when the Observable returned by the output\r\nfunction is subscribed. This means if `func` makes an AJAX request, that request\r\nwill be made every time someone subscribes to the resulting Observable, but not before.\r\n\r\nThe last optional parameter - `scheduler` - can be used to control when the call\r\nto `func` happens after someone subscribes to Observable, as well as when results\r\npassed to callback will be emitted. By default, the subscription to an Observable calls `func`\r\nsynchronously, but using {@link asyncScheduler} as the last parameter will defer the call to `func`,\r\njust like wrapping the call in `setTimeout` with a timeout of `0` would. If you were to use the async Scheduler\r\nand call `subscribe` on the output Observable, all function calls that are currently executing\r\nwill end before `func` is invoked.\r\n\r\nBy default, results passed to the callback are emitted immediately after `func` invokes the callback.\r\nIn particular, if the callback is called synchronously, then the subscription of the resulting Observable\r\nwill call the `next` function synchronously as well.  If you want to defer that call,\r\nyou may use {@link asyncScheduler} just as before.  This means that by using `Scheduler.async` you can\r\nensure that `func` always calls its callback asynchronously, thus avoiding terrifying Zalgo.\r\n\r\nNote that the Observable created by the output function will always emit a single value\r\nand then complete immediately. If `func` calls the callback multiple times, values from subsequent\r\ncalls will not appear in the stream. If you need to listen for multiple calls,\r\n you probably want to use {@link fromEvent} or {@link fromEventPattern} instead.\r\n\r\nIf `func` depends on some context (`this` property) and is not already bound, the context of `func`\r\nwill be the context that the output function has at call time. In particular, if `func`\r\nis called as a method of some object and if `func` is not already bound, in order to preserve the context\r\nit is recommended that the context of the output function is set to that object as well.\r\n\r\nIf the input function calls its callback in the \"node style\" (i.e. first argument to callback is\r\noptional error parameter signaling whether the call failed or not), {@link bindNodeCallback}\r\nprovides convenient error handling and probably is a better choice.\r\n`bindCallback` will treat such functions the same as any other and error parameters\r\n(whether passed or not) will always be interpreted as regular callback argument.\r\n\r\n## Examples\r\n\r\n### Convert jQuery's getJSON to an Observable API\r\n```ts\r\nimport { bindCallback } from 'rxjs';\r\nimport * as jQuery from 'jquery';\r\n\r\n// Suppose we have jQuery.getJSON('/my/url', callback)\r\nconst getJSONAsObservable = bindCallback(jQuery.getJSON);\r\nconst result = getJSONAsObservable('/my/url');\r\nresult.subscribe(x => console.log(x), e => console.error(e));\r\n```\r\n\r\n### Receive an array of arguments passed to a callback\r\n```ts\r\nimport { bindCallback } from 'rxjs';\r\n\r\nconst someFunction = (n, s, cb) => {\r\n  cb(n, s, { someProperty: 'someValue' });\r\n};\r\n\r\nconst boundSomeFunction = bindCallback(someFunction);\r\nboundSomeFunction(5, 'some string').subscribe((values) => {\r\n  console.log(values); // [5, 'some string', {someProperty: 'someValue'}]\r\n});\r\n```\r\n\r\n### Compare behaviour with and without async Scheduler\r\n```ts\r\nimport { bindCallback, asyncScheduler } from 'rxjs';\r\n\r\nfunction iCallMyCallbackSynchronously(cb) {\r\n  cb();\r\n}\r\n\r\nconst boundSyncFn = bindCallback(iCallMyCallbackSynchronously);\r\nconst boundAsyncFn = bindCallback(iCallMyCallbackSynchronously, null, asyncScheduler);\r\n\r\nboundSyncFn().subscribe(() => console.log('I was sync!'));\r\nboundAsyncFn().subscribe(() => console.log('I was async!'));\r\nconsole.log('This happened...');\r\n\r\n// Logs:\r\n// I was sync!\r\n// This happened...\r\n// I was async!\r\n```\r\n\r\n### Use bindCallback on an object method\r\n```ts\r\nimport { bindCallback } from 'rxjs';\r\n\r\nconst boundMethod = bindCallback(someObject.methodWithCallback);\r\nboundMethod\r\n  .call(someObject) // make sure methodWithCallback has access to someObject\r\n  .subscribe(subscriber);\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link bindNodeCallback}"},{"kind":25,"tagName":"see","text":"{@link from}"},{"kind":25,"tagName":"param","text":"{function} func A function with a callback as the last parameter."},{"kind":25,"tagName":"param","text":"{SchedulerLike} [scheduler] The scheduler on which to schedule the\r\ncallbacks."},{"kind":25,"tagName":"return","text":"{function(...params: *): Observable} A function which returns the\r\nObservable that delivers the same values the callback would deliver."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[{"isExported":true,"isDefaultExport":false,"typeParameters":[],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"callbackFunc","type":"(...args: any[]) => void","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"resultSelector","type":"(...args: any[]) => any","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"scheduler","type":"SchedulerLike","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"(...args: any[]) => Observable<any>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"bindCallback","modulePath":"..\\src\\internal\\observable\\bindCallback.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"A","kind":39,"isConst":false,"constraint":"readonly unknown[]","variance":0},{"name":"R","kind":39,"isConst":false,"constraint":"readonly unknown[]","variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"callbackFunc","type":"(...args: [...A, (...res: R) => void]) => void","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"schedulerLike","type":"SchedulerLike","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"(...arg: A) => Observable<R extends [] ? void : R extends [any] ? R[0] : R>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"bindCallback","modulePath":"..\\src\\internal\\observable\\bindCallback.ts"}]}}},"usabilityResult":{"index":1}},"..\\src\\internal\\observable\\bindNodeCallback.ts":{"moduleComponents":{"bindNodeCallback":{"kind":13,"usabilityResult":{"wordCount":639,"index":1},"sources":{"name":"bindNodeCallback","statements":["return bindCallbackInternals(true, callbackFunc, resultSelector, scheduler);"],"parameters":[{"name":"callbackFunc","type":"(...args: [...any[], (err: any, ...res: any) => void]) => void","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"resultSelector","type":"((...args: any[]) => any) | SchedulerLike","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"scheduler","type":"SchedulerLike","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"(...args: any[]) => Observable<any>","typeParameters":[],"docs":[{"kind":24,"description":"\r\nConverts a Node.js-style callback API to a function that returns an\r\nObservable.\r\n\r\n<span class=\"informal\">It's just like {@link bindCallback}, but the\r\ncallback is expected to be of type `callback(error, result)`.</span>\r\n\r\n`bindNodeCallback` is not an operator because its input and output are not\r\nObservables. The input is a function `func` with some parameters, but the\r\nlast parameter must be a callback function that `func` calls when it is\r\ndone. The callback function is expected to follow Node.js conventions,\r\nwhere the first argument to the callback is an error object, signaling\r\nwhether call was successful. If that object is passed to callback, it means\r\nsomething went wrong.\r\n\r\nThe output of `bindNodeCallback` is a function that takes the same\r\nparameters as `func`, except the last one (the callback). When the output\r\nfunction is called with arguments, it will return an Observable.\r\nIf `func` calls its callback with error parameter present, Observable will\r\nerror with that value as well. If error parameter is not passed, Observable will emit\r\nsecond parameter. If there are more parameters (third and so on),\r\nObservable will emit an array with all arguments, except first error argument.\r\n\r\nNote that `func` will not be called at the same time output function is,\r\nbut rather whenever resulting Observable is subscribed. By default call to\r\n`func` will happen synchronously after subscription, but that can be changed\r\nwith proper `scheduler` provided as optional third parameter. {@link SchedulerLike}\r\ncan also control when values from callback will be emitted by Observable.\r\nTo find out more, check out documentation for {@link bindCallback}, where\r\n{@link SchedulerLike} works exactly the same.\r\n\r\nAs in {@link bindCallback}, context (`this` property) of input function will be set to context\r\nof returned function, when it is called.\r\n\r\nAfter Observable emits value, it will complete immediately. This means\r\neven if `func` calls callback again, values from second and consecutive\r\ncalls will never appear on the stream. If you need to handle functions\r\nthat call callbacks multiple times, check out {@link fromEvent} or\r\n{@link fromEventPattern} instead.\r\n\r\nNote that `bindNodeCallback` can be used in non-Node.js environments as well.\r\n\"Node.js-style\" callbacks are just a convention, so if you write for\r\nbrowsers or any other environment and API you use implements that callback style,\r\n`bindNodeCallback` can be safely used on that API functions as well.\r\n\r\nRemember that Error object passed to callback does not have to be an instance\r\nof JavaScript built-in `Error` object. In fact, it does not even have to an object.\r\nError parameter of callback function is interpreted as \"present\", when value\r\nof that parameter is truthy. It could be, for example, non-zero number, non-empty\r\nstring or boolean `true`. In all of these cases resulting Observable would error\r\nwith that value. This means usually regular style callbacks will fail very often when\r\n`bindNodeCallback` is used. If your Observable errors much more often then you\r\nwould expect, check if callback really is called in Node.js-style and, if not,\r\nswitch to {@link bindCallback} instead.\r\n\r\nNote that even if error parameter is technically present in callback, but its value\r\nis falsy, it still won't appear in array emitted by Observable.\r\n\r\n## Examples\r\n###  Read a file from the filesystem and get the data as an Observable\r\n```ts\r\nimport * as fs from 'fs';\r\nconst readFileAsObservable = bindNodeCallback(fs.readFile);\r\nconst result = readFileAsObservable('./roadNames.txt', 'utf8');\r\nresult.subscribe(x => console.log(x), e => console.error(e));\r\n```\r\n\r\n### Use on function calling callback with multiple arguments\r\n```ts\r\nsomeFunction((err, a, b) => {\r\n  console.log(err); // null\r\n  console.log(a); // 5\r\n  console.log(b); // \"some string\"\r\n});\r\nconst boundSomeFunction = bindNodeCallback(someFunction);\r\nboundSomeFunction()\r\n.subscribe(value => {\r\n  console.log(value); // [5, \"some string\"]\r\n});\r\n```\r\n\r\n### Use on function calling callback in regular style\r\n```ts\r\nsomeFunction(a => {\r\n  console.log(a); // 5\r\n});\r\nconst boundSomeFunction = bindNodeCallback(someFunction);\r\nboundSomeFunction()\r\n.subscribe(\r\n  value => {}             // never gets called\r\n  err => console.log(err) // 5\r\n);\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link bindCallback}"},{"kind":25,"tagName":"see","text":"{@link from}"},{"kind":25,"tagName":"param","text":"{function} func Function with a Node.js-style callback as the last parameter."},{"kind":25,"tagName":"param","text":"{SchedulerLike} [scheduler] The scheduler on which to schedule the\r\ncallbacks."},{"kind":25,"tagName":"return","text":"{function(...params: *): Observable} A function which returns the\r\nObservable that delivers the same values the Node.js callback would\r\ndeliver."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[{"isExported":true,"isDefaultExport":false,"typeParameters":[],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"callbackFunc","type":"(...args: any[]) => void","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"resultSelector","type":"(...args: any[]) => any","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"scheduler","type":"SchedulerLike","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"(...args: any[]) => Observable<any>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"bindNodeCallback","modulePath":"..\\src\\internal\\observable\\bindNodeCallback.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"A","kind":39,"isConst":false,"constraint":"readonly unknown[]","variance":0},{"name":"R","kind":39,"isConst":false,"constraint":"readonly unknown[]","variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"callbackFunc","type":"(...args: [...A, (err: any, ...res: R) => void]) => void","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"schedulerLike","type":"SchedulerLike","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"(...arg: A) => Observable<R extends [] ? void : R extends [any] ? R[0] : R>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"bindNodeCallback","modulePath":"..\\src\\internal\\observable\\bindNodeCallback.ts"}]}}},"usabilityResult":{"index":1}},"..\\src\\internal\\observable\\combineLatest.ts":{"moduleComponents":{"combineLatest":{"kind":13,"usabilityResult":{"wordCount":707,"index":1},"sources":{"name":"combineLatest","statements":[{"isExported":false,"isDefaultExport":false,"hasDeclareKeyword":false,"docs":[],"kind":41,"declarationKind":"const","declarations":[{"name":"scheduler","initializer":"popScheduler(args)","hasExclamationToken":false,"kind":40}]},{"isExported":false,"isDefaultExport":false,"hasDeclareKeyword":false,"docs":[],"kind":41,"declarationKind":"const","declarations":[{"name":"resultSelector","initializer":"popResultSelector(args)","hasExclamationToken":false,"kind":40}]},{"isExported":false,"isDefaultExport":false,"hasDeclareKeyword":false,"docs":[],"kind":41,"declarationKind":"const","declarations":[{"name":"{ args: observables, keys }","initializer":"argsArgArrayOrObject(args)","hasExclamationToken":false,"kind":40}]},"if (observables.length === 0) {\r\n// If no observables are passed, or someone has passed an empty array\r\n// of observables, or even an empty object POJO, we need to just\r\n// complete (EMPTY), but we have to honor the scheduler provided if any.\r\nreturn from([], scheduler as any);\r\n}",{"isExported":false,"isDefaultExport":false,"hasDeclareKeyword":false,"docs":[],"kind":41,"declarationKind":"const","declarations":[{"name":"result","initializer":"new Observable<ObservedValueOf<O>[]>(\r\n    combineLatestInit(\r\n      observables as ObservableInput<ObservedValueOf<O>>[],\r\n      scheduler,\r\n      keys\r\n        ? // A handler for scrubbing the array of args into a dictionary.\r\n          (values) => createObject(keys, values)\r\n        : // A passthrough to just return the array\r\n          identity\r\n    )\r\n  )","hasExclamationToken":false,"kind":40}]},"return resultSelector ? (result.pipe(mapOneOrManyArgs(resultSelector)) as Observable<R>) : result;"],"parameters":[{"name":"args","type":"any[]","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":true}],"returnType":"Observable<R> | Observable<ObservedValueOf<O>[]>","typeParameters":[{"name":"O","kind":39,"isConst":false,"constraint":"ObservableInput<any>","variance":0},{"name":"R","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nCombines multiple Observables to create an Observable whose values are\r\ncalculated from the latest values of each of its input Observables.\r\n\r\n<span class=\"informal\">Whenever any input Observable emits a value, it\r\ncomputes a formula using the latest values from all the inputs, then emits\r\nthe output of that formula.</span>\r\n\r\n![](combineLatest.png)\r\n\r\n`combineLatest` combines the values from all the Observables passed in the\r\nobservables array. This is done by subscribing to each Observable in order and,\r\nwhenever any Observable emits, collecting an array of the most recent\r\nvalues from each Observable. So if you pass `n` Observables to this operator,\r\nthe returned Observable will always emit an array of `n` values, in an order\r\ncorresponding to the order of the passed Observables (the value from the first Observable\r\nwill be at index 0 of the array and so on).\r\n\r\nStatic version of `combineLatest` accepts an array of Observables. Note that an array of\r\nObservables is a good choice, if you don't know beforehand how many Observables\r\nyou will combine. Passing an empty array will result in an Observable that\r\ncompletes immediately.\r\n\r\nTo ensure the output array always has the same length, `combineLatest` will\r\nactually wait for all input Observables to emit at least once,\r\nbefore it starts emitting results. This means if some Observable emits\r\nvalues before other Observables started emitting, all these values but the last\r\nwill be lost. On the other hand, if some Observable does not emit a value but\r\ncompletes, resulting Observable will complete at the same moment without\r\nemitting anything, since it will now be impossible to include a value from the\r\ncompleted Observable in the resulting array. Also, if some input Observable does\r\nnot emit any value and never completes, `combineLatest` will also never emit\r\nand never complete, since, again, it will wait for all streams to emit some\r\nvalue.\r\n\r\nIf at least one Observable was passed to `combineLatest` and all passed Observables\r\nemitted something, the resulting Observable will complete when all combined\r\nstreams complete. So even if some Observable completes, the result of\r\n`combineLatest` will still emit values when other Observables do. In case\r\nof a completed Observable, its value from now on will always be the last\r\nemitted value. On the other hand, if any Observable errors, `combineLatest`\r\nwill error immediately as well, and all other Observables will be unsubscribed.\r\n\r\n## Examples\r\n\r\nCombine two timer Observables\r\n\r\n```ts\r\nimport { timer, combineLatest } from 'rxjs';\r\n\r\nconst firstTimer = timer(0, 1000); // emit 0, 1, 2... after every second, starting from now\r\nconst secondTimer = timer(500, 1000); // emit 0, 1, 2... after every second, starting 0,5s from now\r\nconst combinedTimers = combineLatest([firstTimer, secondTimer]);\r\ncombinedTimers.subscribe(value => console.log(value));\r\n// Logs\r\n// [0, 0] after 0.5s\r\n// [1, 0] after 1s\r\n// [1, 1] after 1.5s\r\n// [2, 1] after 2s\r\n```\r\n\r\nCombine a dictionary of Observables\r\n\r\n```ts\r\nimport { of, delay, startWith, combineLatest } from 'rxjs';\r\n\r\nconst observables = {\r\n  a: of(1).pipe(delay(1000), startWith(0)),\r\n  b: of(5).pipe(delay(5000), startWith(0)),\r\n  c: of(10).pipe(delay(10000), startWith(0))\r\n};\r\nconst combined = combineLatest(observables);\r\ncombined.subscribe(value => console.log(value));\r\n// Logs\r\n// { a: 0, b: 0, c: 0 } immediately\r\n// { a: 1, b: 0, c: 0 } after 1s\r\n// { a: 1, b: 5, c: 0 } after 5s\r\n// { a: 1, b: 5, c: 10 } after 10s\r\n```\r\n\r\nCombine an array of Observables\r\n\r\n```ts\r\nimport { of, delay, startWith, combineLatest } from 'rxjs';\r\n\r\nconst observables = [1, 5, 10].map(\r\n  n => of(n).pipe(\r\n    delay(n * 1000), // emit 0 and then emit n after n seconds\r\n    startWith(0)\r\n  )\r\n);\r\nconst combined = combineLatest(observables);\r\ncombined.subscribe(value => console.log(value));\r\n// Logs\r\n// [0, 0, 0] immediately\r\n// [1, 0, 0] after 1s\r\n// [1, 5, 0] after 5s\r\n// [1, 5, 10] after 10s\r\n```\r\n\r\nUse map operator to dynamically calculate the Body-Mass Index\r\n\r\n```ts\r\nimport { of, combineLatest, map } from 'rxjs';\r\n\r\nconst weight = of(70, 72, 76, 79, 75);\r\nconst height = of(1.76, 1.77, 1.78);\r\nconst bmi = combineLatest([weight, height]).pipe(\r\n  map(([w, h]) => w / (h * h)),\r\n);\r\nbmi.subscribe(x => console.log('BMI is ' + x));\r\n\r\n// With output to console:\r\n// BMI is 24.212293388429753\r\n// BMI is 23.93948099205209\r\n// BMI is 23.671253629592222\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link combineLatestAll}"},{"kind":25,"tagName":"see","text":"{@link merge}"},{"kind":25,"tagName":"see","text":"{@link withLatestFrom}"},{"kind":25,"tagName":"param","text":"{ObservableInput} [observables] An array of input Observables to combine with each other.\r\nAn array of Observables must be given as the first argument."},{"kind":25,"tagName":"param","text":"{function} [project] An optional function to project the values from\r\nthe combined latest values into a new value on the output Observable."},{"kind":25,"tagName":"param","text":"{SchedulerLike} [scheduler=null] The {@link SchedulerLike} to use for subscribing to\r\neach input Observable."},{"kind":25,"tagName":"return","text":"{Observable} An Observable of projected values from the most recent\r\nvalues from each input Observable, or an array of the most recent values from\r\neach input Observable."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"constraint":"AnyCatcher","variance":0}],"docs":[{"kind":24,"description":"\r\nYou have passed `any` here, we can't figure out if it is\r\nan array or an object, so you're getting `unknown`. Use better types.","tags":[{"kind":25,"tagName":"param","text":"arg Something typed as `any`"}]}],"hasDeclareKeyword":false,"parameters":[{"name":"arg","type":"T","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<unknown>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"combineLatest","modulePath":"..\\src\\internal\\observable\\combineLatest.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"sources","type":"[]","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<never>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"combineLatest","modulePath":"..\\src\\internal\\observable\\combineLatest.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"A","kind":39,"isConst":false,"constraint":"readonly unknown[]","variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"sources","type":"readonly [...ObservableInputTuple<A>]","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<A>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"combineLatest","modulePath":"..\\src\\internal\\observable\\combineLatest.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"A","kind":39,"isConst":false,"constraint":"readonly unknown[]","variance":0},{"name":"R","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"The `scheduler` parameter will be removed in v8. Use `scheduled` and `combineLatestAll`. Details: https://rxjs.dev/deprecations/scheduler-argument"}]}],"hasDeclareKeyword":false,"parameters":[{"name":"sources","type":"readonly [...ObservableInputTuple<A>]","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"resultSelector","type":"(...values: A) => R","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"scheduler","type":"SchedulerLike","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<R>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"combineLatest","modulePath":"..\\src\\internal\\observable\\combineLatest.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"A","kind":39,"isConst":false,"constraint":"readonly unknown[]","variance":0},{"name":"R","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"sources","type":"readonly [...ObservableInputTuple<A>]","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"resultSelector","type":"(...values: A) => R","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<R>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"combineLatest","modulePath":"..\\src\\internal\\observable\\combineLatest.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"A","kind":39,"isConst":false,"constraint":"readonly unknown[]","variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"The `scheduler` parameter will be removed in v8. Use `scheduled` and `combineLatestAll`. Details: https://rxjs.dev/deprecations/scheduler-argument"}]}],"hasDeclareKeyword":false,"parameters":[{"name":"sources","type":"readonly [...ObservableInputTuple<A>]","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"scheduler","type":"SchedulerLike","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<A>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"combineLatest","modulePath":"..\\src\\internal\\observable\\combineLatest.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"A","kind":39,"isConst":false,"constraint":"readonly unknown[]","variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Pass an array of sources instead. The rest-parameters signature will be removed in v8. Details: https://rxjs.dev/deprecations/array-argument"}]}],"hasDeclareKeyword":false,"parameters":[{"name":"sources","type":"[...ObservableInputTuple<A>]","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":true}],"returnType":"Observable<A>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"combineLatest","modulePath":"..\\src\\internal\\observable\\combineLatest.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"A","kind":39,"isConst":false,"constraint":"readonly unknown[]","variance":0},{"name":"R","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"The `scheduler` parameter will be removed in v8. Use `scheduled` and `combineLatestAll`. Details: https://rxjs.dev/deprecations/scheduler-argument"}]}],"hasDeclareKeyword":false,"parameters":[{"name":"sourcesAndResultSelectorAndScheduler","type":"[...ObservableInputTuple<A>, (...values: A) => R, SchedulerLike]","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":true}],"returnType":"Observable<R>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"combineLatest","modulePath":"..\\src\\internal\\observable\\combineLatest.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"A","kind":39,"isConst":false,"constraint":"readonly unknown[]","variance":0},{"name":"R","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Pass an array of sources instead. The rest-parameters signature will be removed in v8. Details: https://rxjs.dev/deprecations/array-argument"}]}],"hasDeclareKeyword":false,"parameters":[{"name":"sourcesAndResultSelector","type":"[...ObservableInputTuple<A>, (...values: A) => R]","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":true}],"returnType":"Observable<R>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"combineLatest","modulePath":"..\\src\\internal\\observable\\combineLatest.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"A","kind":39,"isConst":false,"constraint":"readonly unknown[]","variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"The `scheduler` parameter will be removed in v8. Use `scheduled` and `combineLatestAll`. Details: https://rxjs.dev/deprecations/scheduler-argument"}]}],"hasDeclareKeyword":false,"parameters":[{"name":"sourcesAndScheduler","type":"[...ObservableInputTuple<A>, SchedulerLike]","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":true}],"returnType":"Observable<A>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"combineLatest","modulePath":"..\\src\\internal\\observable\\combineLatest.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"sourcesObject","type":"{ [K in any]: never }","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<never>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"combineLatest","modulePath":"..\\src\\internal\\observable\\combineLatest.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"constraint":"Record<string, ObservableInput<any>>","variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"sourcesObject","type":"T","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<{ [K in keyof T]: ObservedValueOf<T[K]> }>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"combineLatest","modulePath":"..\\src\\internal\\observable\\combineLatest.ts"}]}}},"usabilityResult":{"index":1}},"..\\src\\internal\\observable\\concat.ts":{"moduleComponents":{"concat":{"kind":13,"usabilityResult":{"wordCount":524,"index":1},"sources":{"name":"concat","statements":["return concatAll()(from(args, popScheduler(args)));"],"parameters":[{"name":"args","type":"any[]","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":true}],"returnType":"Observable<unknown>","typeParameters":[],"docs":[{"kind":24,"description":"\r\nCreates an output Observable which sequentially emits all values from the first given\r\nObservable and then moves on to the next.\r\n\r\n<span class=\"informal\">Concatenates multiple Observables together by\r\nsequentially emitting their values, one Observable after the other.</span>\r\n\r\n![](concat.png)\r\n\r\n`concat` joins multiple Observables together, by subscribing to them one at a time and\r\nmerging their results into the output Observable. You can pass either an array of\r\nObservables, or put them directly as arguments. Passing an empty array will result\r\nin Observable that completes immediately.\r\n\r\n`concat` will subscribe to first input Observable and emit all its values, without\r\nchanging or affecting them in any way. When that Observable completes, it will\r\nsubscribe to then next Observable passed and, again, emit its values. This will be\r\nrepeated, until the operator runs out of Observables. When last input Observable completes,\r\n`concat` will complete as well. At any given moment only one Observable passed to operator\r\nemits values. If you would like to emit values from passed Observables concurrently, check out\r\n{@link merge} instead, especially with optional `concurrent` parameter. As a matter of fact,\r\n`concat` is an equivalent of `merge` operator with `concurrent` parameter set to `1`.\r\n\r\nNote that if some input Observable never completes, `concat` will also never complete\r\nand Observables following the one that did not complete will never be subscribed. On the other\r\nhand, if some Observable simply completes immediately after it is subscribed, it will be\r\ninvisible for `concat`, which will just move on to the next Observable.\r\n\r\nIf any Observable in chain errors, instead of passing control to the next Observable,\r\n`concat` will error immediately as well. Observables that would be subscribed after\r\nthe one that emitted error, never will.\r\n\r\nIf you pass to `concat` the same Observable many times, its stream of values\r\nwill be \"replayed\" on every subscription, which means you can repeat given Observable\r\nas many times as you like. If passing the same Observable to `concat` 1000 times becomes tedious,\r\nyou can always use {@link repeat}.\r\n\r\n## Examples\r\n\r\nConcatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10\r\n\r\n```ts\r\nimport { interval, take, range, concat } from 'rxjs';\r\n\r\nconst timer = interval(1000).pipe(take(4));\r\nconst sequence = range(1, 10);\r\nconst result = concat(timer, sequence);\r\nresult.subscribe(x => console.log(x));\r\n\r\n// results in:\r\n// 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\r\n```\r\n\r\nConcatenate 3 Observables\r\n\r\n```ts\r\nimport { interval, take, concat } from 'rxjs';\r\n\r\nconst timer1 = interval(1000).pipe(take(10));\r\nconst timer2 = interval(2000).pipe(take(6));\r\nconst timer3 = interval(500).pipe(take(10));\r\n\r\nconst result = concat(timer1, timer2, timer3);\r\nresult.subscribe(x => console.log(x));\r\n\r\n// results in the following:\r\n// (Prints to console sequentially)\r\n// -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\r\n// -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\r\n// -500ms-> 0 -500ms-> 1 -500ms-> ... 9\r\n```\r\n\r\nConcatenate the same Observable to repeat it\r\n\r\n```ts\r\nimport { interval, take, concat } from 'rxjs';\r\n\r\nconst timer = interval(1000).pipe(take(2));\r\n\r\nconcat(timer, timer) // concatenating the same Observable!\r\n  .subscribe({\r\n    next: value => console.log(value),\r\n    complete: () => console.log('...and it is done!')\r\n  });\r\n\r\n// Logs:\r\n// 0 after 1s\r\n// 1 after 2s\r\n// 0 after 3s\r\n// 1 after 4s\r\n// '...and it is done!' also after 4s\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link concatAll}"},{"kind":25,"tagName":"see","text":"{@link concatMap}"},{"kind":25,"tagName":"see","text":"{@link concatMapTo}"},{"kind":25,"tagName":"see","text":"{@link startWith}"},{"kind":25,"tagName":"see","text":"{@link endWith}"},{"kind":25,"tagName":"param","text":"args Input Observables to concatenate."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"constraint":"readonly unknown[]","variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"inputs","type":"[...ObservableInputTuple<T>]","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":true}],"returnType":"Observable<T[number]>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"concat","modulePath":"..\\src\\internal\\observable\\concat.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"constraint":"readonly unknown[]","variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"inputsAndScheduler","type":"[...ObservableInputTuple<T>, SchedulerLike]","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":true}],"returnType":"Observable<T[number]>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"concat","modulePath":"..\\src\\internal\\observable\\concat.ts"}]}}},"usabilityResult":{"index":1}},"..\\src\\internal\\observable\\connectable.ts":{"moduleComponents":{"connectable":{"kind":13,"usabilityResult":{"wordCount":11,"index":0.22},"sources":{"name":"connectable","statements":[{"isExported":false,"isDefaultExport":false,"hasDeclareKeyword":false,"docs":[],"kind":41,"declarationKind":"let","declarations":[{"name":"connection","initializer":"null","type":"Subscription | null","hasExclamationToken":false,"kind":40}]},{"isExported":false,"isDefaultExport":false,"hasDeclareKeyword":false,"docs":[],"kind":41,"declarationKind":"const","declarations":[{"name":"{ connector, resetOnDisconnect = true }","initializer":"config","hasExclamationToken":false,"kind":40}]},{"isExported":false,"isDefaultExport":false,"hasDeclareKeyword":false,"docs":[],"kind":41,"declarationKind":"let","declarations":[{"name":"subject","initializer":"connector()","hasExclamationToken":false,"kind":40}]},{"isExported":false,"isDefaultExport":false,"hasDeclareKeyword":false,"docs":[],"kind":41,"declarationKind":"const","declarations":[{"name":"result","initializer":"new Observable<T>((subscriber) => {\r\n    return subject.subscribe(subscriber);\r\n  })","type":"any","hasExclamationToken":false,"kind":40}]},"result.connect = () => {\r\nif (!connection || connection.closed) {\r\n  connection = defer(() => source).subscribe(subject);\r\n  if (resetOnDisconnect) {\r\n    connection.add(() => (subject = connector()));\r\n  }\r\n}\r\nreturn connection;\r\n};","return result;"],"parameters":[{"name":"source","type":"ObservableInput<T>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"config","initializer":"DEFAULT_CONFIG","type":"ConnectableConfig<T>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Connectable<T>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nCreates an observable that multicasts once `connect()` is called on it.\r\n","tags":[{"kind":25,"tagName":"param","text":"source The observable source to make connectable."},{"kind":25,"tagName":"param","text":"config The configuration object for `connectable`."},{"kind":25,"tagName":"returns","text":"A \"connectable\" observable, that has a `connect()` method, that you must call to\r\nconnect the source to all consumers through the subject provided as the connector."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[],"functionName":"connectable","modulePath":"..\\src\\internal\\observable\\connectable.ts"}}},"usabilityResult":{"index":0.22}},"..\\src\\internal\\observable\\defer.ts":{"moduleComponents":{"defer":{"kind":13,"usabilityResult":{"wordCount":211,"index":1},"sources":{"name":"defer","statements":["return new Observable<ObservedValueOf<R>>((subscriber) => {\r\ninnerFrom(observableFactory()).subscribe(subscriber);\r\n});"],"parameters":[{"name":"observableFactory","type":"() => R","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<ObservedValueOf<R>>","typeParameters":[{"name":"R","kind":39,"isConst":false,"constraint":"ObservableInput<any>","variance":0}],"docs":[{"kind":24,"description":"\r\nCreates an Observable that, on subscribe, calls an Observable factory to\r\nmake an Observable for each new Observer.\r\n\r\n<span class=\"informal\">Creates the Observable lazily, that is, only when it\r\nis subscribed.\r\n</span>\r\n\r\n![](defer.png)\r\n\r\n`defer` allows you to create an Observable only when the Observer\r\nsubscribes. It waits until an Observer subscribes to it, calls the given\r\nfactory function to get an Observable -- where a factory function typically\r\ngenerates a new Observable -- and subscribes the Observer to this Observable.\r\nIn case the factory function returns a falsy value, then EMPTY is used as\r\nObservable instead. Last but not least, an exception during the factory\r\nfunction call is transferred to the Observer by calling `error`.\r\n\r\n## Example\r\n\r\nSubscribe to either an Observable of clicks or an Observable of interval, at random\r\n\r\n```ts\r\nimport { defer, fromEvent, interval } from 'rxjs';\r\n\r\nconst clicksOrInterval = defer(() => {\r\n  return Math.random() > 0.5\r\n    ? fromEvent(document, 'click')\r\n    : interval(1000);\r\n});\r\nclicksOrInterval.subscribe(x => console.log(x));\r\n\r\n// Results in the following behavior:\r\n// If the result of Math.random() is greater than 0.5 it will listen\r\n// for clicks anywhere on the \"document\"; when document is clicked it\r\n// will log a MouseEvent object to the console. If the result is less\r\n// than 0.5 it will emit ascending numbers, one every second(1000ms).\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link Observable}"},{"kind":25,"tagName":"param","text":"{function(): ObservableInput} observableFactory The Observable\r\nfactory function to invoke for each Observer that subscribes to the output\r\nObservable. May also return a Promise, which will be converted on the fly\r\nto an Observable."},{"kind":25,"tagName":"return","text":"{Observable} An Observable whose Observers' subscriptions trigger\r\nan invocation of the given Observable factory function."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[],"functionName":"defer","modulePath":"..\\src\\internal\\observable\\defer.ts"}}},"usabilityResult":{"index":1}},"..\\src\\internal\\observable\\empty.ts":{"moduleComponents":{"empty":{"kind":13,"usabilityResult":{"wordCount":0,"index":0},"sources":{"name":"empty","statements":["return scheduler ? emptyScheduled(scheduler) : EMPTY;"],"parameters":[{"name":"scheduler","type":"SchedulerLike","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"typeParameters":[],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"param","text":"scheduler A {@link SchedulerLike} to use for scheduling\r\nthe emission of the complete notification."},{"kind":25,"tagName":"deprecated","text":"Replaced with the {@link EMPTY} constant or {@link scheduled} (e.g. `scheduled([], scheduler)`). Will be removed in v8."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[],"functionName":"empty","modulePath":"..\\src\\internal\\observable\\empty.ts"}}},"usabilityResult":{"index":0}},"..\\src\\internal\\observable\\forkJoin.ts":{"moduleComponents":{"forkJoin":{"kind":13,"usabilityResult":{"wordCount":620,"index":1},"sources":{"name":"forkJoin","statements":[{"isExported":false,"isDefaultExport":false,"hasDeclareKeyword":false,"docs":[],"kind":41,"declarationKind":"const","declarations":[{"name":"resultSelector","initializer":"popResultSelector(args)","hasExclamationToken":false,"kind":40}]},{"isExported":false,"isDefaultExport":false,"hasDeclareKeyword":false,"docs":[],"kind":41,"declarationKind":"const","declarations":[{"name":"{ args: sources, keys }","initializer":"argsArgArrayOrObject(args)","hasExclamationToken":false,"kind":40}]},{"isExported":false,"isDefaultExport":false,"hasDeclareKeyword":false,"docs":[],"kind":41,"declarationKind":"const","declarations":[{"name":"result","initializer":"new Observable((subscriber) => {\r\n    const { length } = sources;\r\n    if (!length) {\r\n      subscriber.complete();\r\n      return;\r\n    }\r\n    const values = new Array(length);\r\n    let remainingCompletions = length;\r\n    let remainingEmissions = length;\r\n    for (let sourceIndex = 0; sourceIndex < length; sourceIndex++) {\r\n      let hasValue = false;\r\n      innerFrom(sources[sourceIndex]).subscribe(\r\n        createOperatorSubscriber(\r\n          subscriber,\r\n          (value) => {\r\n            if (!hasValue) {\r\n              hasValue = true;\r\n              remainingEmissions--;\r\n            }\r\n            values[sourceIndex] = value;\r\n          },\r\n          () => remainingCompletions--,\r\n          undefined,\r\n          () => {\r\n            if (!remainingCompletions || !hasValue) {\r\n              if (!remainingEmissions) {\r\n                subscriber.next(keys ? createObject(keys, values) : values);\r\n              }\r\n              subscriber.complete();\r\n            }\r\n          }\r\n        )\r\n      );\r\n    }\r\n  })","hasExclamationToken":false,"kind":40}]},"return resultSelector ? result.pipe(mapOneOrManyArgs(resultSelector)) : result;"],"parameters":[{"name":"args","type":"any[]","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":true}],"returnType":"Observable<any>","typeParameters":[],"docs":[{"kind":24,"description":"\r\nAccepts an `Array` of {@link ObservableInput} or a dictionary `Object` of {@link ObservableInput} and returns\r\nan {@link Observable} that emits either an array of values in the exact same order as the passed array,\r\nor a dictionary of values in the same shape as the passed dictionary.\r\n\r\n<span class=\"informal\">Wait for Observables to complete and then combine last values they emitted;\r\ncomplete immediately if an empty array is passed.</span>\r\n\r\n![](forkJoin.png)\r\n\r\n`forkJoin` is an operator that takes any number of input observables which can be passed either as an array\r\nor a dictionary of input observables. If no input observables are provided (e.g. an empty array is passed),\r\nthen the resulting stream will complete immediately.\r\n\r\n`forkJoin` will wait for all passed observables to emit and complete and then it will emit an array or an object with last\r\nvalues from corresponding observables.\r\n\r\nIf you pass an array of `n` observables to the operator, then the resulting\r\narray will have `n` values, where the first value is the last one emitted by the first observable,\r\nsecond value is the last one emitted by the second observable and so on.\r\n\r\nIf you pass a dictionary of observables to the operator, then the resulting\r\nobjects will have the same keys as the dictionary passed, with their last values they have emitted\r\nlocated at the corresponding key.\r\n\r\nThat means `forkJoin` will not emit more than once and it will complete after that. If you need to emit combined\r\nvalues not only at the end of the lifecycle of passed observables, but also throughout it, try out {@link combineLatest}\r\nor {@link zip} instead.\r\n\r\nIn order for the resulting array to have the same length as the number of input observables, whenever any of\r\nthe given observables completes without emitting any value, `forkJoin` will complete at that moment as well\r\nand it will not emit anything either, even if it already has some last values from other observables.\r\nConversely, if there is an observable that never completes, `forkJoin` will never complete either,\r\nunless at any point some other observable completes without emitting a value, which brings us back to\r\nthe previous case. Overall, in order for `forkJoin` to emit a value, all given observables\r\nhave to emit something at least once and complete.\r\n\r\nIf any given observable errors at some point, `forkJoin` will error as well and immediately unsubscribe\r\nfrom the other observables.\r\n\r\nOptionally `forkJoin` accepts a `resultSelector` function, that will be called with values which normally\r\nwould land in the emitted array. Whatever is returned by the `resultSelector`, will appear in the output\r\nobservable instead. This means that the default `resultSelector` can be thought of as a function that takes\r\nall its arguments and puts them into an array. Note that the `resultSelector` will be called only\r\nwhen `forkJoin` is supposed to emit a result.\r\n\r\n## Examples\r\n\r\nUse `forkJoin` with a dictionary of observable inputs\r\n\r\n```ts\r\nimport { forkJoin, of, timer } from 'rxjs';\r\n\r\nconst observable = forkJoin({\r\n  foo: of(1, 2, 3, 4),\r\n  bar: Promise.resolve(8),\r\n  baz: timer(4000)\r\n});\r\nobservable.subscribe({\r\n next: value => console.log(value),\r\n complete: () => console.log('This is how it ends!'),\r\n});\r\n\r\n// Logs:\r\n// { foo: 4, bar: 8, baz: 0 } after 4 seconds\r\n// 'This is how it ends!' immediately after\r\n```\r\n\r\nUse `forkJoin` with an array of observable inputs\r\n\r\n```ts\r\nimport { forkJoin, of, timer } from 'rxjs';\r\n\r\nconst observable = forkJoin([\r\n  of(1, 2, 3, 4),\r\n  Promise.resolve(8),\r\n  timer(4000)\r\n]);\r\nobservable.subscribe({\r\n next: value => console.log(value),\r\n complete: () => console.log('This is how it ends!'),\r\n});\r\n\r\n// Logs:\r\n// [4, 8, 0] after 4 seconds\r\n// 'This is how it ends!' immediately after\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link combineLatest}"},{"kind":25,"tagName":"see","text":"{@link zip}"},{"kind":25,"tagName":"param","text":"{...ObservableInput} args Any number of Observables provided either as an array or as an arguments\r\npassed directly to the operator."},{"kind":25,"tagName":"param","text":"{function} [project] Function that takes values emitted by input Observables and returns value\r\nthat will appear in resulting Observable instead of default array."},{"kind":25,"tagName":"return","text":"{Observable} Observable emitting either an array of last values emitted by passed Observables\r\nor value from project function."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"constraint":"AnyCatcher","variance":0}],"docs":[{"kind":24,"description":"\r\nYou have passed `any` here, we can't figure out if it is\r\nan array or an object, so you're getting `unknown`. Use better types.","tags":[{"kind":25,"tagName":"param","text":"arg Something typed as `any`"}]}],"hasDeclareKeyword":false,"parameters":[{"name":"arg","type":"T","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<unknown>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"forkJoin","modulePath":"..\\src\\internal\\observable\\forkJoin.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"scheduler","type":"null | undefined","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<never>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"forkJoin","modulePath":"..\\src\\internal\\observable\\forkJoin.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"sources","type":"readonly []","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<never>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"forkJoin","modulePath":"..\\src\\internal\\observable\\forkJoin.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"A","kind":39,"isConst":false,"constraint":"readonly unknown[]","variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"sources","type":"readonly [...ObservableInputTuple<A>]","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<A>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"forkJoin","modulePath":"..\\src\\internal\\observable\\forkJoin.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"A","kind":39,"isConst":false,"constraint":"readonly unknown[]","variance":0},{"name":"R","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"sources","type":"readonly [...ObservableInputTuple<A>]","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"resultSelector","type":"(...values: A) => R","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<R>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"forkJoin","modulePath":"..\\src\\internal\\observable\\forkJoin.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"A","kind":39,"isConst":false,"constraint":"readonly unknown[]","variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Pass an array of sources instead. The rest-parameters signature will be removed in v8. Details: https://rxjs.dev/deprecations/array-argument"}]}],"hasDeclareKeyword":false,"parameters":[{"name":"sources","type":"[...ObservableInputTuple<A>]","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":true}],"returnType":"Observable<A>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"forkJoin","modulePath":"..\\src\\internal\\observable\\forkJoin.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"A","kind":39,"isConst":false,"constraint":"readonly unknown[]","variance":0},{"name":"R","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Pass an array of sources instead. The rest-parameters signature will be removed in v8. Details: https://rxjs.dev/deprecations/array-argument"}]}],"hasDeclareKeyword":false,"parameters":[{"name":"sourcesAndResultSelector","type":"[...ObservableInputTuple<A>, (...values: A) => R]","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":true}],"returnType":"Observable<R>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"forkJoin","modulePath":"..\\src\\internal\\observable\\forkJoin.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"sourcesObject","type":"{ [K in any]: never }","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<never>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"forkJoin","modulePath":"..\\src\\internal\\observable\\forkJoin.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"constraint":"Record<string, ObservableInput<any>>","variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"sourcesObject","type":"T","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<{ [K in keyof T]: ObservedValueOf<T[K]> }>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"forkJoin","modulePath":"..\\src\\internal\\observable\\forkJoin.ts"}]}}},"usabilityResult":{"index":1}},"..\\src\\internal\\observable\\from.ts":{"moduleComponents":{"from":{"kind":13,"usabilityResult":{"wordCount":242,"index":1},"sources":{"name":"from","statements":["return scheduler ? scheduled(input, scheduler) : innerFrom(input);"],"parameters":[{"name":"input","type":"ObservableInput<T>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"scheduler","type":"SchedulerLike","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<T>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nCreates an Observable from an Array, an array-like object, a Promise, an iterable object, or an Observable-like object.\r\n\r\n<span class=\"informal\">Converts almost anything to an Observable.</span>\r\n\r\n![](from.png)\r\n\r\n`from` converts various other objects and data types into Observables. It also converts a Promise, an array-like, or an\r\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#iterable\" target=\"_blank\">iterable</a>\r\nobject into an Observable that emits the items in that promise, array, or iterable. A String, in this context, is treated\r\nas an array of characters. Observable-like objects (contains a function named with the ES2015 Symbol for Observable) can also be\r\nconverted through this operator.\r\n\r\n## Examples\r\n\r\nConverts an array to an Observable\r\n\r\n```ts\r\nimport { from } from 'rxjs';\r\n\r\nconst array = [10, 20, 30];\r\nconst result = from(array);\r\n\r\nresult.subscribe(x => console.log(x));\r\n\r\n// Logs:\r\n// 10\r\n// 20\r\n// 30\r\n```\r\n\r\nConvert an infinite iterable (from a generator) to an Observable\r\n\r\n```ts\r\nimport { from, take } from 'rxjs';\r\n\r\nfunction* generateDoubles(seed) {\r\n   let i = seed;\r\n   while (true) {\r\n     yield i;\r\n     i = 2 * i; // double it\r\n   }\r\n}\r\n\r\nconst iterator = generateDoubles(3);\r\nconst result = from(iterator).pipe(take(10));\r\n\r\nresult.subscribe(x => console.log(x));\r\n\r\n// Logs:\r\n// 3\r\n// 6\r\n// 12\r\n// 24\r\n// 48\r\n// 96\r\n// 192\r\n// 384\r\n// 768\r\n// 1536\r\n```\r\n\r\nWith `asyncScheduler`\r\n\r\n```ts\r\nimport { from, asyncScheduler } from 'rxjs';\r\n\r\nconsole.log('start');\r\n\r\nconst array = [10, 20, 30];\r\nconst result = from(array, asyncScheduler);\r\n\r\nresult.subscribe(x => console.log(x));\r\n\r\nconsole.log('end');\r\n\r\n// Logs:\r\n// 'start'\r\n// 'end'\r\n// 10\r\n// 20\r\n// 30\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link fromEvent}"},{"kind":25,"tagName":"see","text":"{@link fromEventPattern}"},{"kind":25,"tagName":"param","text":"{ObservableInput<T>} A subscription object, a Promise, an Observable-like,\r\nan Array, an iterable, or an array-like object to be converted."},{"kind":25,"tagName":"param","text":"{SchedulerLike} An optional {@link SchedulerLike} on which to schedule the emission of values."},{"kind":25,"tagName":"return","text":"{Observable<T>}"}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"O","kind":39,"isConst":false,"constraint":"ObservableInput<any>","variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"input","type":"O","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<ObservedValueOf<O>>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"from","modulePath":"..\\src\\internal\\observable\\from.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"O","kind":39,"isConst":false,"constraint":"ObservableInput<any>","variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"The `scheduler` parameter will be removed in v8. Use `scheduled`. Details: https://rxjs.dev/deprecations/scheduler-argument"}]}],"hasDeclareKeyword":false,"parameters":[{"name":"input","type":"O","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"scheduler","type":"SchedulerLike | undefined","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<ObservedValueOf<O>>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"from","modulePath":"..\\src\\internal\\observable\\from.ts"}]}}},"usabilityResult":{"index":1}},"..\\src\\internal\\observable\\fromEvent.ts":{"moduleComponents":{"fromEvent":{"kind":13,"usabilityResult":{"wordCount":703,"index":1},"sources":{"name":"fromEvent","statements":["if (isFunction(options)) {\r\nresultSelector = options;\r\noptions = undefined;\r\n}","if (resultSelector) {\r\nreturn fromEvent<T>(target, eventName, options as EventListenerOptions).pipe(mapOneOrManyArgs(resultSelector));\r\n}",{"isExported":false,"isDefaultExport":false,"hasDeclareKeyword":false,"docs":[],"kind":41,"declarationKind":"const","declarations":[{"name":"[add, remove]","initializer":"isEventTarget(target)\r\n      ? eventTargetMethods.map((methodName) => (handler: any) => target[methodName](eventName, handler, options as EventListenerOptions))\r\n      : // In all other cases, the call pattern is identical with the exception of the method names.\r\n      isNodeStyleEventEmitter(target)\r\n      ? nodeEventEmitterMethods.map(toCommonHandlerRegistry(target, eventName))\r\n      : isJQueryStyleEventEmitter(target)\r\n      ? jqueryMethods.map(toCommonHandlerRegistry(target, eventName))\r\n      : []","hasExclamationToken":false,"kind":40}]},"if (!add) {\r\nif (isArrayLike(target)) {\r\n  return mergeMap((subTarget: any) => fromEvent(subTarget, eventName, options as EventListenerOptions))(\r\n    innerFrom(target)\r\n  ) as Observable<T>;\r\n}\r\n}","if (!add) {\r\nthrow new TypeError('Invalid event target');\r\n}","return new Observable<T>((subscriber) => {\r\n// The handler we are going to register. Forwards the event object, by itself, or\r\n// an array of arguments to the event handler, if there is more than one argument,\r\n// to the consumer.\r\nconst handler = (...args: any[]) => subscriber.next(1 < args.length ? args : args[0]);\r\n// Do the work of adding the handler to the target.\r\nadd(handler);\r\n// When we finalize, we want to remove the handler and free up memory.\r\nreturn () => remove!(handler);\r\n});"],"parameters":[{"name":"target","type":"any","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"eventName","type":"string","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"options","type":"EventListenerOptions | ((...args: any[]) => T)","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"resultSelector","type":"(...args: any[]) => T","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<T>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nCreates an Observable that emits events of a specific type coming from the\r\ngiven event target.\r\n\r\n<span class=\"informal\">Creates an Observable from DOM events, or Node.js\r\nEventEmitter events or others.</span>\r\n\r\n![](fromEvent.png)\r\n\r\n`fromEvent` accepts as a first argument event target, which is an object with methods\r\nfor registering event handler functions. As a second argument it takes string that indicates\r\ntype of event we want to listen for. `fromEvent` supports selected types of event targets,\r\nwhich are described in detail below. If your event target does not match any of the ones listed,\r\nyou should use {@link fromEventPattern}, which can be used on arbitrary APIs.\r\nWhen it comes to APIs supported by `fromEvent`, their methods for adding and removing event\r\nhandler functions have different names, but they all accept a string describing event type\r\nand function itself, which will be called whenever said event happens.\r\n\r\nEvery time resulting Observable is subscribed, event handler function will be registered\r\nto event target on given event type. When that event fires, value\r\npassed as a first argument to registered function will be emitted by output Observable.\r\nWhen Observable is unsubscribed, function will be unregistered from event target.\r\n\r\nNote that if event target calls registered function with more than one argument, second\r\nand following arguments will not appear in resulting stream. In order to get access to them,\r\nyou can pass to `fromEvent` optional project function, which will be called with all arguments\r\npassed to event handler. Output Observable will then emit value returned by project function,\r\ninstead of the usual value.\r\n\r\nRemember that event targets listed below are checked via duck typing. It means that\r\nno matter what kind of object you have and no matter what environment you work in,\r\nyou can safely use `fromEvent` on that object if it exposes described methods (provided\r\nof course they behave as was described above). So for example if Node.js library exposes\r\nevent target which has the same method names as DOM EventTarget, `fromEvent` is still\r\na good choice.\r\n\r\nIf the API you use is more callback then event handler oriented (subscribed\r\ncallback function fires only once and thus there is no need to manually\r\nunregister it), you should use {@link bindCallback} or {@link bindNodeCallback}\r\ninstead.\r\n\r\n`fromEvent` supports following types of event targets:\r\n\r\n**DOM EventTarget**\r\n\r\nThis is an object with `addEventListener` and `removeEventListener` methods.\r\n\r\nIn the browser, `addEventListener` accepts - apart from event type string and event\r\nhandler function arguments - optional third parameter, which is either an object or boolean,\r\nboth used for additional configuration how and when passed function will be called. When\r\n`fromEvent` is used with event target of that type, you can provide this values\r\nas third parameter as well.\r\n\r\n**Node.js EventEmitter**\r\n\r\nAn object with `addListener` and `removeListener` methods.\r\n\r\n**JQuery-style event target**\r\n\r\nAn object with `on` and `off` methods\r\n\r\n**DOM NodeList**\r\n\r\nList of DOM Nodes, returned for example by `document.querySelectorAll` or `Node.childNodes`.\r\n\r\nAlthough this collection is not event target in itself, `fromEvent` will iterate over all Nodes\r\nit contains and install event handler function in every of them. When returned Observable\r\nis unsubscribed, function will be removed from all Nodes.\r\n\r\n**DOM HtmlCollection**\r\n\r\nJust as in case of NodeList it is a collection of DOM nodes. Here as well event handler function is\r\ninstalled and removed in each of elements.\r\n\r\n\r\n## Examples\r\n\r\nEmit clicks happening on the DOM document\r\n\r\n```ts\r\nimport { fromEvent } from 'rxjs';\r\n\r\nconst clicks = fromEvent(document, 'click');\r\nclicks.subscribe(x => console.log(x));\r\n\r\n// Results in:\r\n// MouseEvent object logged to console every time a click\r\n// occurs on the document.\r\n```\r\n\r\nUse `addEventListener` with capture option\r\n\r\n```ts\r\nimport { fromEvent } from 'rxjs';\r\n\r\nconst div = document.createElement('div');\r\ndiv.style.cssText = 'width: 200px; height: 200px; background: #09c;';\r\ndocument.body.appendChild(div);\r\n\r\n// note optional configuration parameter which will be passed to addEventListener\r\nconst clicksInDocument = fromEvent(document, 'click', { capture: true });\r\nconst clicksInDiv = fromEvent(div, 'click');\r\n\r\nclicksInDocument.subscribe(() => console.log('document'));\r\nclicksInDiv.subscribe(() => console.log('div'));\r\n\r\n// By default events bubble UP in DOM tree, so normally\r\n// when we would click on div in document\r\n// \"div\" would be logged first and then \"document\".\r\n// Since we specified optional `capture` option, document\r\n// will catch event when it goes DOWN DOM tree, so console\r\n// will log \"document\" and then \"div\".\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link bindCallback}"},{"kind":25,"tagName":"see","text":"{@link bindNodeCallback}"},{"kind":25,"tagName":"see","text":"{@link fromEventPattern}"},{"kind":25,"tagName":"param","text":"{FromEventTarget<T>} target The DOM EventTarget, Node.js\r\nEventEmitter, JQuery-like event target, NodeList or HTMLCollection to attach the event handler to."},{"kind":25,"tagName":"param","text":"{string} eventName The event name of interest, being emitted by the\r\n`target`."},{"kind":25,"tagName":"param","text":"{EventListenerOptions} [options] Options to pass through to addEventListener"},{"kind":25,"tagName":"return","text":"{Observable<T>}"}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"target","type":"HasEventTargetAddRemove<T> | ArrayLike<HasEventTargetAddRemove<T>>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"eventName","type":"string","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<T>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"fromEvent","modulePath":"..\\src\\internal\\observable\\fromEvent.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"R","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"target","type":"HasEventTargetAddRemove<T> | ArrayLike<HasEventTargetAddRemove<T>>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"eventName","type":"string","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"resultSelector","type":"(event: T) => R","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<R>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"fromEvent","modulePath":"..\\src\\internal\\observable\\fromEvent.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"target","type":"HasEventTargetAddRemove<T> | ArrayLike<HasEventTargetAddRemove<T>>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"eventName","type":"string","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"options","type":"EventListenerOptions","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<T>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"fromEvent","modulePath":"..\\src\\internal\\observable\\fromEvent.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"R","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"target","type":"HasEventTargetAddRemove<T> | ArrayLike<HasEventTargetAddRemove<T>>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"eventName","type":"string","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"options","type":"EventListenerOptions","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"resultSelector","type":"(event: T) => R","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<R>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"fromEvent","modulePath":"..\\src\\internal\\observable\\fromEvent.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"target","type":"NodeStyleEventEmitter | ArrayLike<NodeStyleEventEmitter>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"eventName","type":"string","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<unknown>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"fromEvent","modulePath":"..\\src\\internal\\observable\\fromEvent.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Do not specify explicit type parameters. Signatures with type parameters that cannot be inferred will be removed in v8."}]}],"hasDeclareKeyword":false,"parameters":[{"name":"target","type":"NodeStyleEventEmitter | ArrayLike<NodeStyleEventEmitter>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"eventName","type":"string","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<T>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"fromEvent","modulePath":"..\\src\\internal\\observable\\fromEvent.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"R","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"target","type":"NodeStyleEventEmitter | ArrayLike<NodeStyleEventEmitter>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"eventName","type":"string","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"resultSelector","type":"(...args: any[]) => R","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<R>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"fromEvent","modulePath":"..\\src\\internal\\observable\\fromEvent.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"target","type":"NodeCompatibleEventEmitter | ArrayLike<NodeCompatibleEventEmitter>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"eventName","type":"string","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<unknown>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"fromEvent","modulePath":"..\\src\\internal\\observable\\fromEvent.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Do not specify explicit type parameters. Signatures with type parameters that cannot be inferred will be removed in v8."}]}],"hasDeclareKeyword":false,"parameters":[{"name":"target","type":"NodeCompatibleEventEmitter | ArrayLike<NodeCompatibleEventEmitter>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"eventName","type":"string","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<T>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"fromEvent","modulePath":"..\\src\\internal\\observable\\fromEvent.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"R","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"target","type":"NodeCompatibleEventEmitter | ArrayLike<NodeCompatibleEventEmitter>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"eventName","type":"string","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"resultSelector","type":"(...args: any[]) => R","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<R>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"fromEvent","modulePath":"..\\src\\internal\\observable\\fromEvent.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"target","type":"JQueryStyleEventEmitter<any, T> | ArrayLike<JQueryStyleEventEmitter<any, T>>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"eventName","type":"string","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<T>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"fromEvent","modulePath":"..\\src\\internal\\observable\\fromEvent.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"R","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"target","type":"JQueryStyleEventEmitter<any, T> | ArrayLike<JQueryStyleEventEmitter<any, T>>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"eventName","type":"string","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"resultSelector","type":"(value: T, ...args: any[]) => R","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<R>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"fromEvent","modulePath":"..\\src\\internal\\observable\\fromEvent.ts"}]}}},"usabilityResult":{"index":1}},"..\\src\\internal\\observable\\fromEventPattern.ts":{"moduleComponents":{"fromEventPattern":{"kind":13,"usabilityResult":{"wordCount":569,"index":1},"sources":{"name":"fromEventPattern","statements":["if (resultSelector) {\r\nreturn fromEventPattern<T>(addHandler, removeHandler).pipe(mapOneOrManyArgs(resultSelector));\r\n}","return new Observable<T | T[]>((subscriber) => {\r\nconst handler = (...e: T[]) => subscriber.next(e.length === 1 ? e[0] : e);\r\nconst retValue = addHandler(handler);\r\nreturn isFunction(removeHandler) ? () => removeHandler(handler, retValue) : undefined;\r\n});"],"parameters":[{"name":"addHandler","type":"(handler: NodeEventHandler) => any","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"removeHandler","type":"(handler: NodeEventHandler, signal?: any) => void","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"resultSelector","type":"(...args: any[]) => T","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<T | T[]>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nCreates an Observable from an arbitrary API for registering event handlers.\r\n\r\n<span class=\"informal\">When that method for adding event handler was something {@link fromEvent}\r\nwas not prepared for.</span>\r\n\r\n![](fromEventPattern.png)\r\n\r\n`fromEventPattern` allows you to convert into an Observable any API that supports registering handler functions\r\nfor events. It is similar to {@link fromEvent}, but far\r\nmore flexible. In fact, all use cases of {@link fromEvent} could be easily handled by\r\n`fromEventPattern` (although in slightly more verbose way).\r\n\r\nThis operator accepts as a first argument an `addHandler` function, which will be injected with\r\nhandler parameter. That handler is actually an event handler function that you now can pass\r\nto API expecting it. `addHandler` will be called whenever Observable\r\nreturned by the operator is subscribed, so registering handler in API will not\r\nnecessarily happen when `fromEventPattern` is called.\r\n\r\nAfter registration, every time an event that we listen to happens,\r\nObservable returned by `fromEventPattern` will emit value that event handler\r\nfunction was called with. Note that if event handler was called with more\r\nthan one argument, second and following arguments will not appear in the Observable.\r\n\r\nIf API you are using allows to unregister event handlers as well, you can pass to `fromEventPattern`\r\nanother function - `removeHandler` - as a second parameter. It will be injected\r\nwith the same handler function as before, which now you can use to unregister\r\nit from the API. `removeHandler` will be called when consumer of resulting Observable\r\nunsubscribes from it.\r\n\r\nIn some APIs unregistering is actually handled differently. Method registering an event handler\r\nreturns some kind of token, which is later used to identify which function should\r\nbe unregistered or it itself has method that unregisters event handler.\r\nIf that is the case with your API, make sure token returned\r\nby registering method is returned by `addHandler`. Then it will be passed\r\nas a second argument to `removeHandler`, where you will be able to use it.\r\n\r\nIf you need access to all event handler parameters (not only the first one),\r\nor you need to transform them in any way, you can call `fromEventPattern` with optional\r\nthird parameter - project function which will accept all arguments passed to\r\nevent handler when it is called. Whatever is returned from project function will appear on\r\nresulting stream instead of usual event handlers first argument. This means\r\nthat default project can be thought of as function that takes its first parameter\r\nand ignores the rest.\r\n\r\n## Examples\r\n\r\nEmits clicks happening on the DOM document\r\n\r\n```ts\r\nimport { fromEventPattern } from 'rxjs';\r\n\r\nfunction addClickHandler(handler) {\r\n  document.addEventListener('click', handler);\r\n}\r\n\r\nfunction removeClickHandler(handler) {\r\n  document.removeEventListener('click', handler);\r\n}\r\n\r\nconst clicks = fromEventPattern(\r\n  addClickHandler,\r\n  removeClickHandler\r\n);\r\nclicks.subscribe(x => console.log(x));\r\n\r\n// Whenever you click anywhere in the browser, DOM MouseEvent\r\n// object will be logged.\r\n```\r\n\r\nUse with API that returns cancellation token\r\n\r\n```ts\r\nimport { fromEventPattern } from 'rxjs';\r\n\r\nconst token = someAPI.registerEventHandler(function() {});\r\nsomeAPI.unregisterEventHandler(token); // this APIs cancellation method accepts\r\n                                       // not handler itself, but special token.\r\n\r\nconst someAPIObservable = fromEventPattern(\r\n  function(handler) { return someAPI.registerEventHandler(handler); }, // Note that we return the token here...\r\n  function(handler, token) { someAPI.unregisterEventHandler(token); }  // ...to then use it here.\r\n);\r\n```\r\n\r\nUse with project function\r\n\r\n```ts\r\nimport { fromEventPattern } from 'rxjs';\r\n\r\nsomeAPI.registerEventHandler((eventType, eventMessage) => {\r\n  console.log(eventType, eventMessage); // Logs 'EVENT_TYPE' 'EVENT_MESSAGE' to console.\r\n});\r\n\r\nconst someAPIObservable = fromEventPattern(\r\n  handler => someAPI.registerEventHandler(handler),\r\n  handler => someAPI.unregisterEventHandler(handler)\r\n  (eventType, eventMessage) => eventType + ' --- ' + eventMessage // without that function only 'EVENT_TYPE'\r\n);                                                                // would be emitted by the Observable\r\n\r\nsomeAPIObservable.subscribe(value => console.log(value));\r\n\r\n// Logs:\r\n// 'EVENT_TYPE --- EVENT_MESSAGE'\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link fromEvent}"},{"kind":25,"tagName":"see","text":"{@link bindCallback}"},{"kind":25,"tagName":"see","text":"{@link bindNodeCallback}"},{"kind":25,"tagName":"param","text":"{function(handler: Function): any} addHandler A function that takes\r\na `handler` function as argument and attaches it somehow to the actual\r\nsource of events."},{"kind":25,"tagName":"param","text":"{function(handler: Function, token?: any): void} [removeHandler] A function that\r\ntakes a `handler` function as an argument and removes it from the event source. If `addHandler`\r\nreturns some kind of token, `removeHandler` function will have it as a second parameter."},{"kind":25,"tagName":"param","text":"{function(...args: any): T} [project] A function to\r\ntransform results. It takes the arguments from the event handler and\r\nshould return a single value."},{"kind":25,"tagName":"return","text":"{Observable<T>} Observable which, when an event happens, emits first parameter\r\npassed to registered event handler. Alternatively it emits whatever project function returns\r\nat that moment."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"addHandler","type":"(handler: NodeEventHandler) => any","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"removeHandler","type":"(handler: NodeEventHandler, signal?: any) => void","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<T>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"fromEventPattern","modulePath":"..\\src\\internal\\observable\\fromEventPattern.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"addHandler","type":"(handler: NodeEventHandler) => any","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"removeHandler","type":"(handler: NodeEventHandler, signal?: any) => void","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"resultSelector","type":"(...args: any[]) => T","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<T>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"fromEventPattern","modulePath":"..\\src\\internal\\observable\\fromEventPattern.ts"}]}}},"usabilityResult":{"index":1}},"..\\src\\internal\\observable\\generate.ts":{"moduleComponents":{"generate":{"kind":13,"usabilityResult":{"wordCount":910,"index":1},"sources":{"name":"generate","statements":[{"isExported":false,"isDefaultExport":false,"hasDeclareKeyword":false,"docs":[],"kind":41,"declarationKind":"let","declarations":[{"name":"resultSelector","type":"ResultFunc<S, T>","hasExclamationToken":false,"kind":40}]},{"isExported":false,"isDefaultExport":false,"hasDeclareKeyword":false,"docs":[],"kind":41,"declarationKind":"let","declarations":[{"name":"initialState","type":"S","hasExclamationToken":false,"kind":40}]},"if (arguments.length === 1) {\r\n// If we only have one argument, we can assume it is a configuration object.\r\n// Note that folks not using TypeScript may trip over this.\r\n({\r\n  initialState,\r\n  condition,\r\n  iterate,\r\n  resultSelector = identity as ResultFunc<S, T>,\r\n  scheduler,\r\n} = initialStateOrOptions as GenerateOptions<T, S>);\r\n} else {\r\n// Deprecated arguments path. Figure out what the user\r\n// passed and set it here.\r\ninitialState = initialStateOrOptions as S;\r\nif (!resultSelectorOrScheduler || isScheduler(resultSelectorOrScheduler)) {\r\n  resultSelector = identity as ResultFunc<S, T>;\r\n  scheduler = resultSelectorOrScheduler as SchedulerLike;\r\n} else {\r\n  resultSelector = resultSelectorOrScheduler as ResultFunc<S, T>;\r\n}\r\n}",{"name":"gen","statements":["for (let state = initialState; !condition || condition(state); state = iterate!(state)) {\r\n  yield resultSelector(state);\r\n}"],"parameters":[],"typeParameters":[],"docs":[],"isExported":false,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":true,"isAsync":false,"kind":13,"overloads":[]},"return defer(\r\n(scheduler\r\n  ? // If a scheduler was provided, use `scheduleIterable` to ensure that iteration/generation\r\n    // happens on the scheduler.\r\n    () => scheduleIterable(gen(), scheduler!)\r\n  : // Otherwise, if there's no scheduler, we can just use the generator function directly in\r\n    // `defer` and executing it will return the generator (which is iterable).\r\n    gen) as () => ObservableInput<T>\r\n);"],"parameters":[{"name":"initialStateOrOptions","type":"S | GenerateOptions<T, S>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"condition","type":"ConditionFunc<S>","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"iterate","type":"IterateFunc<S>","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"resultSelectorOrScheduler","type":"ResultFunc<S, T> | SchedulerLike","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"scheduler","type":"SchedulerLike","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<T>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"S","kind":39,"isConst":false,"variance":0}],"docs":[],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"S","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nGenerates an observable sequence by running a state-driven loop\r\nproducing the sequence's elements, using the specified scheduler\r\nto send out observer messages.\r\n\r\n![](generate.png)\r\n\r\n## Examples\r\n\r\nProduces sequence of numbers\r\n\r\n```ts\r\nimport { generate } from 'rxjs';\r\n\r\nconst result = generate(0, x => x < 3, x => x + 1, x => x);\r\n\r\nresult.subscribe(x => console.log(x));\r\n\r\n// Logs:\r\n// 0\r\n// 1\r\n// 2\r\n```\r\n\r\nUse `asapScheduler`\r\n\r\n```ts\r\nimport { generate, asapScheduler } from 'rxjs';\r\n\r\nconst result = generate(1, x => x < 5, x => x * 2, x => x + 1, asapScheduler);\r\n\r\nresult.subscribe(x => console.log(x));\r\n\r\n// Logs:\r\n// 2\r\n// 3\r\n// 5\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link from}"},{"kind":25,"tagName":"see","text":"{@link Observable}"},{"kind":25,"tagName":"param","text":"{S} initialState Initial state."},{"kind":25,"tagName":"param","text":"{function (state: S): boolean} condition Condition to terminate generation (upon returning false)."},{"kind":25,"tagName":"param","text":"{function (state: S): S} iterate Iteration step function."},{"kind":25,"tagName":"param","text":"{function (state: S): T} resultSelector Selector function for results produced in the sequence. (deprecated)"},{"kind":25,"tagName":"param","text":"{SchedulerLike} [scheduler] A {@link SchedulerLike} on which to run the generator loop. If not provided, defaults to emit immediately."},{"kind":25,"tagName":"returns","text":"{Observable<T>} The generated sequence."},{"kind":25,"tagName":"deprecated","text":"Instead of passing separate arguments, use the options argument. Signatures taking separate arguments will be removed in v8."}]}],"hasDeclareKeyword":false,"parameters":[{"name":"initialState","type":"S","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"condition","type":"ConditionFunc<S>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"iterate","type":"IterateFunc<S>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"resultSelector","type":"ResultFunc<S, T>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"scheduler","type":"SchedulerLike","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<T>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"generate","modulePath":"..\\src\\internal\\observable\\generate.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"S","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nGenerates an Observable by running a state-driven loop\r\nthat emits an element on each iteration.\r\n\r\n<span class=\"informal\">Use it instead of nexting values in a for loop.</span>\r\n\r\n![](generate.png)\r\n\r\n`generate` allows you to create a stream of values generated with a loop very similar to\r\na traditional for loop. The first argument of `generate` is a beginning value. The second argument\r\nis a function that accepts this value and tests if some condition still holds. If it does,\r\nthen the loop continues, if not, it stops. The third value is a function which takes the\r\npreviously defined value and modifies it in some way on each iteration. Note how these three parameters\r\nare direct equivalents of three expressions in a traditional for loop: the first expression\r\ninitializes some state (for example, a numeric index), the second tests if the loop can perform the next\r\niteration (for example, if the index is lower than 10) and the third states how the defined value\r\nwill be modified on every step (for example, the index will be incremented by one).\r\n\r\nReturn value of a `generate` operator is an Observable that on each loop iteration\r\nemits a value. First of all, the condition function is ran. If it returns true, then the Observable\r\nemits the currently stored value (initial value at the first iteration) and finally updates\r\nthat value with iterate function. If at some point the condition returns false, then the Observable\r\ncompletes at that moment.\r\n\r\nOptionally you can pass a fourth parameter to `generate` - a result selector function which allows you\r\nto immediately map the value that would normally be emitted by an Observable.\r\n\r\nIf you find three anonymous functions in `generate` call hard to read, you can provide\r\na single object to the operator instead where the object has the properties: `initialState`,\r\n`condition`, `iterate` and `resultSelector`, which should have respective values that you\r\nwould normally pass to `generate`. `resultSelector` is still optional, but that form\r\nof calling `generate` allows you to omit `condition` as well. If you omit it, that means\r\ncondition always holds, or in other words the resulting Observable will never complete.\r\n\r\nBoth forms of `generate` can optionally accept a scheduler. In case of a multi-parameter call,\r\nscheduler simply comes as a last argument (no matter if there is a `resultSelector`\r\nfunction or not). In case of a single-parameter call, you can provide it as a\r\n`scheduler` property on the object passed to the operator. In both cases, a scheduler decides when\r\nthe next iteration of the loop will happen and therefore when the next value will be emitted\r\nby the Observable. For example, to ensure that each value is pushed to the Observer\r\non a separate task in the event loop, you could use the `async` scheduler. Note that\r\nby default (when no scheduler is passed) values are simply emitted synchronously.\r\n\r\n\r\n## Examples\r\n\r\nUse with condition and iterate functions\r\n\r\n```ts\r\nimport { generate } from 'rxjs';\r\n\r\nconst result = generate(0, x => x < 3, x => x + 1);\r\n\r\nresult.subscribe({\r\n  next: value => console.log(value),\r\n  complete: () => console.log('Complete!')\r\n});\r\n\r\n// Logs:\r\n// 0\r\n// 1\r\n// 2\r\n// 'Complete!'\r\n```\r\n\r\nUse with condition, iterate and resultSelector functions\r\n\r\n```ts\r\nimport { generate } from 'rxjs';\r\n\r\nconst result = generate(0, x => x < 3, x => x + 1, x => x * 1000);\r\n\r\nresult.subscribe({\r\n  next: value => console.log(value),\r\n  complete: () => console.log('Complete!')\r\n});\r\n\r\n// Logs:\r\n// 0\r\n// 1000\r\n// 2000\r\n// 'Complete!'\r\n```\r\n\r\nUse with options object\r\n\r\n```ts\r\nimport { generate } from 'rxjs';\r\n\r\nconst result = generate({\r\n  initialState: 0,\r\n  condition(value) { return value < 3; },\r\n  iterate(value) { return value + 1; },\r\n  resultSelector(value) { return value * 1000; }\r\n});\r\n\r\nresult.subscribe({\r\n  next: value => console.log(value),\r\n  complete: () => console.log('Complete!')\r\n});\r\n\r\n// Logs:\r\n// 0\r\n// 1000\r\n// 2000\r\n// 'Complete!'\r\n```\r\n\r\nUse options object without condition function\r\n\r\n```ts\r\nimport { generate } from 'rxjs';\r\n\r\nconst result = generate({\r\n  initialState: 0,\r\n  iterate(value) { return value + 1; },\r\n  resultSelector(value) { return value * 1000; }\r\n});\r\n\r\nresult.subscribe({\r\n  next: value => console.log(value),\r\n  complete: () => console.log('Complete!') // This will never run\r\n});\r\n\r\n// Logs:\r\n// 0\r\n// 1000\r\n// 2000\r\n// 3000\r\n// ...and never stops.\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link from}"},{"kind":25,"tagName":"param","text":"{S} initialState Initial state."},{"kind":25,"tagName":"param","text":"{function (state: S): boolean} condition Condition to terminate generation (upon returning false)."},{"kind":25,"tagName":"param","text":"{function (state: S): S} iterate Iteration step function."},{"kind":25,"tagName":"param","text":"{function (state: S): T} [resultSelector] Selector function for results produced in the sequence."},{"kind":25,"tagName":"param","text":"{Scheduler} [scheduler] A {@link Scheduler} on which to run the generator loop. If not provided, defaults to emitting immediately."},{"kind":25,"tagName":"return","text":"{Observable<T>} The generated sequence."},{"kind":25,"tagName":"deprecated","text":"Instead of passing separate arguments, use the options argument. Signatures taking separate arguments will be removed in v8."}]}],"hasDeclareKeyword":false,"parameters":[{"name":"initialState","type":"S","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"condition","type":"ConditionFunc<S>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"iterate","type":"IterateFunc<S>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"scheduler","type":"SchedulerLike","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<S>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"generate","modulePath":"..\\src\\internal\\observable\\generate.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"S","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nGenerates an observable sequence by running a state-driven loop\r\nproducing the sequence's elements, using the specified scheduler\r\nto send out observer messages.\r\nThe overload accepts options object that might contain initial state, iterate,\r\ncondition and scheduler.\r\n\r\n![](generate.png)\r\n\r\n## Examples\r\n\r\nUse options object with condition function\r\n\r\n```ts\r\nimport { generate } from 'rxjs';\r\n\r\nconst result = generate({\r\n  initialState: 0,\r\n  condition: x => x < 3,\r\n  iterate: x => x + 1\r\n});\r\n\r\nresult.subscribe({\r\n  next: value => console.log(value),\r\n  complete: () => console.log('Complete!')\r\n});\r\n\r\n// Logs:\r\n// 0\r\n// 1\r\n// 2\r\n// 'Complete!'\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link from}"},{"kind":25,"tagName":"see","text":"{@link Observable}"},{"kind":25,"tagName":"param","text":"{GenerateBaseOptions<S>} options Object that must contain initialState, iterate and might contain condition and scheduler."},{"kind":25,"tagName":"returns","text":"{Observable<S>} The generated sequence."}]}],"hasDeclareKeyword":false,"parameters":[{"name":"options","type":"GenerateBaseOptions<S>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<S>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"generate","modulePath":"..\\src\\internal\\observable\\generate.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"S","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nGenerates an observable sequence by running a state-driven loop\r\nproducing the sequence's elements, using the specified scheduler\r\nto send out observer messages.\r\nThe overload accepts options object that might contain initial state, iterate,\r\ncondition, result selector and scheduler.\r\n\r\n![](generate.png)\r\n\r\n## Examples\r\n\r\nUse options object with condition and iterate function\r\n\r\n```ts\r\nimport { generate } from 'rxjs';\r\n\r\nconst result = generate({\r\n  initialState: 0,\r\n  condition: x => x < 3,\r\n  iterate: x => x + 1,\r\n  resultSelector: x => x\r\n});\r\n\r\nresult.subscribe({\r\n  next: value => console.log(value),\r\n  complete: () => console.log('Complete!')\r\n});\r\n\r\n// Logs:\r\n// 0\r\n// 1\r\n// 2\r\n// 'Complete!'\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link from}"},{"kind":25,"tagName":"see","text":"{@link Observable}"},{"kind":25,"tagName":"param","text":"{GenerateOptions<T, S>} options Object that must contain initialState, iterate, resultSelector and might contain condition and scheduler."},{"kind":25,"tagName":"returns","text":"{Observable<T>} The generated sequence."}]}],"hasDeclareKeyword":false,"parameters":[{"name":"options","type":"GenerateOptions<T, S>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<T>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"generate","modulePath":"..\\src\\internal\\observable\\generate.ts"}]}}},"usabilityResult":{"index":1}},"..\\src\\internal\\observable\\iif.ts":{"moduleComponents":{"iif":{"kind":13,"usabilityResult":{"wordCount":211,"index":1},"sources":{"name":"iif","statements":["return defer(() => (condition() ? trueResult : falseResult));"],"parameters":[{"name":"condition","type":"() => boolean","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"trueResult","type":"ObservableInput<T>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"falseResult","type":"ObservableInput<F>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<T | F>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"F","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nChecks a boolean at subscription time, and chooses between one of two observable sources\r\n\r\n`iif` expects a function that returns a boolean (the `condition` function), and two sources,\r\nthe `trueResult` and the `falseResult`, and returns an Observable.\r\n\r\nAt the moment of subscription, the `condition` function is called. If the result is `true`, the\r\nsubscription will be to the source passed as the `trueResult`, otherwise, the subscription will be\r\nto the source passed as the `falseResult`.\r\n\r\nIf you need to check more than two options to choose between more than one observable, have a look at the {@link defer} creation method.\r\n\r\n## Examples\r\n\r\nChange at runtime which Observable will be subscribed\r\n\r\n```ts\r\nimport { iif, of } from 'rxjs';\r\n\r\nlet subscribeToFirst;\r\nconst firstOrSecond = iif(\r\n  () => subscribeToFirst,\r\n  of('first'),\r\n  of('second')\r\n);\r\n\r\nsubscribeToFirst = true;\r\nfirstOrSecond.subscribe(value => console.log(value));\r\n\r\n// Logs:\r\n// 'first'\r\n\r\nsubscribeToFirst = false;\r\nfirstOrSecond.subscribe(value => console.log(value));\r\n\r\n// Logs:\r\n// 'second'\r\n```\r\n\r\nControl access to an Observable\r\n\r\n```ts\r\nimport { iif, of, EMPTY } from 'rxjs';\r\n\r\nlet accessGranted;\r\nconst observableIfYouHaveAccess = iif(\r\n  () => accessGranted,\r\n  of('It seems you have an access...'),\r\n  EMPTY\r\n);\r\n\r\naccessGranted = true;\r\nobservableIfYouHaveAccess.subscribe({\r\n  next: value => console.log(value),\r\n  complete: () => console.log('The end')\r\n});\r\n\r\n// Logs:\r\n// 'It seems you have an access...'\r\n// 'The end'\r\n\r\naccessGranted = false;\r\nobservableIfYouHaveAccess.subscribe({\r\n  next: value => console.log(value),\r\n  complete: () => console.log('The end')\r\n});\r\n\r\n// Logs:\r\n// 'The end'\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link defer}"},{"kind":25,"tagName":"param","text":"condition Condition which Observable should be chosen."},{"kind":25,"tagName":"param","text":"trueResult An Observable that will be subscribed if condition is true."},{"kind":25,"tagName":"param","text":"falseResult An Observable that will be subscribed if condition is false."},{"kind":25,"tagName":"return","text":"An observable that proxies to `trueResult` or `falseResult`, depending on the result of the `condition` function."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[],"functionName":"iif","modulePath":"..\\src\\internal\\observable\\iif.ts"}}},"usabilityResult":{"index":1}},"..\\src\\internal\\observable\\interval.ts":{"moduleComponents":{"interval":{"kind":13,"usabilityResult":{"wordCount":137,"index":1},"sources":{"name":"interval","statements":["if (period < 0) {\r\n// We cannot schedule an interval in the past.\r\nperiod = 0;\r\n}","return timer(period, period, scheduler);"],"parameters":[{"name":"period","initializer":"0","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"scheduler","initializer":"asyncScheduler","type":"SchedulerLike","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<number>","typeParameters":[],"docs":[{"kind":24,"description":"\r\nCreates an Observable that emits sequential numbers every specified\r\ninterval of time, on a specified {@link SchedulerLike}.\r\n\r\n<span class=\"informal\">Emits incremental numbers periodically in time.</span>\r\n\r\n![](interval.png)\r\n\r\n`interval` returns an Observable that emits an infinite sequence of\r\nascending integers, with a constant interval of time of your choosing\r\nbetween those emissions. The first emission is not sent immediately, but\r\nonly after the first period has passed. By default, this operator uses the\r\n`async` {@link SchedulerLike} to provide a notion of time, but you may pass any\r\n{@link SchedulerLike} to it.\r\n\r\n## Example\r\n\r\nEmits ascending numbers, one every second (1000ms) up to the number 3\r\n\r\n```ts\r\nimport { interval, take } from 'rxjs';\r\n\r\nconst numbers = interval(1000);\r\n\r\nconst takeFourNumbers = numbers.pipe(take(4));\r\n\r\ntakeFourNumbers.subscribe(x => console.log('Next: ', x));\r\n\r\n// Logs:\r\n// Next: 0\r\n// Next: 1\r\n// Next: 2\r\n// Next: 3\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link timer}"},{"kind":25,"tagName":"see","text":"{@link delay}"},{"kind":25,"tagName":"param","text":"{number} [period=0] The interval size in milliseconds (by default)\r\nor the time unit determined by the scheduler's clock."},{"kind":25,"tagName":"param","text":"{SchedulerLike} [scheduler=async] The {@link SchedulerLike} to use for scheduling\r\nthe emission of values, and providing a notion of \"time\"."},{"kind":25,"tagName":"return","text":"{Observable} An Observable that emits a sequential number each time\r\ninterval."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[],"functionName":"interval","modulePath":"..\\src\\internal\\observable\\interval.ts"}}},"usabilityResult":{"index":1}},"..\\src\\internal\\observable\\merge.ts":{"moduleComponents":{"merge":{"kind":13,"usabilityResult":{"wordCount":286,"index":1},"sources":{"name":"merge","statements":[{"isExported":false,"isDefaultExport":false,"hasDeclareKeyword":false,"docs":[],"kind":41,"declarationKind":"const","declarations":[{"name":"scheduler","initializer":"popScheduler(args)","hasExclamationToken":false,"kind":40}]},{"isExported":false,"isDefaultExport":false,"hasDeclareKeyword":false,"docs":[],"kind":41,"declarationKind":"const","declarations":[{"name":"concurrent","initializer":"popNumber(args, Infinity)","hasExclamationToken":false,"kind":40}]},{"isExported":false,"isDefaultExport":false,"hasDeclareKeyword":false,"docs":[],"kind":41,"declarationKind":"const","declarations":[{"name":"sources","initializer":"args as ObservableInput<unknown>[]","hasExclamationToken":false,"kind":40}]},"return !sources.length\r\n? // No source provided\r\n  EMPTY\r\n: sources.length === 1\r\n? // One source? Just return it.\r\n  innerFrom(sources[0])\r\n: // Merge all sources\r\n  mergeAll(concurrent)(from(sources, scheduler));"],"parameters":[{"name":"args","type":"(ObservableInput<unknown> | number | SchedulerLike)[]","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":true}],"returnType":"Observable<unknown>","typeParameters":[],"docs":[{"kind":24,"description":"\r\nCreates an output Observable which concurrently emits all values from every\r\ngiven input Observable.\r\n\r\n<span class=\"informal\">Flattens multiple Observables together by blending\r\ntheir values into one Observable.</span>\r\n\r\n![](merge.png)\r\n\r\n`merge` subscribes to each given input Observable (as arguments), and simply\r\nforwards (without doing any transformation) all the values from all the input\r\nObservables to the output Observable. The output Observable only completes\r\nonce all input Observables have completed. Any error delivered by an input\r\nObservable will be immediately emitted on the output Observable.\r\n\r\n## Examples\r\n\r\nMerge together two Observables: 1s interval and clicks\r\n\r\n```ts\r\nimport { merge, fromEvent, interval } from 'rxjs';\r\n\r\nconst clicks = fromEvent(document, 'click');\r\nconst timer = interval(1000);\r\nconst clicksOrTimer = merge(clicks, timer);\r\nclicksOrTimer.subscribe(x => console.log(x));\r\n\r\n// Results in the following:\r\n// timer will emit ascending values, one every second(1000ms) to console\r\n// clicks logs MouseEvents to console every time the \"document\" is clicked\r\n// Since the two streams are merged you see these happening\r\n// as they occur.\r\n```\r\n\r\nMerge together 3 Observables, but run only 2 concurrently\r\n\r\n```ts\r\nimport { interval, take, merge } from 'rxjs';\r\n\r\nconst timer1 = interval(1000).pipe(take(10));\r\nconst timer2 = interval(2000).pipe(take(6));\r\nconst timer3 = interval(500).pipe(take(10));\r\n\r\nconst concurrent = 2; // the argument\r\nconst merged = merge(timer1, timer2, timer3, concurrent);\r\nmerged.subscribe(x => console.log(x));\r\n\r\n// Results in the following:\r\n// - First timer1 and timer2 will run concurrently\r\n// - timer1 will emit a value every 1000ms for 10 iterations\r\n// - timer2 will emit a value every 2000ms for 6 iterations\r\n// - after timer1 hits its max iteration, timer2 will\r\n//   continue, and timer3 will start to run concurrently with timer2\r\n// - when timer2 hits its max iteration it terminates, and\r\n//   timer3 will continue to emit a value every 500ms until it is complete\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link mergeAll}"},{"kind":25,"tagName":"see","text":"{@link mergeMap}"},{"kind":25,"tagName":"see","text":"{@link mergeMapTo}"},{"kind":25,"tagName":"see","text":"{@link mergeScan}"},{"kind":25,"tagName":"param","text":"{...ObservableInput} observables Input Observables to merge together."},{"kind":25,"tagName":"param","text":"{number} [concurrent=Infinity] Maximum number of input\r\nObservables being subscribed to concurrently."},{"kind":25,"tagName":"param","text":"{SchedulerLike} [scheduler=null] The {@link SchedulerLike} to use for managing\r\nconcurrency of input Observables."},{"kind":25,"tagName":"return","text":"{Observable} an Observable that emits items that are the result of\r\nevery input Observable."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"A","kind":39,"isConst":false,"constraint":"readonly unknown[]","variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"sources","type":"[...ObservableInputTuple<A>]","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":true}],"returnType":"Observable<A[number]>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"merge","modulePath":"..\\src\\internal\\observable\\merge.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"A","kind":39,"isConst":false,"constraint":"readonly unknown[]","variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"sourcesAndConcurrency","type":"[...ObservableInputTuple<A>, number?]","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":true}],"returnType":"Observable<A[number]>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"merge","modulePath":"..\\src\\internal\\observable\\merge.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"A","kind":39,"isConst":false,"constraint":"readonly unknown[]","variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"The `scheduler` parameter will be removed in v8. Use `scheduled` and `mergeAll`. Details: https://rxjs.dev/deprecations/scheduler-argument"}]}],"hasDeclareKeyword":false,"parameters":[{"name":"sourcesAndScheduler","type":"[...ObservableInputTuple<A>, SchedulerLike?]","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":true}],"returnType":"Observable<A[number]>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"merge","modulePath":"..\\src\\internal\\observable\\merge.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"A","kind":39,"isConst":false,"constraint":"readonly unknown[]","variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"The `scheduler` parameter will be removed in v8. Use `scheduled` and `mergeAll`. Details: https://rxjs.dev/deprecations/scheduler-argument"}]}],"hasDeclareKeyword":false,"parameters":[{"name":"sourcesAndConcurrencyAndScheduler","type":"[...ObservableInputTuple<A>, number?, SchedulerLike?]","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":true}],"returnType":"Observable<A[number]>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"merge","modulePath":"..\\src\\internal\\observable\\merge.ts"}]}}},"usabilityResult":{"index":1}},"..\\src\\internal\\observable\\never.ts":{"moduleComponents":{"never":{"kind":13,"usabilityResult":{"wordCount":0,"index":0},"sources":{"name":"never","statements":["return NEVER;"],"parameters":[],"typeParameters":[],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Replaced with the {@link NEVER} constant. Will be removed in v8."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[],"functionName":"never","modulePath":"..\\src\\internal\\observable\\never.ts"}}},"usabilityResult":{"index":0}},"..\\src\\internal\\observable\\of.ts":{"moduleComponents":{"of":{"kind":13,"usabilityResult":{"wordCount":122,"index":1},"sources":{"name":"of","statements":[{"isExported":false,"isDefaultExport":false,"hasDeclareKeyword":false,"docs":[],"kind":41,"declarationKind":"const","declarations":[{"name":"scheduler","initializer":"popScheduler(args)","hasExclamationToken":false,"kind":40}]},"return from(args as T[], scheduler);"],"parameters":[{"name":"args","type":"Array<T | SchedulerLike>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":true}],"returnType":"Observable<T>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nConverts the arguments to an observable sequence.\r\n\r\n<span class=\"informal\">Each argument becomes a `next` notification.</span>\r\n\r\n![](of.png)\r\n\r\nUnlike {@link from}, it does not do any flattening and emits each argument in whole\r\nas a separate `next` notification.\r\n\r\n## Examples\r\n\r\nEmit the values `10, 20, 30`\r\n\r\n```ts\r\nimport { of } from 'rxjs';\r\n\r\nof(10, 20, 30)\r\n  .subscribe({\r\n    next: value => console.log('next:', value),\r\n    error: err => console.log('error:', err),\r\n    complete: () => console.log('the end'),\r\n  });\r\n\r\n// Outputs\r\n// next: 10\r\n// next: 20\r\n// next: 30\r\n// the end\r\n```\r\n\r\nEmit the array `[1, 2, 3]`\r\n\r\n```ts\r\nimport { of } from 'rxjs';\r\n\r\nof([1, 2, 3])\r\n  .subscribe({\r\n    next: value => console.log('next:', value),\r\n    error: err => console.log('error:', err),\r\n    complete: () => console.log('the end'),\r\n  });\r\n\r\n// Outputs\r\n// next: [1, 2, 3]\r\n// the end\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link from}"},{"kind":25,"tagName":"see","text":"{@link range}"},{"kind":25,"tagName":"param","text":"{...T} values A comma separated list of arguments you want to be emitted"},{"kind":25,"tagName":"return","text":"{Observable} An Observable that emits the arguments\r\ndescribed above and then completes."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[{"isExported":true,"isDefaultExport":false,"typeParameters":[],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"value","type":"null","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<null>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"of","modulePath":"..\\src\\internal\\observable\\of.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"value","type":"undefined","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<undefined>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"of","modulePath":"..\\src\\internal\\observable\\of.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"The `scheduler` parameter will be removed in v8. Use `scheduled`. Details: https://rxjs.dev/deprecations/scheduler-argument"}]}],"hasDeclareKeyword":false,"parameters":[{"name":"scheduler","type":"SchedulerLike","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<never>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"of","modulePath":"..\\src\\internal\\observable\\of.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"A","kind":39,"isConst":false,"constraint":"readonly unknown[]","variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"The `scheduler` parameter will be removed in v8. Use `scheduled`. Details: https://rxjs.dev/deprecations/scheduler-argument"}]}],"hasDeclareKeyword":false,"parameters":[{"name":"valuesAndScheduler","type":"[...A, SchedulerLike]","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":true}],"returnType":"Observable<ValueFromArray<A>>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"of","modulePath":"..\\src\\internal\\observable\\of.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[],"docs":[],"hasDeclareKeyword":false,"parameters":[],"returnType":"Observable<never>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"of","modulePath":"..\\src\\internal\\observable\\of.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Do not specify explicit type parameters. Signatures with type parameters that cannot be inferred will be removed in v8."}]}],"hasDeclareKeyword":false,"parameters":[],"returnType":"Observable<T>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"of","modulePath":"..\\src\\internal\\observable\\of.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"value","type":"T","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<T>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"of","modulePath":"..\\src\\internal\\observable\\of.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"A","kind":39,"isConst":false,"constraint":"readonly unknown[]","variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"values","type":"A","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":true}],"returnType":"Observable<ValueFromArray<A>>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"of","modulePath":"..\\src\\internal\\observable\\of.ts"}]}}},"usabilityResult":{"index":1}},"..\\src\\internal\\observable\\onErrorResumeNext.ts":{"moduleComponents":{"onErrorResumeNext":{"kind":13,"usabilityResult":{"wordCount":218,"index":1},"sources":{"name":"onErrorResumeNext","statements":[{"isExported":false,"isDefaultExport":false,"hasDeclareKeyword":false,"docs":[],"kind":41,"declarationKind":"const","declarations":[{"name":"nextSources","initializer":"argsOrArgArray(sources) as any","type":"ObservableInputTuple<A>","hasExclamationToken":false,"kind":40}]},"return new Observable((subscriber) => {\r\nlet sourceIndex = 0;\r\nconst subscribeNext = () => {\r\n  if (sourceIndex < nextSources.length) {\r\n    let nextSource: Observable<A[number]>;\r\n    try {\r\n      nextSource = innerFrom(nextSources[sourceIndex++]);\r\n    } catch (err) {\r\n      subscribeNext();\r\n      return;\r\n    }\r\n    const innerSubscriber = new OperatorSubscriber(subscriber, undefined, noop, noop);\r\n    nextSource.subscribe(innerSubscriber);\r\n    innerSubscriber.add(subscribeNext);\r\n  } else {\r\n    subscriber.complete();\r\n  }\r\n};\r\nsubscribeNext();\r\n});"],"parameters":[{"name":"sources","type":"[[...ObservableInputTuple<A>]] | [...ObservableInputTuple<A>]","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":true}],"returnType":"Observable<A[number]>","typeParameters":[{"name":"A","kind":39,"isConst":false,"constraint":"readonly unknown[]","variance":0}],"docs":[{"kind":24,"description":"\r\nWhen any of the provided Observable emits a complete or an error notification, it immediately subscribes to the next one\r\nthat was passed.\r\n\r\n<span class=\"informal\">Execute series of Observables no matter what, even if it means swallowing errors.</span>\r\n\r\n![](onErrorResumeNext.png)\r\n\r\n`onErrorResumeNext` will subscribe to each observable source it is provided, in order.\r\nIf the source it's subscribed to emits an error or completes, it will move to the next source\r\nwithout error.\r\n\r\nIf `onErrorResumeNext` is provided no arguments, or a single, empty array, it will return {@link EMPTY}.\r\n\r\n`onErrorResumeNext` is basically {@link concat}, only it will continue, even if one of its\r\nsources emits an error.\r\n\r\nNote that there is no way to handle any errors thrown by sources via the result of\r\n`onErrorResumeNext`. If you want to handle errors thrown in any given source, you can\r\nalways use the {@link catchError} operator on them before passing them into `onErrorResumeNext`.\r\n\r\n## Example\r\n\r\nSubscribe to the next Observable after map fails\r\n\r\n```ts\r\nimport { onErrorResumeNext, of, map } from 'rxjs';\r\n\r\nonErrorResumeNext(\r\n  of(1, 2, 3, 0).pipe(\r\n    map(x => {\r\n      if (x === 0) {\r\n        throw Error();\r\n      }\r\n      return 10 / x;\r\n    })\r\n  ),\r\n  of(1, 2, 3)\r\n)\r\n.subscribe({\r\n  next: value => console.log(value),\r\n  error: err => console.log(err),     // Will never be called.\r\n  complete: () => console.log('done')\r\n});\r\n\r\n// Logs:\r\n// 10\r\n// 5\r\n// 3.3333333333333335\r\n// 1\r\n// 2\r\n// 3\r\n// 'done'\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link concat}"},{"kind":25,"tagName":"see","text":"{@link catchError}"},{"kind":25,"tagName":"param","text":"{...ObservableInput} sources Observables (or anything that *is* observable) passed either directly or as an array."},{"kind":25,"tagName":"return","text":"{Observable} An Observable that concatenates all sources, one after the other,\r\nignoring all errors, such that any error causes it to move on to the next source."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"A","kind":39,"isConst":false,"constraint":"readonly unknown[]","variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"sources","type":"[...ObservableInputTuple<A>]","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<A[number]>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"onErrorResumeNext","modulePath":"..\\src\\internal\\observable\\onErrorResumeNext.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"A","kind":39,"isConst":false,"constraint":"readonly unknown[]","variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"sources","type":"[...ObservableInputTuple<A>]","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":true}],"returnType":"Observable<A[number]>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"onErrorResumeNext","modulePath":"..\\src\\internal\\observable\\onErrorResumeNext.ts"}]}}},"usabilityResult":{"index":1}},"..\\src\\internal\\observable\\pairs.ts":{"moduleComponents":{"pairs":{"kind":13,"usabilityResult":{"wordCount":190,"index":1},"sources":{"name":"pairs","statements":["return from(Object.entries(obj), scheduler as any);"],"parameters":[{"name":"obj","type":"any","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"scheduler","type":"SchedulerLike","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"typeParameters":[],"docs":[{"kind":24,"description":"\r\nConvert an object into an Observable of `[key, value]` pairs.\r\n\r\n<span class=\"informal\">Turn entries of an object into a stream.</span>\r\n\r\n![](pairs.png)\r\n\r\n`pairs` takes an arbitrary object and returns an Observable that emits arrays. Each\r\nemitted array has exactly two elements - the first is a key from the object\r\nand the second is a value corresponding to that key. Keys are extracted from\r\nan object via `Object.keys` function, which means that they will be only\r\nenumerable keys that are present on an object directly - not ones inherited\r\nvia prototype chain.\r\n\r\nBy default, these arrays are emitted synchronously. To change that you can\r\npass a {@link SchedulerLike} as a second argument to `pairs`.\r\n\r\n## Example\r\n\r\nConverts an object to an Observable\r\n\r\n```ts\r\nimport { pairs } from 'rxjs';\r\n\r\nconst obj = {\r\n  foo: 42,\r\n  bar: 56,\r\n  baz: 78\r\n};\r\n\r\npairs(obj).subscribe({\r\n  next: value => console.log(value),\r\n  complete: () => console.log('Complete!')\r\n});\r\n\r\n// Logs:\r\n// ['foo', 42]\r\n// ['bar', 56]\r\n// ['baz', 78]\r\n// 'Complete!'\r\n```\r\n\r\n### Object.entries required\r\n\r\nIn IE, you will need to polyfill `Object.entries` in order to use this.\r\n[MDN has a polyfill here](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/entries)\r\n","tags":[{"kind":25,"tagName":"param","text":"{Object} obj The object to inspect and turn into an\r\nObservable sequence."},{"kind":25,"tagName":"param","text":"{Scheduler} [scheduler] An optional IScheduler to schedule\r\nwhen resulting Observable will emit values."},{"kind":25,"tagName":"returns","text":"{(Observable<Array<string|T>>)} An observable sequence of\r\n[key, value] pairs from the object."},{"kind":25,"tagName":"deprecated","text":"Use `from(Object.entries(obj))` instead. Will be removed in v8."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Use `from(Object.entries(obj))` instead. Will be removed in v8."}]}],"hasDeclareKeyword":false,"parameters":[{"name":"arr","type":"readonly T[]","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"scheduler","type":"SchedulerLike","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<[string, T]>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"pairs","modulePath":"..\\src\\internal\\observable\\pairs.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"O","kind":39,"isConst":false,"constraint":"Record<string, unknown>","variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Use `from(Object.entries(obj))` instead. Will be removed in v8."}]}],"hasDeclareKeyword":false,"parameters":[{"name":"obj","type":"O","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"scheduler","type":"SchedulerLike","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<[keyof O, O[keyof O]]>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"pairs","modulePath":"..\\src\\internal\\observable\\pairs.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Use `from(Object.entries(obj))` instead. Will be removed in v8."}]}],"hasDeclareKeyword":false,"parameters":[{"name":"iterable","type":"Iterable<T>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"scheduler","type":"SchedulerLike","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<[string, T]>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"pairs","modulePath":"..\\src\\internal\\observable\\pairs.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Use `from(Object.entries(obj))` instead. Will be removed in v8."}]}],"hasDeclareKeyword":false,"parameters":[{"name":"n","type":"number | bigint | boolean | ((...args: any[]) => any) | symbol","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"scheduler","type":"SchedulerLike","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<[never, never]>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"pairs","modulePath":"..\\src\\internal\\observable\\pairs.ts"}]}}},"usabilityResult":{"index":1}},"..\\src\\internal\\observable\\partition.ts":{"moduleComponents":{"partition":{"kind":13,"usabilityResult":{"wordCount":183,"index":1},"sources":{"name":"partition","statements":["return [filter(predicate, thisArg)(innerFrom(source)), filter(not(predicate, thisArg))(innerFrom(source))] as [\r\nObservable<T>,\r\nObservable<T>\r\n];"],"parameters":[{"name":"source","type":"ObservableInput<T>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"predicate","type":"(this: any, value: T, index: number) => boolean","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"thisArg","type":"any","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"[Observable<T>, Observable<T>]","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nSplits the source Observable into two, one with values that satisfy a\r\npredicate, and another with values that don't satisfy the predicate.\r\n\r\n<span class=\"informal\">It's like {@link filter}, but returns two Observables:\r\none like the output of {@link filter}, and the other with values that did not\r\npass the condition.</span>\r\n\r\n![](partition.png)\r\n\r\n`partition` outputs an array with two Observables that partition the values\r\nfrom the source Observable through the given `predicate` function. The first\r\nObservable in that array emits source values for which the predicate argument\r\nreturns true. The second Observable emits source values for which the\r\npredicate returns false. The first behaves like {@link filter} and the second\r\nbehaves like {@link filter} with the predicate negated.\r\n\r\n## Example\r\n\r\nPartition a set of numbers into odds and evens observables\r\n\r\n```ts\r\nimport { of, partition } from 'rxjs';\r\n\r\nconst observableValues = of(1, 2, 3, 4, 5, 6);\r\nconst [evens$, odds$] = partition(observableValues, value => value % 2 === 0);\r\n\r\nodds$.subscribe(x => console.log('odds', x));\r\nevens$.subscribe(x => console.log('evens', x));\r\n\r\n// Logs:\r\n// odds 1\r\n// odds 3\r\n// odds 5\r\n// evens 2\r\n// evens 4\r\n// evens 6\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link filter}"},{"kind":25,"tagName":"param","text":"{function(value: T, index: number): boolean} predicate A function that\r\nevaluates each value emitted by the source Observable. If it returns `true`,\r\nthe value is emitted on the first Observable in the returned array, if\r\n`false` the value is emitted on the second Observable in the array. The\r\n`index` parameter is the number `i` for the i-th source emission that has\r\nhappened since the subscription, starting from the number `0`."},{"kind":25,"tagName":"param","text":"{any} [thisArg] An optional argument to determine the value of `this`\r\nin the `predicate` function."},{"kind":25,"tagName":"return","text":"{[Observable<T>, Observable<T>]} An array with two Observables: one\r\nwith values that passed the predicate, and another with values that did not\r\npass the predicate."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"U","kind":39,"isConst":false,"constraint":"T","variance":0},{"name":"A","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Use a closure instead of a `thisArg`. Signatures accepting a `thisArg` will be removed in v8."}]}],"hasDeclareKeyword":false,"parameters":[{"name":"source","type":"ObservableInput<T>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"predicate","type":"(this: A, value: T, index: number) => value is U","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"thisArg","type":"A","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"[Observable<U>, Observable<Exclude<T, U>>]","isGenerator":false,"isAsync":false,"kind":14,"functionName":"partition","modulePath":"..\\src\\internal\\observable\\partition.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"U","kind":39,"isConst":false,"constraint":"T","variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"source","type":"ObservableInput<T>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"predicate","type":"(value: T, index: number) => value is U","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"[Observable<U>, Observable<Exclude<T, U>>]","isGenerator":false,"isAsync":false,"kind":14,"functionName":"partition","modulePath":"..\\src\\internal\\observable\\partition.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"A","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Use a closure instead of a `thisArg`. Signatures accepting a `thisArg` will be removed in v8."}]}],"hasDeclareKeyword":false,"parameters":[{"name":"source","type":"ObservableInput<T>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"predicate","type":"(this: A, value: T, index: number) => boolean","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"thisArg","type":"A","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"[Observable<T>, Observable<T>]","isGenerator":false,"isAsync":false,"kind":14,"functionName":"partition","modulePath":"..\\src\\internal\\observable\\partition.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"source","type":"ObservableInput<T>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"predicate","type":"(value: T, index: number) => boolean","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"[Observable<T>, Observable<T>]","isGenerator":false,"isAsync":false,"kind":14,"functionName":"partition","modulePath":"..\\src\\internal\\observable\\partition.ts"}]}}},"usabilityResult":{"index":1}},"..\\src\\internal\\observable\\race.ts":{"moduleComponents":{"race":{"kind":13,"usabilityResult":{"wordCount":184,"index":1},"sources":{"name":"race","statements":["sources = argsOrArgArray(sources);","return sources.length === 1 ? innerFrom(sources[0] as ObservableInput<T>) : new Observable<T>(raceInit(sources as ObservableInput<T>[]));"],"parameters":[{"name":"sources","type":"(ObservableInput<T> | ObservableInput<T>[])[]","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":true}],"returnType":"Observable<any>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nReturns an observable that mirrors the first source observable to emit an item.\r\n\r\n![](race.png)\r\n\r\n`race` returns an observable, that when subscribed to, subscribes to all source observables immediately.\r\nAs soon as one of the source observables emits a value, the result unsubscribes from the other sources.\r\nThe resulting observable will forward all notifications, including error and completion, from the \"winning\"\r\nsource observable.\r\n\r\nIf one of the used source observable throws an errors before a first notification\r\nthe race operator will also throw an error, no matter if another source observable\r\ncould potentially win the race.\r\n\r\n`race` can be useful for selecting the response from the fastest network connection for\r\nHTTP or WebSockets. `race` can also be useful for switching observable context based on user\r\ninput.\r\n\r\n## Example\r\n\r\nSubscribes to the observable that was the first to start emitting.\r\n\r\n```ts\r\nimport { interval, map, race } from 'rxjs';\r\n\r\nconst obs1 = interval(7000).pipe(map(() => 'slow one'));\r\nconst obs2 = interval(3000).pipe(map(() => 'fast one'));\r\nconst obs3 = interval(5000).pipe(map(() => 'medium one'));\r\n\r\nrace(obs1, obs2, obs3)\r\n  .subscribe(winner => console.log(winner));\r\n\r\n// Outputs\r\n// a series of 'fast one'\r\n```\r\n","tags":[{"kind":25,"tagName":"param","text":"{...Observables} ...observables sources used to race for which Observable emits first."},{"kind":25,"tagName":"return","text":"{Observable} an Observable that mirrors the output of the first Observable to emit an item."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"constraint":"readonly unknown[]","variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"inputs","type":"[...ObservableInputTuple<T>]","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<T[number]>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"race","modulePath":"..\\src\\internal\\observable\\race.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"constraint":"readonly unknown[]","variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"inputs","type":"[...ObservableInputTuple<T>]","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":true}],"returnType":"Observable<T[number]>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"race","modulePath":"..\\src\\internal\\observable\\race.ts"}]}}},"usabilityResult":{"index":1}},"..\\src\\internal\\observable\\range.ts":{"moduleComponents":{"range":{"kind":13,"usabilityResult":{"wordCount":103,"index":1},"sources":{"name":"range","statements":["if (count == null) {\r\n// If one argument was passed, it's the count, not the start.\r\ncount = start;\r\nstart = 0;\r\n}","if (count <= 0) {\r\n// No count? We're going nowhere. Return EMPTY.\r\nreturn EMPTY;\r\n}",{"isExported":false,"isDefaultExport":false,"hasDeclareKeyword":false,"docs":[],"kind":41,"declarationKind":"const","declarations":[{"name":"end","initializer":"count + start","hasExclamationToken":false,"kind":40}]},"return new Observable(\r\nscheduler\r\n  ? // The deprecated scheduled path.\r\n    (subscriber) => {\r\n      let n = start;\r\n      return scheduler.schedule(function () {\r\n        if (n < end) {\r\n          subscriber.next(n++);\r\n          this.schedule();\r\n        } else {\r\n          subscriber.complete();\r\n        }\r\n      });\r\n    }\r\n  : // Standard synchronous range.\r\n    (subscriber) => {\r\n      let n = start;\r\n      while (n < end && !subscriber.closed) {\r\n        subscriber.next(n++);\r\n      }\r\n      subscriber.complete();\r\n    }\r\n);"],"parameters":[{"name":"start","type":"number","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"count","type":"number","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"scheduler","type":"SchedulerLike","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<number>","typeParameters":[],"docs":[{"kind":24,"description":"\r\nCreates an Observable that emits a sequence of numbers within a specified\r\nrange.\r\n\r\n<span class=\"informal\">Emits a sequence of numbers in a range.</span>\r\n\r\n![](range.png)\r\n\r\n`range` operator emits a range of sequential integers, in order, where you\r\nselect the `start` of the range and its `length`. By default, uses no\r\n{@link SchedulerLike} and just delivers the notifications synchronously, but may use\r\nan optional {@link SchedulerLike} to regulate those deliveries.\r\n\r\n## Example\r\n\r\nProduce a range of numbers\r\n\r\n```ts\r\nimport { range } from 'rxjs';\r\n\r\nconst numbers = range(1, 3);\r\n\r\nnumbers.subscribe({\r\n  next: value => console.log(value),\r\n  complete: () => console.log('Complete!')\r\n});\r\n\r\n// Logs:\r\n// 1\r\n// 2\r\n// 3\r\n// 'Complete!'\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link timer}"},{"kind":25,"tagName":"see","text":"{@link interval}"},{"kind":25,"tagName":"param","text":"{number} [start=0] The value of the first integer in the sequence."},{"kind":25,"tagName":"param","text":"{number} count The number of sequential integers to generate."},{"kind":25,"tagName":"param","text":"{SchedulerLike} [scheduler] A {@link SchedulerLike} to use for scheduling\r\nthe emissions of the notifications."},{"kind":25,"tagName":"return","text":"{Observable} An Observable of numbers that emits a finite range of\r\nsequential integers."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[{"isExported":true,"isDefaultExport":false,"typeParameters":[],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"start","type":"number","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"count","type":"number","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<number>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"range","modulePath":"..\\src\\internal\\observable\\range.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"The `scheduler` parameter will be removed in v8. Use `range(start, count).pipe(observeOn(scheduler))` instead. Details: Details: https://rxjs.dev/deprecations/scheduler-argument"}]}],"hasDeclareKeyword":false,"parameters":[{"name":"start","type":"number","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"count","type":"number | undefined","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"scheduler","type":"SchedulerLike","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<number>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"range","modulePath":"..\\src\\internal\\observable\\range.ts"}]}}},"usabilityResult":{"index":1}},"..\\src\\internal\\observable\\throwError.ts":{"moduleComponents":{"throwError":{"kind":13,"usabilityResult":{"wordCount":340,"index":1},"sources":{"name":"throwError","statements":[{"isExported":false,"isDefaultExport":false,"hasDeclareKeyword":false,"docs":[],"kind":41,"declarationKind":"const","declarations":[{"name":"errorFactory","initializer":"isFunction(errorOrErrorFactory) ? errorOrErrorFactory : () => errorOrErrorFactory","hasExclamationToken":false,"kind":40}]},{"isExported":false,"isDefaultExport":false,"hasDeclareKeyword":false,"docs":[],"kind":41,"declarationKind":"const","declarations":[{"name":"init","initializer":"(subscriber: Subscriber<never>) => subscriber.error(errorFactory())","hasExclamationToken":false,"kind":40}]},"return new Observable(scheduler ? (subscriber) => scheduler.schedule(init as any, 0, subscriber) : init);"],"parameters":[{"name":"errorOrErrorFactory","type":"any","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"scheduler","type":"SchedulerLike","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<never>","typeParameters":[],"docs":[],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[{"isExported":true,"isDefaultExport":false,"typeParameters":[],"docs":[{"kind":24,"description":"\r\nCreates an observable that will create an error instance and push it to the consumer as an error\r\nimmediately upon subscription.\r\n\r\n<span class=\"informal\">Just errors and does nothing else</span>\r\n\r\n![](throw.png)\r\n\r\nThis creation function is useful for creating an observable that will create an error and error every\r\ntime it is subscribed to. Generally, inside of most operators when you might want to return an errored\r\nobservable, this is unnecessary. In most cases, such as in the inner return of {@link concatMap},\r\n{@link mergeMap}, {@link defer}, and many others, you can simply throw the error, and RxJS will pick\r\nthat up and notify the consumer of the error.\r\n\r\n## Example\r\n\r\nCreate a simple observable that will create a new error with a timestamp and log it\r\nand the message every time you subscribe to it\r\n\r\n```ts\r\nimport { throwError } from 'rxjs';\r\n\r\nlet errorCount = 0;\r\n\r\nconst errorWithTimestamp$ = throwError(() => {\r\n  const error: any = new Error(`This is error number ${ ++errorCount }`);\r\n  error.timestamp = Date.now();\r\n  return error;\r\n});\r\n\r\nerrorWithTimestamp$.subscribe({\r\n  error: err => console.log(err.timestamp, err.message)\r\n});\r\n\r\nerrorWithTimestamp$.subscribe({\r\n  error: err => console.log(err.timestamp, err.message)\r\n});\r\n\r\n// Logs the timestamp and a new error message for each subscription\r\n```\r\n\r\n### Unnecessary usage\r\n\r\nUsing `throwError` inside of an operator or creation function\r\nwith a callback, is usually not necessary\r\n\r\n```ts\r\nimport { of, concatMap, timer, throwError } from 'rxjs';\r\n\r\nconst delays$ = of(1000, 2000, Infinity, 3000);\r\n\r\ndelays$.pipe(\r\n  concatMap(ms => {\r\n    if (ms < 10000) {\r\n      return timer(ms);\r\n    } else {\r\n      // This is probably overkill.\r\n      return throwError(() => new Error(`Invalid time ${ ms }`));\r\n    }\r\n  })\r\n)\r\n.subscribe({\r\n  next: console.log,\r\n  error: console.error\r\n});\r\n```\r\n\r\nYou can just throw the error instead\r\n\r\n```ts\r\nimport { of, concatMap, timer } from 'rxjs';\r\n\r\nconst delays$ = of(1000, 2000, Infinity, 3000);\r\n\r\ndelays$.pipe(\r\n  concatMap(ms => {\r\n    if (ms < 10000) {\r\n      return timer(ms);\r\n    } else {\r\n      // Cleaner and easier to read for most folks.\r\n      throw new Error(`Invalid time ${ ms }`);\r\n    }\r\n  })\r\n)\r\n.subscribe({\r\n  next: console.log,\r\n  error: console.error\r\n});\r\n```\r\n","tags":[{"kind":25,"tagName":"param","text":"errorFactory A factory function that will create the error instance that is pushed."}]}],"hasDeclareKeyword":false,"parameters":[{"name":"errorFactory","type":"() => any","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<never>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"throwError","modulePath":"..\\src\\internal\\observable\\throwError.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[],"docs":[{"kind":24,"description":"\r\nReturns an observable that will error with the specified error immediately upon subscription.\r\n","tags":[{"kind":25,"tagName":"param","text":"error The error instance to emit"},{"kind":25,"tagName":"deprecated","text":"Support for passing an error value will be removed in v8. Instead, pass a factory function to `throwError(() => new Error('test'))`. This is\r\nbecause it will create the error at the moment it should be created and capture a more appropriate stack trace. If\r\nfor some reason you need to create the error ahead of time, you can still do that: `const err = new Error('test'); throwError(() => err);`."}]}],"hasDeclareKeyword":false,"parameters":[{"name":"error","type":"any","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<never>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"throwError","modulePath":"..\\src\\internal\\observable\\throwError.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[],"docs":[{"kind":24,"description":"\r\nNotifies the consumer of an error using a given scheduler by scheduling it at delay `0` upon subscription.\r\n","tags":[{"kind":25,"tagName":"param","text":"errorOrErrorFactory An error instance or error factory"},{"kind":25,"tagName":"param","text":"scheduler A scheduler to use to schedule the error notification"},{"kind":25,"tagName":"deprecated","text":"The `scheduler` parameter will be removed in v8.\r\nUse `throwError` in combination with {@link observeOn}: `throwError(() => new Error('test')).pipe(observeOn(scheduler));`.\r\nDetails: https://rxjs.dev/deprecations/scheduler-argument"}]}],"hasDeclareKeyword":false,"parameters":[{"name":"errorOrErrorFactory","type":"any","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"scheduler","type":"SchedulerLike","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<never>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"throwError","modulePath":"..\\src\\internal\\observable\\throwError.ts"}]}}},"usabilityResult":{"index":1}},"..\\src\\internal\\observable\\timer.ts":{"moduleComponents":{"timer":{"kind":13,"usabilityResult":{"wordCount":545,"index":1},"sources":{"name":"timer","statements":[{"isExported":false,"isDefaultExport":false,"hasDeclareKeyword":false,"docs":[],"kind":41,"declarationKind":"let","declarations":[{"name":"intervalDuration","initializer":"-1","hasExclamationToken":false,"kind":40}]},"if (intervalOrScheduler != null) {\r\n// If we have a second argument, and it's a scheduler,\r\n// override the scheduler we had defaulted. Otherwise,\r\n// it must be an interval.\r\nif (isScheduler(intervalOrScheduler)) {\r\n  scheduler = intervalOrScheduler;\r\n} else {\r\n  // Note that this *could* be negative, in which case\r\n  // it's like not passing an intervalDuration at all.\r\n  intervalDuration = intervalOrScheduler;\r\n}\r\n}","return new Observable((subscriber) => {\r\n    // If a valid date is passed, calculate how long to wait before\r\n    // executing the first value... otherwise, if it's a number just schedule\r\n    // that many milliseconds (or scheduler-specified unit size) in the future.\r\n    let due = isValidDate(dueTime) ? +dueTime - scheduler!.now() : dueTime;\r\n\r\n    if (due < 0) {\r\n      // Ensure we don't schedule in the future.\r\n      due = 0;\r\n    }\r\n\r\n    // The incrementing value we emit.\r\n    let n = 0;\r\n\r\n    // Start the timer.\r\n    return scheduler.schedule(function () {\r\n      if (!subscriber.closed) {\r\n        // Emit the next value and increment.\r\n        subscriber.next(n++);\r\n\r\n        if (0 <= intervalDuration) {\r\n          // If we have a interval after the initial timer,\r\n          // reschedule with the period.\r\n          this.schedule(undefined, intervalDuration);\r\n        } else {\r\n          // We didn't have an interval. So just complete.\r\n          subscriber.complete();\r\n        }\r\n      }\r\n    }, due);\r\n  });"],"parameters":[{"name":"dueTime","initializer":"0","type":"number | Date","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"intervalOrScheduler","type":"number | SchedulerLike","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"scheduler","initializer":"asyncScheduler","type":"SchedulerLike","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<number>","typeParameters":[],"docs":[],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[{"isExported":true,"isDefaultExport":false,"typeParameters":[],"docs":[{"kind":24,"description":"\r\nCreates an observable that will wait for a specified time period, or exact date, before\r\nemitting the number 0.\r\n\r\n<span class=\"informal\">Used to emit a notification after a delay.</span>\r\n\r\nThis observable is useful for creating delays in code, or racing against other values\r\nfor ad-hoc timeouts.\r\n\r\nThe `delay` is specified by default in milliseconds, however providing a custom scheduler could\r\ncreate a different behavior.\r\n\r\n## Examples\r\n\r\nWait 3 seconds and start another observable\r\n\r\nYou might want to use `timer` to delay subscription to an\r\nobservable by a set amount of time. Here we use a timer with\r\n{@link concatMapTo} or {@link concatMap} in order to wait\r\na few seconds and start a subscription to a source.\r\n\r\n```ts\r\nimport { of, timer, concatMap } from 'rxjs';\r\n\r\n// This could be any observable\r\nconst source = of(1, 2, 3);\r\n\r\ntimer(3000)\r\n  .pipe(concatMap(() => source))\r\n  .subscribe(console.log);\r\n```\r\n\r\nTake all values until the start of the next minute\r\n\r\nUsing a `Date` as the trigger for the first emission, you can\r\ndo things like wait until midnight to fire an event, or in this case,\r\nwait until a new minute starts (chosen so the example wouldn't take\r\ntoo long to run) in order to stop watching a stream. Leveraging\r\n{@link takeUntil}.\r\n\r\n```ts\r\nimport { interval, takeUntil, timer } from 'rxjs';\r\n\r\n// Build a Date object that marks the\r\n// next minute.\r\nconst currentDate = new Date();\r\nconst startOfNextMinute = new Date(\r\n  currentDate.getFullYear(),\r\n  currentDate.getMonth(),\r\n  currentDate.getDate(),\r\n  currentDate.getHours(),\r\n  currentDate.getMinutes() + 1\r\n);\r\n\r\n// This could be any observable stream\r\nconst source = interval(1000);\r\n\r\nconst result = source.pipe(\r\n  takeUntil(timer(startOfNextMinute))\r\n);\r\n\r\nresult.subscribe(console.log);\r\n```\r\n\r\n### Known Limitations\r\n\r\n- The {@link asyncScheduler} uses `setTimeout` which has limitations for how far in the future it can be scheduled.\r\n\r\n- If a `scheduler` is provided that returns a timestamp other than an epoch from `now()`, and\r\na `Date` object is passed to the `dueTime` argument, the calculation for when the first emission\r\nshould occur will be incorrect. In this case, it would be best to do your own calculations\r\nahead of time, and pass a `number` in as the `dueTime`.\r\n","tags":[{"kind":25,"tagName":"param","text":"due If a `number`, the amount of time in milliseconds to wait before emitting.\r\nIf a `Date`, the exact time at which to emit."},{"kind":25,"tagName":"param","text":"scheduler The scheduler to use to schedule the delay. Defaults to {@link asyncScheduler}."}]}],"hasDeclareKeyword":false,"parameters":[{"name":"due","type":"number | Date","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"scheduler","type":"SchedulerLike","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<0>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"timer","modulePath":"..\\src\\internal\\observable\\timer.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[],"docs":[{"kind":24,"description":"\r\nCreates an observable that starts an interval after a specified delay, emitting incrementing numbers -- starting at `0` --\r\non each interval after words.\r\n\r\nThe `delay` and `intervalDuration` are specified by default in milliseconds, however providing a custom scheduler could\r\ncreate a different behavior.\r\n\r\n## Example\r\n\r\n### Start an interval that starts right away\r\n\r\nSince {@link interval} waits for the passed delay before starting,\r\nsometimes that's not ideal. You may want to start an interval immediately.\r\n`timer` works well for this. Here we have both side-by-side so you can\r\nsee them in comparison.\r\n\r\nNote that this observable will never complete.\r\n\r\n```ts\r\nimport { timer, interval } from 'rxjs';\r\n\r\ntimer(0, 1000).subscribe(n => console.log('timer', n));\r\ninterval(1000).subscribe(n => console.log('interval', n));\r\n```\r\n\r\n### Known Limitations\r\n\r\n- The {@link asyncScheduler} uses `setTimeout` which has limitations for how far in the future it can be scheduled.\r\n\r\n- If a `scheduler` is provided that returns a timestamp other than an epoch from `now()`, and\r\na `Date` object is passed to the `dueTime` argument, the calculation for when the first emission\r\nshould occur will be incorrect. In this case, it would be best to do your own calculations\r\nahead of time, and pass a `number` in as the `startDue`.","tags":[{"kind":25,"tagName":"param","text":"startDue If a `number`, is the time to wait before starting the interval.\r\nIf a `Date`, is the exact time at which to start the interval."},{"kind":25,"tagName":"param","text":"intervalDuration The delay between each value emitted in the interval. Passing a\r\nnegative number here will result in immediate completion after the first value is emitted, as though\r\nno `intervalDuration` was passed at all."},{"kind":25,"tagName":"param","text":"scheduler The scheduler to use to schedule the delay. Defaults to {@link asyncScheduler}."}]}],"hasDeclareKeyword":false,"parameters":[{"name":"startDue","type":"number | Date","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"intervalDuration","type":"number","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"scheduler","type":"SchedulerLike","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<number>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"timer","modulePath":"..\\src\\internal\\observable\\timer.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"The signature allowing `undefined` to be passed for `intervalDuration` will be removed in v8. Use the `timer(dueTime, scheduler?)` signature instead."}]}],"hasDeclareKeyword":false,"parameters":[{"name":"dueTime","type":"number | Date","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"unused","type":"undefined","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"scheduler","type":"SchedulerLike","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<0>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"timer","modulePath":"..\\src\\internal\\observable\\timer.ts"}]}}},"usabilityResult":{"index":1}},"..\\src\\internal\\observable\\using.ts":{"moduleComponents":{"using":{"kind":13,"usabilityResult":{"wordCount":232,"index":1},"sources":{"name":"using","statements":["return new Observable<ObservedValueOf<T>>((subscriber) => {\r\nconst resource = resourceFactory();\r\nconst result = observableFactory(resource);\r\nconst source = result ? innerFrom(result) : EMPTY;\r\nsource.subscribe(subscriber);\r\nreturn () => {\r\n  // NOTE: Optional chaining did not work here.\r\n  // Related TS Issue: https://github.com/microsoft/TypeScript/issues/40818\r\n  if (resource) {\r\n    resource.unsubscribe();\r\n  }\r\n};\r\n});"],"parameters":[{"name":"resourceFactory","type":"() => Unsubscribable | void","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"observableFactory","type":"(resource: Unsubscribable | void) => T | void","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<ObservedValueOf<T>>","typeParameters":[{"name":"T","kind":39,"isConst":false,"constraint":"ObservableInput<any>","variance":0}],"docs":[{"kind":24,"description":"\r\nCreates an Observable that uses a resource which will be disposed at the same time as the Observable.\r\n\r\n<span class=\"informal\">Use it when you catch yourself cleaning up after an Observable.</span>\r\n\r\n`using` is a factory operator, which accepts two functions. First function returns a disposable resource.\r\nIt can be an arbitrary object that implements `unsubscribe` method. Second function will be injected with\r\nthat object and should return an Observable. That Observable can use resource object during its execution.\r\nBoth functions passed to `using` will be called every time someone subscribes - neither an Observable nor\r\nresource object will be shared in any way between subscriptions.\r\n\r\nWhen Observable returned by `using` is subscribed, Observable returned from the second function will be subscribed\r\nas well. All its notifications (nexted values, completion and error events) will be emitted unchanged by the output\r\nObservable. If however someone unsubscribes from the Observable or source Observable completes or errors by itself,\r\nthe `unsubscribe` method on resource object will be called. This can be used to do any necessary clean up, which\r\notherwise would have to be handled by hand. Note that complete or error notifications are not emitted when someone\r\ncancels subscription to an Observable via `unsubscribe`, so `using` can be used as a hook, allowing you to make\r\nsure that all resources which need to exist during an Observable execution will be disposed at appropriate time.\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link defer}"},{"kind":25,"tagName":"param","text":"{function(): ISubscription} resourceFactory A function which creates any resource object\r\nthat implements `unsubscribe` method."},{"kind":25,"tagName":"param","text":"{function(resource: ISubscription): Observable<T>} observableFactory A function which\r\ncreates an Observable, that can use injected resource object."},{"kind":25,"tagName":"return","text":"{Observable<T>} An Observable that behaves the same as Observable returned by `observableFactory`, but\r\nwhich - when completed, errored or unsubscribed - will also call `unsubscribe` on created resource object."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[],"functionName":"using","modulePath":"..\\src\\internal\\observable\\using.ts"}}},"usabilityResult":{"index":1}},"..\\src\\internal\\observable\\zip.ts":{"moduleComponents":{"zip":{"kind":13,"usabilityResult":{"wordCount":120,"index":1},"sources":{"name":"zip","statements":[{"isExported":false,"isDefaultExport":false,"hasDeclareKeyword":false,"docs":[],"kind":41,"declarationKind":"const","declarations":[{"name":"resultSelector","initializer":"popResultSelector(args)","hasExclamationToken":false,"kind":40}]},{"isExported":false,"isDefaultExport":false,"hasDeclareKeyword":false,"docs":[],"kind":41,"declarationKind":"const","declarations":[{"name":"sources","initializer":"argsOrArgArray(args) as Observable<unknown>[]","hasExclamationToken":false,"kind":40}]},"return sources.length\r\n    ? new Observable<unknown[]>((subscriber) => {\r\n        // A collection of buffers of values from each source.\r\n        // Keyed by the same index with which the sources were passed in.\r\n        let buffers: unknown[][] = sources.map(() => []);\r\n\r\n        // An array of flags of whether or not the sources have completed.\r\n        // This is used to check to see if we should complete the result.\r\n        // Keyed by the same index with which the sources were passed in.\r\n        let completed = sources.map(() => false);\r\n\r\n        // When everything is done, release the arrays above.\r\n        subscriber.add(() => {\r\n          buffers = completed = null!;\r\n        });\r\n\r\n        // Loop over our sources and subscribe to each one. The index `i` is\r\n        // especially important here, because we use it in closures below to\r\n        // access the related buffers and completion properties\r\n        for (let sourceIndex = 0; !subscriber.closed && sourceIndex < sources.length; sourceIndex++) {\r\n          innerFrom(sources[sourceIndex]).subscribe(\r\n            createOperatorSubscriber(\r\n              subscriber,\r\n              (value) => {\r\n                buffers[sourceIndex].push(value);\r\n                // if every buffer has at least one value in it, then we\r\n                // can shift out the oldest value from each buffer and emit\r\n                // them as an array.\r\n                if (buffers.every((buffer) => buffer.length)) {\r\n                  const result: any = buffers.map((buffer) => buffer.shift()!);\r\n                  // Emit the array. If theres' a result selector, use that.\r\n                  subscriber.next(resultSelector ? resultSelector(...result) : result);\r\n                  // If any one of the sources is both complete and has an empty buffer\r\n                  // then we complete the result. This is because we cannot possibly have\r\n                  // any more values to zip together.\r\n                  if (buffers.some((buffer, i) => !buffer.length && completed[i])) {\r\n                    subscriber.complete();\r\n                  }\r\n                }\r\n              },\r\n              () => {\r\n                // This source completed. Mark it as complete so we can check it later\r\n                // if we have to.\r\n                completed[sourceIndex] = true;\r\n                // But, if this complete source has nothing in its buffer, then we\r\n                // can complete the result, because we can't possibly have any more\r\n                // values from this to zip together with the other values.\r\n                !buffers[sourceIndex].length && subscriber.complete();\r\n              }\r\n            )\r\n          );\r\n        }\r\n\r\n        // When everything is done, release the arrays above.\r\n        return () => {\r\n          buffers = completed = null!;\r\n        };\r\n      })\r\n    : EMPTY;"],"parameters":[{"name":"args","type":"unknown[]","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":true}],"returnType":"Observable<unknown>","typeParameters":[],"docs":[{"kind":24,"description":"\r\nCombines multiple Observables to create an Observable whose values are calculated from the values, in order, of each\r\nof its input Observables.\r\n\r\nIf the last parameter is a function, this function is used to compute the created value from the input values.\r\nOtherwise, an array of the input values is returned.\r\n\r\n## Example\r\n\r\nCombine age and name from different sources\r\n\r\n```ts\r\nimport { of, zip, map } from 'rxjs';\r\n\r\nconst age$ = of(27, 25, 29);\r\nconst name$ = of('Foo', 'Bar', 'Beer');\r\nconst isDev$ = of(true, true, false);\r\n\r\nzip(age$, name$, isDev$).pipe(\r\n  map(([age, name, isDev]) => ({ age, name, isDev }))\r\n)\r\n.subscribe(x => console.log(x));\r\n\r\n// Outputs\r\n// { age: 27, name: 'Foo', isDev: true }\r\n// { age: 25, name: 'Bar', isDev: true }\r\n// { age: 29, name: 'Beer', isDev: false }\r\n```\r\n","tags":[{"kind":25,"tagName":"param","text":"sources"},{"kind":25,"tagName":"return","text":"{Observable<R>}"}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"A","kind":39,"isConst":false,"constraint":"readonly unknown[]","variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"sources","type":"[...ObservableInputTuple<A>]","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<A>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"zip","modulePath":"..\\src\\internal\\observable\\zip.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"A","kind":39,"isConst":false,"constraint":"readonly unknown[]","variance":0},{"name":"R","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"sources","type":"[...ObservableInputTuple<A>]","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"resultSelector","type":"(...values: A) => R","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<R>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"zip","modulePath":"..\\src\\internal\\observable\\zip.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"A","kind":39,"isConst":false,"constraint":"readonly unknown[]","variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"sources","type":"[...ObservableInputTuple<A>]","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":true}],"returnType":"Observable<A>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"zip","modulePath":"..\\src\\internal\\observable\\zip.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"A","kind":39,"isConst":false,"constraint":"readonly unknown[]","variance":0},{"name":"R","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"sourcesAndResultSelector","type":"[...ObservableInputTuple<A>, (...values: A) => R]","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":true}],"returnType":"Observable<R>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"zip","modulePath":"..\\src\\internal\\observable\\zip.ts"}]}}},"usabilityResult":{"index":1}},"..\\src\\internal\\scheduled\\scheduled.ts":{"moduleComponents":{"scheduled":{"kind":13,"usabilityResult":{"wordCount":20,"index":0.4},"sources":{"name":"scheduled","statements":["if (input != null) {\r\nif (isInteropObservable(input)) {\r\n  return scheduleObservable(input, scheduler);\r\n}\r\nif (isArrayLike(input)) {\r\n  return scheduleArray(input, scheduler);\r\n}\r\nif (isPromise(input)) {\r\n  return schedulePromise(input, scheduler);\r\n}\r\nif (isAsyncIterable(input)) {\r\n  return scheduleAsyncIterable(input, scheduler);\r\n}\r\nif (isIterable(input)) {\r\n  return scheduleIterable(input, scheduler);\r\n}\r\nif (isReadableStreamLike(input)) {\r\n  return scheduleReadableStreamLike(input, scheduler);\r\n}\r\n}","throw createInvalidObservableTypeError(input);"],"parameters":[{"name":"input","type":"ObservableInput<T>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"scheduler","type":"SchedulerLike","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<T>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nConverts from a common {@link ObservableInput} type to an observable where subscription and emissions\r\nare scheduled on the provided scheduler.\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link from}"},{"kind":25,"tagName":"see","text":"{@link of}"},{"kind":25,"tagName":"param","text":"input The observable, array, promise, iterable, etc you would like to schedule"},{"kind":25,"tagName":"param","text":"scheduler The scheduler to use to schedule the subscription and emissions from\r\nthe returned observable."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[],"functionName":"scheduled","modulePath":"..\\src\\internal\\scheduled\\scheduled.ts"}}},"usabilityResult":{"index":0.4}},"..\\src\\internal\\operators\\audit.ts":{"moduleComponents":{"audit":{"kind":13,"usabilityResult":{"wordCount":198,"index":1},"sources":{"name":"audit","statements":["return operate((source, subscriber) => {\r\n    let hasValue = false;\r\n    let lastValue: T | null = null;\r\n    let durationSubscriber: Subscriber<any> | null = null;\r\n    let isComplete = false;\r\n\r\n    const endDuration = () => {\r\n      durationSubscriber?.unsubscribe();\r\n      durationSubscriber = null;\r\n      if (hasValue) {\r\n        hasValue = false;\r\n        const value = lastValue!;\r\n        lastValue = null;\r\n        subscriber.next(value);\r\n      }\r\n      isComplete && subscriber.complete();\r\n    };\r\n\r\n    const cleanupDuration = () => {\r\n      durationSubscriber = null;\r\n      isComplete && subscriber.complete();\r\n    };\r\n\r\n    source.subscribe(\r\n      createOperatorSubscriber(\r\n        subscriber,\r\n        (value) => {\r\n          hasValue = true;\r\n          lastValue = value;\r\n          if (!durationSubscriber) {\r\n            innerFrom(durationSelector(value)).subscribe(\r\n              (durationSubscriber = createOperatorSubscriber(subscriber, endDuration, cleanupDuration))\r\n            );\r\n          }\r\n        },\r\n        () => {\r\n          isComplete = true;\r\n          (!hasValue || !durationSubscriber || durationSubscriber.closed) && subscriber.complete();\r\n        }\r\n      )\r\n    );\r\n  });"],"parameters":[{"name":"durationSelector","type":"(value: T) => ObservableInput<any>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"MonoTypeOperatorFunction<T>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nIgnores source values for a duration determined by another Observable, then\r\nemits the most recent value from the source Observable, then repeats this\r\nprocess.\r\n\r\n<span class=\"informal\">It's like {@link auditTime}, but the silencing\r\nduration is determined by a second Observable.</span>\r\n\r\n![](audit.svg)\r\n\r\n`audit` is similar to `throttle`, but emits the last value from the silenced\r\ntime window, instead of the first value. `audit` emits the most recent value\r\nfrom the source Observable on the output Observable as soon as its internal\r\ntimer becomes disabled, and ignores source values while the timer is enabled.\r\nInitially, the timer is disabled. As soon as the first source value arrives,\r\nthe timer is enabled by calling the `durationSelector` function with the\r\nsource value, which returns the \"duration\" Observable. When the duration\r\nObservable emits a value, the timer is disabled, then the most\r\nrecent source value is emitted on the output Observable, and this process\r\nrepeats for the next source value.\r\n\r\n## Example\r\n\r\nEmit clicks at a rate of at most one click per second\r\n\r\n```ts\r\nimport { fromEvent, audit, interval } from 'rxjs';\r\n\r\nconst clicks = fromEvent(document, 'click');\r\nconst result = clicks.pipe(audit(ev => interval(1000)));\r\nresult.subscribe(x => console.log(x));\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link auditTime}"},{"kind":25,"tagName":"see","text":"{@link debounce}"},{"kind":25,"tagName":"see","text":"{@link delayWhen}"},{"kind":25,"tagName":"see","text":"{@link sample}"},{"kind":25,"tagName":"see","text":"{@link throttle}"},{"kind":25,"tagName":"param","text":"durationSelector A function\r\nthat receives a value from the source Observable, for computing the silencing\r\nduration, returned as an Observable or a Promise."},{"kind":25,"tagName":"return","text":"A function that returns an Observable that performs rate-limiting of\r\nemissions from the source Observable."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[],"functionName":"audit","modulePath":"..\\src\\internal\\operators\\audit.ts"}}},"usabilityResult":{"index":1}},"..\\src\\internal\\operators\\auditTime.ts":{"moduleComponents":{"auditTime":{"kind":13,"usabilityResult":{"wordCount":205,"index":1},"sources":{"name":"auditTime","statements":["return audit(() => timer(duration, scheduler));"],"parameters":[{"name":"duration","type":"number","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"scheduler","initializer":"asyncScheduler","type":"SchedulerLike","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"MonoTypeOperatorFunction<T>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nIgnores source values for `duration` milliseconds, then emits the most recent\r\nvalue from the source Observable, then repeats this process.\r\n\r\n<span class=\"informal\">When it sees a source value, it ignores that plus\r\nthe next ones for `duration` milliseconds, and then it emits the most recent\r\nvalue from the source.</span>\r\n\r\n![](auditTime.png)\r\n\r\n`auditTime` is similar to `throttleTime`, but emits the last value from the\r\nsilenced time window, instead of the first value. `auditTime` emits the most\r\nrecent value from the source Observable on the output Observable as soon as\r\nits internal timer becomes disabled, and ignores source values while the\r\ntimer is enabled. Initially, the timer is disabled. As soon as the first\r\nsource value arrives, the timer is enabled. After `duration` milliseconds (or\r\nthe time unit determined internally by the optional `scheduler`) has passed,\r\nthe timer is disabled, then the most recent source value is emitted on the\r\noutput Observable, and this process repeats for the next source value.\r\nOptionally takes a {@link SchedulerLike} for managing timers.\r\n\r\n## Example\r\n\r\nEmit clicks at a rate of at most one click per second\r\n\r\n```ts\r\nimport { fromEvent, auditTime } from 'rxjs';\r\n\r\nconst clicks = fromEvent(document, 'click');\r\nconst result = clicks.pipe(auditTime(1000));\r\nresult.subscribe(x => console.log(x));\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link audit}"},{"kind":25,"tagName":"see","text":"{@link debounceTime}"},{"kind":25,"tagName":"see","text":"{@link delay}"},{"kind":25,"tagName":"see","text":"{@link sampleTime}"},{"kind":25,"tagName":"see","text":"{@link throttleTime}"},{"kind":25,"tagName":"param","text":"{number} duration Time to wait before emitting the most recent source\r\nvalue, measured in milliseconds or the time unit determined internally\r\nby the optional `scheduler`."},{"kind":25,"tagName":"param","text":"{SchedulerLike} [scheduler=async] The {@link SchedulerLike} to use for\r\nmanaging the timers that handle the rate-limiting behavior."},{"kind":25,"tagName":"return","text":"A function that returns an Observable that performs rate-limiting of\r\nemissions from the source Observable."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[],"functionName":"auditTime","modulePath":"..\\src\\internal\\operators\\auditTime.ts"}}},"usabilityResult":{"index":1}},"..\\src\\internal\\operators\\buffer.ts":{"moduleComponents":{"buffer":{"kind":13,"usabilityResult":{"wordCount":113,"index":1},"sources":{"name":"buffer","statements":["return operate((source, subscriber) => {\r\n    // The current buffered values.\r\n    let currentBuffer: T[] = [];\r\n\r\n    // Subscribe to our source.\r\n    source.subscribe(\r\n      createOperatorSubscriber(\r\n        subscriber,\r\n        (value) => currentBuffer.push(value),\r\n        () => {\r\n          subscriber.next(currentBuffer);\r\n          subscriber.complete();\r\n        }\r\n      )\r\n    );\r\n\r\n    // Subscribe to the closing notifier.\r\n    innerFrom(closingNotifier).subscribe(\r\n      createOperatorSubscriber(\r\n        subscriber,\r\n        () => {\r\n          // Start a new buffer and emit the previous one.\r\n          const b = currentBuffer;\r\n          currentBuffer = [];\r\n          subscriber.next(b);\r\n        },\r\n        noop\r\n      )\r\n    );\r\n\r\n    return () => {\r\n      // Ensure buffered values are released on finalization.\r\n      currentBuffer = null!;\r\n    };\r\n  });"],"parameters":[{"name":"closingNotifier","type":"ObservableInput<any>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, T[]>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nBuffers the source Observable values until `closingNotifier` emits.\r\n\r\n<span class=\"informal\">Collects values from the past as an array, and emits\r\nthat array only when another Observable emits.</span>\r\n\r\n![](buffer.png)\r\n\r\nBuffers the incoming Observable values until the given `closingNotifier`\r\n`ObservableInput` (that internally gets converted to an Observable)\r\nemits a value, at which point it emits the buffer on the output\r\nObservable and starts a new buffer internally, awaiting the next time\r\n`closingNotifier` emits.\r\n\r\n## Example\r\n\r\nOn every click, emit array of most recent interval events\r\n\r\n```ts\r\nimport { fromEvent, interval, buffer } from 'rxjs';\r\n\r\nconst clicks = fromEvent(document, 'click');\r\nconst intervalEvents = interval(1000);\r\nconst buffered = intervalEvents.pipe(buffer(clicks));\r\nbuffered.subscribe(x => console.log(x));\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link bufferCount}"},{"kind":25,"tagName":"see","text":"{@link bufferTime}"},{"kind":25,"tagName":"see","text":"{@link bufferToggle}"},{"kind":25,"tagName":"see","text":"{@link bufferWhen}"},{"kind":25,"tagName":"see","text":"{@link window}"},{"kind":25,"tagName":"param","text":"closingNotifier An `ObservableInput` that signals the\r\nbuffer to be emitted on the output Observable."},{"kind":25,"tagName":"return","text":"A function that returns an Observable of buffers, which are arrays\r\nof values."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[],"functionName":"buffer","modulePath":"..\\src\\internal\\operators\\buffer.ts"}}},"usabilityResult":{"index":1}},"..\\src\\internal\\operators\\bufferCount.ts":{"moduleComponents":{"bufferCount":{"kind":13,"usabilityResult":{"wordCount":160,"index":1},"sources":{"name":"bufferCount","statements":["startBufferEvery = startBufferEvery ?? bufferSize;","return operate((source, subscriber) => {\r\n    let buffers: T[][] = [];\r\n    let count = 0;\r\n\r\n    source.subscribe(\r\n      createOperatorSubscriber(\r\n        subscriber,\r\n        (value) => {\r\n          let toEmit: T[][] | null = null;\r\n\r\n          // Check to see if we need to start a buffer.\r\n          // This will start one at the first value, and then\r\n          // a new one every N after that.\r\n          if (count++ % startBufferEvery! === 0) {\r\n            buffers.push([]);\r\n          }\r\n\r\n          // Push our value into our active buffers.\r\n          for (const buffer of buffers) {\r\n            buffer.push(value);\r\n            // Check to see if we're over the bufferSize\r\n            // if we are, record it so we can emit it later.\r\n            // If we emitted it now and removed it, it would\r\n            // mutate the `buffers` array while we're looping\r\n            // over it.\r\n            if (bufferSize <= buffer.length) {\r\n              toEmit = toEmit ?? [];\r\n              toEmit.push(buffer);\r\n            }\r\n          }\r\n\r\n          if (toEmit) {\r\n            // We have found some buffers that are over the\r\n            // `bufferSize`. Emit them, and remove them from our\r\n            // buffers list.\r\n            for (const buffer of toEmit) {\r\n              arrRemove(buffers, buffer);\r\n              subscriber.next(buffer);\r\n            }\r\n          }\r\n        },\r\n        () => {\r\n          // When the source completes, emit all of our\r\n          // active buffers.\r\n          for (const buffer of buffers) {\r\n            subscriber.next(buffer);\r\n          }\r\n          subscriber.complete();\r\n        },\r\n        // Pass all errors through to consumer.\r\n        undefined,\r\n        () => {\r\n          // Clean up our memory when we finalize\r\n          buffers = null!;\r\n        }\r\n      )\r\n    );\r\n  });"],"parameters":[{"name":"bufferSize","type":"number","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"startBufferEvery","initializer":"null","type":"number | null","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, T[]>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nBuffers the source Observable values until the size hits the maximum\r\n`bufferSize` given.\r\n\r\n<span class=\"informal\">Collects values from the past as an array, and emits\r\nthat array only when its size reaches `bufferSize`.</span>\r\n\r\n![](bufferCount.png)\r\n\r\nBuffers a number of values from the source Observable by `bufferSize` then\r\nemits the buffer and clears it, and starts a new buffer each\r\n`startBufferEvery` values. If `startBufferEvery` is not provided or is\r\n`null`, then new buffers are started immediately at the start of the source\r\nand when each buffer closes and is emitted.\r\n\r\n## Examples\r\n\r\nEmit the last two click events as an array\r\n\r\n```ts\r\nimport { fromEvent, bufferCount } from 'rxjs';\r\n\r\nconst clicks = fromEvent(document, 'click');\r\nconst buffered = clicks.pipe(bufferCount(2));\r\nbuffered.subscribe(x => console.log(x));\r\n```\r\n\r\nOn every click, emit the last two click events as an array\r\n\r\n```ts\r\nimport { fromEvent, bufferCount } from 'rxjs';\r\n\r\nconst clicks = fromEvent(document, 'click');\r\nconst buffered = clicks.pipe(bufferCount(2, 1));\r\nbuffered.subscribe(x => console.log(x));\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link buffer}"},{"kind":25,"tagName":"see","text":"{@link bufferTime}"},{"kind":25,"tagName":"see","text":"{@link bufferToggle}"},{"kind":25,"tagName":"see","text":"{@link bufferWhen}"},{"kind":25,"tagName":"see","text":"{@link pairwise}"},{"kind":25,"tagName":"see","text":"{@link windowCount}"},{"kind":25,"tagName":"param","text":"{number} bufferSize The maximum size of the buffer emitted."},{"kind":25,"tagName":"param","text":"{number} [startBufferEvery] Interval at which to start a new buffer.\r\nFor example if `startBufferEvery` is `2`, then a new buffer will be started\r\non every other value from the source. A new buffer is started at the\r\nbeginning of the source by default."},{"kind":25,"tagName":"return","text":"A function that returns an Observable of arrays of buffered values."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[],"functionName":"bufferCount","modulePath":"..\\src\\internal\\operators\\bufferCount.ts"}}},"usabilityResult":{"index":1}},"..\\src\\internal\\operators\\bufferTime.ts":{"moduleComponents":{"bufferTime":{"kind":13,"usabilityResult":{"wordCount":172,"index":1},"sources":{"name":"bufferTime","statements":[{"isExported":false,"isDefaultExport":false,"hasDeclareKeyword":false,"docs":[],"kind":41,"declarationKind":"const","declarations":[{"name":"scheduler","initializer":"popScheduler(otherArgs) ?? asyncScheduler","hasExclamationToken":false,"kind":40}]},{"isExported":false,"isDefaultExport":false,"hasDeclareKeyword":false,"docs":[],"kind":41,"declarationKind":"const","declarations":[{"name":"bufferCreationInterval","initializer":"(otherArgs[0] as number) ?? null","hasExclamationToken":false,"kind":40}]},{"isExported":false,"isDefaultExport":false,"hasDeclareKeyword":false,"docs":[],"kind":41,"declarationKind":"const","declarations":[{"name":"maxBufferSize","initializer":"(otherArgs[1] as number) || Infinity","hasExclamationToken":false,"kind":40}]},"return operate((source, subscriber) => {\r\n    // The active buffers, their related subscriptions, and removal functions.\r\n    let bufferRecords: { buffer: T[]; subs: Subscription }[] | null = [];\r\n    // If true, it means that every time we emit a buffer, we want to start a new buffer\r\n    // this is only really used for when *just* the buffer time span is passed.\r\n    let restartOnEmit = false;\r\n\r\n    /**\r\n     * Does the work of emitting the buffer from the record, ensuring that the\r\n     * record is removed before the emission so reentrant code (from some custom scheduling, perhaps)\r\n     * does not alter the buffer. Also checks to see if a new buffer needs to be started\r\n     * after the emit.\r\n     */\r\n    const emit = (record: { buffer: T[]; subs: Subscription }) => {\r\n      const { buffer, subs } = record;\r\n      subs.unsubscribe();\r\n      arrRemove(bufferRecords, record);\r\n      subscriber.next(buffer);\r\n      restartOnEmit && startBuffer();\r\n    };\r\n\r\n    /**\r\n     * Called every time we start a new buffer. This does\r\n     * the work of scheduling a job at the requested bufferTimeSpan\r\n     * that will emit the buffer (if it's not unsubscribed before then).\r\n     */\r\n    const startBuffer = () => {\r\n      if (bufferRecords) {\r\n        const subs = new Subscription();\r\n        subscriber.add(subs);\r\n        const buffer: T[] = [];\r\n        const record = {\r\n          buffer,\r\n          subs,\r\n        };\r\n        bufferRecords.push(record);\r\n        executeSchedule(subs, scheduler, () => emit(record), bufferTimeSpan);\r\n      }\r\n    };\r\n\r\n    if (bufferCreationInterval !== null && bufferCreationInterval >= 0) {\r\n      // The user passed both a bufferTimeSpan (required), and a creation interval\r\n      // That means we need to start new buffers on the interval, and those buffers need\r\n      // to wait the required time span before emitting.\r\n      executeSchedule(subscriber, scheduler, startBuffer, bufferCreationInterval, true);\r\n    } else {\r\n      restartOnEmit = true;\r\n    }\r\n\r\n    startBuffer();\r\n\r\n    const bufferTimeSubscriber = createOperatorSubscriber(\r\n      subscriber,\r\n      (value: T) => {\r\n        // Copy the records, so if we need to remove one we\r\n        // don't mutate the array. It's hard, but not impossible to\r\n        // set up a buffer time that could mutate the array and\r\n        // cause issues here.\r\n        const recordsCopy = bufferRecords!.slice();\r\n        for (const record of recordsCopy) {\r\n          // Loop over all buffers and\r\n          const { buffer } = record;\r\n          buffer.push(value);\r\n          // If the buffer is over the max size, we need to emit it.\r\n          maxBufferSize <= buffer.length && emit(record);\r\n        }\r\n      },\r\n      () => {\r\n        // The source completed, emit all of the active\r\n        // buffers we have before we complete.\r\n        while (bufferRecords?.length) {\r\n          subscriber.next(bufferRecords.shift()!.buffer);\r\n        }\r\n        bufferTimeSubscriber?.unsubscribe();\r\n        subscriber.complete();\r\n        subscriber.unsubscribe();\r\n      },\r\n      // Pass all errors through to consumer.\r\n      undefined,\r\n      // Clean up\r\n      () => (bufferRecords = null)\r\n    );\r\n\r\n    source.subscribe(bufferTimeSubscriber);\r\n  });"],"parameters":[{"name":"bufferTimeSpan","type":"number","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"otherArgs","type":"any[]","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":true}],"returnType":"OperatorFunction<T, T[]>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nBuffers the source Observable values for a specific time period.\r\n\r\n<span class=\"informal\">Collects values from the past as an array, and emits\r\nthose arrays periodically in time.</span>\r\n\r\n![](bufferTime.png)\r\n\r\nBuffers values from the source for a specific time duration `bufferTimeSpan`.\r\nUnless the optional argument `bufferCreationInterval` is given, it emits and\r\nresets the buffer every `bufferTimeSpan` milliseconds. If\r\n`bufferCreationInterval` is given, this operator opens the buffer every\r\n`bufferCreationInterval` milliseconds and closes (emits and resets) the\r\nbuffer every `bufferTimeSpan` milliseconds. When the optional argument\r\n`maxBufferSize` is specified, the buffer will be closed either after\r\n`bufferTimeSpan` milliseconds or when it contains `maxBufferSize` elements.\r\n\r\n## Examples\r\n\r\nEvery second, emit an array of the recent click events\r\n\r\n```ts\r\nimport { fromEvent, bufferTime } from 'rxjs';\r\n\r\nconst clicks = fromEvent(document, 'click');\r\nconst buffered = clicks.pipe(bufferTime(1000));\r\nbuffered.subscribe(x => console.log(x));\r\n```\r\n\r\nEvery 5 seconds, emit the click events from the next 2 seconds\r\n\r\n```ts\r\nimport { fromEvent, bufferTime } from 'rxjs';\r\n\r\nconst clicks = fromEvent(document, 'click');\r\nconst buffered = clicks.pipe(bufferTime(2000, 5000));\r\nbuffered.subscribe(x => console.log(x));\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link buffer}"},{"kind":25,"tagName":"see","text":"{@link bufferCount}"},{"kind":25,"tagName":"see","text":"{@link bufferToggle}"},{"kind":25,"tagName":"see","text":"{@link bufferWhen}"},{"kind":25,"tagName":"see","text":"{@link windowTime}"},{"kind":25,"tagName":"param","text":"{number} bufferTimeSpan The amount of time to fill each buffer array."},{"kind":25,"tagName":"param","text":"{number} [bufferCreationInterval] The interval at which to start new\r\nbuffers."},{"kind":25,"tagName":"param","text":"{number} [maxBufferSize] The maximum buffer size."},{"kind":25,"tagName":"param","text":"{SchedulerLike} [scheduler=async] The scheduler on which to schedule the\r\nintervals that determine buffer boundaries."},{"kind":25,"tagName":"return","text":"A function that returns an Observable of arrays of buffered values."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"bufferTimeSpan","type":"number","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"scheduler","type":"SchedulerLike","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, T[]>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"bufferTime","modulePath":"..\\src\\internal\\operators\\bufferTime.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"bufferTimeSpan","type":"number","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"bufferCreationInterval","type":"number | null | undefined","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"scheduler","type":"SchedulerLike","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, T[]>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"bufferTime","modulePath":"..\\src\\internal\\operators\\bufferTime.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"bufferTimeSpan","type":"number","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"bufferCreationInterval","type":"number | null | undefined","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"maxBufferSize","type":"number","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"scheduler","type":"SchedulerLike","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, T[]>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"bufferTime","modulePath":"..\\src\\internal\\operators\\bufferTime.ts"}]}}},"usabilityResult":{"index":1}},"..\\src\\internal\\operators\\bufferToggle.ts":{"moduleComponents":{"bufferToggle":{"kind":13,"usabilityResult":{"wordCount":136,"index":1},"sources":{"name":"bufferToggle","statements":["return operate((source, subscriber) => {\r\n    const buffers: T[][] = [];\r\n\r\n    // Subscribe to the openings notifier first\r\n    innerFrom(openings).subscribe(\r\n      createOperatorSubscriber(\r\n        subscriber,\r\n        (openValue) => {\r\n          const buffer: T[] = [];\r\n          buffers.push(buffer);\r\n          // We use this composite subscription, so that\r\n          // when the closing notifier emits, we can tear it down.\r\n          const closingSubscription = new Subscription();\r\n\r\n          const emitBuffer = () => {\r\n            arrRemove(buffers, buffer);\r\n            subscriber.next(buffer);\r\n            closingSubscription.unsubscribe();\r\n          };\r\n\r\n          // The line below will add the subscription to the parent subscriber *and* the closing subscription.\r\n          closingSubscription.add(innerFrom(closingSelector(openValue)).subscribe(createOperatorSubscriber(subscriber, emitBuffer, noop)));\r\n        },\r\n        noop\r\n      )\r\n    );\r\n\r\n    source.subscribe(\r\n      createOperatorSubscriber(\r\n        subscriber,\r\n        (value) => {\r\n          // Value from our source. Add it to all pending buffers.\r\n          for (const buffer of buffers) {\r\n            buffer.push(value);\r\n          }\r\n        },\r\n        () => {\r\n          // Source complete. Emit all pending buffers.\r\n          while (buffers.length > 0) {\r\n            subscriber.next(buffers.shift()!);\r\n          }\r\n          subscriber.complete();\r\n        }\r\n      )\r\n    );\r\n  });"],"parameters":[{"name":"openings","type":"ObservableInput<O>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"closingSelector","type":"(value: O) => ObservableInput<any>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, T[]>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"O","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nBuffers the source Observable values starting from an emission from\r\n`openings` and ending when the output of `closingSelector` emits.\r\n\r\n<span class=\"informal\">Collects values from the past as an array. Starts\r\ncollecting only when `opening` emits, and calls the `closingSelector`\r\nfunction to get an Observable that tells when to close the buffer.</span>\r\n\r\n![](bufferToggle.png)\r\n\r\nBuffers values from the source by opening the buffer via signals from an\r\nObservable provided to `openings`, and closing and sending the buffers when\r\na Subscribable or Promise returned by the `closingSelector` function emits.\r\n\r\n## Example\r\n\r\nEvery other second, emit the click events from the next 500ms\r\n\r\n```ts\r\nimport { fromEvent, interval, bufferToggle, EMPTY } from 'rxjs';\r\n\r\nconst clicks = fromEvent(document, 'click');\r\nconst openings = interval(1000);\r\nconst buffered = clicks.pipe(bufferToggle(openings, i =>\r\n  i % 2 ? interval(500) : EMPTY\r\n));\r\nbuffered.subscribe(x => console.log(x));\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link buffer}"},{"kind":25,"tagName":"see","text":"{@link bufferCount}"},{"kind":25,"tagName":"see","text":"{@link bufferTime}"},{"kind":25,"tagName":"see","text":"{@link bufferWhen}"},{"kind":25,"tagName":"see","text":"{@link windowToggle}"},{"kind":25,"tagName":"param","text":"openings A Subscribable or Promise of notifications to start new\r\nbuffers."},{"kind":25,"tagName":"param","text":"closingSelector A function that takes\r\nthe value emitted by the `openings` observable and returns a Subscribable or Promise,\r\nwhich, when it emits, signals that the associated buffer should be emitted\r\nand cleared."},{"kind":25,"tagName":"return","text":"A function that returns an Observable of arrays of buffered values."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[],"functionName":"bufferToggle","modulePath":"..\\src\\internal\\operators\\bufferToggle.ts"}}},"usabilityResult":{"index":1}},"..\\src\\internal\\operators\\bufferWhen.ts":{"moduleComponents":{"bufferWhen":{"kind":13,"usabilityResult":{"wordCount":134,"index":1},"sources":{"name":"bufferWhen","statements":["return operate((source, subscriber) => {\r\n    // The buffer we keep and emit.\r\n    let buffer: T[] | null = null;\r\n    // A reference to the subscriber used to subscribe to\r\n    // the closing notifier. We need to hold this so we can\r\n    // end the subscription after the first notification.\r\n    let closingSubscriber: Subscriber<T> | null = null;\r\n\r\n    // Ends the previous closing notifier subscription, so it\r\n    // terminates after the first emission, then emits\r\n    // the current buffer  if there is one, starts a new buffer, and starts a\r\n    // new closing notifier.\r\n    const openBuffer = () => {\r\n      // Make sure to finalize the closing subscription, we only cared\r\n      // about one notification.\r\n      closingSubscriber?.unsubscribe();\r\n      // emit the buffer if we have one, and start a new buffer.\r\n      const b = buffer;\r\n      buffer = [];\r\n      b && subscriber.next(b);\r\n\r\n      // Get a new closing notifier and subscribe to it.\r\n      innerFrom(closingSelector()).subscribe((closingSubscriber = createOperatorSubscriber(subscriber, openBuffer, noop)));\r\n    };\r\n\r\n    // Start the first buffer.\r\n    openBuffer();\r\n\r\n    // Subscribe to our source.\r\n    source.subscribe(\r\n      createOperatorSubscriber(\r\n        subscriber,\r\n        // Add every new value to the current buffer.\r\n        (value) => buffer?.push(value),\r\n        // When we complete, emit the buffer if we have one,\r\n        // then complete the result.\r\n        () => {\r\n          buffer && subscriber.next(buffer);\r\n          subscriber.complete();\r\n        },\r\n        // Pass all errors through to consumer.\r\n        undefined,\r\n        // Release memory on finalization\r\n        () => (buffer = closingSubscriber = null!)\r\n      )\r\n    );\r\n  });"],"parameters":[{"name":"closingSelector","type":"() => ObservableInput<any>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, T[]>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nBuffers the source Observable values, using a factory function of closing\r\nObservables to determine when to close, emit, and reset the buffer.\r\n\r\n<span class=\"informal\">Collects values from the past as an array. When it\r\nstarts collecting values, it calls a function that returns an Observable that\r\ntells when to close the buffer and restart collecting.</span>\r\n\r\n![](bufferWhen.svg)\r\n\r\nOpens a buffer immediately, then closes the buffer when the observable\r\nreturned by calling `closingSelector` function emits a value. When it closes\r\nthe buffer, it immediately opens a new buffer and repeats the process.\r\n\r\n## Example\r\n\r\nEmit an array of the last clicks every [1-5] random seconds\r\n\r\n```ts\r\nimport { fromEvent, bufferWhen, interval } from 'rxjs';\r\n\r\nconst clicks = fromEvent(document, 'click');\r\nconst buffered = clicks.pipe(\r\n  bufferWhen(() => interval(1000 + Math.random() * 4000))\r\n);\r\nbuffered.subscribe(x => console.log(x));\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link buffer}"},{"kind":25,"tagName":"see","text":"{@link bufferCount}"},{"kind":25,"tagName":"see","text":"{@link bufferTime}"},{"kind":25,"tagName":"see","text":"{@link bufferToggle}"},{"kind":25,"tagName":"see","text":"{@link windowWhen}"},{"kind":25,"tagName":"param","text":"{function(): Observable} closingSelector A function that takes no\r\narguments and returns an Observable that signals buffer closure."},{"kind":25,"tagName":"return","text":"A function that returns an Observable of arrays of buffered values."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[],"functionName":"bufferWhen","modulePath":"..\\src\\internal\\operators\\bufferWhen.ts"}}},"usabilityResult":{"index":1}},"..\\src\\internal\\operators\\catchError.ts":{"moduleComponents":{"catchError":{"kind":13,"usabilityResult":{"wordCount":281,"index":1},"sources":{"name":"catchError","statements":["return operate((source, subscriber) => {\r\n    let innerSub: Subscription | null = null;\r\n    let syncUnsub = false;\r\n    let handledResult: Observable<ObservedValueOf<O>>;\r\n\r\n    innerSub = source.subscribe(\r\n      createOperatorSubscriber(subscriber, undefined, undefined, (err) => {\r\n        handledResult = innerFrom(selector(err, catchError(selector)(source)));\r\n        if (innerSub) {\r\n          innerSub.unsubscribe();\r\n          innerSub = null;\r\n          handledResult.subscribe(subscriber);\r\n        } else {\r\n          // We don't have an innerSub yet, that means the error was synchronous\r\n          // because the subscribe call hasn't returned yet.\r\n          syncUnsub = true;\r\n        }\r\n      })\r\n    );\r\n\r\n    if (syncUnsub) {\r\n      // We have a synchronous error, we need to make sure to\r\n      // finalize right away. This ensures that callbacks in the `finalize` operator are called\r\n      // at the right time, and that finalization occurs at the expected\r\n      // time between the source error and the subscription to the\r\n      // next observable.\r\n      innerSub.unsubscribe();\r\n      innerSub = null;\r\n      handledResult!.subscribe(subscriber);\r\n    }\r\n  });"],"parameters":[{"name":"selector","type":"(err: any, caught: Observable<T>) => O","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, T | ObservedValueOf<O>>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"O","kind":39,"isConst":false,"constraint":"ObservableInput<any>","variance":0}],"docs":[{"kind":24,"description":"\r\nCatches errors on the observable to be handled by returning a new observable or throwing an error.\r\n\r\n<span class=\"informal\">\r\nIt only listens to the error channel and ignores notifications.\r\nHandles errors from the source observable, and maps them to a new observable.\r\nThe error may also be rethrown, or a new error can be thrown to emit an error from the result.\r\n</span>\r\n\r\n![](catch.png)\r\n\r\nThis operator handles errors, but forwards along all other events to the resulting observable.\r\nIf the source observable terminates with an error, it will map that error to a new observable,\r\nsubscribe to it, and forward all of its events to the resulting observable.\r\n\r\n## Examples\r\n\r\nContinue with a different Observable when there's an error\r\n\r\n```ts\r\nimport { of, map, catchError } from 'rxjs';\r\n\r\nof(1, 2, 3, 4, 5)\r\n  .pipe(\r\n    map(n => {\r\n      if (n === 4) {\r\n        throw 'four!';\r\n      }\r\n      return n;\r\n    }),\r\n    catchError(err => of('I', 'II', 'III', 'IV', 'V'))\r\n  )\r\n  .subscribe(x => console.log(x));\r\n  // 1, 2, 3, I, II, III, IV, V\r\n```\r\n\r\nRetry the caught source Observable again in case of error, similar to `retry()` operator\r\n\r\n```ts\r\nimport { of, map, catchError, take } from 'rxjs';\r\n\r\nof(1, 2, 3, 4, 5)\r\n  .pipe(\r\n    map(n => {\r\n      if (n === 4) {\r\n        throw 'four!';\r\n      }\r\n      return n;\r\n    }),\r\n    catchError((err, caught) => caught),\r\n    take(30)\r\n  )\r\n  .subscribe(x => console.log(x));\r\n  // 1, 2, 3, 1, 2, 3, ...\r\n```\r\n\r\nThrow a new error when the source Observable throws an error\r\n\r\n```ts\r\nimport { of, map, catchError } from 'rxjs';\r\n\r\nof(1, 2, 3, 4, 5)\r\n  .pipe(\r\n    map(n => {\r\n      if (n === 4) {\r\n        throw 'four!';\r\n      }\r\n      return n;\r\n    }),\r\n    catchError(err => {\r\n      throw 'error in source. Details: ' + err;\r\n    })\r\n  )\r\n  .subscribe({\r\n    next: x => console.log(x),\r\n    error: err => console.log(err)\r\n  });\r\n  // 1, 2, 3, error in source. Details: four!\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link onErrorResumeNext}"},{"kind":25,"tagName":"see","text":"{@link repeat}"},{"kind":25,"tagName":"see","text":"{@link repeatWhen}"},{"kind":25,"tagName":"see","text":"{@link retry }"},{"kind":25,"tagName":"see","text":"{@link retryWhen}"},{"kind":25,"tagName":"param","text":"{function} selector a function that takes as arguments `err`, which is the error, and `caught`, which\r\nis the source observable, in case you'd like to \"retry\" that observable by returning it again. Whatever observable\r\nis returned by the `selector` will be used to continue the observable chain."},{"kind":25,"tagName":"return","text":"A function that returns an Observable that originates from either\r\nthe source or the Observable returned by the `selector` function."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"O","kind":39,"isConst":false,"constraint":"ObservableInput<any>","variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"selector","type":"(err: any, caught: Observable<T>) => O","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, T | ObservedValueOf<O>>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"catchError","modulePath":"..\\src\\internal\\operators\\catchError.ts"}]}}},"usabilityResult":{"index":1}},"..\\src\\internal\\operators\\combineLatestAll.ts":{"moduleComponents":{"combineLatestAll":{"kind":13,"usabilityResult":{"wordCount":181,"index":1},"sources":{"name":"combineLatestAll","statements":["return joinAllInternals(combineLatest, project);"],"parameters":[{"name":"project","type":"(...values: Array<any>) => R","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"typeParameters":[{"name":"R","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nFlattens an Observable-of-Observables by applying {@link combineLatest} when the Observable-of-Observables completes.\r\n\r\n`combineLatestAll` takes an Observable of Observables, and collects all Observables from it. Once the outer Observable completes,\r\nit subscribes to all collected Observables and combines their values using the {@link combineLatest} strategy, such that:\r\n\r\n* Every time an inner Observable emits, the output Observable emits\r\n* When the returned observable emits, it emits all of the latest values by:\r\n   * If a `project` function is provided, it is called with each recent value from each inner Observable in whatever order they\r\n     arrived, and the result of the `project` function is what is emitted by the output Observable.\r\n   * If there is no `project` function, an array of all the most recent values is emitted by the output Observable.\r\n\r\n## Example\r\n\r\nMap two click events to a finite interval Observable, then apply `combineLatestAll`\r\n\r\n```ts\r\nimport { fromEvent, map, interval, take, combineLatestAll } from 'rxjs';\r\n\r\nconst clicks = fromEvent(document, 'click');\r\nconst higherOrder = clicks.pipe(\r\n  map(() => interval(Math.random() * 2000).pipe(take(3))),\r\n  take(2)\r\n);\r\nconst result = higherOrder.pipe(combineLatestAll());\r\n\r\nresult.subscribe(x => console.log(x));\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link combineLatest}"},{"kind":25,"tagName":"see","text":"{@link combineLatestWith}"},{"kind":25,"tagName":"see","text":"{@link mergeAll}"},{"kind":25,"tagName":"param","text":"project optional function to map the most recent values from each inner Observable into a new result.\r\nTakes each of the most recent values from each collected inner Observable as arguments, in order."},{"kind":25,"tagName":"return","text":"A function that returns an Observable that flattens Observables\r\nemitted by the source Observable."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[],"returnType":"OperatorFunction<ObservableInput<T>, T[]>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"combineLatestAll","modulePath":"..\\src\\internal\\operators\\combineLatestAll.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[],"returnType":"OperatorFunction<any, T[]>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"combineLatestAll","modulePath":"..\\src\\internal\\operators\\combineLatestAll.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"R","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"project","type":"(...values: T[]) => R","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<ObservableInput<T>, R>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"combineLatestAll","modulePath":"..\\src\\internal\\operators\\combineLatestAll.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"R","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"project","type":"(...values: Array<any>) => R","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<any, R>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"combineLatestAll","modulePath":"..\\src\\internal\\operators\\combineLatestAll.ts"}]}}},"usabilityResult":{"index":1}},"..\\src\\internal\\operators\\combineLatestWith.ts":{"moduleComponents":{"combineLatestWith":{"kind":13,"usabilityResult":{"wordCount":173,"index":1},"sources":{"name":"combineLatestWith","statements":["return combineLatest(...otherSources);"],"parameters":[{"name":"otherSources","type":"[...ObservableInputTuple<A>]","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":true}],"returnType":"OperatorFunction<T, Cons<T, A>>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"A","kind":39,"isConst":false,"constraint":"readonly unknown[]","variance":0}],"docs":[{"kind":24,"description":"\r\nCreate an observable that combines the latest values from all passed observables and the source\r\ninto arrays and emits them.\r\n\r\nReturns an observable, that when subscribed to, will subscribe to the source observable and all\r\nsources provided as arguments. Once all sources emit at least one value, all of the latest values\r\nwill be emitted as an array. After that, every time any source emits a value, all of the latest values\r\nwill be emitted as an array.\r\n\r\nThis is a useful operator for eagerly calculating values based off of changed inputs.\r\n\r\n## Example\r\n\r\nSimple concatenation of values from two inputs\r\n\r\n```ts\r\nimport { fromEvent, combineLatestWith, map } from 'rxjs';\r\n\r\n// Setup: Add two inputs to the page\r\nconst input1 = document.createElement('input');\r\ndocument.body.appendChild(input1);\r\nconst input2 = document.createElement('input');\r\ndocument.body.appendChild(input2);\r\n\r\n// Get streams of changes\r\nconst input1Changes$ = fromEvent(input1, 'change');\r\nconst input2Changes$ = fromEvent(input2, 'change');\r\n\r\n// Combine the changes by adding them together\r\ninput1Changes$.pipe(\r\n  combineLatestWith(input2Changes$),\r\n  map(([e1, e2]) => (<HTMLInputElement>e1.target).value + ' - ' + (<HTMLInputElement>e2.target).value)\r\n)\r\n.subscribe(x => console.log(x));\r\n```\r\n","tags":[{"kind":25,"tagName":"param","text":"otherSources the other sources to subscribe to."},{"kind":25,"tagName":"return","text":"A function that returns an Observable that emits the latest\r\nemissions from both source and provided Observables."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[],"functionName":"combineLatestWith","modulePath":"..\\src\\internal\\operators\\combineLatestWith.ts"}}},"usabilityResult":{"index":1}},"..\\src\\internal\\operators\\concatAll.ts":{"moduleComponents":{"concatAll":{"kind":13,"usabilityResult":{"wordCount":212,"index":1},"sources":{"name":"concatAll","statements":["return mergeAll(1);"],"parameters":[],"returnType":"OperatorFunction<O, ObservedValueOf<O>>","typeParameters":[{"name":"O","kind":39,"isConst":false,"constraint":"ObservableInput<any>","variance":0}],"docs":[{"kind":24,"description":"\r\nConverts a higher-order Observable into a first-order Observable by\r\nconcatenating the inner Observables in order.\r\n\r\n<span class=\"informal\">Flattens an Observable-of-Observables by putting one\r\ninner Observable after the other.</span>\r\n\r\n![](concatAll.svg)\r\n\r\nJoins every Observable emitted by the source (a higher-order Observable), in\r\na serial fashion. It subscribes to each inner Observable only after the\r\nprevious inner Observable has completed, and merges all of their values into\r\nthe returned observable.\r\n\r\n__Warning:__ If the source Observable emits Observables quickly and\r\nendlessly, and the inner Observables it emits generally complete slower than\r\nthe source emits, you can run into memory issues as the incoming Observables\r\ncollect in an unbounded buffer.\r\n\r\nNote: `concatAll` is equivalent to `mergeAll` with concurrency parameter set\r\nto `1`.\r\n\r\n## Example\r\n\r\nFor each click event, tick every second from 0 to 3, with no concurrency\r\n\r\n```ts\r\nimport { fromEvent, map, interval, take, concatAll } from 'rxjs';\r\n\r\nconst clicks = fromEvent(document, 'click');\r\nconst higherOrder = clicks.pipe(\r\n  map(() => interval(1000).pipe(take(4)))\r\n);\r\nconst firstOrder = higherOrder.pipe(concatAll());\r\nfirstOrder.subscribe(x => console.log(x));\r\n\r\n// Results in the following:\r\n// (results are not concurrent)\r\n// For every click on the \"document\" it will emit values 0 to 3 spaced\r\n// on a 1000ms interval\r\n// one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link combineLatestAll}"},{"kind":25,"tagName":"see","text":"{@link concat}"},{"kind":25,"tagName":"see","text":"{@link concatMap}"},{"kind":25,"tagName":"see","text":"{@link concatMapTo}"},{"kind":25,"tagName":"see","text":"{@link exhaustAll}"},{"kind":25,"tagName":"see","text":"{@link mergeAll}"},{"kind":25,"tagName":"see","text":"{@link switchAll}"},{"kind":25,"tagName":"see","text":"{@link switchMap}"},{"kind":25,"tagName":"see","text":"{@link zipAll}"},{"kind":25,"tagName":"return","text":"A function that returns an Observable emitting values from all the\r\ninner Observables concatenated."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[],"functionName":"concatAll","modulePath":"..\\src\\internal\\operators\\concatAll.ts"}}},"usabilityResult":{"index":1}},"..\\src\\internal\\operators\\concatMap.ts":{"moduleComponents":{"concatMap":{"kind":13,"usabilityResult":{"wordCount":223,"index":1},"sources":{"name":"concatMap","statements":["return isFunction(resultSelector) ? mergeMap(project, resultSelector, 1) : mergeMap(project, 1);"],"parameters":[{"name":"project","type":"(value: T, index: number) => O","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"resultSelector","type":"(outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, ObservedValueOf<O> | R>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"R","kind":39,"isConst":false,"variance":0},{"name":"O","kind":39,"isConst":false,"constraint":"ObservableInput<any>","variance":0}],"docs":[{"kind":24,"description":"\r\nProjects each source value to an Observable which is merged in the output\r\nObservable, in a serialized fashion waiting for each one to complete before\r\nmerging the next.\r\n\r\n<span class=\"informal\">Maps each value to an Observable, then flattens all of\r\nthese inner Observables using {@link concatAll}.</span>\r\n\r\n![](concatMap.png)\r\n\r\nReturns an Observable that emits items based on applying a function that you\r\nsupply to each item emitted by the source Observable, where that function\r\nreturns an (so-called \"inner\") Observable. Each new inner Observable is\r\nconcatenated with the previous inner Observable.\r\n\r\n__Warning:__ if source values arrive endlessly and faster than their\r\ncorresponding inner Observables can complete, it will result in memory issues\r\nas inner Observables amass in an unbounded buffer waiting for their turn to\r\nbe subscribed to.\r\n\r\nNote: `concatMap` is equivalent to `mergeMap` with concurrency parameter set\r\nto `1`.\r\n\r\n## Example\r\n\r\nFor each click event, tick every second from 0 to 3, with no concurrency\r\n\r\n```ts\r\nimport { fromEvent, concatMap, interval, take } from 'rxjs';\r\n\r\nconst clicks = fromEvent(document, 'click');\r\nconst result = clicks.pipe(\r\n  concatMap(ev => interval(1000).pipe(take(4)))\r\n);\r\nresult.subscribe(x => console.log(x));\r\n\r\n// Results in the following:\r\n// (results are not concurrent)\r\n// For every click on the \"document\" it will emit values 0 to 3 spaced\r\n// on a 1000ms interval\r\n// one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link concat}"},{"kind":25,"tagName":"see","text":"{@link concatAll}"},{"kind":25,"tagName":"see","text":"{@link concatMapTo}"},{"kind":25,"tagName":"see","text":"{@link exhaustMap}"},{"kind":25,"tagName":"see","text":"{@link mergeMap}"},{"kind":25,"tagName":"see","text":"{@link switchMap}"},{"kind":25,"tagName":"param","text":"{function(value: T, ?index: number): ObservableInput} project A function\r\nthat, when applied to an item emitted by the source Observable, returns an\r\nObservable."},{"kind":25,"tagName":"return","text":"A function that returns an Observable that emits the result of\r\napplying the projection function (and the optional deprecated\r\n`resultSelector`) to each item emitted by the source Observable and taking\r\nvalues from each projected inner Observable sequentially."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"O","kind":39,"isConst":false,"constraint":"ObservableInput<any>","variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"project","type":"(value: T, index: number) => O","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, ObservedValueOf<O>>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"concatMap","modulePath":"..\\src\\internal\\operators\\concatMap.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"O","kind":39,"isConst":false,"constraint":"ObservableInput<any>","variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"The `resultSelector` parameter will be removed in v8. Use an inner `map` instead. Details: https://rxjs.dev/deprecations/resultSelector"}]}],"hasDeclareKeyword":false,"parameters":[{"name":"project","type":"(value: T, index: number) => O","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"resultSelector","type":"undefined","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, ObservedValueOf<O>>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"concatMap","modulePath":"..\\src\\internal\\operators\\concatMap.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"R","kind":39,"isConst":false,"variance":0},{"name":"O","kind":39,"isConst":false,"constraint":"ObservableInput<any>","variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"The `resultSelector` parameter will be removed in v8. Use an inner `map` instead. Details: https://rxjs.dev/deprecations/resultSelector"}]}],"hasDeclareKeyword":false,"parameters":[{"name":"project","type":"(value: T, index: number) => O","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"resultSelector","type":"(outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, R>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"concatMap","modulePath":"..\\src\\internal\\operators\\concatMap.ts"}]}}},"usabilityResult":{"index":1}},"..\\src\\internal\\operators\\concatMapTo.ts":{"moduleComponents":{"concatMapTo":{"kind":13,"usabilityResult":{"wordCount":217,"index":1},"sources":{"name":"concatMapTo","statements":["return isFunction(resultSelector) ? concatMap(() => innerObservable, resultSelector) : concatMap(() => innerObservable);"],"parameters":[{"name":"innerObservable","type":"O","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"resultSelector","type":"(outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, ObservedValueOf<O> | R>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"R","kind":39,"isConst":false,"variance":0},{"name":"O","kind":39,"isConst":false,"constraint":"ObservableInput<unknown>","variance":0}],"docs":[{"kind":24,"description":"\r\nProjects each source value to the same Observable which is merged multiple\r\ntimes in a serialized fashion on the output Observable.\r\n\r\n<span class=\"informal\">It's like {@link concatMap}, but maps each value\r\nalways to the same inner Observable.</span>\r\n\r\n![](concatMapTo.png)\r\n\r\nMaps each source value to the given Observable `innerObservable` regardless\r\nof the source value, and then flattens those resulting Observables into one\r\nsingle Observable, which is the output Observable. Each new `innerObservable`\r\ninstance emitted on the output Observable is concatenated with the previous\r\n`innerObservable` instance.\r\n\r\n__Warning:__ if source values arrive endlessly and faster than their\r\ncorresponding inner Observables can complete, it will result in memory issues\r\nas inner Observables amass in an unbounded buffer waiting for their turn to\r\nbe subscribed to.\r\n\r\nNote: `concatMapTo` is equivalent to `mergeMapTo` with concurrency parameter\r\nset to `1`.\r\n\r\n## Example\r\n\r\nFor each click event, tick every second from 0 to 3, with no concurrency\r\n\r\n```ts\r\nimport { fromEvent, concatMapTo, interval, take } from 'rxjs';\r\n\r\nconst clicks = fromEvent(document, 'click');\r\nconst result = clicks.pipe(\r\n  concatMapTo(interval(1000).pipe(take(4)))\r\n);\r\nresult.subscribe(x => console.log(x));\r\n\r\n// Results in the following:\r\n// (results are not concurrent)\r\n// For every click on the \"document\" it will emit values 0 to 3 spaced\r\n// on a 1000ms interval\r\n// one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link concat}"},{"kind":25,"tagName":"see","text":"{@link concatAll}"},{"kind":25,"tagName":"see","text":"{@link concatMap}"},{"kind":25,"tagName":"see","text":"{@link mergeMapTo}"},{"kind":25,"tagName":"see","text":"{@link switchMapTo}"},{"kind":25,"tagName":"param","text":"{ObservableInput} innerObservable An Observable to replace each value from\r\nthe source Observable."},{"kind":25,"tagName":"return","text":"A function that returns an Observable of values merged together by\r\njoining the passed Observable with itself, one after the other, for each\r\nvalue emitted from the source."},{"kind":25,"tagName":"deprecated","text":"Will be removed in v9. Use {@link concatMap} instead: `concatMap(() => result)`"}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"O","kind":39,"isConst":false,"constraint":"ObservableInput<unknown>","variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Will be removed in v9. Use {@link concatMap} instead: `concatMap(() => result)`"}]}],"hasDeclareKeyword":false,"parameters":[{"name":"observable","type":"O","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<unknown, ObservedValueOf<O>>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"concatMapTo","modulePath":"..\\src\\internal\\operators\\concatMapTo.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"O","kind":39,"isConst":false,"constraint":"ObservableInput<unknown>","variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"The `resultSelector` parameter will be removed in v8. Use an inner `map` instead. Details: https://rxjs.dev/deprecations/resultSelector"}]}],"hasDeclareKeyword":false,"parameters":[{"name":"observable","type":"O","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"resultSelector","type":"undefined","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<unknown, ObservedValueOf<O>>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"concatMapTo","modulePath":"..\\src\\internal\\operators\\concatMapTo.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"R","kind":39,"isConst":false,"variance":0},{"name":"O","kind":39,"isConst":false,"constraint":"ObservableInput<unknown>","variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"The `resultSelector` parameter will be removed in v8. Use an inner `map` instead. Details: https://rxjs.dev/deprecations/resultSelector"}]}],"hasDeclareKeyword":false,"parameters":[{"name":"observable","type":"O","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"resultSelector","type":"(outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, R>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"concatMapTo","modulePath":"..\\src\\internal\\operators\\concatMapTo.ts"}]}}},"usabilityResult":{"index":1}},"..\\src\\internal\\operators\\concatWith.ts":{"moduleComponents":{"concatWith":{"kind":13,"usabilityResult":{"wordCount":101,"index":1},"sources":{"name":"concatWith","statements":["return concat(...otherSources);"],"parameters":[{"name":"otherSources","type":"[...ObservableInputTuple<A>]","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":true}],"returnType":"OperatorFunction<T, T | A[number]>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"A","kind":39,"isConst":false,"constraint":"readonly unknown[]","variance":0}],"docs":[{"kind":24,"description":"\r\nEmits all of the values from the source observable, then, once it completes, subscribes\r\nto each observable source provided, one at a time, emitting all of their values, and not subscribing\r\nto the next one until it completes.\r\n\r\n`concat(a$, b$, c$)` is the same as `a$.pipe(concatWith(b$, c$))`.\r\n\r\n## Example\r\n\r\nListen for one mouse click, then listen for all mouse moves.\r\n\r\n```ts\r\nimport { fromEvent, map, take, concatWith } from 'rxjs';\r\n\r\nconst clicks$ = fromEvent(document, 'click');\r\nconst moves$ = fromEvent(document, 'mousemove');\r\n\r\nclicks$.pipe(\r\n  map(() => 'click'),\r\n  take(1),\r\n  concatWith(\r\n    moves$.pipe(\r\n      map(() => 'move')\r\n    )\r\n  )\r\n)\r\n.subscribe(x => console.log(x));\r\n\r\n// 'click'\r\n// 'move'\r\n// 'move'\r\n// 'move'\r\n// ...\r\n```\r\n","tags":[{"kind":25,"tagName":"param","text":"otherSources Other observable sources to subscribe to, in sequence, after the original source is complete."},{"kind":25,"tagName":"return","text":"A function that returns an Observable that concatenates\r\nsubscriptions to the source and provided Observables subscribing to the next\r\nonly once the current subscription completes."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[],"functionName":"concatWith","modulePath":"..\\src\\internal\\operators\\concatWith.ts"}}},"usabilityResult":{"index":1}},"..\\src\\internal\\operators\\connect.ts":{"moduleComponents":{"connect":{"kind":13,"usabilityResult":{"wordCount":335,"index":1},"sources":{"name":"connect","statements":[{"isExported":false,"isDefaultExport":false,"hasDeclareKeyword":false,"docs":[],"kind":41,"declarationKind":"const","declarations":[{"name":"{ connector }","initializer":"config","hasExclamationToken":false,"kind":40}]},"return operate((source, subscriber) => {\r\nconst subject = connector();\r\ninnerFrom(selector(fromSubscribable(subject))).subscribe(subscriber);\r\nsubscriber.add(source.subscribe(subject));\r\n});"],"parameters":[{"name":"selector","type":"(shared: Observable<T>) => O","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"config","initializer":"DEFAULT_CONFIG","type":"ConnectConfig<T>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, ObservedValueOf<O>>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"O","kind":39,"isConst":false,"constraint":"ObservableInput<unknown>","variance":0}],"docs":[{"kind":24,"description":"\r\nCreates an observable by multicasting the source within a function that\r\nallows the developer to define the usage of the multicast prior to connection.\r\n\r\nThis is particularly useful if the observable source you wish to multicast could\r\nbe synchronous or asynchronous. This sets it apart from {@link share}, which, in the\r\ncase of totally synchronous sources will fail to share a single subscription with\r\nmultiple consumers, as by the time the subscription to the result of {@link share}\r\nhas returned, if the source is synchronous its internal reference count will jump from\r\n0 to 1 back to 0 and reset.\r\n\r\nTo use `connect`, you provide a `selector` function that will give you\r\na multicast observable that is not yet connected. You then use that multicast observable\r\nto create a resulting observable that, when subscribed, will set up your multicast. This is\r\ngenerally, but not always, accomplished with {@link merge}.\r\n\r\nNote that using a {@link takeUntil} inside of `connect`'s `selector` _might_ mean you were looking\r\nto use the {@link takeWhile} operator instead.\r\n\r\nWhen you subscribe to the result of `connect`, the `selector` function will be called. After\r\nthe `selector` function returns, the observable it returns will be subscribed to, _then_ the\r\nmulticast will be connected to the source.\r\n\r\n## Example\r\n\r\nSharing a totally synchronous observable\r\n\r\n```ts\r\nimport { of, tap, connect, merge, map, filter } from 'rxjs';\r\n\r\nconst source$ = of(1, 2, 3, 4, 5).pipe(\r\n  tap({\r\n    subscribe: () => console.log('subscription started'),\r\n    next: n => console.log(`source emitted ${ n }`)\r\n  })\r\n);\r\n\r\nsource$.pipe(\r\n  // Notice in here we're merging 3 subscriptions to `shared$`.\r\n  connect(shared$ => merge(\r\n    shared$.pipe(map(n => `all ${ n }`)),\r\n    shared$.pipe(filter(n => n % 2 === 0), map(n => `even ${ n }`)),\r\n    shared$.pipe(filter(n => n % 2 === 1), map(n => `odd ${ n }`))\r\n  ))\r\n)\r\n.subscribe(console.log);\r\n\r\n// Expected output: (notice only one subscription)\r\n'subscription started'\r\n'source emitted 1'\r\n'all 1'\r\n'odd 1'\r\n'source emitted 2'\r\n'all 2'\r\n'even 2'\r\n'source emitted 3'\r\n'all 3'\r\n'odd 3'\r\n'source emitted 4'\r\n'all 4'\r\n'even 4'\r\n'source emitted 5'\r\n'all 5'\r\n'odd 5'\r\n```\r\n","tags":[{"kind":25,"tagName":"param","text":"selector A function used to set up the multicast. Gives you a multicast observable\r\nthat is not yet connected. With that, you're expected to create and return\r\nand Observable, that when subscribed to, will utilize the multicast observable.\r\nAfter this function is executed -- and its return value subscribed to -- the\r\noperator will subscribe to the source, and the connection will be made."},{"kind":25,"tagName":"param","text":"config The configuration object for `connect`."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[],"functionName":"connect","modulePath":"..\\src\\internal\\operators\\connect.ts"}}},"usabilityResult":{"index":1}},"..\\src\\internal\\operators\\count.ts":{"moduleComponents":{"count":{"kind":13,"usabilityResult":{"wordCount":209,"index":1},"sources":{"name":"count","statements":["return reduce((total, value, i) => (!predicate || predicate(value, i) ? total + 1 : total), 0);"],"parameters":[{"name":"predicate","type":"(value: T, index: number) => boolean","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, number>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nCounts the number of emissions on the source and emits that number when the\r\nsource completes.\r\n\r\n<span class=\"informal\">Tells how many values were emitted, when the source\r\ncompletes.</span>\r\n\r\n![](count.png)\r\n\r\n`count` transforms an Observable that emits values into an Observable that\r\nemits a single value that represents the number of values emitted by the\r\nsource Observable. If the source Observable terminates with an error, `count`\r\nwill pass this error notification along without emitting a value first. If\r\nthe source Observable does not terminate at all, `count` will neither emit\r\na value nor terminate. This operator takes an optional `predicate` function\r\nas argument, in which case the output emission will represent the number of\r\nsource values that matched `true` with the `predicate`.\r\n\r\n## Examples\r\n\r\nCounts how many seconds have passed before the first click happened\r\n\r\n```ts\r\nimport { interval, fromEvent, takeUntil, count } from 'rxjs';\r\n\r\nconst seconds = interval(1000);\r\nconst clicks = fromEvent(document, 'click');\r\nconst secondsBeforeClick = seconds.pipe(takeUntil(clicks));\r\nconst result = secondsBeforeClick.pipe(count());\r\nresult.subscribe(x => console.log(x));\r\n```\r\n\r\nCounts how many odd numbers are there between 1 and 7\r\n\r\n```ts\r\nimport { range, count } from 'rxjs';\r\n\r\nconst numbers = range(1, 7);\r\nconst result = numbers.pipe(count(i => i % 2 === 1));\r\nresult.subscribe(x => console.log(x));\r\n// Results in:\r\n// 4\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link max}"},{"kind":25,"tagName":"see","text":"{@link min}"},{"kind":25,"tagName":"see","text":"{@link reduce}"},{"kind":25,"tagName":"param","text":"predicate A function that is used to analyze the value and the index and\r\ndetermine whether or not to increment the count. Return `true` to increment the count,\r\nand return `false` to keep the count the same.\r\nIf the predicate is not provided, every value will be counted."},{"kind":25,"tagName":"return","text":"A function that returns an Observable that emits one number that\r\nrepresents the count of emissions."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[],"functionName":"count","modulePath":"..\\src\\internal\\operators\\count.ts"}}},"usabilityResult":{"index":1}},"..\\src\\internal\\operators\\debounce.ts":{"moduleComponents":{"debounce":{"kind":13,"usabilityResult":{"wordCount":282,"index":1},"sources":{"name":"debounce","statements":["return operate((source, subscriber) => {\r\n    let hasValue = false;\r\n    let lastValue: T | null = null;\r\n    // The subscriber/subscription for the current debounce, if there is one.\r\n    let durationSubscriber: Subscriber<any> | null = null;\r\n\r\n    const emit = () => {\r\n      // Unsubscribe any current debounce subscription we have,\r\n      // we only cared about the first notification from it, and we\r\n      // want to clean that subscription up as soon as possible.\r\n      durationSubscriber?.unsubscribe();\r\n      durationSubscriber = null;\r\n      if (hasValue) {\r\n        // We have a value! Free up memory first, then emit the value.\r\n        hasValue = false;\r\n        const value = lastValue!;\r\n        lastValue = null;\r\n        subscriber.next(value);\r\n      }\r\n    };\r\n\r\n    source.subscribe(\r\n      createOperatorSubscriber(\r\n        subscriber,\r\n        (value: T) => {\r\n          // Cancel any pending debounce duration. We don't\r\n          // need to null it out here yet tho, because we're just going\r\n          // to create another one in a few lines.\r\n          durationSubscriber?.unsubscribe();\r\n          hasValue = true;\r\n          lastValue = value;\r\n          // Capture our duration subscriber, so we can unsubscribe it when we're notified\r\n          // and we're going to emit the value.\r\n          durationSubscriber = createOperatorSubscriber(subscriber, emit, noop);\r\n          // Subscribe to the duration.\r\n          innerFrom(durationSelector(value)).subscribe(durationSubscriber);\r\n        },\r\n        () => {\r\n          // Source completed.\r\n          // Emit any pending debounced values then complete\r\n          emit();\r\n          subscriber.complete();\r\n        },\r\n        // Pass all errors through to consumer\r\n        undefined,\r\n        () => {\r\n          // Finalization.\r\n          lastValue = durationSubscriber = null;\r\n        }\r\n      )\r\n    );\r\n  });"],"parameters":[{"name":"durationSelector","type":"(value: T) => ObservableInput<any>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"MonoTypeOperatorFunction<T>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nEmits a notification from the source Observable only after a particular time span\r\ndetermined by another Observable has passed without another source emission.\r\n\r\n<span class=\"informal\">It's like {@link debounceTime}, but the time span of\r\nemission silence is determined by a second Observable.</span>\r\n\r\n![](debounce.svg)\r\n\r\n`debounce` delays notifications emitted by the source Observable, but drops previous\r\npending delayed emissions if a new notification arrives on the source Observable.\r\nThis operator keeps track of the most recent notification from the source\r\nObservable, and spawns a duration Observable by calling the\r\n`durationSelector` function. The notification is emitted only when the duration\r\nObservable emits a next notification, and if no other notification was emitted on\r\nthe source Observable since the duration Observable was spawned. If a new\r\nnotification appears before the duration Observable emits, the previous notification will\r\nnot be emitted and a new duration is scheduled from `durationSelector` is scheduled.\r\nIf the completing event happens during the scheduled duration the last cached notification\r\nis emitted before the completion event is forwarded to the output observable.\r\nIf the error event happens during the scheduled duration or after it only the error event is\r\nforwarded to the output observable. The cache notification is not emitted in this case.\r\n\r\nLike {@link debounceTime}, this is a rate-limiting operator, and also a\r\ndelay-like operator since output emissions do not necessarily occur at the\r\nsame time as they did on the source Observable.\r\n\r\n## Example\r\n\r\nEmit the most recent click after a burst of clicks\r\n\r\n```ts\r\nimport { fromEvent, scan, debounce, interval } from 'rxjs';\r\n\r\nconst clicks = fromEvent(document, 'click');\r\nconst result = clicks.pipe(\r\n  scan(i => ++i, 1),\r\n  debounce(i => interval(200 * i))\r\n);\r\nresult.subscribe(x => console.log(x));\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link audit}"},{"kind":25,"tagName":"see","text":"{@link auditTime}"},{"kind":25,"tagName":"see","text":"{@link debounceTime}"},{"kind":25,"tagName":"see","text":"{@link delay}"},{"kind":25,"tagName":"see","text":"{@link sample}"},{"kind":25,"tagName":"see","text":"{@link sampleTime}"},{"kind":25,"tagName":"see","text":"{@link throttle}"},{"kind":25,"tagName":"see","text":"{@link throttleTime}"},{"kind":25,"tagName":"param","text":"durationSelector A function\r\nthat receives a value from the source Observable, for computing the timeout\r\nduration for each source value, returned as an Observable or a Promise."},{"kind":25,"tagName":"return","text":"A function that returns an Observable that delays the emissions of\r\nthe source Observable by the specified duration Observable returned by\r\n`durationSelector`, and may drop some values if they occur too frequently."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[],"functionName":"debounce","modulePath":"..\\src\\internal\\operators\\debounce.ts"}}},"usabilityResult":{"index":1}},"..\\src\\internal\\operators\\debounceTime.ts":{"moduleComponents":{"debounceTime":{"kind":13,"usabilityResult":{"wordCount":265,"index":1},"sources":{"name":"debounceTime","statements":["return operate((source, subscriber) => {\r\n    let activeTask: Subscription | null = null;\r\n    let lastValue: T | null = null;\r\n    let lastTime: number | null = null;\r\n\r\n    const emit = () => {\r\n      if (activeTask) {\r\n        // We have a value! Free up memory first, then emit the value.\r\n        activeTask.unsubscribe();\r\n        activeTask = null;\r\n        const value = lastValue!;\r\n        lastValue = null;\r\n        subscriber.next(value);\r\n      }\r\n    };\r\n    function emitWhenIdle(this: SchedulerAction<unknown>) {\r\n      // This is called `dueTime` after the first value\r\n      // but we might have received new values during this window!\r\n\r\n      const targetTime = lastTime! + dueTime;\r\n      const now = scheduler.now();\r\n      if (now < targetTime) {\r\n        // On that case, re-schedule to the new target\r\n        activeTask = this.schedule(undefined, targetTime - now);\r\n        subscriber.add(activeTask);\r\n        return;\r\n      }\r\n\r\n      emit();\r\n    }\r\n\r\n    source.subscribe(\r\n      createOperatorSubscriber(\r\n        subscriber,\r\n        (value: T) => {\r\n          lastValue = value;\r\n          lastTime = scheduler.now();\r\n\r\n          // Only set up a task if it's not already up\r\n          if (!activeTask) {\r\n            activeTask = scheduler.schedule(emitWhenIdle, dueTime);\r\n            subscriber.add(activeTask);\r\n          }\r\n        },\r\n        () => {\r\n          // Source completed.\r\n          // Emit any pending debounced values then complete\r\n          emit();\r\n          subscriber.complete();\r\n        },\r\n        // Pass all errors through to consumer.\r\n        undefined,\r\n        () => {\r\n          // Finalization.\r\n          lastValue = activeTask = null;\r\n        }\r\n      )\r\n    );\r\n  });"],"parameters":[{"name":"dueTime","type":"number","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"scheduler","initializer":"asyncScheduler","type":"SchedulerLike","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"MonoTypeOperatorFunction<T>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nEmits a notification from the source Observable only after a particular time span\r\nhas passed without another source emission.\r\n\r\n<span class=\"informal\">It's like {@link delay}, but passes only the most\r\nrecent notification from each burst of emissions.</span>\r\n\r\n![](debounceTime.png)\r\n\r\n`debounceTime` delays notifications emitted by the source Observable, but drops\r\nprevious pending delayed emissions if a new notification arrives on the source\r\nObservable. This operator keeps track of the most recent notification from the\r\nsource Observable, and emits that only when `dueTime` has passed\r\nwithout any other notification appearing on the source Observable. If a new value\r\nappears before `dueTime` silence occurs, the previous notification will be dropped\r\nand will not be emitted and a new `dueTime` is scheduled.\r\nIf the completing event happens during `dueTime` the last cached notification\r\nis emitted before the completion event is forwarded to the output observable.\r\nIf the error event happens during `dueTime` or after it only the error event is\r\nforwarded to the output observable. The cache notification is not emitted in this case.\r\n\r\nThis is a rate-limiting operator, because it is impossible for more than one\r\nnotification to be emitted in any time window of duration `dueTime`, but it is also\r\na delay-like operator since output emissions do not occur at the same time as\r\nthey did on the source Observable. Optionally takes a {@link SchedulerLike} for\r\nmanaging timers.\r\n\r\n## Example\r\n\r\nEmit the most recent click after a burst of clicks\r\n\r\n```ts\r\nimport { fromEvent, debounceTime } from 'rxjs';\r\n\r\nconst clicks = fromEvent(document, 'click');\r\nconst result = clicks.pipe(debounceTime(1000));\r\nresult.subscribe(x => console.log(x));\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link audit}"},{"kind":25,"tagName":"see","text":"{@link auditTime}"},{"kind":25,"tagName":"see","text":"{@link debounce}"},{"kind":25,"tagName":"see","text":"{@link sample}"},{"kind":25,"tagName":"see","text":"{@link sampleTime}"},{"kind":25,"tagName":"see","text":"{@link throttle}"},{"kind":25,"tagName":"see","text":"{@link throttleTime}"},{"kind":25,"tagName":"param","text":"{number} dueTime The timeout duration in milliseconds (or the time\r\nunit determined internally by the optional `scheduler`) for the window of\r\ntime required to wait for emission silence before emitting the most recent\r\nsource value."},{"kind":25,"tagName":"param","text":"{SchedulerLike} [scheduler=async] The {@link SchedulerLike} to use for\r\nmanaging the timers that handle the timeout for each value."},{"kind":25,"tagName":"return","text":"A function that returns an Observable that delays the emissions of\r\nthe source Observable by the specified `dueTime`, and may drop some values\r\nif they occur too frequently."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[],"functionName":"debounceTime","modulePath":"..\\src\\internal\\operators\\debounceTime.ts"}}},"usabilityResult":{"index":1}},"..\\src\\internal\\operators\\defaultIfEmpty.ts":{"moduleComponents":{"defaultIfEmpty":{"kind":13,"usabilityResult":{"wordCount":114,"index":1},"sources":{"name":"defaultIfEmpty","statements":["return operate((source, subscriber) => {\r\nlet hasValue = false;\r\nsource.subscribe(\r\n  createOperatorSubscriber(\r\n    subscriber,\r\n    (value) => {\r\n      hasValue = true;\r\n      subscriber.next(value);\r\n    },\r\n    () => {\r\n      if (!hasValue) {\r\n        subscriber.next(defaultValue!);\r\n      }\r\n      subscriber.complete();\r\n    }\r\n  )\r\n);\r\n});"],"parameters":[{"name":"defaultValue","type":"R","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, T | R>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"R","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nEmits a given value if the source Observable completes without emitting any\r\n`next` value, otherwise mirrors the source Observable.\r\n\r\n<span class=\"informal\">If the source Observable turns out to be empty, then\r\nthis operator will emit a default value.</span>\r\n\r\n![](defaultIfEmpty.png)\r\n\r\n`defaultIfEmpty` emits the values emitted by the source Observable or a\r\nspecified default value if the source Observable is empty (completes without\r\nhaving emitted any `next` value).\r\n\r\n## Example\r\n\r\nIf no clicks happen in 5 seconds, then emit 'no clicks'\r\n\r\n```ts\r\nimport { fromEvent, takeUntil, interval, defaultIfEmpty } from 'rxjs';\r\n\r\nconst clicks = fromEvent(document, 'click');\r\nconst clicksBeforeFive = clicks.pipe(takeUntil(interval(5000)));\r\nconst result = clicksBeforeFive.pipe(defaultIfEmpty('no clicks'));\r\nresult.subscribe(x => console.log(x));\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link empty}"},{"kind":25,"tagName":"see","text":"{@link last}"},{"kind":25,"tagName":"param","text":"defaultValue The default value used if the source\r\nObservable is empty."},{"kind":25,"tagName":"return","text":"A function that returns an Observable that emits either the\r\nspecified `defaultValue` if the source Observable emits no items, or the\r\nvalues emitted by the source Observable."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[],"functionName":"defaultIfEmpty","modulePath":"..\\src\\internal\\operators\\defaultIfEmpty.ts"}}},"usabilityResult":{"index":1}},"..\\src\\internal\\operators\\delay.ts":{"moduleComponents":{"delay":{"kind":13,"usabilityResult":{"wordCount":173,"index":1},"sources":{"name":"delay","statements":[{"isExported":false,"isDefaultExport":false,"hasDeclareKeyword":false,"docs":[],"kind":41,"declarationKind":"const","declarations":[{"name":"duration","initializer":"timer(due, scheduler)","hasExclamationToken":false,"kind":40}]},"return delayWhen(() => duration);"],"parameters":[{"name":"due","type":"number | Date","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"scheduler","initializer":"asyncScheduler","type":"SchedulerLike","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"MonoTypeOperatorFunction<T>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nDelays the emission of items from the source Observable by a given timeout or\r\nuntil a given Date.\r\n\r\n<span class=\"informal\">Time shifts each item by some specified amount of\r\nmilliseconds.</span>\r\n\r\n![](delay.svg)\r\n\r\nIf the delay argument is a Number, this operator time shifts the source\r\nObservable by that amount of time expressed in milliseconds. The relative\r\ntime intervals between the values are preserved.\r\n\r\nIf the delay argument is a Date, this operator time shifts the start of the\r\nObservable execution until the given date occurs.\r\n\r\n## Examples\r\n\r\nDelay each click by one second\r\n\r\n```ts\r\nimport { fromEvent, delay } from 'rxjs';\r\n\r\nconst clicks = fromEvent(document, 'click');\r\nconst delayedClicks = clicks.pipe(delay(1000)); // each click emitted after 1 second\r\ndelayedClicks.subscribe(x => console.log(x));\r\n```\r\n\r\nDelay all clicks until a future date happens\r\n\r\n```ts\r\nimport { fromEvent, delay } from 'rxjs';\r\n\r\nconst clicks = fromEvent(document, 'click');\r\nconst date = new Date('March 15, 2050 12:00:00'); // in the future\r\nconst delayedClicks = clicks.pipe(delay(date)); // click emitted only after that date\r\ndelayedClicks.subscribe(x => console.log(x));\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link delayWhen}"},{"kind":25,"tagName":"see","text":"{@link throttle}"},{"kind":25,"tagName":"see","text":"{@link throttleTime}"},{"kind":25,"tagName":"see","text":"{@link debounce}"},{"kind":25,"tagName":"see","text":"{@link debounceTime}"},{"kind":25,"tagName":"see","text":"{@link sample}"},{"kind":25,"tagName":"see","text":"{@link sampleTime}"},{"kind":25,"tagName":"see","text":"{@link audit}"},{"kind":25,"tagName":"see","text":"{@link auditTime}"},{"kind":25,"tagName":"param","text":"{number|Date} due The delay duration in milliseconds (a `number`) or\r\na `Date` until which the emission of the source items is delayed."},{"kind":25,"tagName":"param","text":"{SchedulerLike} [scheduler=async] The {@link SchedulerLike} to use for\r\nmanaging the timers that handle the time-shift for each item."},{"kind":25,"tagName":"return","text":"A function that returns an Observable that delays the emissions of\r\nthe source Observable by the specified timeout or Date."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[],"functionName":"delay","modulePath":"..\\src\\internal\\operators\\delay.ts"}}},"usabilityResult":{"index":1}},"..\\src\\internal\\operators\\delayWhen.ts":{"moduleComponents":{"delayWhen":{"kind":13,"usabilityResult":{"wordCount":341,"index":1},"sources":{"name":"delayWhen","statements":["if (subscriptionDelay) {\r\n// DEPRECATED PATH\r\nreturn (source: Observable<T>) =>\r\n  concat(subscriptionDelay.pipe(take(1), ignoreElements()), source.pipe(delayWhen(delayDurationSelector)));\r\n}","return mergeMap((value, index) => innerFrom(delayDurationSelector(value, index)).pipe(take(1), mapTo(value)));"],"parameters":[{"name":"delayDurationSelector","type":"(value: T, index: number) => ObservableInput<any>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"subscriptionDelay","type":"Observable<any>","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"MonoTypeOperatorFunction<T>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nDelays the emission of items from the source Observable by a given time span\r\ndetermined by the emissions of another Observable.\r\n\r\n<span class=\"informal\">It's like {@link delay}, but the time span of the\r\ndelay duration is determined by a second Observable.</span>\r\n\r\n![](delayWhen.png)\r\n\r\n`delayWhen` operator shifts each emitted value from the source Observable by\r\na time span determined by another Observable. When the source emits a value,\r\nthe `delayDurationSelector` function is called with the value emitted from\r\nthe source Observable as the first argument to the `delayDurationSelector`.\r\nThe `delayDurationSelector` function should return an {@link ObservableInput},\r\nthat is internally converted to an Observable that is called the \"duration\"\r\nObservable.\r\n\r\nThe source value is emitted on the output Observable only when the \"duration\"\r\nObservable emits ({@link guide/glossary-and-semantics#next next}s) any value.\r\nUpon that, the \"duration\" Observable gets unsubscribed.\r\n\r\nBefore RxJS V7, the {@link guide/glossary-and-semantics#complete completion}\r\nof the \"duration\" Observable would have been triggering the emission of the\r\nsource value to the output Observable, but with RxJS V7, this is not the case\r\nanymore.\r\n\r\nOnly next notifications (from the \"duration\" Observable) trigger values from\r\nthe source Observable to be passed to the output Observable. If the \"duration\"\r\nObservable only emits the complete notification (without next), the value\r\nemitted by the source Observable will never get to the output Observable - it\r\nwill be swallowed. If the \"duration\" Observable errors, the error will be\r\npropagated to the output Observable.\r\n\r\nOptionally, `delayWhen` takes a second argument, `subscriptionDelay`, which\r\nis an Observable. When `subscriptionDelay` emits its first value or\r\ncompletes, the source Observable is subscribed to and starts behaving like\r\ndescribed in the previous paragraph. If `subscriptionDelay` is not provided,\r\n`delayWhen` will subscribe to the source Observable as soon as the output\r\nObservable is subscribed.\r\n\r\n## Example\r\n\r\nDelay each click by a random amount of time, between 0 and 5 seconds\r\n\r\n```ts\r\nimport { fromEvent, delayWhen, interval } from 'rxjs';\r\n\r\nconst clicks = fromEvent(document, 'click');\r\nconst delayedClicks = clicks.pipe(\r\n  delayWhen(() => interval(Math.random() * 5000))\r\n);\r\ndelayedClicks.subscribe(x => console.log(x));\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link delay}"},{"kind":25,"tagName":"see","text":"{@link throttle}"},{"kind":25,"tagName":"see","text":"{@link throttleTime}"},{"kind":25,"tagName":"see","text":"{@link debounce}"},{"kind":25,"tagName":"see","text":"{@link debounceTime}"},{"kind":25,"tagName":"see","text":"{@link sample}"},{"kind":25,"tagName":"see","text":"{@link sampleTime}"},{"kind":25,"tagName":"see","text":"{@link audit}"},{"kind":25,"tagName":"see","text":"{@link auditTime}"},{"kind":25,"tagName":"param","text":"delayDurationSelector A function that returns an `ObservableInput` for\r\neach `value` emitted by the source Observable, which is then used to delay the\r\nemission of that `value` on the output Observable until the `ObservableInput`\r\nreturned from this function emits a next value. When called, beside `value`,\r\nthis function receives a zero-based `index` of the emission order."},{"kind":25,"tagName":"param","text":"subscriptionDelay An Observable that triggers the subscription to the\r\nsource Observable once it emits any value."},{"kind":25,"tagName":"return","text":"A function that returns an Observable that delays the emissions of\r\nthe source Observable by an amount of time specified by the Observable\r\nreturned by `delayDurationSelector`."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"The `subscriptionDelay` parameter will be removed in v8."}]}],"hasDeclareKeyword":false,"parameters":[{"name":"delayDurationSelector","type":"(value: T, index: number) => ObservableInput<any>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"subscriptionDelay","type":"Observable<any>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"MonoTypeOperatorFunction<T>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"delayWhen","modulePath":"..\\src\\internal\\operators\\delayWhen.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"delayDurationSelector","type":"(value: T, index: number) => ObservableInput<any>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"MonoTypeOperatorFunction<T>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"delayWhen","modulePath":"..\\src\\internal\\operators\\delayWhen.ts"}]}}},"usabilityResult":{"index":1}},"..\\src\\internal\\operators\\dematerialize.ts":{"moduleComponents":{"dematerialize":{"kind":13,"usabilityResult":{"wordCount":177,"index":1},"sources":{"name":"dematerialize","statements":["return operate((source, subscriber) => {\r\nsource.subscribe(createOperatorSubscriber(subscriber, (notification) => observeNotification(notification, subscriber)));\r\n});"],"parameters":[],"returnType":"OperatorFunction<N, ValueFromNotification<N>>","typeParameters":[{"name":"N","kind":39,"isConst":false,"constraint":"ObservableNotification<any>","variance":0}],"docs":[{"kind":24,"description":"\r\nConverts an Observable of {@link ObservableNotification} objects into the emissions\r\nthat they represent.\r\n\r\n<span class=\"informal\">Unwraps {@link ObservableNotification} objects as actual `next`,\r\n`error` and `complete` emissions. The opposite of {@link materialize}.</span>\r\n\r\n![](dematerialize.png)\r\n\r\n`dematerialize` is assumed to operate an Observable that only emits\r\n{@link ObservableNotification} objects as `next` emissions, and does not emit any\r\n`error`. Such Observable is the output of a `materialize` operation. Those\r\nnotifications are then unwrapped using the metadata they contain, and emitted\r\nas `next`, `error`, and `complete` on the output Observable.\r\n\r\nUse this operator in conjunction with {@link materialize}.\r\n\r\n## Example\r\n\r\nConvert an Observable of Notifications to an actual Observable\r\n\r\n```ts\r\nimport { NextNotification, ErrorNotification, of, dematerialize } from 'rxjs';\r\n\r\nconst notifA: NextNotification<string> = { kind: 'N', value: 'A' };\r\nconst notifB: NextNotification<string> = { kind: 'N', value: 'B' };\r\nconst notifE: ErrorNotification = { kind: 'E', error: new TypeError('x.toUpperCase is not a function') };\r\n\r\nconst materialized = of(notifA, notifB, notifE);\r\n\r\nconst upperCase = materialized.pipe(dematerialize());\r\nupperCase.subscribe({\r\n  next: x => console.log(x),\r\n  error: e => console.error(e)\r\n});\r\n\r\n// Results in:\r\n// A\r\n// B\r\n// TypeError: x.toUpperCase is not a function\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link materialize}"},{"kind":25,"tagName":"return","text":"A function that returns an Observable that emits items and\r\nnotifications embedded in Notification objects emitted by the source\r\nObservable."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[],"functionName":"dematerialize","modulePath":"..\\src\\internal\\operators\\dematerialize.ts"}}},"usabilityResult":{"index":1}},"..\\src\\internal\\operators\\distinct.ts":{"moduleComponents":{"distinct":{"kind":13,"usabilityResult":{"wordCount":248,"index":1},"sources":{"name":"distinct","statements":["return operate((source, subscriber) => {\r\n    const distinctKeys = new Set();\r\n    source.subscribe(\r\n      createOperatorSubscriber(subscriber, (value) => {\r\n        const key = keySelector ? keySelector(value) : value;\r\n        if (!distinctKeys.has(key)) {\r\n          distinctKeys.add(key);\r\n          subscriber.next(value);\r\n        }\r\n      })\r\n    );\r\n\r\n    flushes && innerFrom(flushes).subscribe(createOperatorSubscriber(subscriber, () => distinctKeys.clear(), noop));\r\n  });"],"parameters":[{"name":"keySelector","type":"(value: T) => K","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"flushes","type":"ObservableInput<any>","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"MonoTypeOperatorFunction<T>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"K","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nReturns an Observable that emits all items emitted by the source Observable that are distinct by comparison from previous items.\r\n\r\nIf a `keySelector` function is provided, then it will project each value from the source observable into a new value that it will\r\ncheck for equality with previously projected values. If the `keySelector` function is not provided, it will use each value from the\r\nsource observable directly with an equality check against previous values.\r\n\r\nIn JavaScript runtimes that support `Set`, this operator will use a `Set` to improve performance of the distinct value checking.\r\n\r\nIn other runtimes, this operator will use a minimal implementation of `Set` that relies on an `Array` and `indexOf` under the\r\nhood, so performance will degrade as more values are checked for distinction. Even in newer browsers, a long-running `distinct`\r\nuse might result in memory leaks. To help alleviate this in some scenarios, an optional `flushes` parameter is also provided so\r\nthat the internal `Set` can be \"flushed\", basically clearing it of values.\r\n\r\n## Examples\r\n\r\nA simple example with numbers\r\n\r\n```ts\r\nimport { of, distinct } from 'rxjs';\r\n\r\nof(1, 1, 2, 2, 2, 1, 2, 3, 4, 3, 2, 1)\r\n  .pipe(distinct())\r\n  .subscribe(x => console.log(x));\r\n\r\n// Outputs\r\n// 1\r\n// 2\r\n// 3\r\n// 4\r\n```\r\n\r\nAn example using the `keySelector` function\r\n\r\n```ts\r\nimport { of, distinct } from 'rxjs';\r\n\r\nof(\r\n  { age: 4, name: 'Foo'},\r\n  { age: 7, name: 'Bar'},\r\n  { age: 5, name: 'Foo'}\r\n)\r\n.pipe(distinct(({ name }) => name))\r\n.subscribe(x => console.log(x));\r\n\r\n// Outputs\r\n// { age: 4, name: 'Foo' }\r\n// { age: 7, name: 'Bar' }\r\n```","tags":[{"kind":25,"tagName":"see","text":"{@link distinctUntilChanged}"},{"kind":25,"tagName":"see","text":"{@link distinctUntilKeyChanged}"},{"kind":25,"tagName":"param","text":"keySelector Optional `function` to select which value you want to check as distinct."},{"kind":25,"tagName":"param","text":"flushes Optional `ObservableInput` for flushing the internal HashSet of the operator."},{"kind":25,"tagName":"return","text":"A function that returns an Observable that emits items from the\r\nsource Observable with distinct values."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[],"functionName":"distinct","modulePath":"..\\src\\internal\\operators\\distinct.ts"}}},"usabilityResult":{"index":1}},"..\\src\\internal\\operators\\distinctUntilChanged.ts":{"moduleComponents":{"distinctUntilChanged":{"kind":13,"usabilityResult":{"wordCount":560,"index":1},"sources":{"name":"distinctUntilChanged","statements":["comparator = comparator ?? defaultCompare;","return operate((source, subscriber) => {\r\n    // The previous key, used to compare against keys selected\r\n    // from new arrivals to determine \"distinctiveness\".\r\n    let previousKey: K;\r\n    // Whether or not this is the first value we've gotten.\r\n    let first = true;\r\n\r\n    source.subscribe(\r\n      createOperatorSubscriber(subscriber, (value) => {\r\n        // We always call the key selector.\r\n        const currentKey = keySelector(value);\r\n\r\n        // If it's the first value, we always emit it.\r\n        // Otherwise, we compare this key to the previous key, and\r\n        // if the comparer returns false, we emit.\r\n        if (first || !comparator!(previousKey, currentKey)) {\r\n          // Update our state *before* we emit the value\r\n          // as emission can be the source of re-entrant code\r\n          // in functional libraries like this. We only really\r\n          // need to do this if it's the first value, or if the\r\n          // key we're tracking in previous needs to change.\r\n          first = false;\r\n          previousKey = currentKey;\r\n\r\n          // Emit the value!\r\n          subscriber.next(value);\r\n        }\r\n      })\r\n    );\r\n  });"],"parameters":[{"name":"comparator","type":"(previous: K, current: K) => boolean","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"keySelector","initializer":"identity as (value: T) => K","type":"(value: T) => K","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"MonoTypeOperatorFunction<T>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"K","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nReturns a result {@link Observable} that emits all values pushed by the source observable if they\r\nare distinct in comparison to the last value the result observable emitted.\r\n\r\nWhen provided without parameters or with the first parameter (`{@link distinctUntilChanged#comparator comparator}`),\r\nit behaves like this:\r\n\r\n1. It will always emit the first value from the source.\r\n2. For all subsequent values pushed by the source, they will be compared to the previously emitted values\r\n   using the provided `comparator` or an `===` equality check.\r\n3. If the value pushed by the source is determined to be unequal by this check, that value is emitted and\r\n   becomes the new \"previously emitted value\" internally.\r\n\r\nWhen the second parameter (`{@link distinctUntilChanged#keySelector keySelector}`) is provided, the behavior\r\nchanges:\r\n\r\n1. It will always emit the first value from the source.\r\n2. The `keySelector` will be run against all values, including the first value.\r\n3. For all values after the first, the selected key will be compared against the key selected from\r\n   the previously emitted value using the `comparator`.\r\n4. If the keys are determined to be unequal by this check, the value (not the key), is emitted\r\n   and the selected key from that value is saved for future comparisons against other keys.\r\n\r\n## Examples\r\n\r\nA very basic example with no `{@link distinctUntilChanged#comparator comparator}`. Note that `1` is emitted more than once,\r\nbecause it's distinct in comparison to the _previously emitted_ value,\r\nnot in comparison to _all other emitted values_.\r\n\r\n```ts\r\nimport { of, distinctUntilChanged } from 'rxjs';\r\n\r\nof(1, 1, 1, 2, 2, 2, 1, 1, 3, 3)\r\n  .pipe(distinctUntilChanged())\r\n  .subscribe(console.log);\r\n// Logs: 1, 2, 1, 3\r\n```\r\n\r\nWith a `{@link distinctUntilChanged#comparator comparator}`, you can do custom comparisons. Let's say\r\nyou only want to emit a value when all of its components have\r\nchanged:\r\n\r\n```ts\r\nimport { of, distinctUntilChanged } from 'rxjs';\r\n\r\nconst totallyDifferentBuilds$ = of(\r\n  { engineVersion: '1.1.0', transmissionVersion: '1.2.0' },\r\n  { engineVersion: '1.1.0', transmissionVersion: '1.4.0' },\r\n  { engineVersion: '1.3.0', transmissionVersion: '1.4.0' },\r\n  { engineVersion: '1.3.0', transmissionVersion: '1.5.0' },\r\n  { engineVersion: '2.0.0', transmissionVersion: '1.5.0' }\r\n).pipe(\r\n  distinctUntilChanged((prev, curr) => {\r\n    return (\r\n      prev.engineVersion === curr.engineVersion ||\r\n      prev.transmissionVersion === curr.transmissionVersion\r\n    );\r\n  })\r\n);\r\n\r\ntotallyDifferentBuilds$.subscribe(console.log);\r\n\r\n// Logs:\r\n// { engineVersion: '1.1.0', transmissionVersion: '1.2.0' }\r\n// { engineVersion: '1.3.0', transmissionVersion: '1.4.0' }\r\n// { engineVersion: '2.0.0', transmissionVersion: '1.5.0' }\r\n```\r\n\r\nYou can also provide a custom `{@link distinctUntilChanged#comparator comparator}` to check that emitted\r\nchanges are only in one direction. Let's say you only want to get\r\nthe next record temperature:\r\n\r\n```ts\r\nimport { of, distinctUntilChanged } from 'rxjs';\r\n\r\nconst temps$ = of(30, 31, 20, 34, 33, 29, 35, 20);\r\n\r\nconst recordHighs$ = temps$.pipe(\r\n  distinctUntilChanged((prevHigh, temp) => {\r\n    // If the current temp is less than\r\n    // or the same as the previous record,\r\n    // the record hasn't changed.\r\n    return temp <= prevHigh;\r\n  })\r\n);\r\n\r\nrecordHighs$.subscribe(console.log);\r\n// Logs: 30, 31, 34, 35\r\n```\r\n\r\nSelecting update events only when the `updatedBy` field shows\r\nthe account changed hands.\r\n\r\n```ts\r\nimport { of, distinctUntilChanged } from 'rxjs';\r\n\r\n// A stream of updates to a given account\r\nconst accountUpdates$ = of(\r\n  { updatedBy: 'blesh', data: [] },\r\n  { updatedBy: 'blesh', data: [] },\r\n  { updatedBy: 'ncjamieson', data: [] },\r\n  { updatedBy: 'ncjamieson', data: [] },\r\n  { updatedBy: 'blesh', data: [] }\r\n);\r\n\r\n// We only want the events where it changed hands\r\nconst changedHands$ = accountUpdates$.pipe(\r\n  distinctUntilChanged(undefined, update => update.updatedBy)\r\n);\r\n\r\nchangedHands$.subscribe(console.log);\r\n// Logs:\r\n// { updatedBy: 'blesh', data: Array[0] }\r\n// { updatedBy: 'ncjamieson', data: Array[0] }\r\n// { updatedBy: 'blesh', data: Array[0] }\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link distinct}"},{"kind":25,"tagName":"see","text":"{@link distinctUntilKeyChanged}"},{"kind":25,"tagName":"param","text":"comparator A function used to compare the previous and current keys for\r\nequality. Defaults to a `===` check."},{"kind":25,"tagName":"param","text":"keySelector Used to select a key value to be passed to the `comparator`."},{"kind":25,"tagName":"return","text":"A function that returns an Observable that emits items from the\r\nsource Observable with distinct values."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"comparator","type":"(previous: T, current: T) => boolean","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"MonoTypeOperatorFunction<T>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"distinctUntilChanged","modulePath":"..\\src\\internal\\operators\\distinctUntilChanged.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"K","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"comparator","type":"(previous: K, current: K) => boolean","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"keySelector","type":"(value: T) => K","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"MonoTypeOperatorFunction<T>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"distinctUntilChanged","modulePath":"..\\src\\internal\\operators\\distinctUntilChanged.ts"}]}}},"usabilityResult":{"index":1}},"..\\src\\internal\\operators\\distinctUntilKeyChanged.ts":{"moduleComponents":{"distinctUntilKeyChanged":{"kind":13,"usabilityResult":{"wordCount":192,"index":1},"sources":{"name":"distinctUntilKeyChanged","statements":["return distinctUntilChanged((x: T, y: T) => compare ? compare(x[key], y[key]) : x[key] === y[key]);"],"parameters":[{"name":"key","type":"K","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"compare","type":"(x: T[K], y: T[K]) => boolean","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"MonoTypeOperatorFunction<T>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"K","kind":39,"isConst":false,"constraint":"keyof T","variance":0}],"docs":[{"kind":24,"description":"\r\nReturns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item,\r\nusing a property accessed by using the key provided to check if the two items are distinct.\r\n\r\nIf a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\r\n\r\nIf a comparator function is not provided, an equality check is used by default.\r\n\r\n## Examples\r\n\r\nAn example comparing the name of persons\r\n\r\n```ts\r\nimport { of, distinctUntilKeyChanged } from 'rxjs';\r\n\r\nof(\r\n  { age: 4, name: 'Foo' },\r\n  { age: 7, name: 'Bar' },\r\n  { age: 5, name: 'Foo' },\r\n  { age: 6, name: 'Foo' }\r\n).pipe(\r\n  distinctUntilKeyChanged('name')\r\n)\r\n.subscribe(x => console.log(x));\r\n\r\n// displays:\r\n// { age: 4, name: 'Foo' }\r\n// { age: 7, name: 'Bar' }\r\n// { age: 5, name: 'Foo' }\r\n```\r\n\r\nAn example comparing the first letters of the name\r\n\r\n```ts\r\nimport { of, distinctUntilKeyChanged } from 'rxjs';\r\n\r\nof(\r\n  { age: 4, name: 'Foo1' },\r\n  { age: 7, name: 'Bar' },\r\n  { age: 5, name: 'Foo2' },\r\n  { age: 6, name: 'Foo3' }\r\n).pipe(\r\n  distinctUntilKeyChanged('name', (x, y) => x.substring(0, 3) === y.substring(0, 3))\r\n)\r\n.subscribe(x => console.log(x));\r\n\r\n// displays:\r\n// { age: 4, name: 'Foo1' }\r\n// { age: 7, name: 'Bar' }\r\n// { age: 5, name: 'Foo2' }\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link distinct}"},{"kind":25,"tagName":"see","text":"{@link distinctUntilChanged}"},{"kind":25,"tagName":"param","text":"{string} key String key for object property lookup on each item."},{"kind":25,"tagName":"param","text":"{function} [compare] Optional comparison function called to test if an item is distinct from the previous item in the source."},{"kind":25,"tagName":"return","text":"A function that returns an Observable that emits items from the\r\nsource Observable with distinct values based on the key specified."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"key","type":"keyof T","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"MonoTypeOperatorFunction<T>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"distinctUntilKeyChanged","modulePath":"..\\src\\internal\\operators\\distinctUntilKeyChanged.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"K","kind":39,"isConst":false,"constraint":"keyof T","variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"key","type":"K","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"compare","type":"(x: T[K], y: T[K]) => boolean","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"MonoTypeOperatorFunction<T>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"distinctUntilKeyChanged","modulePath":"..\\src\\internal\\operators\\distinctUntilKeyChanged.ts"}]}}},"usabilityResult":{"index":1}},"..\\src\\internal\\operators\\elementAt.ts":{"moduleComponents":{"elementAt":{"kind":13,"usabilityResult":{"wordCount":131,"index":1},"sources":{"name":"elementAt","statements":["if (index < 0) {\r\nthrow new ArgumentOutOfRangeError();\r\n}",{"isExported":false,"isDefaultExport":false,"hasDeclareKeyword":false,"docs":[],"kind":41,"declarationKind":"const","declarations":[{"name":"hasDefaultValue","initializer":"arguments.length >= 2","hasExclamationToken":false,"kind":40}]},"return (source: Observable<T>) =>\r\nsource.pipe(\r\n  filter((v, i) => i === index),\r\n  take(1),\r\n  hasDefaultValue ? defaultIfEmpty(defaultValue!) : throwIfEmpty(() => new ArgumentOutOfRangeError())\r\n);"],"parameters":[{"name":"index","type":"number","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"defaultValue","type":"D","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, T | D>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"D","kind":39,"isConst":false,"default":"T","variance":0}],"docs":[{"kind":24,"description":"\r\nEmits the single value at the specified `index` in a sequence of emissions\r\nfrom the source Observable.\r\n\r\n<span class=\"informal\">Emits only the i-th value, then completes.</span>\r\n\r\n![](elementAt.png)\r\n\r\n`elementAt` returns an Observable that emits the item at the specified\r\n`index` in the source Observable, or a default value if that `index` is out\r\nof range and the `default` argument is provided. If the `default` argument is\r\nnot given and the `index` is out of range, the output Observable will emit an\r\n`ArgumentOutOfRangeError` error.\r\n\r\n## Example\r\n\r\nEmit only the third click event\r\n\r\n```ts\r\nimport { fromEvent, elementAt } from 'rxjs';\r\n\r\nconst clicks = fromEvent(document, 'click');\r\nconst result = clicks.pipe(elementAt(2));\r\nresult.subscribe(x => console.log(x));\r\n\r\n// Results in:\r\n// click 1 = nothing\r\n// click 2 = nothing\r\n// click 3 = MouseEvent object logged to console\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link first}"},{"kind":25,"tagName":"see","text":"{@link last}"},{"kind":25,"tagName":"see","text":"{@link skip}"},{"kind":25,"tagName":"see","text":"{@link single}"},{"kind":25,"tagName":"see","text":"{@link take}"},{"kind":25,"tagName":"throws","text":"{ArgumentOutOfRangeError} When using `elementAt(i)`, it delivers an\r\nArgumentOutOfRangeError to the Observer's `error` callback if `i < 0` or the\r\nObservable has completed before emitting the i-th `next` notification."},{"kind":25,"tagName":"param","text":"{number} index Is the number `i` for the i-th source emission that has\r\nhappened since the subscription, starting from the number `0`."},{"kind":25,"tagName":"param","text":"{T} [defaultValue] The default value returned for missing indices."},{"kind":25,"tagName":"return","text":"A function that returns an Observable that emits a single item, if\r\nit is found. Otherwise, it will emit the default value if given. If not, it\r\nemits an error."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[],"functionName":"elementAt","modulePath":"..\\src\\internal\\operators\\elementAt.ts"}}},"usabilityResult":{"index":1}},"..\\src\\internal\\operators\\endWith.ts":{"moduleComponents":{"endWith":{"kind":13,"usabilityResult":{"wordCount":140,"index":1},"sources":{"name":"endWith","statements":["return (source: Observable<T>) => concat(source, of(...values)) as Observable<T>;"],"parameters":[{"name":"values","type":"Array<T | SchedulerLike>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":true}],"returnType":"MonoTypeOperatorFunction<T>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nReturns an observable that will emit all values from the source, then synchronously emit\r\nthe provided value(s) immediately after the source completes.\r\n\r\nNOTE: Passing a last argument of a Scheduler is _deprecated_, and may result in incorrect\r\ntypes in TypeScript.\r\n\r\nThis is useful for knowing when an observable ends. Particularly when paired with an\r\noperator like {@link takeUntil}\r\n\r\n![](endWith.png)\r\n\r\n## Example\r\n\r\nEmit values to know when an interval starts and stops. The interval will\r\nstop when a user clicks anywhere on the document.\r\n\r\n```ts\r\nimport { interval, map, fromEvent, startWith, takeUntil, endWith } from 'rxjs';\r\n\r\nconst ticker$ = interval(5000).pipe(\r\n  map(() => 'tick')\r\n);\r\n\r\nconst documentClicks$ = fromEvent(document, 'click');\r\n\r\nticker$.pipe(\r\n  startWith('interval started'),\r\n  takeUntil(documentClicks$),\r\n  endWith('interval ended by click')\r\n)\r\n.subscribe(x => console.log(x));\r\n\r\n// Result (assuming a user clicks after 15 seconds)\r\n// 'interval started'\r\n// 'tick'\r\n// 'tick'\r\n// 'tick'\r\n// 'interval ended by click'\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link startWith}"},{"kind":25,"tagName":"see","text":"{@link concat}"},{"kind":25,"tagName":"see","text":"{@link takeUntil}"},{"kind":25,"tagName":"param","text":"values Items you want the modified Observable to emit last."},{"kind":25,"tagName":"return","text":"A function that returns an Observable that emits all values from the\r\nsource, then synchronously emits the provided value(s) immediately after the\r\nsource completes."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"The `scheduler` parameter will be removed in v8. Use `scheduled` and `concatAll`. Details: https://rxjs.dev/deprecations/scheduler-argument"}]}],"hasDeclareKeyword":false,"parameters":[{"name":"scheduler","type":"SchedulerLike","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"MonoTypeOperatorFunction<T>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"endWith","modulePath":"..\\src\\internal\\operators\\endWith.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"A","kind":39,"isConst":false,"constraint":"unknown[]","default":"T[]","variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"The `scheduler` parameter will be removed in v8. Use `scheduled` and `concatAll`. Details: https://rxjs.dev/deprecations/scheduler-argument"}]}],"hasDeclareKeyword":false,"parameters":[{"name":"valuesAndScheduler","type":"[...A, SchedulerLike]","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":true}],"returnType":"OperatorFunction<T, T | ValueFromArray<A>>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"endWith","modulePath":"..\\src\\internal\\operators\\endWith.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"A","kind":39,"isConst":false,"constraint":"unknown[]","default":"T[]","variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"values","type":"A","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":true}],"returnType":"OperatorFunction<T, T | ValueFromArray<A>>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"endWith","modulePath":"..\\src\\internal\\operators\\endWith.ts"}]}}},"usabilityResult":{"index":1}},"..\\src\\internal\\operators\\every.ts":{"moduleComponents":{"every":{"kind":13,"usabilityResult":{"wordCount":80,"index":1},"sources":{"name":"every","statements":["return operate((source, subscriber) => {\r\nlet index = 0;\r\nsource.subscribe(\r\n  createOperatorSubscriber(\r\n    subscriber,\r\n    (value) => {\r\n      if (!predicate.call(thisArg, value, index++, source)) {\r\n        subscriber.next(false);\r\n        subscriber.complete();\r\n      }\r\n    },\r\n    () => {\r\n      subscriber.next(true);\r\n      subscriber.complete();\r\n    }\r\n  )\r\n);\r\n});"],"parameters":[{"name":"predicate","type":"(value: T, index: number, source: Observable<T>) => boolean","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"thisArg","type":"any","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, boolean>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nReturns an Observable that emits whether or not every item of the source satisfies the condition specified.\r\n\r\n<span class=\"informal\">If all values pass predicate before the source completes, emits true before completion,\r\notherwise emit false, then complete.</span>\r\n\r\n![](every.png)\r\n\r\n## Example\r\n\r\nA simple example emitting true if all elements are less than 5, false otherwise\r\n\r\n```ts\r\nimport { of, every } from 'rxjs';\r\n\r\nof(1, 2, 3, 4, 5, 6)\r\n  .pipe(every(x => x < 5))\r\n  .subscribe(x => console.log(x)); // -> false\r\n```\r\n","tags":[{"kind":25,"tagName":"param","text":"{function} predicate A function for determining if an item meets a specified condition."},{"kind":25,"tagName":"param","text":"{any} [thisArg] Optional object to use for `this` in the callback."},{"kind":25,"tagName":"return","text":"A function that returns an Observable of booleans that determines if\r\nall items of the source Observable meet the condition specified."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"predicate","type":"BooleanConstructor","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, Exclude<T, Falsy> extends never ? false : boolean>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"every","modulePath":"..\\src\\internal\\operators\\every.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Use a closure instead of a `thisArg`. Signatures accepting a `thisArg` will be removed in v8."}]}],"hasDeclareKeyword":false,"parameters":[{"name":"predicate","type":"BooleanConstructor","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"thisArg","type":"any","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, Exclude<T, Falsy> extends never ? false : boolean>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"every","modulePath":"..\\src\\internal\\operators\\every.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"A","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Use a closure instead of a `thisArg`. Signatures accepting a `thisArg` will be removed in v8."}]}],"hasDeclareKeyword":false,"parameters":[{"name":"predicate","type":"(this: A, value: T, index: number, source: Observable<T>) => boolean","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"thisArg","type":"A","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, boolean>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"every","modulePath":"..\\src\\internal\\operators\\every.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"predicate","type":"(value: T, index: number, source: Observable<T>) => boolean","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, boolean>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"every","modulePath":"..\\src\\internal\\operators\\every.ts"}]}}},"usabilityResult":{"index":1}},"..\\src\\internal\\operators\\exhaustAll.ts":{"moduleComponents":{"exhaustAll":{"kind":13,"usabilityResult":{"wordCount":174,"index":1},"sources":{"name":"exhaustAll","statements":["return exhaustMap(identity);"],"parameters":[],"returnType":"OperatorFunction<O, ObservedValueOf<O>>","typeParameters":[{"name":"O","kind":39,"isConst":false,"constraint":"ObservableInput<any>","variance":0}],"docs":[{"kind":24,"description":"\r\nConverts a higher-order Observable into a first-order Observable by dropping\r\ninner Observables while the previous inner Observable has not yet completed.\r\n\r\n<span class=\"informal\">Flattens an Observable-of-Observables by dropping the\r\nnext inner Observables while the current inner is still executing.</span>\r\n\r\n![](exhaustAll.svg)\r\n\r\n`exhaustAll` subscribes to an Observable that emits Observables, also known as a\r\nhigher-order Observable. Each time it observes one of these emitted inner\r\nObservables, the output Observable begins emitting the items emitted by that\r\ninner Observable. So far, it behaves like {@link mergeAll}. However,\r\n`exhaustAll` ignores every new inner Observable if the previous Observable has\r\nnot yet completed. Once that one completes, it will accept and flatten the\r\nnext inner Observable and repeat this process.\r\n\r\n## Example\r\n\r\nRun a finite timer for each click, only if there is no currently active timer\r\n\r\n```ts\r\nimport { fromEvent, map, interval, take, exhaustAll } from 'rxjs';\r\n\r\nconst clicks = fromEvent(document, 'click');\r\nconst higherOrder = clicks.pipe(\r\n  map(() => interval(1000).pipe(take(5)))\r\n);\r\nconst result = higherOrder.pipe(exhaustAll());\r\nresult.subscribe(x => console.log(x));\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link combineLatestAll}"},{"kind":25,"tagName":"see","text":"{@link concatAll}"},{"kind":25,"tagName":"see","text":"{@link switchAll}"},{"kind":25,"tagName":"see","text":"{@link switchMap}"},{"kind":25,"tagName":"see","text":"{@link mergeAll}"},{"kind":25,"tagName":"see","text":"{@link exhaustMap}"},{"kind":25,"tagName":"see","text":"{@link zipAll}"},{"kind":25,"tagName":"return","text":"A function that returns an Observable that takes a source of\r\nObservables and propagates the first Observable exclusively until it\r\ncompletes before subscribing to the next."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[],"functionName":"exhaustAll","modulePath":"..\\src\\internal\\operators\\exhaustAll.ts"}}},"usabilityResult":{"index":1}},"..\\src\\internal\\operators\\exhaustMap.ts":{"moduleComponents":{"exhaustMap":{"kind":13,"usabilityResult":{"wordCount":174,"index":1},"sources":{"name":"exhaustMap","statements":["if (resultSelector) {\r\n// DEPRECATED PATH\r\nreturn (source: Observable<T>) =>\r\n  source.pipe(exhaustMap((a, i) => innerFrom(project(a, i)).pipe(map((b: any, ii: any) => resultSelector(a, b, i, ii)))));\r\n}","return operate((source, subscriber) => {\r\nlet index = 0;\r\nlet innerSub: Subscriber<T> | null = null;\r\nlet isComplete = false;\r\nsource.subscribe(\r\n  createOperatorSubscriber(\r\n    subscriber,\r\n    (outerValue) => {\r\n      if (!innerSub) {\r\n        innerSub = createOperatorSubscriber(subscriber, undefined, () => {\r\n          innerSub = null;\r\n          isComplete && subscriber.complete();\r\n        });\r\n        innerFrom(project(outerValue, index++)).subscribe(innerSub);\r\n      }\r\n    },\r\n    () => {\r\n      isComplete = true;\r\n      !innerSub && subscriber.complete();\r\n    }\r\n  )\r\n);\r\n});"],"parameters":[{"name":"project","type":"(value: T, index: number) => O","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"resultSelector","type":"(outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, ObservedValueOf<O> | R>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"R","kind":39,"isConst":false,"variance":0},{"name":"O","kind":39,"isConst":false,"constraint":"ObservableInput<any>","variance":0}],"docs":[{"kind":24,"description":"\r\nProjects each source value to an Observable which is merged in the output\r\nObservable only if the previous projected Observable has completed.\r\n\r\n<span class=\"informal\">Maps each value to an Observable, then flattens all of\r\nthese inner Observables using {@link exhaustAll}.</span>\r\n\r\n![](exhaustMap.png)\r\n\r\nReturns an Observable that emits items based on applying a function that you\r\nsupply to each item emitted by the source Observable, where that function\r\nreturns an (so-called \"inner\") Observable. When it projects a source value to\r\nan Observable, the output Observable begins emitting the items emitted by\r\nthat projected Observable. However, `exhaustMap` ignores every new projected\r\nObservable if the previous projected Observable has not yet completed. Once\r\nthat one completes, it will accept and flatten the next projected Observable\r\nand repeat this process.\r\n\r\n## Example\r\n\r\nRun a finite timer for each click, only if there is no currently active timer\r\n\r\n```ts\r\nimport { fromEvent, exhaustMap, interval, take } from 'rxjs';\r\n\r\nconst clicks = fromEvent(document, 'click');\r\nconst result = clicks.pipe(\r\n  exhaustMap(() => interval(1000).pipe(take(5)))\r\n);\r\nresult.subscribe(x => console.log(x));\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link concatMap}"},{"kind":25,"tagName":"see","text":"{@link exhaust}"},{"kind":25,"tagName":"see","text":"{@link mergeMap}"},{"kind":25,"tagName":"see","text":"{@link switchMap}"},{"kind":25,"tagName":"param","text":"{function(value: T, ?index: number): ObservableInput} project A function\r\nthat, when applied to an item emitted by the source Observable, returns an\r\nObservable."},{"kind":25,"tagName":"return","text":"A function that returns an Observable containing projected\r\nObservables of each item of the source, ignoring projected Observables that\r\nstart before their preceding Observable has completed."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"O","kind":39,"isConst":false,"constraint":"ObservableInput<any>","variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"project","type":"(value: T, index: number) => O","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, ObservedValueOf<O>>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"exhaustMap","modulePath":"..\\src\\internal\\operators\\exhaustMap.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"O","kind":39,"isConst":false,"constraint":"ObservableInput<any>","variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"The `resultSelector` parameter will be removed in v8. Use an inner `map` instead. Details: https://rxjs.dev/deprecations/resultSelector"}]}],"hasDeclareKeyword":false,"parameters":[{"name":"project","type":"(value: T, index: number) => O","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"resultSelector","type":"undefined","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, ObservedValueOf<O>>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"exhaustMap","modulePath":"..\\src\\internal\\operators\\exhaustMap.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"I","kind":39,"isConst":false,"variance":0},{"name":"R","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"The `resultSelector` parameter will be removed in v8. Use an inner `map` instead. Details: https://rxjs.dev/deprecations/resultSelector"}]}],"hasDeclareKeyword":false,"parameters":[{"name":"project","type":"(value: T, index: number) => ObservableInput<I>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"resultSelector","type":"(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, R>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"exhaustMap","modulePath":"..\\src\\internal\\operators\\exhaustMap.ts"}]}}},"usabilityResult":{"index":1}},"..\\src\\internal\\operators\\expand.ts":{"moduleComponents":{"expand":{"kind":13,"usabilityResult":{"wordCount":196,"index":1},"sources":{"name":"expand","statements":["concurrent = (concurrent || 0) < 1 ? Infinity : concurrent;","return operate((source, subscriber) =>\r\n    mergeInternals(\r\n      // General merge params\r\n      source,\r\n      subscriber,\r\n      project,\r\n      concurrent,\r\n\r\n      // onBeforeNext\r\n      undefined,\r\n\r\n      // Expand-specific\r\n      true, // Use expand path\r\n      scheduler // Inner subscription scheduler\r\n    )\r\n  );"],"parameters":[{"name":"project","type":"(value: T, index: number) => O","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"concurrent","initializer":"Infinity","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"scheduler","type":"SchedulerLike","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, ObservedValueOf<O>>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"O","kind":39,"isConst":false,"constraint":"ObservableInput<unknown>","variance":0}],"docs":[{"kind":24,"description":"\r\nRecursively projects each source value to an Observable which is merged in\r\nthe output Observable.\r\n\r\n<span class=\"informal\">It's similar to {@link mergeMap}, but applies the\r\nprojection function to every source value as well as every output value.\r\nIt's recursive.</span>\r\n\r\n![](expand.png)\r\n\r\nReturns an Observable that emits items based on applying a function that you\r\nsupply to each item emitted by the source Observable, where that function\r\nreturns an Observable, and then merging those resulting Observables and\r\nemitting the results of this merger. *Expand* will re-emit on the output\r\nObservable every source value. Then, each output value is given to the\r\n`project` function which returns an inner Observable to be merged on the\r\noutput Observable. Those output values resulting from the projection are also\r\ngiven to the `project` function to produce new output values. This is how\r\n*expand* behaves recursively.\r\n\r\n## Example\r\n\r\nStart emitting the powers of two on every click, at most 10 of them\r\n\r\n```ts\r\nimport { fromEvent, map, expand, of, delay, take } from 'rxjs';\r\n\r\nconst clicks = fromEvent(document, 'click');\r\nconst powersOfTwo = clicks.pipe(\r\n  map(() => 1),\r\n  expand(x => of(2 * x).pipe(delay(1000))),\r\n  take(10)\r\n);\r\npowersOfTwo.subscribe(x => console.log(x));\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link mergeMap}"},{"kind":25,"tagName":"see","text":"{@link mergeScan}"},{"kind":25,"tagName":"param","text":"{function(value: T, index: number) => Observable} project A function\r\nthat, when applied to an item emitted by the source or the output Observable,\r\nreturns an Observable."},{"kind":25,"tagName":"param","text":"{number} [concurrent=Infinity] Maximum number of input\r\nObservables being subscribed to concurrently."},{"kind":25,"tagName":"param","text":"{SchedulerLike} [scheduler=null] The {@link SchedulerLike} to use for subscribing to\r\neach projected inner Observable."},{"kind":25,"tagName":"return","text":"A function that returns an Observable that emits the source values\r\nand also result of applying the projection function to each value emitted on\r\nthe output Observable and merging the results of the Observables obtained\r\nfrom this transformation."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"O","kind":39,"isConst":false,"constraint":"ObservableInput<unknown>","variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"project","type":"(value: T, index: number) => O","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"concurrent","type":"number","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"scheduler","type":"SchedulerLike","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, ObservedValueOf<O>>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"expand","modulePath":"..\\src\\internal\\operators\\expand.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"O","kind":39,"isConst":false,"constraint":"ObservableInput<unknown>","variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"The `scheduler` parameter will be removed in v8. If you need to schedule the inner subscription,\r\nuse `subscribeOn` within the projection function: `expand((value) => fn(value).pipe(subscribeOn(scheduler)))`.\r\nDetails: Details: https://rxjs.dev/deprecations/scheduler-argument"}]}],"hasDeclareKeyword":false,"parameters":[{"name":"project","type":"(value: T, index: number) => O","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"concurrent","type":"number | undefined","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"scheduler","type":"SchedulerLike","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, ObservedValueOf<O>>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"expand","modulePath":"..\\src\\internal\\operators\\expand.ts"}]}}},"usabilityResult":{"index":1}},"..\\src\\internal\\operators\\filter.ts":{"moduleComponents":{"filter":{"kind":13,"usabilityResult":{"wordCount":141,"index":1},"sources":{"name":"filter","statements":["return operate((source, subscriber) => {\r\n    // An index passed to our predicate function on each call.\r\n    let index = 0;\r\n\r\n    // Subscribe to the source, all errors and completions are\r\n    // forwarded to the consumer.\r\n    source.subscribe(\r\n      // Call the predicate with the appropriate `this` context,\r\n      // if the predicate returns `true`, then send the value\r\n      // to the consumer.\r\n      createOperatorSubscriber(subscriber, (value) => predicate.call(thisArg, value, index++) && subscriber.next(value))\r\n    );\r\n  });"],"parameters":[{"name":"predicate","type":"(value: T, index: number) => boolean","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"thisArg","type":"any","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"MonoTypeOperatorFunction<T>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nFilter items emitted by the source Observable by only emitting those that\r\nsatisfy a specified predicate.\r\n\r\n<span class=\"informal\">Like\r\n[Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\r\nit only emits a value from the source if it passes a criterion function.</span>\r\n\r\n![](filter.png)\r\n\r\nSimilar to the well-known `Array.prototype.filter` method, this operator\r\ntakes values from the source Observable, passes them through a `predicate`\r\nfunction and only emits those values that yielded `true`.\r\n\r\n## Example\r\n\r\nEmit only click events whose target was a DIV element\r\n\r\n```ts\r\nimport { fromEvent, filter } from 'rxjs';\r\n\r\nconst div = document.createElement('div');\r\ndiv.style.cssText = 'width: 200px; height: 200px; background: #09c;';\r\ndocument.body.appendChild(div);\r\n\r\nconst clicks = fromEvent(document, 'click');\r\nconst clicksOnDivs = clicks.pipe(filter(ev => (<HTMLElement>ev.target).tagName === 'DIV'));\r\nclicksOnDivs.subscribe(x => console.log(x));\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link distinct}"},{"kind":25,"tagName":"see","text":"{@link distinctUntilChanged}"},{"kind":25,"tagName":"see","text":"{@link distinctUntilKeyChanged}"},{"kind":25,"tagName":"see","text":"{@link ignoreElements}"},{"kind":25,"tagName":"see","text":"{@link partition}"},{"kind":25,"tagName":"see","text":"{@link skip}"},{"kind":25,"tagName":"param","text":"predicate A function that\r\nevaluates each value emitted by the source Observable. If it returns `true`,\r\nthe value is emitted, if `false` the value is not passed to the output\r\nObservable. The `index` parameter is the number `i` for the i-th source\r\nemission that has happened since the subscription, starting from the number\r\n`0`."},{"kind":25,"tagName":"param","text":"thisArg An optional argument to determine the value of `this`\r\nin the `predicate` function."},{"kind":25,"tagName":"return","text":"A function that returns an Observable that emits items from the\r\nsource Observable that satisfy the specified `predicate`."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"S","kind":39,"isConst":false,"constraint":"T","variance":0},{"name":"A","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Use a closure instead of a `thisArg`. Signatures accepting a `thisArg` will be removed in v8."}]}],"hasDeclareKeyword":false,"parameters":[{"name":"predicate","type":"(this: A, value: T, index: number) => value is S","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"thisArg","type":"A","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, S>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"filter","modulePath":"..\\src\\internal\\operators\\filter.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"S","kind":39,"isConst":false,"constraint":"T","variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"predicate","type":"(value: T, index: number) => value is S","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, S>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"filter","modulePath":"..\\src\\internal\\operators\\filter.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"predicate","type":"BooleanConstructor","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, TruthyTypesOf<T>>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"filter","modulePath":"..\\src\\internal\\operators\\filter.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"A","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Use a closure instead of a `thisArg`. Signatures accepting a `thisArg` will be removed in v8."}]}],"hasDeclareKeyword":false,"parameters":[{"name":"predicate","type":"(this: A, value: T, index: number) => boolean","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"thisArg","type":"A","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"MonoTypeOperatorFunction<T>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"filter","modulePath":"..\\src\\internal\\operators\\filter.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"predicate","type":"(value: T, index: number) => boolean","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"MonoTypeOperatorFunction<T>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"filter","modulePath":"..\\src\\internal\\operators\\filter.ts"}]}}},"usabilityResult":{"index":1}},"..\\src\\internal\\operators\\finalize.ts":{"moduleComponents":{"finalize":{"kind":13,"usabilityResult":{"wordCount":172,"index":1},"sources":{"name":"finalize","statements":["return operate((source, subscriber) => {\r\n// TODO: This try/finally was only added for `useDeprecatedSynchronousErrorHandling`.\r\n// REMOVE THIS WHEN THAT HOT GARBAGE IS REMOVED IN V8.\r\ntry {\r\n  source.subscribe(subscriber);\r\n} finally {\r\n  subscriber.add(callback);\r\n}\r\n});"],"parameters":[{"name":"callback","type":"() => void","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"MonoTypeOperatorFunction<T>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nReturns an Observable that mirrors the source Observable, but will call a specified function when\r\nthe source terminates on complete or error.\r\nThe specified function will also be called when the subscriber explicitly unsubscribes.\r\n\r\n## Examples\r\n\r\nExecute callback function when the observable completes\r\n\r\n```ts\r\nimport { interval, take, finalize } from 'rxjs';\r\n\r\n// emit value in sequence every 1 second\r\nconst source = interval(1000);\r\nconst example = source.pipe(\r\n  take(5), //take only the first 5 values\r\n  finalize(() => console.log('Sequence complete')) // Execute when the observable completes\r\n);\r\nconst subscribe = example.subscribe(val => console.log(val));\r\n\r\n// results:\r\n// 0\r\n// 1\r\n// 2\r\n// 3\r\n// 4\r\n// 'Sequence complete'\r\n```\r\n\r\nExecute callback function when the subscriber explicitly unsubscribes\r\n\r\n```ts\r\nimport { interval, finalize, tap, noop, timer } from 'rxjs';\r\n\r\nconst source = interval(100).pipe(\r\n  finalize(() => console.log('[finalize] Called')),\r\n  tap({\r\n    next: () => console.log('[next] Called'),\r\n    error: () => console.log('[error] Not called'),\r\n    complete: () => console.log('[tap complete] Not called')\r\n  })\r\n);\r\n\r\nconst sub = source.subscribe({\r\n  next: x => console.log(x),\r\n  error: noop,\r\n  complete: () => console.log('[complete] Not called')\r\n});\r\n\r\ntimer(150).subscribe(() => sub.unsubscribe());\r\n\r\n// results:\r\n// '[next] Called'\r\n// 0\r\n// '[finalize] Called'\r\n```\r\n","tags":[{"kind":25,"tagName":"param","text":"{function} callback Function to be called when source terminates."},{"kind":25,"tagName":"return","text":"A function that returns an Observable that mirrors the source, but\r\nwill call the specified function on termination."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[],"functionName":"finalize","modulePath":"..\\src\\internal\\operators\\finalize.ts"}}},"usabilityResult":{"index":1}},"..\\src\\internal\\operators\\find.ts":{"moduleComponents":{"find":{"kind":13,"usabilityResult":{"wordCount":142,"index":1},"sources":{"name":"find","statements":["return operate(createFind(predicate, thisArg, 'value'));"],"parameters":[{"name":"predicate","type":"(value: T, index: number, source: Observable<T>) => boolean","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"thisArg","type":"any","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, T | undefined>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nEmits only the first value emitted by the source Observable that meets some\r\ncondition.\r\n\r\n<span class=\"informal\">Finds the first value that passes some test and emits\r\nthat.</span>\r\n\r\n![](find.png)\r\n\r\n`find` searches for the first item in the source Observable that matches the\r\nspecified condition embodied by the `predicate`, and returns the first\r\noccurrence in the source. Unlike {@link first}, the `predicate` is required\r\nin `find`, and does not emit an error if a valid value is not found\r\n(emits `undefined` instead).\r\n\r\n## Example\r\n\r\nFind and emit the first click that happens on a DIV element\r\n\r\n```ts\r\nimport { fromEvent, find } from 'rxjs';\r\n\r\nconst div = document.createElement('div');\r\ndiv.style.cssText = 'width: 200px; height: 200px; background: #09c;';\r\ndocument.body.appendChild(div);\r\n\r\nconst clicks = fromEvent(document, 'click');\r\nconst result = clicks.pipe(find(ev => (<HTMLElement>ev.target).tagName === 'DIV'));\r\nresult.subscribe(x => console.log(x));\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link filter}"},{"kind":25,"tagName":"see","text":"{@link first}"},{"kind":25,"tagName":"see","text":"{@link findIndex}"},{"kind":25,"tagName":"see","text":"{@link take}"},{"kind":25,"tagName":"param","text":"{function(value: T, index: number, source: Observable<T>): boolean} predicate\r\nA function called with each item to test for condition matching."},{"kind":25,"tagName":"param","text":"{any} [thisArg] An optional argument to determine the value of `this`\r\nin the `predicate` function."},{"kind":25,"tagName":"return","text":"A function that returns an Observable that emits the first item that\r\nmatches the condition."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"predicate","type":"BooleanConstructor","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, TruthyTypesOf<T>>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"find","modulePath":"..\\src\\internal\\operators\\find.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"S","kind":39,"isConst":false,"constraint":"T","variance":0},{"name":"A","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Use a closure instead of a `thisArg`. Signatures accepting a `thisArg` will be removed in v8."}]}],"hasDeclareKeyword":false,"parameters":[{"name":"predicate","type":"(this: A, value: T, index: number, source: Observable<T>) => value is S","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"thisArg","type":"A","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, S | undefined>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"find","modulePath":"..\\src\\internal\\operators\\find.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"S","kind":39,"isConst":false,"constraint":"T","variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"predicate","type":"(value: T, index: number, source: Observable<T>) => value is S","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, S | undefined>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"find","modulePath":"..\\src\\internal\\operators\\find.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"A","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Use a closure instead of a `thisArg`. Signatures accepting a `thisArg` will be removed in v8."}]}],"hasDeclareKeyword":false,"parameters":[{"name":"predicate","type":"(this: A, value: T, index: number, source: Observable<T>) => boolean","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"thisArg","type":"A","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, T | undefined>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"find","modulePath":"..\\src\\internal\\operators\\find.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"predicate","type":"(value: T, index: number, source: Observable<T>) => boolean","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, T | undefined>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"find","modulePath":"..\\src\\internal\\operators\\find.ts"}]}}},"usabilityResult":{"index":1}},"..\\src\\internal\\operators\\findIndex.ts":{"moduleComponents":{"findIndex":{"kind":13,"usabilityResult":{"wordCount":153,"index":1},"sources":{"name":"findIndex","statements":["return operate(createFind(predicate, thisArg, 'index'));"],"parameters":[{"name":"predicate","type":"(value: T, index: number, source: Observable<T>) => boolean","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"thisArg","type":"any","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, number>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nEmits only the index of the first value emitted by the source Observable that\r\nmeets some condition.\r\n\r\n<span class=\"informal\">It's like {@link find}, but emits the index of the\r\nfound value, not the value itself.</span>\r\n\r\n![](findIndex.png)\r\n\r\n`findIndex` searches for the first item in the source Observable that matches\r\nthe specified condition embodied by the `predicate`, and returns the\r\n(zero-based) index of the first occurrence in the source. Unlike\r\n{@link first}, the `predicate` is required in `findIndex`, and does not emit\r\nan error if a valid value is not found.\r\n\r\n## Example\r\n\r\nEmit the index of first click that happens on a DIV element\r\n\r\n```ts\r\nimport { fromEvent, findIndex } from 'rxjs';\r\n\r\nconst div = document.createElement('div');\r\ndiv.style.cssText = 'width: 200px; height: 200px; background: #09c;';\r\ndocument.body.appendChild(div);\r\n\r\nconst clicks = fromEvent(document, 'click');\r\nconst result = clicks.pipe(findIndex(ev => (<HTMLElement>ev.target).tagName === 'DIV'));\r\nresult.subscribe(x => console.log(x));\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link filter}"},{"kind":25,"tagName":"see","text":"{@link find}"},{"kind":25,"tagName":"see","text":"{@link first}"},{"kind":25,"tagName":"see","text":"{@link take}"},{"kind":25,"tagName":"param","text":"{function(value: T, index: number, source: Observable<T>): boolean} predicate\r\nA function called with each item to test for condition matching."},{"kind":25,"tagName":"param","text":"{any} [thisArg] An optional argument to determine the value of `this`\r\nin the `predicate` function."},{"kind":25,"tagName":"return","text":"A function that returns an Observable that emits the index of the\r\nfirst item that matches the condition."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"predicate","type":"BooleanConstructor","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, T extends Falsy ? -1 : number>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"findIndex","modulePath":"..\\src\\internal\\operators\\findIndex.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Use a closure instead of a `thisArg`. Signatures accepting a `thisArg` will be removed in v8."}]}],"hasDeclareKeyword":false,"parameters":[{"name":"predicate","type":"BooleanConstructor","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"thisArg","type":"any","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, T extends Falsy ? -1 : number>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"findIndex","modulePath":"..\\src\\internal\\operators\\findIndex.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"A","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Use a closure instead of a `thisArg`. Signatures accepting a `thisArg` will be removed in v8."}]}],"hasDeclareKeyword":false,"parameters":[{"name":"predicate","type":"(this: A, value: T, index: number, source: Observable<T>) => boolean","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"thisArg","type":"A","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, number>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"findIndex","modulePath":"..\\src\\internal\\operators\\findIndex.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"predicate","type":"(value: T, index: number, source: Observable<T>) => boolean","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, number>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"findIndex","modulePath":"..\\src\\internal\\operators\\findIndex.ts"}]}}},"usabilityResult":{"index":1}},"..\\src\\internal\\operators\\first.ts":{"moduleComponents":{"first":{"kind":13,"usabilityResult":{"wordCount":177,"index":1},"sources":{"name":"first","statements":[{"isExported":false,"isDefaultExport":false,"hasDeclareKeyword":false,"docs":[],"kind":41,"declarationKind":"const","declarations":[{"name":"hasDefaultValue","initializer":"arguments.length >= 2","hasExclamationToken":false,"kind":40}]},"return (source: Observable<T>) =>\r\nsource.pipe(\r\n  predicate ? filter((v, i) => predicate(v, i, source)) : identity,\r\n  take(1),\r\n  hasDefaultValue ? defaultIfEmpty(defaultValue!) : throwIfEmpty(() => new EmptyError())\r\n);"],"parameters":[{"name":"predicate","type":"((value: T, index: number, source: Observable<T>) => boolean) | null","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"defaultValue","type":"D","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, T | D>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"D","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nEmits only the first value (or the first value that meets some condition)\r\nemitted by the source Observable.\r\n\r\n<span class=\"informal\">Emits only the first value. Or emits only the first\r\nvalue that passes some test.</span>\r\n\r\n![](first.png)\r\n\r\nIf called with no arguments, `first` emits the first value of the source\r\nObservable, then completes. If called with a `predicate` function, `first`\r\nemits the first value of the source that matches the specified condition. Throws an error if\r\n`defaultValue` was not provided and a matching element is not found.\r\n\r\n## Examples\r\n\r\nEmit only the first click that happens on the DOM\r\n\r\n```ts\r\nimport { fromEvent, first } from 'rxjs';\r\n\r\nconst clicks = fromEvent(document, 'click');\r\nconst result = clicks.pipe(first());\r\nresult.subscribe(x => console.log(x));\r\n```\r\n\r\nEmits the first click that happens on a DIV\r\n\r\n```ts\r\nimport { fromEvent, first } from 'rxjs';\r\n\r\nconst div = document.createElement('div');\r\ndiv.style.cssText = 'width: 200px; height: 200px; background: #09c;';\r\ndocument.body.appendChild(div);\r\n\r\nconst clicks = fromEvent(document, 'click');\r\nconst result = clicks.pipe(first(ev => (<HTMLElement>ev.target).tagName === 'DIV'));\r\nresult.subscribe(x => console.log(x));\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link filter}"},{"kind":25,"tagName":"see","text":"{@link find}"},{"kind":25,"tagName":"see","text":"{@link take}"},{"kind":25,"tagName":"throws","text":"{EmptyError} Delivers an EmptyError to the Observer's `error`\r\ncallback if the Observable completes before any `next` notification was sent.\r\nThis is how `first()` is different from {@link take}(1) which completes instead."},{"kind":25,"tagName":"param","text":"{function(value: T, index: number, source: Observable<T>): boolean} [predicate]\r\nAn optional function called with each item to test for condition matching."},{"kind":25,"tagName":"param","text":"{D} [defaultValue] The default value emitted in case no valid value\r\nwas found on the source."},{"kind":25,"tagName":"return","text":"A function that returns an Observable that emits the first item that\r\nmatches the condition."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"D","kind":39,"isConst":false,"default":"T","variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"predicate","type":"null","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"defaultValue","type":"D","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, T | D>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"first","modulePath":"..\\src\\internal\\operators\\first.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"predicate","type":"BooleanConstructor","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, TruthyTypesOf<T>>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"first","modulePath":"..\\src\\internal\\operators\\first.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"D","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"predicate","type":"BooleanConstructor","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"defaultValue","type":"D","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, TruthyTypesOf<T> | D>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"first","modulePath":"..\\src\\internal\\operators\\first.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"S","kind":39,"isConst":false,"constraint":"T","variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"predicate","type":"(value: T, index: number, source: Observable<T>) => value is S","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"defaultValue","type":"S","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, S>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"first","modulePath":"..\\src\\internal\\operators\\first.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"S","kind":39,"isConst":false,"constraint":"T","variance":0},{"name":"D","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"predicate","type":"(value: T, index: number, source: Observable<T>) => value is S","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"defaultValue","type":"D","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, S | D>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"first","modulePath":"..\\src\\internal\\operators\\first.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"D","kind":39,"isConst":false,"default":"T","variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"predicate","type":"(value: T, index: number, source: Observable<T>) => boolean","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"defaultValue","type":"D","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, T | D>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"first","modulePath":"..\\src\\internal\\operators\\first.ts"}]}}},"usabilityResult":{"index":1}},"..\\src\\internal\\operators\\groupBy.ts":{"moduleComponents":{"groupBy":{"kind":13,"usabilityResult":{"wordCount":284,"index":1},"sources":{"name":"groupBy","statements":["return operate((source, subscriber) => {\r\n    let element: ((value: any) => any) | void;\r\n    if (!elementOrOptions || typeof elementOrOptions === 'function') {\r\n      element = elementOrOptions as ((value: any) => any);\r\n    } else {\r\n      ({ duration, element, connector } = elementOrOptions);\r\n    }\r\n\r\n    // A lookup for the groups that we have so far.\r\n    const groups = new Map<K, SubjectLike<any>>();\r\n\r\n    // Used for notifying all groups and the subscriber in the same way.\r\n    const notify = (cb: (group: Observer<any>) => void) => {\r\n      groups.forEach(cb);\r\n      cb(subscriber);\r\n    };\r\n\r\n    // Used to handle errors from the source, AND errors that occur during the\r\n    // next call from the source.\r\n    const handleError = (err: any) => notify((consumer) => consumer.error(err));\r\n\r\n    // The number of actively subscribed groups\r\n    let activeGroups = 0;\r\n\r\n    // Whether or not teardown was attempted on this subscription.\r\n    let teardownAttempted = false;\r\n\r\n    // Capturing a reference to this, because we need a handle to it\r\n    // in `createGroupedObservable` below. This is what we use to\r\n    // subscribe to our source observable. This sometimes needs to be unsubscribed\r\n    // out-of-band with our `subscriber` which is the downstream subscriber, or destination,\r\n    // in cases where a user unsubscribes from the main resulting subscription, but\r\n    // still has groups from this subscription subscribed and would expect values from it\r\n    // Consider:  `source.pipe(groupBy(fn), take(2))`.\r\n    const groupBySourceSubscriber = new OperatorSubscriber(\r\n      subscriber,\r\n      (value: T) => {\r\n        // Because we have to notify all groups of any errors that occur in here,\r\n        // we have to add our own try/catch to ensure that those errors are propagated.\r\n        // OperatorSubscriber will only send the error to the main subscriber.\r\n        try {\r\n          const key = keySelector(value);\r\n\r\n          let group = groups.get(key);\r\n          if (!group) {\r\n            // Create our group subject\r\n            groups.set(key, (group = connector ? connector() : new Subject<any>()));\r\n\r\n            // Emit the grouped observable. Note that we can't do a simple `asObservable()` here,\r\n            // because the grouped observable has special semantics around reference counting\r\n            // to ensure we don't sever our connection to the source prematurely.\r\n            const grouped = createGroupedObservable(key, group);\r\n            subscriber.next(grouped);\r\n\r\n            if (duration) {\r\n              const durationSubscriber = createOperatorSubscriber(\r\n                // Providing the group here ensures that it is disposed of -- via `unsubscribe` --\r\n                // when the duration subscription is torn down. That is important, because then\r\n                // if someone holds a handle to the grouped observable and tries to subscribe to it\r\n                // after the connection to the source has been severed, they will get an\r\n                // `ObjectUnsubscribedError` and know they can't possibly get any notifications.\r\n                group as any,\r\n                () => {\r\n                  // Our duration notified! We can complete the group.\r\n                  // The group will be removed from the map in the finalization phase.\r\n                  group!.complete();\r\n                  durationSubscriber?.unsubscribe();\r\n                },\r\n                // Completions are also sent to the group, but just the group.\r\n                undefined,\r\n                // Errors on the duration subscriber are sent to the group\r\n                // but only the group. They are not sent to the main subscription.\r\n                undefined,\r\n                // Finalization: Remove this group from our map.\r\n                () => groups.delete(key)\r\n              );\r\n\r\n              // Start our duration notifier.\r\n              groupBySourceSubscriber.add(innerFrom(duration(grouped)).subscribe(durationSubscriber));\r\n            }\r\n          }\r\n\r\n          // Send the value to our group.\r\n          group.next(element ? element(value) : value);\r\n        } catch (err) {\r\n          handleError(err);\r\n        }\r\n      },\r\n      // Source completes.\r\n      () => notify((consumer) => consumer.complete()),\r\n      // Error from the source.\r\n      handleError,\r\n      // Free up memory.\r\n      // When the source subscription is _finally_ torn down, release the subjects and keys\r\n      // in our groups Map, they may be quite large and we don't want to keep them around if we\r\n      // don't have to.\r\n      () => groups.clear(),\r\n      () => {\r\n        teardownAttempted = true;\r\n        // We only kill our subscription to the source if we have\r\n        // no active groups. As stated above, consider this scenario:\r\n        // source$.pipe(groupBy(fn), take(2)).\r\n        return activeGroups === 0;\r\n      }\r\n    );\r\n\r\n    // Subscribe to the source\r\n    source.subscribe(groupBySourceSubscriber);\r\n\r\n    /**\r\n     * Creates the actual grouped observable returned.\r\n     * @param key The key of the group\r\n     * @param groupSubject The subject that fuels the group\r\n     */\r\n    function createGroupedObservable(key: K, groupSubject: SubjectLike<any>) {\r\n      const result: any = new Observable<T>((groupSubscriber) => {\r\n        activeGroups++;\r\n        const innerSub = groupSubject.subscribe(groupSubscriber);\r\n        return () => {\r\n          innerSub.unsubscribe();\r\n          // We can kill the subscription to our source if we now have no more\r\n          // active groups subscribed, and a finalization was already attempted on\r\n          // the source.\r\n          --activeGroups === 0 && teardownAttempted && groupBySourceSubscriber.unsubscribe();\r\n        };\r\n      });\r\n      result.key = key;\r\n      return result;\r\n    }\r\n  });"],"parameters":[{"name":"keySelector","type":"(value: T) => K","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"elementOrOptions","type":"((value: any) => any) | void | BasicGroupByOptions<K, T> | GroupByOptionsWithElement<K, R, T>","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"duration","type":"(grouped: GroupedObservable<any, any>) => ObservableInput<any>","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"connector","type":"() => SubjectLike<any>","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, GroupedObservable<K, R>>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"K","kind":39,"isConst":false,"variance":0},{"name":"R","kind":39,"isConst":false,"variance":0}],"docs":[],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"K","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"key","type":"(value: T) => K","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"options","type":"BasicGroupByOptions<K, T>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, GroupedObservable<K, T>>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"groupBy","modulePath":"..\\src\\internal\\operators\\groupBy.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"K","kind":39,"isConst":false,"variance":0},{"name":"E","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"key","type":"(value: T) => K","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"options","type":"GroupByOptionsWithElement<K, E, T>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, GroupedObservable<K, E>>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"groupBy","modulePath":"..\\src\\internal\\operators\\groupBy.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"K","kind":39,"isConst":false,"constraint":"T","variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"key","type":"(value: T) => value is K","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, GroupedObservable<true, K> | GroupedObservable<false, Exclude<T, K>>>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"groupBy","modulePath":"..\\src\\internal\\operators\\groupBy.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"K","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"key","type":"(value: T) => K","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, GroupedObservable<K, T>>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"groupBy","modulePath":"..\\src\\internal\\operators\\groupBy.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"K","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"use the options parameter instead."}]}],"hasDeclareKeyword":false,"parameters":[{"name":"key","type":"(value: T) => K","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"element","type":"void","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"duration","type":"(grouped: GroupedObservable<K, T>) => Observable<any>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, GroupedObservable<K, T>>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"groupBy","modulePath":"..\\src\\internal\\operators\\groupBy.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"K","kind":39,"isConst":false,"variance":0},{"name":"R","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"use the options parameter instead."}]}],"hasDeclareKeyword":false,"parameters":[{"name":"key","type":"(value: T) => K","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"element","type":"(value: T) => R","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"duration","type":"(grouped: GroupedObservable<K, R>) => Observable<any>","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, GroupedObservable<K, R>>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"groupBy","modulePath":"..\\src\\internal\\operators\\groupBy.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"K","kind":39,"isConst":false,"variance":0},{"name":"R","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nGroups the items emitted by an Observable according to a specified criterion,\r\nand emits these grouped items as `GroupedObservables`, one\r\n{@link GroupedObservable} per group.\r\n\r\n![](groupBy.png)\r\n\r\nWhen the Observable emits an item, a key is computed for this item with the key function.\r\n\r\nIf a {@link GroupedObservable} for this key exists, this {@link GroupedObservable} emits. Otherwise, a new\r\n{@link GroupedObservable} for this key is created and emits.\r\n\r\nA {@link GroupedObservable} represents values belonging to the same group represented by a common key. The common\r\nkey is available as the `key` field of a {@link GroupedObservable} instance.\r\n\r\nThe elements emitted by {@link GroupedObservable}s are by default the items emitted by the Observable, or elements\r\nreturned by the element function.\r\n\r\n## Examples\r\n\r\nGroup objects by `id` and return as array\r\n\r\n```ts\r\nimport { of, groupBy, mergeMap, reduce } from 'rxjs';\r\n\r\nof(\r\n  { id: 1, name: 'JavaScript' },\r\n  { id: 2, name: 'Parcel' },\r\n  { id: 2, name: 'webpack' },\r\n  { id: 1, name: 'TypeScript' },\r\n  { id: 3, name: 'TSLint' }\r\n).pipe(\r\n  groupBy(p => p.id),\r\n  mergeMap(group$ => group$.pipe(reduce((acc, cur) => [...acc, cur], [])))\r\n)\r\n.subscribe(p => console.log(p));\r\n\r\n// displays:\r\n// [{ id: 1, name: 'JavaScript' }, { id: 1, name: 'TypeScript'}]\r\n// [{ id: 2, name: 'Parcel' }, { id: 2, name: 'webpack'}]\r\n// [{ id: 3, name: 'TSLint' }]\r\n```\r\n\r\nPivot data on the `id` field\r\n\r\n```ts\r\nimport { of, groupBy, mergeMap, reduce, map } from 'rxjs';\r\n\r\nof(\r\n  { id: 1, name: 'JavaScript' },\r\n  { id: 2, name: 'Parcel' },\r\n  { id: 2, name: 'webpack' },\r\n  { id: 1, name: 'TypeScript' },\r\n  { id: 3, name: 'TSLint' }\r\n).pipe(\r\n  groupBy(p => p.id, { element: p => p.name }),\r\n  mergeMap(group$ => group$.pipe(reduce((acc, cur) => [...acc, cur], [`${ group$.key }`]))),\r\n  map(arr => ({ id: parseInt(arr[0], 10), values: arr.slice(1) }))\r\n)\r\n.subscribe(p => console.log(p));\r\n\r\n// displays:\r\n// { id: 1, values: [ 'JavaScript', 'TypeScript' ] }\r\n// { id: 2, values: [ 'Parcel', 'webpack' ] }\r\n// { id: 3, values: [ 'TSLint' ] }\r\n```\r\n","tags":[{"kind":25,"tagName":"param","text":"key A function that extracts the key\r\nfor each item."},{"kind":25,"tagName":"param","text":"element A function that extracts the\r\nreturn element for each item."},{"kind":25,"tagName":"param","text":"duration\r\nA function that returns an Observable to determine how long each group should\r\nexist."},{"kind":25,"tagName":"param","text":"connector Factory function to create an\r\nintermediate Subject through which grouped elements are emitted."},{"kind":25,"tagName":"return","text":"A function that returns an Observable that emits GroupedObservables,\r\neach of which corresponds to a unique key value and each of which emits\r\nthose items from the source Observable that share that key value."},{"kind":25,"tagName":"deprecated","text":"Use the options parameter instead."}]}],"hasDeclareKeyword":false,"parameters":[{"name":"key","type":"(value: T) => K","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"element","type":"(value: T) => R","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"duration","type":"(grouped: GroupedObservable<K, R>) => Observable<any>","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"connector","type":"() => Subject<R>","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, GroupedObservable<K, R>>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"groupBy","modulePath":"..\\src\\internal\\operators\\groupBy.ts"}]}}},"usabilityResult":{"index":1}},"..\\src\\internal\\operators\\ignoreElements.ts":{"moduleComponents":{"ignoreElements":{"kind":13,"usabilityResult":{"wordCount":134,"index":1},"sources":{"name":"ignoreElements","statements":["return operate((source, subscriber) => {\r\nsource.subscribe(createOperatorSubscriber(subscriber, noop));\r\n});"],"parameters":[],"returnType":"OperatorFunction<unknown, never>","typeParameters":[],"docs":[{"kind":24,"description":"\r\nIgnores all items emitted by the source Observable and only passes calls of `complete` or `error`.\r\n\r\n![](ignoreElements.png)\r\n\r\nThe `ignoreElements` operator suppresses all items emitted by the source Observable,\r\nbut allows its termination notification (either `error` or `complete`) to pass through unchanged.\r\n\r\nIf you do not care about the items being emitted by an Observable, but you do want to be notified\r\nwhen it completes or when it terminates with an error, you can apply the `ignoreElements` operator\r\nto the Observable, which will ensure that it will never call its observers’ `next` handlers.\r\n\r\n## Example\r\n\r\nIgnore all `next` emissions from the source\r\n\r\n```ts\r\nimport { of, ignoreElements } from 'rxjs';\r\n\r\nof('you', 'talking', 'to', 'me')\r\n  .pipe(ignoreElements())\r\n  .subscribe({\r\n    next: word => console.log(word),\r\n    error: err => console.log('error:', err),\r\n    complete: () => console.log('the end'),\r\n  });\r\n\r\n// result:\r\n// 'the end'\r\n```\r\n","tags":[{"kind":25,"tagName":"return","text":"A function that returns an empty Observable that only calls\r\n`complete` or `error`, based on which one is called by the source\r\nObservable."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[],"functionName":"ignoreElements","modulePath":"..\\src\\internal\\operators\\ignoreElements.ts"}}},"usabilityResult":{"index":1}},"..\\src\\internal\\operators\\isEmpty.ts":{"moduleComponents":{"isEmpty":{"kind":13,"usabilityResult":{"wordCount":190,"index":1},"sources":{"name":"isEmpty","statements":["return operate((source, subscriber) => {\r\nsource.subscribe(\r\n  createOperatorSubscriber(\r\n    subscriber,\r\n    () => {\r\n      subscriber.next(false);\r\n      subscriber.complete();\r\n    },\r\n    () => {\r\n      subscriber.next(true);\r\n      subscriber.complete();\r\n    }\r\n  )\r\n);\r\n});"],"parameters":[],"returnType":"OperatorFunction<T, boolean>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nEmits `false` if the input Observable emits any values, or emits `true` if the\r\ninput Observable completes without emitting any values.\r\n\r\n<span class=\"informal\">Tells whether any values are emitted by an Observable.</span>\r\n\r\n![](isEmpty.png)\r\n\r\n`isEmpty` transforms an Observable that emits values into an Observable that\r\nemits a single boolean value representing whether or not any values were\r\nemitted by the source Observable. As soon as the source Observable emits a\r\nvalue, `isEmpty` will emit a `false` and complete.  If the source Observable\r\ncompletes having not emitted anything, `isEmpty` will emit a `true` and\r\ncomplete.\r\n\r\nA similar effect could be achieved with {@link count}, but `isEmpty` can emit\r\na `false` value sooner.\r\n\r\n## Examples\r\n\r\nEmit `false` for a non-empty Observable\r\n\r\n```ts\r\nimport { Subject, isEmpty } from 'rxjs';\r\n\r\nconst source = new Subject<string>();\r\nconst result = source.pipe(isEmpty());\r\n\r\nsource.subscribe(x => console.log(x));\r\nresult.subscribe(x => console.log(x));\r\n\r\nsource.next('a');\r\nsource.next('b');\r\nsource.next('c');\r\nsource.complete();\r\n\r\n// Outputs\r\n// 'a'\r\n// false\r\n// 'b'\r\n// 'c'\r\n```\r\n\r\nEmit `true` for an empty Observable\r\n\r\n```ts\r\nimport { EMPTY, isEmpty } from 'rxjs';\r\n\r\nconst result = EMPTY.pipe(isEmpty());\r\nresult.subscribe(x => console.log(x));\r\n\r\n// Outputs\r\n// true\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link count}"},{"kind":25,"tagName":"see","text":"{@link EMPTY}"},{"kind":25,"tagName":"return","text":"A function that returns an Observable that emits boolean value\r\nindicating whether the source Observable was empty or not."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[],"functionName":"isEmpty","modulePath":"..\\src\\internal\\operators\\isEmpty.ts"}}},"usabilityResult":{"index":1}},"..\\src\\internal\\operators\\last.ts":{"moduleComponents":{"last":{"kind":13,"usabilityResult":{"wordCount":184,"index":1},"sources":{"name":"last","statements":[{"isExported":false,"isDefaultExport":false,"hasDeclareKeyword":false,"docs":[],"kind":41,"declarationKind":"const","declarations":[{"name":"hasDefaultValue","initializer":"arguments.length >= 2","hasExclamationToken":false,"kind":40}]},"return (source: Observable<T>) =>\r\nsource.pipe(\r\n  predicate ? filter((v, i) => predicate(v, i, source)) : identity,\r\n  takeLast(1),\r\n  hasDefaultValue ? defaultIfEmpty(defaultValue!) : throwIfEmpty(() => new EmptyError())\r\n);"],"parameters":[{"name":"predicate","type":"((value: T, index: number, source: Observable<T>) => boolean) | null","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"defaultValue","type":"D","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, T | D>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"D","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nReturns an Observable that emits only the last item emitted by the source Observable.\r\nIt optionally takes a predicate function as a parameter, in which case, rather than emitting\r\nthe last item from the source Observable, the resulting Observable will emit the last item\r\nfrom the source Observable that satisfies the predicate.\r\n\r\n![](last.png)\r\n\r\nIt will throw an error if the source completes without notification or one that matches the predicate. It\r\nreturns the last value or if a predicate is provided last value that matches the predicate. It returns the\r\ngiven default value if no notification is emitted or matches the predicate.\r\n\r\n## Examples\r\n\r\nLast alphabet from the sequence\r\n\r\n```ts\r\nimport { from, last } from 'rxjs';\r\n\r\nconst source = from(['x', 'y', 'z']);\r\nconst result = source.pipe(last());\r\n\r\nresult.subscribe(value => console.log(`Last alphabet: ${ value }`));\r\n\r\n// Outputs\r\n// Last alphabet: z\r\n```\r\n\r\nDefault value when the value in the predicate is not matched\r\n\r\n```ts\r\nimport { from, last } from 'rxjs';\r\n\r\nconst source = from(['x', 'y', 'z']);\r\nconst result = source.pipe(last(char => char === 'a', 'not found'));\r\n\r\nresult.subscribe(value => console.log(`'a' is ${ value }.`));\r\n\r\n// Outputs\r\n// 'a' is not found.\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link skip}"},{"kind":25,"tagName":"see","text":"{@link skipUntil}"},{"kind":25,"tagName":"see","text":"{@link skipLast}"},{"kind":25,"tagName":"see","text":"{@link skipWhile}"},{"kind":25,"tagName":"throws","text":"{EmptyError} Delivers an EmptyError to the Observer's `error`\r\ncallback if the Observable completes before any `next` notification was sent."},{"kind":25,"tagName":"param","text":"{function} [predicate] - The condition any source emitted item has to satisfy."},{"kind":25,"tagName":"param","text":"{any} [defaultValue] - An optional default value to provide if last\r\npredicate isn't met or no values were emitted."},{"kind":25,"tagName":"return","text":"A function that returns an Observable that emits only the last item\r\nsatisfying the given condition from the source, or a NoSuchElementException\r\nif no such items are emitted."},{"kind":25,"tagName":"throws","text":"- Throws if no items that match the predicate are emitted by the source Observable."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"predicate","type":"BooleanConstructor","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, TruthyTypesOf<T>>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"last","modulePath":"..\\src\\internal\\operators\\last.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"D","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"predicate","type":"BooleanConstructor","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"defaultValue","type":"D","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, TruthyTypesOf<T> | D>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"last","modulePath":"..\\src\\internal\\operators\\last.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"D","kind":39,"isConst":false,"default":"T","variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"predicate","type":"null","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"defaultValue","type":"D","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, T | D>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"last","modulePath":"..\\src\\internal\\operators\\last.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"S","kind":39,"isConst":false,"constraint":"T","variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"predicate","type":"(value: T, index: number, source: Observable<T>) => value is S","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"defaultValue","type":"S","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, S>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"last","modulePath":"..\\src\\internal\\operators\\last.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"D","kind":39,"isConst":false,"default":"T","variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"predicate","type":"(value: T, index: number, source: Observable<T>) => boolean","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"defaultValue","type":"D","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, T | D>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"last","modulePath":"..\\src\\internal\\operators\\last.ts"}]}}},"usabilityResult":{"index":1}},"..\\src\\internal\\operators\\map.ts":{"moduleComponents":{"map":{"kind":13,"usabilityResult":{"wordCount":120,"index":1},"sources":{"name":"map","statements":["return operate((source, subscriber) => {\r\n// The index of the value from the source. Used with projection.\r\nlet index = 0;\r\n// Subscribe to the source, all errors and completions are sent along\r\n// to the consumer.\r\nsource.subscribe(\r\n  createOperatorSubscriber(subscriber, (value: T) => {\r\n    // Call the projection function with the appropriate this context,\r\n    // and send the resulting value to the consumer.\r\n    subscriber.next(project.call(thisArg, value, index++));\r\n  })\r\n);\r\n});"],"parameters":[{"name":"project","type":"(value: T, index: number) => R","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"thisArg","type":"any","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, R>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"R","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nApplies a given `project` function to each value emitted by the source\r\nObservable, and emits the resulting values as an Observable.\r\n\r\n<span class=\"informal\">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),\r\nit passes each source value through a transformation function to get\r\ncorresponding output values.</span>\r\n\r\n![](map.png)\r\n\r\nSimilar to the well known `Array.prototype.map` function, this operator\r\napplies a projection to each value and emits that projection in the output\r\nObservable.\r\n\r\n## Example\r\n\r\nMap every click to the `clientX` position of that click\r\n\r\n```ts\r\nimport { fromEvent, map } from 'rxjs';\r\n\r\nconst clicks = fromEvent<PointerEvent>(document, 'click');\r\nconst positions = clicks.pipe(map(ev => ev.clientX));\r\n\r\npositions.subscribe(x => console.log(x));\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link mapTo}"},{"kind":25,"tagName":"see","text":"{@link pluck}"},{"kind":25,"tagName":"param","text":"{function(value: T, index: number): R} project The function to apply\r\nto each `value` emitted by the source Observable. The `index` parameter is\r\nthe number `i` for the i-th emission that has happened since the\r\nsubscription, starting from the number `0`."},{"kind":25,"tagName":"param","text":"{any} [thisArg] An optional argument to define what `this` is in the\r\n`project` function."},{"kind":25,"tagName":"return","text":"A function that returns an Observable that emits the values from the\r\nsource Observable transformed by the given `project` function."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"R","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"project","type":"(value: T, index: number) => R","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, R>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"map","modulePath":"..\\src\\internal\\operators\\map.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"R","kind":39,"isConst":false,"variance":0},{"name":"A","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Use a closure instead of a `thisArg`. Signatures accepting a `thisArg` will be removed in v8."}]}],"hasDeclareKeyword":false,"parameters":[{"name":"project","type":"(this: A, value: T, index: number) => R","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"thisArg","type":"A","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, R>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"map","modulePath":"..\\src\\internal\\operators\\map.ts"}]}}},"usabilityResult":{"index":1}},"..\\src\\internal\\operators\\mapTo.ts":{"moduleComponents":{"mapTo":{"kind":13,"usabilityResult":{"wordCount":108,"index":1},"sources":{"name":"mapTo","statements":["return map(() => value);"],"parameters":[{"name":"value","type":"R","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<unknown, R>","typeParameters":[{"name":"R","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nEmits the given constant value on the output Observable every time the source\r\nObservable emits a value.\r\n\r\n<span class=\"informal\">Like {@link map}, but it maps every source value to\r\nthe same output value every time.</span>\r\n\r\n![](mapTo.png)\r\n\r\nTakes a constant `value` as argument, and emits that whenever the source\r\nObservable emits a value. In other words, ignores the actual source value,\r\nand simply uses the emission moment to know when to emit the given `value`.\r\n\r\n## Example\r\n\r\nMap every click to the string `'Hi'`\r\n\r\n```ts\r\nimport { fromEvent, mapTo } from 'rxjs';\r\n\r\nconst clicks = fromEvent(document, 'click');\r\nconst greetings = clicks.pipe(mapTo('Hi'));\r\n\r\ngreetings.subscribe(x => console.log(x));\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link map}"},{"kind":25,"tagName":"param","text":"value The value to map each source value to."},{"kind":25,"tagName":"return","text":"A function that returns an Observable that emits the given `value`\r\nevery time the source Observable emits."},{"kind":25,"tagName":"deprecated","text":"To be removed in v9. Use {@link map} instead: `map(() => value)`."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"R","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"To be removed in v9. Use {@link map} instead: `map(() => value)`."}]}],"hasDeclareKeyword":false,"parameters":[{"name":"value","type":"R","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<unknown, R>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"mapTo","modulePath":"..\\src\\internal\\operators\\mapTo.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"R","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Do not specify explicit type parameters. Signatures with type parameters\r\nthat cannot be inferred will be removed in v8. `mapTo` itself will be removed in v9,\r\nuse {@link map} instead: `map(() => value)`."}]}],"hasDeclareKeyword":false,"parameters":[{"name":"value","type":"R","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, R>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"mapTo","modulePath":"..\\src\\internal\\operators\\mapTo.ts"}]}}},"usabilityResult":{"index":1}},"..\\src\\internal\\operators\\materialize.ts":{"moduleComponents":{"materialize":{"kind":13,"usabilityResult":{"wordCount":216,"index":1},"sources":{"name":"materialize","statements":["return operate((source, subscriber) => {\r\nsource.subscribe(\r\n  createOperatorSubscriber(\r\n    subscriber,\r\n    (value) => {\r\n      subscriber.next(Notification.createNext(value));\r\n    },\r\n    () => {\r\n      subscriber.next(Notification.createComplete());\r\n      subscriber.complete();\r\n    },\r\n    (err) => {\r\n      subscriber.next(Notification.createError(err));\r\n      subscriber.complete();\r\n    }\r\n  )\r\n);\r\n});"],"parameters":[],"returnType":"OperatorFunction<T, Notification<T> & ObservableNotification<T>>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nRepresents all of the notifications from the source Observable as `next`\r\nemissions marked with their original types within {@link Notification}\r\nobjects.\r\n\r\n<span class=\"informal\">Wraps `next`, `error` and `complete` emissions in\r\n{@link Notification} objects, emitted as `next` on the output Observable.\r\n</span>\r\n\r\n![](materialize.png)\r\n\r\n`materialize` returns an Observable that emits a `next` notification for each\r\n`next`, `error`, or `complete` emission of the source Observable. When the\r\nsource Observable emits `complete`, the output Observable will emit `next` as\r\na Notification of type \"complete\", and then it will emit `complete` as well.\r\nWhen the source Observable emits `error`, the output will emit `next` as a\r\nNotification of type \"error\", and then `complete`.\r\n\r\nThis operator is useful for producing metadata of the source Observable, to\r\nbe consumed as `next` emissions. Use it in conjunction with\r\n{@link dematerialize}.\r\n\r\n## Example\r\n\r\nConvert a faulty Observable to an Observable of Notifications\r\n\r\n```ts\r\nimport { of, materialize, map } from 'rxjs';\r\n\r\nconst letters = of('a', 'b', 13, 'd');\r\nconst upperCase = letters.pipe(map((x: any) => x.toUpperCase()));\r\nconst materialized = upperCase.pipe(materialize());\r\n\r\nmaterialized.subscribe(x => console.log(x));\r\n\r\n// Results in the following:\r\n// - Notification { kind: 'N', value: 'A', error: undefined, hasValue: true }\r\n// - Notification { kind: 'N', value: 'B', error: undefined, hasValue: true }\r\n// - Notification { kind: 'E', value: undefined, error: TypeError { message: x.toUpperCase is not a function }, hasValue: false }\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link Notification}"},{"kind":25,"tagName":"see","text":"{@link dematerialize}"},{"kind":25,"tagName":"return","text":"A function that returns an Observable that emits\r\n{@link Notification} objects that wrap the original emissions from the\r\nsource Observable with metadata."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[],"functionName":"materialize","modulePath":"..\\src\\internal\\operators\\materialize.ts"}}},"usabilityResult":{"index":1}},"..\\src\\internal\\operators\\max.ts":{"moduleComponents":{"max":{"kind":13,"usabilityResult":{"wordCount":115,"index":1},"sources":{"name":"max","statements":["return reduce(isFunction(comparer) ? (x, y) => (comparer(x, y) > 0 ? x : y) : (x, y) => (x > y ? x : y));"],"parameters":[{"name":"comparer","type":"(x: T, y: T) => number","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"MonoTypeOperatorFunction<T>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nThe Max operator operates on an Observable that emits numbers (or items that can be compared with a provided function),\r\nand when source Observable completes it emits a single item: the item with the largest value.\r\n\r\n![](max.png)\r\n\r\n## Examples\r\n\r\nGet the maximal value of a series of numbers\r\n\r\n```ts\r\nimport { of, max } from 'rxjs';\r\n\r\nof(5, 4, 7, 2, 8)\r\n  .pipe(max())\r\n  .subscribe(x => console.log(x));\r\n\r\n// Outputs\r\n// 8\r\n```\r\n\r\nUse a comparer function to get the maximal item\r\n\r\n```ts\r\nimport { of, max } from 'rxjs';\r\n\r\nof(\r\n  { age: 7, name: 'Foo' },\r\n  { age: 5, name: 'Bar' },\r\n  { age: 9, name: 'Beer' }\r\n).pipe(\r\n  max((a, b) => a.age < b.age ? -1 : 1)\r\n)\r\n.subscribe(x => console.log(x.name));\r\n\r\n// Outputs\r\n// 'Beer'\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link min}"},{"kind":25,"tagName":"param","text":"{Function} [comparer] - Optional comparer function that it will use instead of its default to compare the\r\nvalue of two items."},{"kind":25,"tagName":"return","text":"A function that returns an Observable that emits item with the\r\nlargest value."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[],"functionName":"max","modulePath":"..\\src\\internal\\operators\\max.ts"}}},"usabilityResult":{"index":1}},"..\\src\\internal\\operators\\mergeAll.ts":{"moduleComponents":{"mergeAll":{"kind":13,"usabilityResult":{"wordCount":201,"index":1},"sources":{"name":"mergeAll","statements":["return mergeMap(identity, concurrent);"],"parameters":[{"name":"concurrent","initializer":"Infinity","type":"number","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<O, ObservedValueOf<O>>","typeParameters":[{"name":"O","kind":39,"isConst":false,"constraint":"ObservableInput<any>","variance":0}],"docs":[{"kind":24,"description":"\r\nConverts a higher-order Observable into a first-order Observable which\r\nconcurrently delivers all values that are emitted on the inner Observables.\r\n\r\n<span class=\"informal\">Flattens an Observable-of-Observables.</span>\r\n\r\n![](mergeAll.png)\r\n\r\n`mergeAll` subscribes to an Observable that emits Observables, also known as\r\na higher-order Observable. Each time it observes one of these emitted inner\r\nObservables, it subscribes to that and delivers all the values from the\r\ninner Observable on the output Observable. The output Observable only\r\ncompletes once all inner Observables have completed. Any error delivered by\r\na inner Observable will be immediately emitted on the output Observable.\r\n\r\n## Examples\r\n\r\nSpawn a new interval Observable for each click event, and blend their outputs as one Observable\r\n\r\n```ts\r\nimport { fromEvent, map, interval, mergeAll } from 'rxjs';\r\n\r\nconst clicks = fromEvent(document, 'click');\r\nconst higherOrder = clicks.pipe(map(() => interval(1000)));\r\nconst firstOrder = higherOrder.pipe(mergeAll());\r\n\r\nfirstOrder.subscribe(x => console.log(x));\r\n```\r\n\r\nCount from 0 to 9 every second for each click, but only allow 2 concurrent timers\r\n\r\n```ts\r\nimport { fromEvent, map, interval, take, mergeAll } from 'rxjs';\r\n\r\nconst clicks = fromEvent(document, 'click');\r\nconst higherOrder = clicks.pipe(\r\n  map(() => interval(1000).pipe(take(10)))\r\n);\r\nconst firstOrder = higherOrder.pipe(mergeAll(2));\r\n\r\nfirstOrder.subscribe(x => console.log(x));\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link combineLatestAll}"},{"kind":25,"tagName":"see","text":"{@link concatAll}"},{"kind":25,"tagName":"see","text":"{@link exhaustAll}"},{"kind":25,"tagName":"see","text":"{@link merge}"},{"kind":25,"tagName":"see","text":"{@link mergeMap}"},{"kind":25,"tagName":"see","text":"{@link mergeMapTo}"},{"kind":25,"tagName":"see","text":"{@link mergeScan}"},{"kind":25,"tagName":"see","text":"{@link switchAll}"},{"kind":25,"tagName":"see","text":"{@link switchMap}"},{"kind":25,"tagName":"see","text":"{@link zipAll}"},{"kind":25,"tagName":"param","text":"{number} [concurrent=Infinity] Maximum number of inner\r\nObservables being subscribed to concurrently."},{"kind":25,"tagName":"return","text":"A function that returns an Observable that emits values coming from\r\nall the inner Observables emitted by the source Observable."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[],"functionName":"mergeAll","modulePath":"..\\src\\internal\\operators\\mergeAll.ts"}}},"usabilityResult":{"index":1}},"..\\src\\internal\\operators\\mergeMap.ts":{"moduleComponents":{"mergeMap":{"kind":13,"usabilityResult":{"wordCount":145,"index":1},"sources":{"name":"mergeMap","statements":["if (isFunction(resultSelector)) {\r\n// DEPRECATED PATH\r\nreturn mergeMap((a, i) => map((b: any, ii: number) => resultSelector(a, b, i, ii))(innerFrom(project(a, i))), concurrent);\r\n} else if (typeof resultSelector === 'number') {\r\nconcurrent = resultSelector;\r\n}","return operate((source, subscriber) => mergeInternals(source, subscriber, project, concurrent));"],"parameters":[{"name":"project","type":"(value: T, index: number) => O","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"resultSelector","type":"((outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R) | number","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"concurrent","initializer":"Infinity","type":"number","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, ObservedValueOf<O> | R>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"R","kind":39,"isConst":false,"variance":0},{"name":"O","kind":39,"isConst":false,"constraint":"ObservableInput<any>","variance":0}],"docs":[{"kind":24,"description":"\r\nProjects each source value to an Observable which is merged in the output\r\nObservable.\r\n\r\n<span class=\"informal\">Maps each value to an Observable, then flattens all of\r\nthese inner Observables using {@link mergeAll}.</span>\r\n\r\n![](mergeMap.png)\r\n\r\nReturns an Observable that emits items based on applying a function that you\r\nsupply to each item emitted by the source Observable, where that function\r\nreturns an Observable, and then merging those resulting Observables and\r\nemitting the results of this merger.\r\n\r\n## Example\r\n\r\nMap and flatten each letter to an Observable ticking every 1 second\r\n\r\n```ts\r\nimport { of, mergeMap, interval, map } from 'rxjs';\r\n\r\nconst letters = of('a', 'b', 'c');\r\nconst result = letters.pipe(\r\n  mergeMap(x => interval(1000).pipe(map(i => x + i)))\r\n);\r\n\r\nresult.subscribe(x => console.log(x));\r\n\r\n// Results in the following:\r\n// a0\r\n// b0\r\n// c0\r\n// a1\r\n// b1\r\n// c1\r\n// continues to list a, b, c every second with respective ascending integers\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link concatMap}"},{"kind":25,"tagName":"see","text":"{@link exhaustMap}"},{"kind":25,"tagName":"see","text":"{@link merge}"},{"kind":25,"tagName":"see","text":"{@link mergeAll}"},{"kind":25,"tagName":"see","text":"{@link mergeMapTo}"},{"kind":25,"tagName":"see","text":"{@link mergeScan}"},{"kind":25,"tagName":"see","text":"{@link switchMap}"},{"kind":25,"tagName":"param","text":"{function(value: T, ?index: number): ObservableInput} project A function\r\nthat, when applied to an item emitted by the source Observable, returns an\r\nObservable."},{"kind":25,"tagName":"param","text":"{number} [concurrent=Infinity] Maximum number of input\r\nObservables being subscribed to concurrently."},{"kind":25,"tagName":"return","text":"A function that returns an Observable that emits the result of\r\napplying the projection function (and the optional deprecated\r\n`resultSelector`) to each item emitted by the source Observable and merging\r\nthe results of the Observables obtained from this transformation."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"O","kind":39,"isConst":false,"constraint":"ObservableInput<any>","variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"project","type":"(value: T, index: number) => O","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"concurrent","type":"number","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, ObservedValueOf<O>>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"mergeMap","modulePath":"..\\src\\internal\\operators\\mergeMap.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"O","kind":39,"isConst":false,"constraint":"ObservableInput<any>","variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"The `resultSelector` parameter will be removed in v8. Use an inner `map` instead. Details: https://rxjs.dev/deprecations/resultSelector"}]}],"hasDeclareKeyword":false,"parameters":[{"name":"project","type":"(value: T, index: number) => O","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"resultSelector","type":"undefined","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"concurrent","type":"number","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, ObservedValueOf<O>>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"mergeMap","modulePath":"..\\src\\internal\\operators\\mergeMap.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"R","kind":39,"isConst":false,"variance":0},{"name":"O","kind":39,"isConst":false,"constraint":"ObservableInput<any>","variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"The `resultSelector` parameter will be removed in v8. Use an inner `map` instead. Details: https://rxjs.dev/deprecations/resultSelector"}]}],"hasDeclareKeyword":false,"parameters":[{"name":"project","type":"(value: T, index: number) => O","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"resultSelector","type":"(outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"concurrent","type":"number","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, R>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"mergeMap","modulePath":"..\\src\\internal\\operators\\mergeMap.ts"}]}}},"usabilityResult":{"index":1}},"..\\src\\internal\\operators\\mergeMapTo.ts":{"moduleComponents":{"mergeMapTo":{"kind":13,"usabilityResult":{"wordCount":105,"index":1},"sources":{"name":"mergeMapTo","statements":["if (isFunction(resultSelector)) {\r\nreturn mergeMap(() => innerObservable, resultSelector, concurrent);\r\n}","if (typeof resultSelector === 'number') {\r\nconcurrent = resultSelector;\r\n}","return mergeMap(() => innerObservable, concurrent);"],"parameters":[{"name":"innerObservable","type":"O","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"resultSelector","type":"((outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R) | number","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"concurrent","initializer":"Infinity","type":"number","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, ObservedValueOf<O> | R>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"R","kind":39,"isConst":false,"variance":0},{"name":"O","kind":39,"isConst":false,"constraint":"ObservableInput<unknown>","variance":0}],"docs":[{"kind":24,"description":"\r\nProjects each source value to the same Observable which is merged multiple\r\ntimes in the output Observable.\r\n\r\n<span class=\"informal\">It's like {@link mergeMap}, but maps each value always\r\nto the same inner Observable.</span>\r\n\r\n![](mergeMapTo.png)\r\n\r\nMaps each source value to the given Observable `innerObservable` regardless\r\nof the source value, and then merges those resulting Observables into one\r\nsingle Observable, which is the output Observable.\r\n\r\n## Example\r\n\r\nFor each click event, start an interval Observable ticking every 1 second\r\n\r\n```ts\r\nimport { fromEvent, mergeMapTo, interval } from 'rxjs';\r\n\r\nconst clicks = fromEvent(document, 'click');\r\nconst result = clicks.pipe(mergeMapTo(interval(1000)));\r\n\r\nresult.subscribe(x => console.log(x));\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link concatMapTo}"},{"kind":25,"tagName":"see","text":"{@link merge}"},{"kind":25,"tagName":"see","text":"{@link mergeAll}"},{"kind":25,"tagName":"see","text":"{@link mergeMap}"},{"kind":25,"tagName":"see","text":"{@link mergeScan}"},{"kind":25,"tagName":"see","text":"{@link switchMapTo}"},{"kind":25,"tagName":"param","text":"{ObservableInput} innerObservable An Observable to replace each value from\r\nthe source Observable."},{"kind":25,"tagName":"param","text":"{number} [concurrent=Infinity] Maximum number of input\r\nObservables being subscribed to concurrently."},{"kind":25,"tagName":"return","text":"A function that returns an Observable that emits items from the\r\ngiven `innerObservable`."},{"kind":25,"tagName":"deprecated","text":"Will be removed in v9. Use {@link mergeMap} instead: `mergeMap(() => result)`"}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"O","kind":39,"isConst":false,"constraint":"ObservableInput<unknown>","variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Will be removed in v9. Use {@link mergeMap} instead: `mergeMap(() => result)`"}]}],"hasDeclareKeyword":false,"parameters":[{"name":"innerObservable","type":"O","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"concurrent","type":"number","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<unknown, ObservedValueOf<O>>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"mergeMapTo","modulePath":"..\\src\\internal\\operators\\mergeMapTo.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"R","kind":39,"isConst":false,"variance":0},{"name":"O","kind":39,"isConst":false,"constraint":"ObservableInput<unknown>","variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"The `resultSelector` parameter will be removed in v8. Use an inner `map` instead.\r\nDetails: https://rxjs.dev/deprecations/resultSelector"}]}],"hasDeclareKeyword":false,"parameters":[{"name":"innerObservable","type":"O","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"resultSelector","type":"(outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"concurrent","type":"number","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, R>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"mergeMapTo","modulePath":"..\\src\\internal\\operators\\mergeMapTo.ts"}]}}},"usabilityResult":{"index":1}},"..\\src\\internal\\operators\\mergeScan.ts":{"moduleComponents":{"mergeScan":{"kind":13,"usabilityResult":{"wordCount":313,"index":1},"sources":{"name":"mergeScan","statements":["return operate((source, subscriber) => {\r\n    // The accumulated state.\r\n    let state = seed;\r\n\r\n    return mergeInternals(\r\n      source,\r\n      subscriber,\r\n      (value, index) => accumulator(state, value, index),\r\n      concurrent,\r\n      (value) => {\r\n        state = value;\r\n      },\r\n      false,\r\n      undefined,\r\n      () => (state = null!)\r\n    );\r\n  });"],"parameters":[{"name":"accumulator","type":"(acc: R, value: T, index: number) => ObservableInput<R>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"seed","type":"R","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"concurrent","initializer":"Infinity","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, R>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"R","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nApplies an accumulator function over the source Observable where the\r\naccumulator function itself returns an Observable, then each intermediate\r\nObservable returned is merged into the output Observable.\r\n\r\n<span class=\"informal\">It's like {@link scan}, but the Observables returned\r\nby the accumulator are merged into the outer Observable.</span>\r\n\r\nThe first parameter of the `mergeScan` is an `accumulator` function which is\r\nbeing called every time the source Observable emits a value. `mergeScan` will\r\nsubscribe to the value returned by the `accumulator` function and will emit\r\nvalues to the subscriber emitted by inner Observable.\r\n\r\nThe `accumulator` function is being called with three parameters passed to it:\r\n`acc`, `value` and `index`. The `acc` parameter is used as the state parameter\r\nwhose value is initially set to the `seed` parameter (the second parameter\r\npassed to the `mergeScan` operator).\r\n\r\n`mergeScan` internally keeps the value of the `acc` parameter: as long as the\r\nsource Observable emits without inner Observable emitting, the `acc` will be\r\nset to `seed`. The next time the inner Observable emits a value, `mergeScan`\r\nwill internally remember it and it will be passed to the `accumulator`\r\nfunction as `acc` parameter the next time source emits.\r\n\r\nThe `value` parameter of the `accumulator` function is the value emitted by the\r\nsource Observable, while the `index` is a number which represent the order of the\r\ncurrent emission by the source Observable. It starts with 0.\r\n\r\nThe last parameter to the `mergeScan` is the `concurrent` value which defaults\r\nto Infinity. It represents the maximum number of inner Observable subscriptions\r\nat a time.\r\n\r\n## Example\r\n\r\nCount the number of click events\r\n\r\n```ts\r\nimport { fromEvent, map, mergeScan, of } from 'rxjs';\r\n\r\nconst click$ = fromEvent(document, 'click');\r\nconst one$ = click$.pipe(map(() => 1));\r\nconst seed = 0;\r\nconst count$ = one$.pipe(\r\n  mergeScan((acc, one) => of(acc + one), seed)\r\n);\r\n\r\ncount$.subscribe(x => console.log(x));\r\n\r\n// Results:\r\n// 1\r\n// 2\r\n// 3\r\n// 4\r\n// ...and so on for each click\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link scan}"},{"kind":25,"tagName":"see","text":"{@link switchScan}"},{"kind":25,"tagName":"param","text":"{function(acc: R, value: T): Observable<R>} accumulator\r\nThe accumulator function called on each source value."},{"kind":25,"tagName":"param","text":"seed The initial accumulation value."},{"kind":25,"tagName":"param","text":"{number} [concurrent=Infinity] Maximum number of\r\ninput Observables being subscribed to concurrently."},{"kind":25,"tagName":"return","text":"A function that returns an Observable of the accumulated values."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[],"functionName":"mergeScan","modulePath":"..\\src\\internal\\operators\\mergeScan.ts"}}},"usabilityResult":{"index":1}},"..\\src\\internal\\operators\\mergeWith.ts":{"moduleComponents":{"mergeWith":{"kind":13,"usabilityResult":{"wordCount":120,"index":1},"sources":{"name":"mergeWith","statements":["return merge(...otherSources);"],"parameters":[{"name":"otherSources","type":"[...ObservableInputTuple<A>]","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":true}],"returnType":"OperatorFunction<T, T | A[number]>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"A","kind":39,"isConst":false,"constraint":"readonly unknown[]","variance":0}],"docs":[{"kind":24,"description":"\r\nMerge the values from all observables to a single observable result.\r\n\r\nCreates an observable, that when subscribed to, subscribes to the source\r\nobservable, and all other sources provided as arguments. All values from\r\nevery source are emitted from the resulting subscription.\r\n\r\nWhen all sources complete, the resulting observable will complete.\r\n\r\nWhen any source errors, the resulting observable will error.\r\n\r\n## Example\r\n\r\nJoining all outputs from multiple user input event streams\r\n\r\n```ts\r\nimport { fromEvent, map, mergeWith } from 'rxjs';\r\n\r\nconst clicks$ = fromEvent(document, 'click').pipe(map(() => 'click'));\r\nconst mousemoves$ = fromEvent(document, 'mousemove').pipe(map(() => 'mousemove'));\r\nconst dblclicks$ = fromEvent(document, 'dblclick').pipe(map(() => 'dblclick'));\r\n\r\nmousemoves$\r\n  .pipe(mergeWith(clicks$, dblclicks$))\r\n  .subscribe(x => console.log(x));\r\n\r\n// result (assuming user interactions)\r\n// 'mousemove'\r\n// 'mousemove'\r\n// 'mousemove'\r\n// 'click'\r\n// 'click'\r\n// 'dblclick'\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link merge}"},{"kind":25,"tagName":"param","text":"otherSources the sources to combine the current source with."},{"kind":25,"tagName":"return","text":"A function that returns an Observable that merges the values from\r\nall given Observables."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[],"functionName":"mergeWith","modulePath":"..\\src\\internal\\operators\\mergeWith.ts"}}},"usabilityResult":{"index":1}},"..\\src\\internal\\operators\\min.ts":{"moduleComponents":{"min":{"kind":13,"usabilityResult":{"wordCount":115,"index":1},"sources":{"name":"min","statements":["return reduce(isFunction(comparer) ? (x, y) => (comparer(x, y) < 0 ? x : y) : (x, y) => (x < y ? x : y));"],"parameters":[{"name":"comparer","type":"(x: T, y: T) => number","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"MonoTypeOperatorFunction<T>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nThe Min operator operates on an Observable that emits numbers (or items that can be compared with a provided function),\r\nand when source Observable completes it emits a single item: the item with the smallest value.\r\n\r\n![](min.png)\r\n\r\n## Examples\r\n\r\nGet the minimal value of a series of numbers\r\n\r\n```ts\r\nimport { of, min } from 'rxjs';\r\n\r\nof(5, 4, 7, 2, 8)\r\n  .pipe(min())\r\n  .subscribe(x => console.log(x));\r\n\r\n// Outputs\r\n// 2\r\n```\r\n\r\nUse a comparer function to get the minimal item\r\n\r\n```ts\r\nimport { of, min } from 'rxjs';\r\n\r\nof(\r\n  { age: 7, name: 'Foo' },\r\n  { age: 5, name: 'Bar' },\r\n  { age: 9, name: 'Beer' }\r\n).pipe(\r\n  min((a, b) => a.age < b.age ? -1 : 1)\r\n)\r\n.subscribe(x => console.log(x.name));\r\n\r\n// Outputs\r\n// 'Bar'\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link max}"},{"kind":25,"tagName":"param","text":"{Function} [comparer] - Optional comparer function that it will use instead of its default to compare the\r\nvalue of two items."},{"kind":25,"tagName":"return","text":"A function that returns an Observable that emits item with the\r\nsmallest value."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[],"functionName":"min","modulePath":"..\\src\\internal\\operators\\min.ts"}}},"usabilityResult":{"index":1}},"..\\src\\internal\\operators\\multicast.ts":{"moduleComponents":{"multicast":{"kind":13,"usabilityResult":{"wordCount":126,"index":1},"sources":{"name":"multicast","statements":[{"isExported":false,"isDefaultExport":false,"hasDeclareKeyword":false,"docs":[],"kind":41,"declarationKind":"const","declarations":[{"name":"subjectFactory","initializer":"isFunction(subjectOrSubjectFactory) ? subjectOrSubjectFactory : () => subjectOrSubjectFactory","hasExclamationToken":false,"kind":40}]},"if (isFunction(selector)) {\r\n// If a selector function is provided, then we're a \"normal\" operator that isn't\r\n// going to return a ConnectableObservable. We can use `connect` to do what we\r\n// need to do.\r\nreturn connect(selector, {\r\n  connector: subjectFactory,\r\n});\r\n}","return (source: Observable<T>) => new ConnectableObservable<any>(source, subjectFactory);"],"parameters":[{"name":"subjectOrSubjectFactory","type":"Subject<T> | (() => Subject<T>)","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"selector","type":"(source: Observable<T>) => Observable<R>","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, R>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"R","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Will be removed in v8. Use the {@link connectable} observable, the {@link connect} operator or the\r\n{@link share} operator instead. See the overloads below for equivalent replacement examples of this operator's\r\nbehaviors.\r\nDetails: https://rxjs.dev/deprecations/multicasting"}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nAn operator that creates a {@link ConnectableObservable}, that when connected,\r\nwith the `connect` method, will use the provided subject to multicast the values\r\nfrom the source to all consumers.\r\n","tags":[{"kind":25,"tagName":"param","text":"subject The subject to multicast through."},{"kind":25,"tagName":"return","text":"A function that returns a {@link ConnectableObservable}"},{"kind":25,"tagName":"deprecated","text":"Will be removed in v8. To create a connectable observable, use {@link connectable}.\r\nIf you're using {@link refCount} after `multicast`, use the {@link share} operator instead.\r\n`multicast(subject), refCount()` is equivalent to\r\n`share({ connector: () => subject, resetOnError: false, resetOnComplete: false, resetOnRefCountZero: false })`.\r\nDetails: https://rxjs.dev/deprecations/multicasting"}]}],"hasDeclareKeyword":false,"parameters":[{"name":"subject","type":"Subject<T>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"UnaryFunction<Observable<T>, ConnectableObservable<T>>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"multicast","modulePath":"..\\src\\internal\\operators\\multicast.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"O","kind":39,"isConst":false,"constraint":"ObservableInput<any>","variance":0}],"docs":[{"kind":24,"description":"\r\nBecause this is deprecated in favor of the {@link connect} operator, and was otherwise poorly documented,\r\nrather than duplicate the effort of documenting the same behavior, please see documentation for the\r\n{@link connect} operator.\r\n","tags":[{"kind":25,"tagName":"param","text":"subject The subject used to multicast."},{"kind":25,"tagName":"param","text":"selector A setup function to setup the multicast"},{"kind":25,"tagName":"return","text":"A function that returns an observable that mirrors the observable returned by the selector."},{"kind":25,"tagName":"deprecated","text":"Will be removed in v8. Use the {@link connect} operator instead.\r\n`multicast(subject, selector)` is equivalent to\r\n`connect(selector, { connector: () => subject })`.\r\nDetails: https://rxjs.dev/deprecations/multicasting"}]}],"hasDeclareKeyword":false,"parameters":[{"name":"subject","type":"Subject<T>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"selector","type":"(shared: Observable<T>) => O","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, ObservedValueOf<O>>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"multicast","modulePath":"..\\src\\internal\\operators\\multicast.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nAn operator that creates a {@link ConnectableObservable}, that when connected,\r\nwith the `connect` method, will use the provided subject to multicast the values\r\nfrom the source to all consumers.\r\n","tags":[{"kind":25,"tagName":"param","text":"subjectFactory A factory that will be called to create the subject. Passing a function here\r\nwill cause the underlying subject to be \"reset\" on error, completion, or refCounted unsubscription of\r\nthe source."},{"kind":25,"tagName":"return","text":"A function that returns a {@link ConnectableObservable}"},{"kind":25,"tagName":"deprecated","text":"Will be removed in v8. To create a connectable observable, use {@link connectable}.\r\nIf you're using {@link refCount} after `multicast`, use the {@link share} operator instead.\r\n`multicast(() => new BehaviorSubject('test')), refCount()` is equivalent to\r\n`share({ connector: () => new BehaviorSubject('test') })`.\r\nDetails: https://rxjs.dev/deprecations/multicasting"}]}],"hasDeclareKeyword":false,"parameters":[{"name":"subjectFactory","type":"() => Subject<T>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"UnaryFunction<Observable<T>, ConnectableObservable<T>>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"multicast","modulePath":"..\\src\\internal\\operators\\multicast.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"O","kind":39,"isConst":false,"constraint":"ObservableInput<any>","variance":0}],"docs":[{"kind":24,"description":"\r\nBecause this is deprecated in favor of the {@link connect} operator, and was otherwise poorly documented,\r\nrather than duplicate the effort of documenting the same behavior, please see documentation for the\r\n{@link connect} operator.\r\n","tags":[{"kind":25,"tagName":"param","text":"subjectFactory A factory that creates the subject used to multicast."},{"kind":25,"tagName":"param","text":"selector A function to setup the multicast and select the output."},{"kind":25,"tagName":"return","text":"A function that returns an observable that mirrors the observable returned by the selector."},{"kind":25,"tagName":"deprecated","text":"Will be removed in v8. Use the {@link connect} operator instead.\r\n`multicast(subjectFactory, selector)` is equivalent to\r\n`connect(selector, { connector: subjectFactory })`.\r\nDetails: https://rxjs.dev/deprecations/multicasting"}]}],"hasDeclareKeyword":false,"parameters":[{"name":"subjectFactory","type":"() => Subject<T>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"selector","type":"(shared: Observable<T>) => O","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, ObservedValueOf<O>>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"multicast","modulePath":"..\\src\\internal\\operators\\multicast.ts"}]}}},"usabilityResult":{"index":1}},"..\\src\\internal\\operators\\observeOn.ts":{"moduleComponents":{"observeOn":{"kind":13,"usabilityResult":{"wordCount":357,"index":1},"sources":{"name":"observeOn","statements":["return operate((source, subscriber) => {\r\nsource.subscribe(\r\n  createOperatorSubscriber(\r\n    subscriber,\r\n    (value) => executeSchedule(subscriber, scheduler, () => subscriber.next(value), delay),\r\n    () => executeSchedule(subscriber, scheduler, () => subscriber.complete(), delay),\r\n    (err) => executeSchedule(subscriber, scheduler, () => subscriber.error(err), delay)\r\n  )\r\n);\r\n});"],"parameters":[{"name":"scheduler","type":"SchedulerLike","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"delay","initializer":"0","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"MonoTypeOperatorFunction<T>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nRe-emits all notifications from source Observable with specified scheduler.\r\n\r\n<span class=\"informal\">Ensure a specific scheduler is used, from outside of an Observable.</span>\r\n\r\n`observeOn` is an operator that accepts a scheduler as a first parameter, which will be used to reschedule\r\nnotifications emitted by the source Observable. It might be useful, if you do not have control over\r\ninternal scheduler of a given Observable, but want to control when its values are emitted nevertheless.\r\n\r\nReturned Observable emits the same notifications (nexted values, complete and error events) as the source Observable,\r\nbut rescheduled with provided scheduler. Note that this doesn't mean that source Observables internal\r\nscheduler will be replaced in any way. Original scheduler still will be used, but when the source Observable emits\r\nnotification, it will be immediately scheduled again - this time with scheduler passed to `observeOn`.\r\nAn anti-pattern would be calling `observeOn` on Observable that emits lots of values synchronously, to split\r\nthat emissions into asynchronous chunks. For this to happen, scheduler would have to be passed into the source\r\nObservable directly (usually into the operator that creates it). `observeOn` simply delays notifications a\r\nlittle bit more, to ensure that they are emitted at expected moments.\r\n\r\nAs a matter of fact, `observeOn` accepts second parameter, which specifies in milliseconds with what delay notifications\r\nwill be emitted. The main difference between {@link delay} operator and `observeOn` is that `observeOn`\r\nwill delay all notifications - including error notifications - while `delay` will pass through error\r\nfrom source Observable immediately when it is emitted. In general it is highly recommended to use `delay` operator\r\nfor any kind of delaying of values in the stream, while using `observeOn` to specify which scheduler should be used\r\nfor notification emissions in general.\r\n\r\n## Example\r\n\r\nEnsure values in subscribe are called just before browser repaint\r\n\r\n```ts\r\nimport { interval, observeOn, animationFrameScheduler } from 'rxjs';\r\n\r\nconst someDiv = document.createElement('div');\r\nsomeDiv.style.cssText = 'width: 200px;background: #09c';\r\ndocument.body.appendChild(someDiv);\r\nconst intervals = interval(10);      // Intervals are scheduled\r\n                                     // with async scheduler by default...\r\nintervals.pipe(\r\n  observeOn(animationFrameScheduler) // ...but we will observe on animationFrame\r\n)                                    // scheduler to ensure smooth animation.\r\n.subscribe(val => {\r\n  someDiv.style.height = val + 'px';\r\n});\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link delay}"},{"kind":25,"tagName":"param","text":"scheduler Scheduler that will be used to reschedule notifications from source Observable."},{"kind":25,"tagName":"param","text":"delay Number of milliseconds that states with what delay every notification should be rescheduled."},{"kind":25,"tagName":"return","text":"A function that returns an Observable that emits the same\r\nnotifications as the source Observable, but with provided scheduler."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[],"functionName":"observeOn","modulePath":"..\\src\\internal\\operators\\observeOn.ts"}}},"usabilityResult":{"index":1}},"..\\src\\internal\\operators\\onErrorResumeNextWith.ts":{"moduleComponents":{"onErrorResumeNextWith":{"kind":13,"usabilityResult":{"wordCount":364,"index":1},"sources":{"name":"onErrorResumeNextWith","statements":[{"isExported":false,"isDefaultExport":false,"hasDeclareKeyword":false,"docs":[],"kind":41,"declarationKind":"const","declarations":[{"name":"nextSources","initializer":"argsOrArgArray(sources) as unknown as ObservableInputTuple<A>","hasExclamationToken":false,"kind":40}]},"return (source) => oERNCreate(source, ...nextSources);"],"parameters":[{"name":"sources","type":"[[...ObservableInputTuple<A>]] | [...ObservableInputTuple<A>]","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":true}],"returnType":"OperatorFunction<T, T | A[number]>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"A","kind":39,"isConst":false,"constraint":"readonly unknown[]","variance":0}],"docs":[{"kind":24,"description":"\r\nWhen any of the provided Observable emits an complete or error notification, it immediately subscribes to the next one\r\nthat was passed.\r\n\r\n<span class=\"informal\">Execute series of Observables, subscribes to next one on error or complete.</span>\r\n\r\n![](onErrorResumeNext.png)\r\n\r\n`onErrorResumeNext` is an operator that accepts a series of Observables, provided either directly as\r\narguments or as an array. If no single Observable is provided, returned Observable will simply behave the same\r\nas the source.\r\n\r\n`onErrorResumeNext` returns an Observable that starts by subscribing and re-emitting values from the source Observable.\r\nWhen its stream of values ends - no matter if Observable completed or emitted an error - `onErrorResumeNext`\r\nwill subscribe to the first Observable that was passed as an argument to the method. It will start re-emitting\r\nits values as well and - again - when that stream ends, `onErrorResumeNext` will proceed to subscribing yet another\r\nObservable in provided series, no matter if previous Observable completed or ended with an error. This will\r\nbe happening until there is no more Observables left in the series, at which point returned Observable will\r\ncomplete - even if the last subscribed stream ended with an error.\r\n\r\n`onErrorResumeNext` can be therefore thought of as version of {@link concat} operator, which is more permissive\r\nwhen it comes to the errors emitted by its input Observables. While `concat` subscribes to the next Observable\r\nin series only if previous one successfully completed, `onErrorResumeNext` subscribes even if it ended with\r\nan error.\r\n\r\nNote that you do not get any access to errors emitted by the Observables. In particular do not\r\nexpect these errors to appear in error callback passed to {@link Observable#subscribe}. If you want to take\r\nspecific actions based on what error was emitted by an Observable, you should try out {@link catchError} instead.\r\n\r\n\r\n## Example\r\n\r\nSubscribe to the next Observable after map fails\r\n\r\n```ts\r\nimport { of, onErrorResumeNext, map } from 'rxjs';\r\n\r\nof(1, 2, 3, 0)\r\n  .pipe(\r\n    map(x => {\r\n      if (x === 0) {\r\n        throw Error();\r\n      }\r\n\r\n      return 10 / x;\r\n    }),\r\n    onErrorResumeNext(of(1, 2, 3))\r\n  )\r\n  .subscribe({\r\n    next: val => console.log(val),\r\n    error: err => console.log(err),          // Will never be called.\r\n    complete: () => console.log('that\\'s it!')\r\n  });\r\n\r\n// Logs:\r\n// 10\r\n// 5\r\n// 3.3333333333333335\r\n// 1\r\n// 2\r\n// 3\r\n// 'that's it!'\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link concat}"},{"kind":25,"tagName":"see","text":"{@link catchError}"},{"kind":25,"tagName":"param","text":"{...ObservableInput} sources Observables passed either directly or as an array."},{"kind":25,"tagName":"return","text":"A function that returns an Observable that emits values from source\r\nObservable, but - if it errors - subscribes to the next passed Observable\r\nand so on, until it completes or runs out of Observables."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"A","kind":39,"isConst":false,"constraint":"readonly unknown[]","variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"sources","type":"[...ObservableInputTuple<A>]","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, T | A[number]>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"onErrorResumeNextWith","modulePath":"..\\src\\internal\\operators\\onErrorResumeNextWith.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"A","kind":39,"isConst":false,"constraint":"readonly unknown[]","variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"sources","type":"[...ObservableInputTuple<A>]","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":true}],"returnType":"OperatorFunction<T, T | A[number]>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"onErrorResumeNextWith","modulePath":"..\\src\\internal\\operators\\onErrorResumeNextWith.ts"}]}}},"usabilityResult":{"index":1}},"..\\src\\internal\\operators\\pairwise.ts":{"moduleComponents":{"pairwise":{"kind":13,"usabilityResult":{"wordCount":171,"index":1},"sources":{"name":"pairwise","statements":["return operate((source, subscriber) => {\r\nlet prev: T;\r\nlet hasPrev = false;\r\nsource.subscribe(\r\n  createOperatorSubscriber(subscriber, (value) => {\r\n    const p = prev;\r\n    prev = value;\r\n    hasPrev && subscriber.next([p, value]);\r\n    hasPrev = true;\r\n  })\r\n);\r\n});"],"parameters":[],"returnType":"OperatorFunction<T, [T, T]>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nGroups pairs of consecutive emissions together and emits them as an array of\r\ntwo values.\r\n\r\n<span class=\"informal\">Puts the current value and previous value together as\r\nan array, and emits that.</span>\r\n\r\n![](pairwise.png)\r\n\r\nThe Nth emission from the source Observable will cause the output Observable\r\nto emit an array [(N-1)th, Nth] of the previous and the current value, as a\r\npair. For this reason, `pairwise` emits on the second and subsequent\r\nemissions from the source Observable, but not on the first emission, because\r\nthere is no previous value in that case.\r\n\r\n## Example\r\n\r\nOn every click (starting from the second), emit the relative distance to the previous click\r\n\r\n```ts\r\nimport { fromEvent, pairwise, map } from 'rxjs';\r\n\r\nconst clicks = fromEvent<PointerEvent>(document, 'click');\r\nconst pairs = clicks.pipe(pairwise());\r\nconst distance = pairs.pipe(\r\n  map(([first, second]) => {\r\n    const x0 = first.clientX;\r\n    const y0 = first.clientY;\r\n    const x1 = second.clientX;\r\n    const y1 = second.clientY;\r\n    return Math.sqrt(Math.pow(x0 - x1, 2) + Math.pow(y0 - y1, 2));\r\n  })\r\n);\r\n\r\ndistance.subscribe(x => console.log(x));\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link buffer}"},{"kind":25,"tagName":"see","text":"{@link bufferCount}"},{"kind":25,"tagName":"return","text":"A function that returns an Observable of pairs (as arrays) of\r\nconsecutive values from the source Observable."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[],"functionName":"pairwise","modulePath":"..\\src\\internal\\operators\\pairwise.ts"}}},"usabilityResult":{"index":1}},"..\\src\\internal\\operators\\pluck.ts":{"moduleComponents":{"pluck":{"kind":13,"usabilityResult":{"wordCount":110,"index":1},"sources":{"name":"pluck","statements":[{"isExported":false,"isDefaultExport":false,"hasDeclareKeyword":false,"docs":[],"kind":41,"declarationKind":"const","declarations":[{"name":"length","initializer":"properties.length","hasExclamationToken":false,"kind":40}]},"if (length === 0) {\r\nthrow new Error('list of properties cannot be empty.');\r\n}","return map((x) => {\r\nlet currentProp: any = x;\r\nfor (let i = 0; i < length; i++) {\r\n  const p = currentProp?.[properties[i]];\r\n  if (typeof p !== 'undefined') {\r\n    currentProp = p;\r\n  } else {\r\n    return undefined;\r\n  }\r\n}\r\nreturn currentProp;\r\n});"],"parameters":[{"name":"properties","type":"Array<string | number | symbol>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":true}],"returnType":"OperatorFunction<T, R>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"R","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nMaps each source value to its specified nested property.\r\n\r\n<span class=\"informal\">Like {@link map}, but meant only for picking one of\r\nthe nested properties of every emitted value.</span>\r\n\r\n![](pluck.png)\r\n\r\nGiven a list of strings or numbers describing a path to a property, retrieves\r\nthe value of a specified nested property from all values in the source\r\nObservable. If a property can't be resolved, it will return `undefined` for\r\nthat value.\r\n\r\n## Example\r\n\r\nMap every click to the tagName of the clicked target element\r\n\r\n```ts\r\nimport { fromEvent, pluck } from 'rxjs';\r\n\r\nconst clicks = fromEvent(document, 'click');\r\nconst tagNames = clicks.pipe(pluck('target', 'tagName'));\r\n\r\ntagNames.subscribe(x => console.log(x));\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link map}"},{"kind":25,"tagName":"param","text":"properties The nested properties to pluck from each source\r\nvalue."},{"kind":25,"tagName":"return","text":"A function that returns an Observable of property values from the\r\nsource values."},{"kind":25,"tagName":"deprecated","text":"Use {@link map} and optional chaining: `pluck('foo', 'bar')` is `map(x => x?.foo?.bar)`. Will be removed in v8."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"K1","kind":39,"isConst":false,"constraint":"keyof T","variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Use {@link map} and optional chaining: `pluck('foo', 'bar')` is `map(x => x?.foo?.bar)`. Will be removed in v8."}]}],"hasDeclareKeyword":false,"parameters":[{"name":"k1","type":"K1","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, T[K1]>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"pluck","modulePath":"..\\src\\internal\\operators\\pluck.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"K1","kind":39,"isConst":false,"constraint":"keyof T","variance":0},{"name":"K2","kind":39,"isConst":false,"constraint":"keyof T[K1]","variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Use {@link map} and optional chaining: `pluck('foo', 'bar')` is `map(x => x?.foo?.bar)`. Will be removed in v8."}]}],"hasDeclareKeyword":false,"parameters":[{"name":"k1","type":"K1","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"k2","type":"K2","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, T[K1][K2]>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"pluck","modulePath":"..\\src\\internal\\operators\\pluck.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"K1","kind":39,"isConst":false,"constraint":"keyof T","variance":0},{"name":"K2","kind":39,"isConst":false,"constraint":"keyof T[K1]","variance":0},{"name":"K3","kind":39,"isConst":false,"constraint":"keyof T[K1][K2]","variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Use {@link map} and optional chaining: `pluck('foo', 'bar')` is `map(x => x?.foo?.bar)`. Will be removed in v8."}]}],"hasDeclareKeyword":false,"parameters":[{"name":"k1","type":"K1","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"k2","type":"K2","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"k3","type":"K3","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, T[K1][K2][K3]>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"pluck","modulePath":"..\\src\\internal\\operators\\pluck.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"K1","kind":39,"isConst":false,"constraint":"keyof T","variance":0},{"name":"K2","kind":39,"isConst":false,"constraint":"keyof T[K1]","variance":0},{"name":"K3","kind":39,"isConst":false,"constraint":"keyof T[K1][K2]","variance":0},{"name":"K4","kind":39,"isConst":false,"constraint":"keyof T[K1][K2][K3]","variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Use {@link map} and optional chaining: `pluck('foo', 'bar')` is `map(x => x?.foo?.bar)`. Will be removed in v8."}]}],"hasDeclareKeyword":false,"parameters":[{"name":"k1","type":"K1","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"k2","type":"K2","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"k3","type":"K3","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"k4","type":"K4","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, T[K1][K2][K3][K4]>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"pluck","modulePath":"..\\src\\internal\\operators\\pluck.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"K1","kind":39,"isConst":false,"constraint":"keyof T","variance":0},{"name":"K2","kind":39,"isConst":false,"constraint":"keyof T[K1]","variance":0},{"name":"K3","kind":39,"isConst":false,"constraint":"keyof T[K1][K2]","variance":0},{"name":"K4","kind":39,"isConst":false,"constraint":"keyof T[K1][K2][K3]","variance":0},{"name":"K5","kind":39,"isConst":false,"constraint":"keyof T[K1][K2][K3][K4]","variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Use {@link map} and optional chaining: `pluck('foo', 'bar')` is `map(x => x?.foo?.bar)`. Will be removed in v8."}]}],"hasDeclareKeyword":false,"parameters":[{"name":"k1","type":"K1","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"k2","type":"K2","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"k3","type":"K3","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"k4","type":"K4","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"k5","type":"K5","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, T[K1][K2][K3][K4][K5]>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"pluck","modulePath":"..\\src\\internal\\operators\\pluck.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"K1","kind":39,"isConst":false,"constraint":"keyof T","variance":0},{"name":"K2","kind":39,"isConst":false,"constraint":"keyof T[K1]","variance":0},{"name":"K3","kind":39,"isConst":false,"constraint":"keyof T[K1][K2]","variance":0},{"name":"K4","kind":39,"isConst":false,"constraint":"keyof T[K1][K2][K3]","variance":0},{"name":"K5","kind":39,"isConst":false,"constraint":"keyof T[K1][K2][K3][K4]","variance":0},{"name":"K6","kind":39,"isConst":false,"constraint":"keyof T[K1][K2][K3][K4][K5]","variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Use {@link map} and optional chaining: `pluck('foo', 'bar')` is `map(x => x?.foo?.bar)`. Will be removed in v8."}]}],"hasDeclareKeyword":false,"parameters":[{"name":"k1","type":"K1","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"k2","type":"K2","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"k3","type":"K3","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"k4","type":"K4","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"k5","type":"K5","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"k6","type":"K6","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, T[K1][K2][K3][K4][K5][K6]>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"pluck","modulePath":"..\\src\\internal\\operators\\pluck.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"K1","kind":39,"isConst":false,"constraint":"keyof T","variance":0},{"name":"K2","kind":39,"isConst":false,"constraint":"keyof T[K1]","variance":0},{"name":"K3","kind":39,"isConst":false,"constraint":"keyof T[K1][K2]","variance":0},{"name":"K4","kind":39,"isConst":false,"constraint":"keyof T[K1][K2][K3]","variance":0},{"name":"K5","kind":39,"isConst":false,"constraint":"keyof T[K1][K2][K3][K4]","variance":0},{"name":"K6","kind":39,"isConst":false,"constraint":"keyof T[K1][K2][K3][K4][K5]","variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Use {@link map} and optional chaining: `pluck('foo', 'bar')` is `map(x => x?.foo?.bar)`. Will be removed in v8."}]}],"hasDeclareKeyword":false,"parameters":[{"name":"k1","type":"K1","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"k2","type":"K2","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"k3","type":"K3","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"k4","type":"K4","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"k5","type":"K5","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"k6","type":"K6","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"rest","type":"string[]","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":true}],"returnType":"OperatorFunction<T, unknown>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"pluck","modulePath":"..\\src\\internal\\operators\\pluck.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Use {@link map} and optional chaining: `pluck('foo', 'bar')` is `map(x => x?.foo?.bar)`. Will be removed in v8."}]}],"hasDeclareKeyword":false,"parameters":[{"name":"properties","type":"string[]","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":true}],"returnType":"OperatorFunction<T, unknown>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"pluck","modulePath":"..\\src\\internal\\operators\\pluck.ts"}]}}},"usabilityResult":{"index":1}},"..\\src\\internal\\operators\\publish.ts":{"moduleComponents":{"publish":{"kind":13,"usabilityResult":{"wordCount":211,"index":1},"sources":{"name":"publish","statements":["return selector ? (source) => connect(selector)(source) : (source) => multicast(new Subject<T>())(source);"],"parameters":[{"name":"selector","type":"OperatorFunction<T, R>","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"MonoTypeOperatorFunction<T> | OperatorFunction<T, R>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"R","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nReturns a ConnectableObservable, which is a variety of Observable that waits until its connect method is called\r\nbefore it begins emitting items to those Observers that have subscribed to it.\r\n\r\n<span class=\"informal\">Makes a cold Observable hot</span>\r\n\r\n![](publish.png)\r\n\r\n## Examples\r\n\r\nMake `source$` hot by applying `publish` operator, then merge each inner observable into a single one\r\nand subscribe\r\n\r\n```ts\r\nimport { zip, interval, of, map, publish, merge, tap } from 'rxjs';\r\n\r\nconst source$ = zip(interval(2000), of(1, 2, 3, 4, 5, 6, 7, 8, 9))\r\n  .pipe(map(([, number]) => number));\r\n\r\nsource$\r\n  .pipe(\r\n    publish(multicasted$ =>\r\n      merge(\r\n        multicasted$.pipe(tap(x => console.log('Stream 1:', x))),\r\n        multicasted$.pipe(tap(x => console.log('Stream 2:', x))),\r\n        multicasted$.pipe(tap(x => console.log('Stream 3:', x)))\r\n      )\r\n    )\r\n  )\r\n  .subscribe();\r\n\r\n// Results every two seconds\r\n// Stream 1: 1\r\n// Stream 2: 1\r\n// Stream 3: 1\r\n// ...\r\n// Stream 1: 9\r\n// Stream 2: 9\r\n// Stream 3: 9\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link publishLast}"},{"kind":25,"tagName":"see","text":"{@link publishReplay}"},{"kind":25,"tagName":"see","text":"{@link publishBehavior}"},{"kind":25,"tagName":"param","text":"{Function} [selector] - Optional selector function which can use the multicasted source sequence as many times\r\nas needed, without causing multiple subscriptions to the source sequence.\r\nSubscribers to the given source will receive all notifications of the source from the time of the subscription on."},{"kind":25,"tagName":"return","text":"A function that returns a ConnectableObservable that upon connection\r\ncauses the source Observable to emit items to its Observers."},{"kind":25,"tagName":"deprecated","text":"Will be removed in v8. Use the {@link connectable} observable, the {@link connect} operator or the\r\n{@link share} operator instead. See the overloads below for equivalent replacement examples of this operator's\r\nbehaviors.\r\nDetails: https://rxjs.dev/deprecations/multicasting"}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nReturns a connectable observable that, when connected, will multicast\r\nall values through a single underlying {@link Subject} instance.\r\n","tags":[{"kind":25,"tagName":"deprecated","text":"Will be removed in v8. To create a connectable observable, use {@link connectable}.\r\n`source.pipe(publish())` is equivalent to\r\n`connectable(source, { connector: () => new Subject(), resetOnDisconnect: false })`.\r\nIf you're using {@link refCount} after `publish`, use {@link share} operator instead.\r\n`source.pipe(publish(), refCount())` is equivalent to\r\n`source.pipe(share({ resetOnError: false, resetOnComplete: false, resetOnRefCountZero: false }))`.\r\nDetails: https://rxjs.dev/deprecations/multicasting"}]}],"hasDeclareKeyword":false,"parameters":[],"returnType":"UnaryFunction<Observable<T>, ConnectableObservable<T>>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"publish","modulePath":"..\\src\\internal\\operators\\publish.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"O","kind":39,"isConst":false,"constraint":"ObservableInput<any>","variance":0}],"docs":[{"kind":24,"description":"\r\nReturns an observable, that when subscribed to, creates an underlying {@link Subject},\r\nprovides an observable view of it to a `selector` function, takes the observable result of\r\nthat selector function and subscribes to it, sending its values to the consumer, _then_ connects\r\nthe subject to the original source.\r\n","tags":[{"kind":25,"tagName":"param","text":"selector A function used to setup multicasting prior to automatic connection."},{"kind":25,"tagName":"deprecated","text":"Will be removed in v8. Use the {@link connect} operator instead.\r\n`publish(selector)` is equivalent to `connect(selector)`.\r\nDetails: https://rxjs.dev/deprecations/multicasting"}]}],"hasDeclareKeyword":false,"parameters":[{"name":"selector","type":"(shared: Observable<T>) => O","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, ObservedValueOf<O>>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"publish","modulePath":"..\\src\\internal\\operators\\publish.ts"}]}}},"usabilityResult":{"index":1}},"..\\src\\internal\\operators\\publishBehavior.ts":{"moduleComponents":{"publishBehavior":{"kind":13,"usabilityResult":{"wordCount":9,"index":0.18},"sources":{"name":"publishBehavior","statements":["return (source) => {\r\nconst subject = new BehaviorSubject<T>(initialValue);\r\nreturn new ConnectableObservable(source, () => subject);\r\n};"],"parameters":[{"name":"initialValue","type":"T","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"UnaryFunction<Observable<T>, ConnectableObservable<T>>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nCreates a {@link ConnectableObservable} that utilizes a {@link BehaviorSubject}.\r\n","tags":[{"kind":25,"tagName":"param","text":"initialValue The initial value passed to the {@link BehaviorSubject}."},{"kind":25,"tagName":"return","text":"A function that returns a {@link ConnectableObservable}"},{"kind":25,"tagName":"deprecated","text":"Will be removed in v8. To create a connectable observable that uses a\r\n{@link BehaviorSubject} under the hood, use {@link connectable}.\r\n`source.pipe(publishBehavior(initValue))` is equivalent to\r\n`connectable(source, { connector: () => new BehaviorSubject(initValue), resetOnDisconnect: false })`.\r\nIf you're using {@link refCount} after `publishBehavior`, use the {@link share} operator instead.\r\n`source.pipe(publishBehavior(initValue), refCount())` is equivalent to\r\n`source.pipe(share({ connector: () => new BehaviorSubject(initValue), resetOnError: false, resetOnComplete: false, resetOnRefCountZero: false  }))`.\r\nDetails: https://rxjs.dev/deprecations/multicasting"}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[],"functionName":"publishBehavior","modulePath":"..\\src\\internal\\operators\\publishBehavior.ts"}}},"usabilityResult":{"index":0.18}},"..\\src\\internal\\operators\\publishLast.ts":{"moduleComponents":{"publishLast":{"kind":13,"usabilityResult":{"wordCount":184,"index":1},"sources":{"name":"publishLast","statements":["return (source) => {\r\nconst subject = new AsyncSubject<T>();\r\nreturn new ConnectableObservable(source, () => subject);\r\n};"],"parameters":[],"returnType":"UnaryFunction<Observable<T>, ConnectableObservable<T>>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nReturns a connectable observable sequence that shares a single subscription to the\r\nunderlying sequence containing only the last notification.\r\n\r\n![](publishLast.png)\r\n\r\nSimilar to {@link publish}, but it waits until the source observable completes and stores\r\nthe last emitted value.\r\nSimilarly to {@link publishReplay} and {@link publishBehavior}, this keeps storing the last\r\nvalue even if it has no more subscribers. If subsequent subscriptions happen, they will\r\nimmediately get that last stored value and complete.\r\n\r\n## Example\r\n\r\n```ts\r\nimport { ConnectableObservable, interval, publishLast, tap, take } from 'rxjs';\r\n\r\nconst connectable = <ConnectableObservable<number>>interval(1000)\r\n  .pipe(\r\n    tap(x => console.log('side effect', x)),\r\n    take(3),\r\n    publishLast()\r\n  );\r\n\r\nconnectable.subscribe({\r\n  next: x => console.log('Sub. A', x),\r\n  error: err => console.log('Sub. A Error', err),\r\n  complete: () => console.log('Sub. A Complete')\r\n});\r\n\r\nconnectable.subscribe({\r\n  next: x => console.log('Sub. B', x),\r\n  error: err => console.log('Sub. B Error', err),\r\n  complete: () => console.log('Sub. B Complete')\r\n});\r\n\r\nconnectable.connect();\r\n\r\n// Results:\r\n// 'side effect 0'   - after one second\r\n// 'side effect 1'   - after two seconds\r\n// 'side effect 2'   - after three seconds\r\n// 'Sub. A 2'        - immediately after 'side effect 2'\r\n// 'Sub. B 2'\r\n// 'Sub. A Complete'\r\n// 'Sub. B Complete'\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link ConnectableObservable}"},{"kind":25,"tagName":"see","text":"{@link publish}"},{"kind":25,"tagName":"see","text":"{@link publishReplay}"},{"kind":25,"tagName":"see","text":"{@link publishBehavior}"},{"kind":25,"tagName":"return","text":"A function that returns an Observable that emits elements of a\r\nsequence produced by multicasting the source sequence."},{"kind":25,"tagName":"deprecated","text":"Will be removed in v8. To create a connectable observable with an\r\n{@link AsyncSubject} under the hood, use {@link connectable}.\r\n`source.pipe(publishLast())` is equivalent to\r\n`connectable(source, { connector: () => new AsyncSubject(), resetOnDisconnect: false })`.\r\nIf you're using {@link refCount} after `publishLast`, use the {@link share} operator instead.\r\n`source.pipe(publishLast(), refCount())` is equivalent to\r\n`source.pipe(share({ connector: () => new AsyncSubject(), resetOnError: false, resetOnComplete: false, resetOnRefCountZero: false }))`.\r\nDetails: https://rxjs.dev/deprecations/multicasting"}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[],"functionName":"publishLast","modulePath":"..\\src\\internal\\operators\\publishLast.ts"}}},"usabilityResult":{"index":1}},"..\\src\\internal\\operators\\publishReplay.ts":{"moduleComponents":{"publishReplay":{"kind":13,"usabilityResult":{"wordCount":79,"index":1},"sources":{"name":"publishReplay","statements":["if (selectorOrScheduler && !isFunction(selectorOrScheduler)) {\r\ntimestampProvider = selectorOrScheduler;\r\n}",{"isExported":false,"isDefaultExport":false,"hasDeclareKeyword":false,"docs":[],"kind":41,"declarationKind":"const","declarations":[{"name":"selector","initializer":"isFunction(selectorOrScheduler) ? selectorOrScheduler : undefined","hasExclamationToken":false,"kind":40}]},"return (source: Observable<T>) => multicast(new ReplaySubject<T>(bufferSize, windowTime, timestampProvider), selector!)(source);"],"parameters":[{"name":"bufferSize","type":"number","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"windowTime","type":"number","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"selectorOrScheduler","type":"TimestampProvider | OperatorFunction<T, R>","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"timestampProvider","type":"TimestampProvider","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"R","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Will be removed in v8. Use the {@link connectable} observable, the {@link connect} operator or the\r\n{@link share} operator instead. See the overloads below for equivalent replacement examples of this operator's\r\nbehaviors.\r\nDetails: https://rxjs.dev/deprecations/multicasting"}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nCreates a {@link ConnectableObservable} that uses a {@link ReplaySubject}\r\ninternally.\r\n","tags":[{"kind":25,"tagName":"param","text":"bufferSize The buffer size for the underlying {@link ReplaySubject}."},{"kind":25,"tagName":"param","text":"windowTime The window time for the underlying {@link ReplaySubject}."},{"kind":25,"tagName":"param","text":"timestampProvider The timestamp provider for the underlying {@link ReplaySubject}."},{"kind":25,"tagName":"deprecated","text":"Will be removed in v8. To create a connectable observable that uses a\r\n{@link ReplaySubject} under the hood, use {@link connectable}.\r\n`source.pipe(publishReplay(size, time, scheduler))` is equivalent to\r\n`connectable(source, { connector: () => new ReplaySubject(size, time, scheduler), resetOnDisconnect: false })`.\r\nIf you're using {@link refCount} after `publishReplay`, use the {@link share} operator instead.\r\n`publishReplay(size, time, scheduler), refCount()` is equivalent to\r\n`share({ connector: () => new ReplaySubject(size, time, scheduler), resetOnError: false, resetOnComplete: false, resetOnRefCountZero: false })`.\r\nDetails: https://rxjs.dev/deprecations/multicasting"}]}],"hasDeclareKeyword":false,"parameters":[{"name":"bufferSize","type":"number","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"windowTime","type":"number","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"timestampProvider","type":"TimestampProvider","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"MonoTypeOperatorFunction<T>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"publishReplay","modulePath":"..\\src\\internal\\operators\\publishReplay.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"O","kind":39,"isConst":false,"constraint":"ObservableInput<any>","variance":0}],"docs":[{"kind":24,"description":"\r\nCreates an observable, that when subscribed to, will create a {@link ReplaySubject},\r\nand pass an observable from it (using [asObservable](api/index/class/Subject#asObservable)) to\r\nthe `selector` function, which then returns an observable that is subscribed to before\r\n\"connecting\" the source to the internal `ReplaySubject`.\r\n\r\nSince this is deprecated, for additional details see the documentation for {@link connect}.\r\n","tags":[{"kind":25,"tagName":"param","text":"bufferSize The buffer size for the underlying {@link ReplaySubject}."},{"kind":25,"tagName":"param","text":"windowTime The window time for the underlying {@link ReplaySubject}."},{"kind":25,"tagName":"param","text":"selector A function used to setup the multicast."},{"kind":25,"tagName":"param","text":"timestampProvider The timestamp provider for the underlying {@link ReplaySubject}."},{"kind":25,"tagName":"deprecated","text":"Will be removed in v8. Use the {@link connect} operator instead.\r\n`source.pipe(publishReplay(size, window, selector, scheduler))` is equivalent to\r\n`source.pipe(connect(selector, { connector: () => new ReplaySubject(size, window, scheduler) }))`.\r\nDetails: https://rxjs.dev/deprecations/multicasting"}]}],"hasDeclareKeyword":false,"parameters":[{"name":"bufferSize","type":"number | undefined","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"windowTime","type":"number | undefined","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"selector","type":"(shared: Observable<T>) => O","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"timestampProvider","type":"TimestampProvider","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, ObservedValueOf<O>>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"publishReplay","modulePath":"..\\src\\internal\\operators\\publishReplay.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"O","kind":39,"isConst":false,"constraint":"ObservableInput<any>","variance":0}],"docs":[{"kind":24,"description":"\r\nCreates a {@link ConnectableObservable} that uses a {@link ReplaySubject}\r\ninternally.\r\n","tags":[{"kind":25,"tagName":"param","text":"bufferSize The buffer size for the underlying {@link ReplaySubject}."},{"kind":25,"tagName":"param","text":"windowTime The window time for the underlying {@link ReplaySubject}."},{"kind":25,"tagName":"param","text":"selector Passing `undefined` here determines that this operator will return a {@link ConnectableObservable}."},{"kind":25,"tagName":"param","text":"timestampProvider The timestamp provider for the underlying {@link ReplaySubject}."},{"kind":25,"tagName":"deprecated","text":"Will be removed in v8. To create a connectable observable that uses a\r\n{@link ReplaySubject} under the hood, use {@link connectable}.\r\n`source.pipe(publishReplay(size, time, scheduler))` is equivalent to\r\n`connectable(source, { connector: () => new ReplaySubject(size, time, scheduler), resetOnDisconnect: false })`.\r\nIf you're using {@link refCount} after `publishReplay`, use the {@link share} operator instead.\r\n`publishReplay(size, time, scheduler), refCount()` is equivalent to\r\n`share({ connector: () => new ReplaySubject(size, time, scheduler), resetOnError: false, resetOnComplete: false, resetOnRefCountZero: false })`.\r\nDetails: https://rxjs.dev/deprecations/multicasting"}]}],"hasDeclareKeyword":false,"parameters":[{"name":"bufferSize","type":"number | undefined","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"windowTime","type":"number | undefined","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"selector","type":"undefined","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"timestampProvider","type":"TimestampProvider","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, ObservedValueOf<O>>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"publishReplay","modulePath":"..\\src\\internal\\operators\\publishReplay.ts"}]}}},"usabilityResult":{"index":1}},"..\\src\\internal\\operators\\raceWith.ts":{"moduleComponents":{"raceWith":{"kind":13,"usabilityResult":{"wordCount":80,"index":1},"sources":{"name":"raceWith","statements":["return !otherSources.length\r\n? identity\r\n: operate((source, subscriber) => {\r\n    raceInit<T | A[number]>([source, ...otherSources])(subscriber);\r\n  });"],"parameters":[{"name":"otherSources","type":"[...ObservableInputTuple<A>]","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":true}],"returnType":"OperatorFunction<T, T | A[number]>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"A","kind":39,"isConst":false,"constraint":"readonly unknown[]","variance":0}],"docs":[{"kind":24,"description":"\r\nCreates an Observable that mirrors the first source Observable to emit a next,\r\nerror or complete notification from the combination of the Observable to which\r\nthe operator is applied and supplied Observables.\r\n\r\n## Example\r\n\r\n```ts\r\nimport { interval, map, raceWith } from 'rxjs';\r\n\r\nconst obs1 = interval(7000).pipe(map(() => 'slow one'));\r\nconst obs2 = interval(3000).pipe(map(() => 'fast one'));\r\nconst obs3 = interval(5000).pipe(map(() => 'medium one'));\r\n\r\nobs1\r\n  .pipe(raceWith(obs2, obs3))\r\n  .subscribe(winner => console.log(winner));\r\n\r\n// Outputs\r\n// a series of 'fast one'\r\n```\r\n","tags":[{"kind":25,"tagName":"param","text":"otherSources Sources used to race for which Observable emits first."},{"kind":25,"tagName":"return","text":"A function that returns an Observable that mirrors the output of the\r\nfirst Observable to emit an item."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[],"functionName":"raceWith","modulePath":"..\\src\\internal\\operators\\raceWith.ts"}}},"usabilityResult":{"index":1}},"..\\src\\internal\\operators\\reduce.ts":{"moduleComponents":{"reduce":{"kind":13,"usabilityResult":{"wordCount":237,"index":1},"sources":{"name":"reduce","statements":["return operate(scanInternals(accumulator, seed, arguments.length >= 2, false, true));"],"parameters":[{"name":"accumulator","type":"(acc: V | A, value: V, index: number) => A","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"seed","type":"any","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<V, V | A>","typeParameters":[{"name":"V","kind":39,"isConst":false,"variance":0},{"name":"A","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nApplies an accumulator function over the source Observable, and returns the\r\naccumulated result when the source completes, given an optional seed value.\r\n\r\n<span class=\"informal\">Combines together all values emitted on the source,\r\nusing an accumulator function that knows how to join a new source value into\r\nthe accumulation from the past.</span>\r\n\r\n![](reduce.png)\r\n\r\nLike\r\n[Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce),\r\n`reduce` applies an `accumulator` function against an accumulation and each\r\nvalue of the source Observable (from the past) to reduce it to a single\r\nvalue, emitted on the output Observable. Note that `reduce` will only emit\r\none value, only when the source Observable completes. It is equivalent to\r\napplying operator {@link scan} followed by operator {@link last}.\r\n\r\nReturns an Observable that applies a specified `accumulator` function to each\r\nitem emitted by the source Observable. If a `seed` value is specified, then\r\nthat value will be used as the initial value for the accumulator. If no seed\r\nvalue is specified, the first item of the source is used as the seed.\r\n\r\n## Example\r\n\r\nCount the number of click events that happened in 5 seconds\r\n\r\n```ts\r\nimport { fromEvent, takeUntil, interval, map, reduce } from 'rxjs';\r\n\r\nconst clicksInFiveSeconds = fromEvent(document, 'click')\r\n  .pipe(takeUntil(interval(5000)));\r\n\r\nconst ones = clicksInFiveSeconds.pipe(map(() => 1));\r\nconst seed = 0;\r\nconst count = ones.pipe(reduce((acc, one) => acc + one, seed));\r\n\r\ncount.subscribe(x => console.log(x));\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link count}"},{"kind":25,"tagName":"see","text":"{@link expand}"},{"kind":25,"tagName":"see","text":"{@link mergeScan}"},{"kind":25,"tagName":"see","text":"{@link scan}"},{"kind":25,"tagName":"param","text":"{function(acc: A, value: V, index: number): A} accumulator The accumulator function\r\ncalled on each source value."},{"kind":25,"tagName":"param","text":"{A} [seed] The initial accumulation value."},{"kind":25,"tagName":"return","text":"A function that returns an Observable that emits a single value that\r\nis the result of accumulating the values emitted by the source Observable."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"V","kind":39,"isConst":false,"variance":0},{"name":"A","kind":39,"isConst":false,"default":"V","variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"accumulator","type":"(acc: A | V, value: V, index: number) => A","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<V, V | A>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"reduce","modulePath":"..\\src\\internal\\operators\\reduce.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"V","kind":39,"isConst":false,"variance":0},{"name":"A","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"accumulator","type":"(acc: A, value: V, index: number) => A","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"seed","type":"A","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<V, A>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"reduce","modulePath":"..\\src\\internal\\operators\\reduce.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"V","kind":39,"isConst":false,"variance":0},{"name":"A","kind":39,"isConst":false,"variance":0},{"name":"S","kind":39,"isConst":false,"default":"A","variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"accumulator","type":"(acc: A | S, value: V, index: number) => A","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"seed","type":"S","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<V, A>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"reduce","modulePath":"..\\src\\internal\\operators\\reduce.ts"}]}}},"usabilityResult":{"index":1}},"..\\src\\internal\\operators\\repeat.ts":{"moduleComponents":{"repeat":{"kind":13,"usabilityResult":{"wordCount":356,"index":1},"sources":{"name":"repeat","statements":[{"isExported":false,"isDefaultExport":false,"hasDeclareKeyword":false,"docs":[],"kind":41,"declarationKind":"let","declarations":[{"name":"count","initializer":"Infinity","hasExclamationToken":false,"kind":40}]},{"isExported":false,"isDefaultExport":false,"hasDeclareKeyword":false,"docs":[],"kind":41,"declarationKind":"let","declarations":[{"name":"delay","type":"RepeatConfig['delay']","hasExclamationToken":false,"kind":40}]},"if (countOrConfig != null) {\r\nif (typeof countOrConfig === 'object') {\r\n  ({ count = Infinity, delay } = countOrConfig);\r\n} else {\r\n  count = countOrConfig;\r\n}\r\n}","return count <= 0\r\n    ? () => EMPTY\r\n    : operate((source, subscriber) => {\r\n        let soFar = 0;\r\n        let sourceSub: Subscription | null;\r\n\r\n        const resubscribe = () => {\r\n          sourceSub?.unsubscribe();\r\n          sourceSub = null;\r\n          if (delay != null) {\r\n            const notifier = typeof delay === 'number' ? timer(delay) : innerFrom(delay(soFar));\r\n            const notifierSubscriber = createOperatorSubscriber(subscriber, () => {\r\n              notifierSubscriber.unsubscribe();\r\n              subscribeToSource();\r\n            });\r\n            notifier.subscribe(notifierSubscriber);\r\n          } else {\r\n            subscribeToSource();\r\n          }\r\n        };\r\n\r\n        const subscribeToSource = () => {\r\n          let syncUnsub = false;\r\n          sourceSub = source.subscribe(\r\n            createOperatorSubscriber(subscriber, undefined, () => {\r\n              if (++soFar < count) {\r\n                if (sourceSub) {\r\n                  resubscribe();\r\n                } else {\r\n                  syncUnsub = true;\r\n                }\r\n              } else {\r\n                subscriber.complete();\r\n              }\r\n            })\r\n          );\r\n\r\n          if (syncUnsub) {\r\n            resubscribe();\r\n          }\r\n        };\r\n\r\n        subscribeToSource();\r\n      });"],"parameters":[{"name":"countOrConfig","type":"number | RepeatConfig","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"MonoTypeOperatorFunction<T>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nReturns an Observable that will resubscribe to the source stream when the source stream completes.\r\n\r\n<span class=\"informal\">Repeats all values emitted on the source. It's like {@link retry}, but for non error cases.</span>\r\n\r\n![](repeat.png)\r\n\r\nRepeat will output values from a source until the source completes, then it will resubscribe to the\r\nsource a specified number of times, with a specified delay. Repeat can be particularly useful in\r\ncombination with closing operators like {@link take}, {@link takeUntil}, {@link first}, or {@link takeWhile},\r\nas it can be used to restart a source again from scratch.\r\n\r\nRepeat is very similar to {@link retry}, where {@link retry} will resubscribe to the source in the error case, but\r\n`repeat` will resubscribe if the source completes.\r\n\r\nNote that `repeat` will _not_ catch errors. Use {@link retry} for that.\r\n\r\n- `repeat(0)` returns an empty observable\r\n- `repeat()` will repeat forever\r\n- `repeat({ delay: 200 })` will repeat forever, with a delay of 200ms between repetitions.\r\n- `repeat({ count: 2, delay: 400 })` will repeat twice, with a delay of 400ms between repetitions.\r\n- `repeat({ delay: (count) => timer(count * 1000) })` will repeat forever, but will have a delay that grows by one second for each repetition.\r\n\r\n## Example\r\n\r\nRepeat a message stream\r\n\r\n```ts\r\nimport { of, repeat } from 'rxjs';\r\n\r\nconst source = of('Repeat message');\r\nconst result = source.pipe(repeat(3));\r\n\r\nresult.subscribe(x => console.log(x));\r\n\r\n// Results\r\n// 'Repeat message'\r\n// 'Repeat message'\r\n// 'Repeat message'\r\n```\r\n\r\nRepeat 3 values, 2 times\r\n\r\n```ts\r\nimport { interval, take, repeat } from 'rxjs';\r\n\r\nconst source = interval(1000);\r\nconst result = source.pipe(take(3), repeat(2));\r\n\r\nresult.subscribe(x => console.log(x));\r\n\r\n// Results every second\r\n// 0\r\n// 1\r\n// 2\r\n// 0\r\n// 1\r\n// 2\r\n```\r\n\r\nDefining two complex repeats with delays on the same source.\r\nNote that the second repeat cannot be called until the first\r\nrepeat as exhausted it's count.\r\n\r\n```ts\r\nimport { defer, of, repeat } from 'rxjs';\r\n\r\nconst source = defer(() => {\r\n   return of(`Hello, it is ${new Date()}`)\r\n});\r\n\r\nsource.pipe(\r\n   // Repeat 3 times with a delay of 1 second between repetitions\r\n   repeat({\r\n     count: 3,\r\n     delay: 1000,\r\n   }),\r\n\r\n   // *Then* repeat forever, but with an exponential step-back\r\n   // maxing out at 1 minute.\r\n   repeat({\r\n     delay: (count) => timer(Math.min(60000, 2 ^ count * 1000))\r\n   })\r\n)\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link repeatWhen}"},{"kind":25,"tagName":"see","text":"{@link retry}"},{"kind":25,"tagName":"param","text":"count The number of times the source Observable items are repeated, a count of 0 will yield\r\nan empty Observable."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[],"functionName":"repeat","modulePath":"..\\src\\internal\\operators\\repeat.ts"}}},"usabilityResult":{"index":1}},"..\\src\\internal\\operators\\repeatWhen.ts":{"moduleComponents":{"repeatWhen":{"kind":13,"usabilityResult":{"wordCount":96,"index":1},"sources":{"name":"repeatWhen","statements":["return operate((source, subscriber) => {\r\n    let innerSub: Subscription | null;\r\n    let syncResub = false;\r\n    let completions$: Subject<void>;\r\n    let isNotifierComplete = false;\r\n    let isMainComplete = false;\r\n\r\n    /**\r\n     * Checks to see if we can complete the result, completes it, and returns `true` if it was completed.\r\n     */\r\n    const checkComplete = () => isMainComplete && isNotifierComplete && (subscriber.complete(), true);\r\n    /**\r\n     * Gets the subject to send errors through. If it doesn't exist,\r\n     * we know we need to setup the notifier.\r\n     */\r\n    const getCompletionSubject = () => {\r\n      if (!completions$) {\r\n        completions$ = new Subject();\r\n\r\n        // If the call to `notifier` throws, it will be caught by the OperatorSubscriber\r\n        // In the main subscription -- in `subscribeForRepeatWhen`.\r\n        innerFrom(notifier(completions$)).subscribe(\r\n          createOperatorSubscriber(\r\n            subscriber,\r\n            () => {\r\n              if (innerSub) {\r\n                subscribeForRepeatWhen();\r\n              } else {\r\n                // If we don't have an innerSub yet, that's because the inner subscription\r\n                // call hasn't even returned yet. We've arrived here synchronously.\r\n                // So we flag that we want to resub, such that we can ensure finalization\r\n                // happens before we resubscribe.\r\n                syncResub = true;\r\n              }\r\n            },\r\n            () => {\r\n              isNotifierComplete = true;\r\n              checkComplete();\r\n            }\r\n          )\r\n        );\r\n      }\r\n      return completions$;\r\n    };\r\n\r\n    const subscribeForRepeatWhen = () => {\r\n      isMainComplete = false;\r\n\r\n      innerSub = source.subscribe(\r\n        createOperatorSubscriber(subscriber, undefined, () => {\r\n          isMainComplete = true;\r\n          // Check to see if we are complete, and complete if so.\r\n          // If we are not complete. Get the subject. This calls the `notifier` function.\r\n          // If that function fails, it will throw and `.next()` will not be reached on this\r\n          // line. The thrown error is caught by the _complete handler in this\r\n          // `OperatorSubscriber` and handled appropriately.\r\n          !checkComplete() && getCompletionSubject().next();\r\n        })\r\n      );\r\n\r\n      if (syncResub) {\r\n        // Ensure that the inner subscription is torn down before\r\n        // moving on to the next subscription in the synchronous case.\r\n        // If we don't do this here, all inner subscriptions will not be\r\n        // torn down until the entire observable is done.\r\n        innerSub.unsubscribe();\r\n        // It is important to null this out. Not only to free up memory, but\r\n        // to make sure code above knows we are in a subscribing state to\r\n        // handle synchronous resubscription.\r\n        innerSub = null;\r\n        // We may need to do this multiple times, so reset the flags.\r\n        syncResub = false;\r\n        // Resubscribe\r\n        subscribeForRepeatWhen();\r\n      }\r\n    };\r\n\r\n    // Start the subscription\r\n    subscribeForRepeatWhen();\r\n  });"],"parameters":[{"name":"notifier","type":"(notifications: Observable<void>) => ObservableInput<any>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"MonoTypeOperatorFunction<T>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nReturns an Observable that mirrors the source Observable with the exception of a `complete`. If the source\r\nObservable calls `complete`, this method will emit to the Observable returned from `notifier`. If that Observable\r\ncalls `complete` or `error`, then this method will call `complete` or `error` on the child subscription. Otherwise\r\nthis method will resubscribe to the source Observable.\r\n\r\n![](repeatWhen.png)\r\n\r\n## Example\r\n\r\nRepeat a message stream on click\r\n\r\n```ts\r\nimport { of, fromEvent, repeatWhen } from 'rxjs';\r\n\r\nconst source = of('Repeat message');\r\nconst documentClick$ = fromEvent(document, 'click');\r\n\r\nconst result = source.pipe(repeatWhen(() => documentClick$));\r\n\r\nresult.subscribe(data => console.log(data))\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link repeat}"},{"kind":25,"tagName":"see","text":"{@link retry}"},{"kind":25,"tagName":"see","text":"{@link retryWhen}"},{"kind":25,"tagName":"param","text":"notifier Function that receives an Observable of notifications with\r\nwhich a user can `complete` or `error`, aborting the repetition."},{"kind":25,"tagName":"return","text":"A function that returns an `ObservableInput` that mirrors the source\r\nObservable with the exception of a `complete`."},{"kind":25,"tagName":"deprecated","text":"Will be removed in v9 or v10. Use {@link repeat}'s {@link RepeatConfig#delay delay} option instead.\r\nInstead of `repeatWhen(() => notify$)`, use: `repeat({ delay: () => notify$ })`."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[],"functionName":"repeatWhen","modulePath":"..\\src\\internal\\operators\\repeatWhen.ts"}}},"usabilityResult":{"index":1}},"..\\src\\internal\\operators\\retry.ts":{"moduleComponents":{"retry":{"kind":13,"usabilityResult":{"wordCount":231,"index":1},"sources":{"name":"retry","statements":[{"isExported":false,"isDefaultExport":false,"hasDeclareKeyword":false,"docs":[],"kind":41,"declarationKind":"let","declarations":[{"name":"config","type":"RetryConfig","hasExclamationToken":false,"kind":40}]},"if (configOrCount && typeof configOrCount === 'object') {\r\nconfig = configOrCount;\r\n} else {\r\nconfig = {\r\n  count: configOrCount as number,\r\n};\r\n}",{"isExported":false,"isDefaultExport":false,"hasDeclareKeyword":false,"docs":[],"kind":41,"declarationKind":"const","declarations":[{"name":"{ count = Infinity, delay, resetOnSuccess: resetOnSuccess = false }","initializer":"config","hasExclamationToken":false,"kind":40}]},"return count <= 0\r\n    ? identity\r\n    : operate((source, subscriber) => {\r\n        let soFar = 0;\r\n        let innerSub: Subscription | null;\r\n        const subscribeForRetry = () => {\r\n          let syncUnsub = false;\r\n          innerSub = source.subscribe(\r\n            createOperatorSubscriber(\r\n              subscriber,\r\n              (value) => {\r\n                // If we're resetting on success\r\n                if (resetOnSuccess) {\r\n                  soFar = 0;\r\n                }\r\n                subscriber.next(value);\r\n              },\r\n              // Completions are passed through to consumer.\r\n              undefined,\r\n              (err) => {\r\n                if (soFar++ < count) {\r\n                  // We are still under our retry count\r\n                  const resub = () => {\r\n                    if (innerSub) {\r\n                      innerSub.unsubscribe();\r\n                      innerSub = null;\r\n                      subscribeForRetry();\r\n                    } else {\r\n                      syncUnsub = true;\r\n                    }\r\n                  };\r\n\r\n                  if (delay != null) {\r\n                    // The user specified a retry delay.\r\n                    // They gave us a number, use a timer, otherwise, it's a function,\r\n                    // and we're going to call it to get a notifier.\r\n                    const notifier = typeof delay === 'number' ? timer(delay) : innerFrom(delay(err, soFar));\r\n                    const notifierSubscriber = createOperatorSubscriber(\r\n                      subscriber,\r\n                      () => {\r\n                        // After we get the first notification, we\r\n                        // unsubscribe from the notifier, because we don't want anymore\r\n                        // and we resubscribe to the source.\r\n                        notifierSubscriber.unsubscribe();\r\n                        resub();\r\n                      },\r\n                      () => {\r\n                        // The notifier completed without emitting.\r\n                        // The author is telling us they want to complete.\r\n                        subscriber.complete();\r\n                      }\r\n                    );\r\n                    notifier.subscribe(notifierSubscriber);\r\n                  } else {\r\n                    // There was no notifier given. Just resub immediately.\r\n                    resub();\r\n                  }\r\n                } else {\r\n                  // We're past our maximum number of retries.\r\n                  // Just send along the error.\r\n                  subscriber.error(err);\r\n                }\r\n              }\r\n            )\r\n          );\r\n          if (syncUnsub) {\r\n            innerSub.unsubscribe();\r\n            innerSub = null;\r\n            subscribeForRetry();\r\n          }\r\n        };\r\n        subscribeForRetry();\r\n      });"],"parameters":[{"name":"configOrCount","initializer":"Infinity","type":"number | RetryConfig","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"MonoTypeOperatorFunction<T>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nReturns an Observable that mirrors the source Observable with the exception of an `error`.\r\n\r\nIf the source Observable calls `error`, this method will resubscribe to the source Observable for a maximum of\r\n`count` resubscriptions rather than propagating the `error` call.\r\n\r\n![](retry.png)\r\n\r\nThe number of retries is determined by the `count` parameter. It can be set either by passing a number to\r\n`retry` function or by setting `count` property when `retry` is configured using {@link RetryConfig}. If\r\n`count` is omitted, `retry` will try to resubscribe on errors infinite number of times.\r\n\r\nAny and all items emitted by the source Observable will be emitted by the resulting Observable, even those\r\nemitted during failed subscriptions. For example, if an Observable fails at first but emits `[1, 2]` then\r\nsucceeds the second time and emits: `[1, 2, 3, 4, 5, complete]` then the complete stream of emissions and\r\nnotifications would be: `[1, 2, 1, 2, 3, 4, 5, complete]`.\r\n\r\n## Example\r\n\r\n```ts\r\nimport { interval, mergeMap, throwError, of, retry } from 'rxjs';\r\n\r\nconst source = interval(1000);\r\nconst result = source.pipe(\r\n  mergeMap(val => val > 5 ? throwError(() => 'Error!') : of(val)),\r\n  retry(2) // retry 2 times on error\r\n);\r\n\r\nresult.subscribe({\r\n  next: value => console.log(value),\r\n  error: err => console.log(`${ err }: Retried 2 times then quit!`)\r\n});\r\n\r\n// Output:\r\n// 0..1..2..3..4..5..\r\n// 0..1..2..3..4..5..\r\n// 0..1..2..3..4..5..\r\n// 'Error!: Retried 2 times then quit!'\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link retryWhen}"},{"kind":25,"tagName":"param","text":"configOrCount - Either number of retry attempts before failing or a {@link RetryConfig} object."},{"kind":25,"tagName":"return","text":"A function that returns an Observable that will resubscribe to the\r\nsource stream when the source stream errors, at most `count` times."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"count","type":"number","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"MonoTypeOperatorFunction<T>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"retry","modulePath":"..\\src\\internal\\operators\\retry.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"config","type":"RetryConfig","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"MonoTypeOperatorFunction<T>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"retry","modulePath":"..\\src\\internal\\operators\\retry.ts"}]}}},"usabilityResult":{"index":1}},"..\\src\\internal\\operators\\retryWhen.ts":{"moduleComponents":{"retryWhen":{"kind":13,"usabilityResult":{"wordCount":159,"index":1},"sources":{"name":"retryWhen","statements":["return operate((source, subscriber) => {\r\n    let innerSub: Subscription | null;\r\n    let syncResub = false;\r\n    let errors$: Subject<any>;\r\n\r\n    const subscribeForRetryWhen = () => {\r\n      innerSub = source.subscribe(\r\n        createOperatorSubscriber(subscriber, undefined, undefined, (err) => {\r\n          if (!errors$) {\r\n            errors$ = new Subject();\r\n            innerFrom(notifier(errors$)).subscribe(\r\n              createOperatorSubscriber(subscriber, () =>\r\n                // If we have an innerSub, this was an asynchronous call, kick off the retry.\r\n                // Otherwise, if we don't have an innerSub yet, that's because the inner subscription\r\n                // call hasn't even returned yet. We've arrived here synchronously.\r\n                // So we flag that we want to resub, such that we can ensure finalization\r\n                // happens before we resubscribe.\r\n                innerSub ? subscribeForRetryWhen() : (syncResub = true)\r\n              )\r\n            );\r\n          }\r\n          if (errors$) {\r\n            // We have set up the notifier without error.\r\n            errors$.next(err);\r\n          }\r\n        })\r\n      );\r\n\r\n      if (syncResub) {\r\n        // Ensure that the inner subscription is torn down before\r\n        // moving on to the next subscription in the synchronous case.\r\n        // If we don't do this here, all inner subscriptions will not be\r\n        // torn down until the entire observable is done.\r\n        innerSub.unsubscribe();\r\n        innerSub = null;\r\n        // We may need to do this multiple times, so reset the flag.\r\n        syncResub = false;\r\n        // Resubscribe\r\n        subscribeForRetryWhen();\r\n      }\r\n    };\r\n\r\n    // Start the subscription\r\n    subscribeForRetryWhen();\r\n  });"],"parameters":[{"name":"notifier","type":"(errors: Observable<any>) => ObservableInput<any>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"MonoTypeOperatorFunction<T>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nReturns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\r\ncalls `error`, this method will emit the Throwable that caused the error to the `ObservableInput` returned from `notifier`.\r\nIf that Observable calls `complete` or `error` then this method will call `complete` or `error` on the child\r\nsubscription. Otherwise this method will resubscribe to the source Observable.\r\n\r\n![](retryWhen.png)\r\n\r\nRetry an observable sequence on error based on custom criteria.\r\n\r\n## Example\r\n\r\n```ts\r\nimport { interval, map, retryWhen, tap, delayWhen, timer } from 'rxjs';\r\n\r\nconst source = interval(1000);\r\nconst result = source.pipe(\r\n  map(value => {\r\n    if (value > 5) {\r\n      // error will be picked up by retryWhen\r\n      throw value;\r\n    }\r\n    return value;\r\n  }),\r\n  retryWhen(errors =>\r\n    errors.pipe(\r\n      // log error message\r\n      tap(value => console.log(`Value ${ value } was too high!`)),\r\n      // restart in 5 seconds\r\n      delayWhen(value => timer(value * 1000))\r\n    )\r\n  )\r\n);\r\n\r\nresult.subscribe(value => console.log(value));\r\n\r\n// results:\r\n// 0\r\n// 1\r\n// 2\r\n// 3\r\n// 4\r\n// 5\r\n// 'Value 6 was too high!'\r\n// - Wait 5 seconds then repeat\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link retry}"},{"kind":25,"tagName":"param","text":"notifier Function that receives an Observable of notifications with which a\r\nuser can `complete` or `error`, aborting the retry."},{"kind":25,"tagName":"return","text":"A function that returns an `ObservableInput` that mirrors the source\r\nObservable with the exception of an `error`."},{"kind":25,"tagName":"deprecated","text":"Will be removed in v9 or v10, use {@link retry}'s `delay` option instead.\r\nWill be removed in v9 or v10. Use {@link retry}'s {@link RetryConfig#delay delay} option instead.\r\nInstead of `retryWhen(() => notify$)`, use: `retry({ delay: () => notify$ })`."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[],"functionName":"retryWhen","modulePath":"..\\src\\internal\\operators\\retryWhen.ts"}}},"usabilityResult":{"index":1}},"..\\src\\internal\\operators\\refCount.ts":{"moduleComponents":{"refCount":{"kind":13,"usabilityResult":{"wordCount":253,"index":1},"sources":{"name":"refCount","statements":["return operate((source, subscriber) => {\r\n    let connection: Subscription | null = null;\r\n\r\n    (source as any)._refCount++;\r\n\r\n    const refCounter = createOperatorSubscriber(subscriber, undefined, undefined, undefined, () => {\r\n      if (!source || (source as any)._refCount <= 0 || 0 < --(source as any)._refCount) {\r\n        connection = null;\r\n        return;\r\n      }\r\n\r\n      ///\r\n      // Compare the local RefCountSubscriber's connection Subscription to the\r\n      // connection Subscription on the shared ConnectableObservable. In cases\r\n      // where the ConnectableObservable source synchronously emits values, and\r\n      // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\r\n      // execution continues to here before the RefCountOperator has a chance to\r\n      // supply the RefCountSubscriber with the shared connection Subscription.\r\n      // For example:\r\n      // ```\r\n      // range(0, 10).pipe(\r\n      //   publish(),\r\n      //   refCount(),\r\n      //   take(5),\r\n      // )\r\n      // .subscribe();\r\n      // ```\r\n      // In order to account for this case, RefCountSubscriber should only dispose\r\n      // the ConnectableObservable's shared connection Subscription if the\r\n      // connection Subscription exists, *and* either:\r\n      //   a. RefCountSubscriber doesn't have a reference to the shared connection\r\n      //      Subscription yet, or,\r\n      //   b. RefCountSubscriber's connection Subscription reference is identical\r\n      //      to the shared connection Subscription\r\n      ///\r\n\r\n      const sharedConnection = (source as any)._connection;\r\n      const conn = connection;\r\n      connection = null;\r\n\r\n      if (sharedConnection && (!conn || sharedConnection === conn)) {\r\n        sharedConnection.unsubscribe();\r\n      }\r\n\r\n      subscriber.unsubscribe();\r\n    });\r\n\r\n    source.subscribe(refCounter);\r\n\r\n    if (!refCounter.closed) {\r\n      connection = (source as ConnectableObservable<T>).connect();\r\n    }\r\n  });"],"parameters":[],"returnType":"MonoTypeOperatorFunction<T>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nMake a {@link ConnectableObservable} behave like a ordinary observable and automates the way\r\nyou can connect to it.\r\n\r\nInternally it counts the subscriptions to the observable and subscribes (only once) to the source if\r\nthe number of subscriptions is larger than 0. If the number of subscriptions is smaller than 1, it\r\nunsubscribes from the source. This way you can make sure that everything before the *published*\r\nrefCount has only a single subscription independently of the number of subscribers to the target\r\nobservable.\r\n\r\nNote that using the {@link share} operator is exactly the same as using the `multicast(() => new Subject())` operator\r\n(making the observable hot) and the *refCount* operator in a sequence.\r\n\r\n![](refCount.png)\r\n\r\n## Example\r\n\r\nIn the following example there are two intervals turned into connectable observables\r\nby using the *publish* operator. The first one uses the *refCount* operator, the\r\nsecond one does not use it. You will notice that a connectable observable does nothing\r\nuntil you call its connect function.\r\n\r\n```ts\r\nimport { interval, tap, publish, refCount } from 'rxjs';\r\n\r\n// Turn the interval observable into a ConnectableObservable (hot)\r\nconst refCountInterval = interval(400).pipe(\r\n  tap(num => console.log(`refCount ${ num }`)),\r\n  publish(),\r\n  refCount()\r\n);\r\n\r\nconst publishedInterval = interval(400).pipe(\r\n  tap(num => console.log(`publish ${ num }`)),\r\n  publish()\r\n);\r\n\r\nrefCountInterval.subscribe();\r\nrefCountInterval.subscribe();\r\n// 'refCount 0' -----> 'refCount 1' -----> etc\r\n// All subscriptions will receive the same value and the tap (and\r\n// every other operator) before the `publish` operator will be executed\r\n// only once per event independently of the number of subscriptions.\r\n\r\npublishedInterval.subscribe();\r\n// Nothing happens until you call .connect() on the observable.\r\n```\r\n","tags":[{"kind":25,"tagName":"return","text":"A function that returns an Observable that automates the connection\r\nto ConnectableObservable."},{"kind":25,"tagName":"see","text":"{@link ConnectableObservable}"},{"kind":25,"tagName":"see","text":"{@link share}"},{"kind":25,"tagName":"see","text":"{@link publish}"},{"kind":25,"tagName":"deprecated","text":"Replaced with the {@link share} operator. How `share` is used\r\nwill depend on the connectable observable you created just prior to the\r\n`refCount` operator.\r\nDetails: https://rxjs.dev/deprecations/multicasting"}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[],"functionName":"refCount","modulePath":"..\\src\\internal\\operators\\refCount.ts"}}},"usabilityResult":{"index":1}},"..\\src\\internal\\operators\\sample.ts":{"moduleComponents":{"sample":{"kind":13,"usabilityResult":{"wordCount":123,"index":1},"sources":{"name":"sample","statements":["return operate((source, subscriber) => {\r\nlet hasValue = false;\r\nlet lastValue: T | null = null;\r\nsource.subscribe(\r\n  createOperatorSubscriber(subscriber, (value) => {\r\n    hasValue = true;\r\n    lastValue = value;\r\n  })\r\n);\r\ninnerFrom(notifier).subscribe(\r\n  createOperatorSubscriber(\r\n    subscriber,\r\n    () => {\r\n      if (hasValue) {\r\n        hasValue = false;\r\n        const value = lastValue!;\r\n        lastValue = null;\r\n        subscriber.next(value);\r\n      }\r\n    },\r\n    noop\r\n  )\r\n);\r\n});"],"parameters":[{"name":"notifier","type":"ObservableInput<any>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"MonoTypeOperatorFunction<T>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nEmits the most recently emitted value from the source Observable whenever\r\nanother Observable, the `notifier`, emits.\r\n\r\n<span class=\"informal\">It's like {@link sampleTime}, but samples whenever\r\nthe `notifier` `ObservableInput` emits something.</span>\r\n\r\n![](sample.png)\r\n\r\nWhenever the `notifier` `ObservableInput` emits a value, `sample`\r\nlooks at the source Observable and emits whichever value it has most recently\r\nemitted since the previous sampling, unless the source has not emitted\r\nanything since the previous sampling. The `notifier` is subscribed to as soon\r\nas the output Observable is subscribed.\r\n\r\n## Example\r\n\r\nOn every click, sample the most recent `seconds` timer\r\n\r\n```ts\r\nimport { fromEvent, interval, sample } from 'rxjs';\r\n\r\nconst seconds = interval(1000);\r\nconst clicks = fromEvent(document, 'click');\r\nconst result = seconds.pipe(sample(clicks));\r\n\r\nresult.subscribe(x => console.log(x));\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link audit}"},{"kind":25,"tagName":"see","text":"{@link debounce}"},{"kind":25,"tagName":"see","text":"{@link sampleTime}"},{"kind":25,"tagName":"see","text":"{@link throttle}"},{"kind":25,"tagName":"param","text":"notifier The `ObservableInput` to use for sampling the\r\nsource Observable."},{"kind":25,"tagName":"return","text":"A function that returns an Observable that emits the results of\r\nsampling the values emitted by the source Observable whenever the notifier\r\nObservable emits value or completes."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[],"functionName":"sample","modulePath":"..\\src\\internal\\operators\\sample.ts"}}},"usabilityResult":{"index":1}},"..\\src\\internal\\operators\\sampleTime.ts":{"moduleComponents":{"sampleTime":{"kind":13,"usabilityResult":{"wordCount":127,"index":1},"sources":{"name":"sampleTime","statements":["return sample(interval(period, scheduler));"],"parameters":[{"name":"period","type":"number","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"scheduler","initializer":"asyncScheduler","type":"SchedulerLike","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"MonoTypeOperatorFunction<T>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nEmits the most recently emitted value from the source Observable within\r\nperiodic time intervals.\r\n\r\n<span class=\"informal\">Samples the source Observable at periodic time\r\nintervals, emitting what it samples.</span>\r\n\r\n![](sampleTime.png)\r\n\r\n`sampleTime` periodically looks at the source Observable and emits whichever\r\nvalue it has most recently emitted since the previous sampling, unless the\r\nsource has not emitted anything since the previous sampling. The sampling\r\nhappens periodically in time every `period` milliseconds (or the time unit\r\ndefined by the optional `scheduler` argument). The sampling starts as soon as\r\nthe output Observable is subscribed.\r\n\r\n## Example\r\n\r\nEvery second, emit the most recent click at most once\r\n\r\n```ts\r\nimport { fromEvent, sampleTime } from 'rxjs';\r\n\r\nconst clicks = fromEvent(document, 'click');\r\nconst result = clicks.pipe(sampleTime(1000));\r\n\r\nresult.subscribe(x => console.log(x));\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link auditTime}"},{"kind":25,"tagName":"see","text":"{@link debounceTime}"},{"kind":25,"tagName":"see","text":"{@link delay}"},{"kind":25,"tagName":"see","text":"{@link sample}"},{"kind":25,"tagName":"see","text":"{@link throttleTime}"},{"kind":25,"tagName":"param","text":"{number} period The sampling period expressed in milliseconds or the\r\ntime unit determined internally by the optional `scheduler`."},{"kind":25,"tagName":"param","text":"{SchedulerLike} [scheduler=async] The {@link SchedulerLike} to use for\r\nmanaging the timers that handle the sampling."},{"kind":25,"tagName":"return","text":"A function that returns an Observable that emits the results of\r\nsampling the values emitted by the source Observable at the specified time\r\ninterval."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[],"functionName":"sampleTime","modulePath":"..\\src\\internal\\operators\\sampleTime.ts"}}},"usabilityResult":{"index":1}},"..\\src\\internal\\operators\\scan.ts":{"moduleComponents":{"scan":{"kind":13,"usabilityResult":{"wordCount":344,"index":1},"sources":{"name":"scan","statements":["return operate(scanInternals(accumulator, seed as S, arguments.length >= 2, true));"],"parameters":[{"name":"accumulator","type":"(acc: V | A | S, value: V, index: number) => A","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"seed","type":"S","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<V, V | A>","typeParameters":[{"name":"V","kind":39,"isConst":false,"variance":0},{"name":"A","kind":39,"isConst":false,"variance":0},{"name":"S","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nUseful for encapsulating and managing state. Applies an accumulator (or \"reducer function\")\r\nto each value from the source after an initial state is established -- either via\r\na `seed` value (second argument), or from the first value from the source.\r\n\r\n<span class=\"informal\">It's like {@link reduce}, but emits the current\r\naccumulation state after each update</span>\r\n\r\n![](scan.png)\r\n\r\nThis operator maintains an internal state and emits it after processing each value as follows:\r\n\r\n1. First value arrives\r\n  - If a `seed` value was supplied (as the second argument to `scan`), let `state = seed` and `value = firstValue`.\r\n  - If NO `seed` value was supplied (no second argument), let `state = firstValue` and go to 3.\r\n2. Let `state = accumulator(state, value)`.\r\n  - If an error is thrown by `accumulator`, notify the consumer of an error. The process ends.\r\n3. Emit `state`.\r\n4. Next value arrives, let `value = nextValue`, go to 2.\r\n\r\n## Examples\r\n\r\nAn average of previous numbers. This example shows how\r\nnot providing a `seed` can prime the stream with the\r\nfirst value from the source.\r\n\r\n```ts\r\nimport { of, scan, map } from 'rxjs';\r\n\r\nconst numbers$ = of(1, 2, 3);\r\n\r\nnumbers$\r\n  .pipe(\r\n    // Get the sum of the numbers coming in.\r\n    scan((total, n) => total + n),\r\n    // Get the average by dividing the sum by the total number\r\n    // received so far (which is 1 more than the zero-based index).\r\n    map((sum, index) => sum / (index + 1))\r\n  )\r\n  .subscribe(console.log);\r\n```\r\n\r\nThe Fibonacci sequence. This example shows how you can use\r\na seed to prime accumulation process. Also... you know... Fibonacci.\r\nSo important to like, computers and stuff that its whiteboarded\r\nin job interviews. Now you can show them the Rx version! (Please don't, haha)\r\n\r\n```ts\r\nimport { interval, scan, map, startWith } from 'rxjs';\r\n\r\nconst firstTwoFibs = [0, 1];\r\n// An endless stream of Fibonacci numbers.\r\nconst fibonacci$ = interval(1000).pipe(\r\n  // Scan to get the fibonacci numbers (after 0, 1)\r\n  scan(([a, b]) => [b, a + b], firstTwoFibs),\r\n  // Get the second number in the tuple, it's the one you calculated\r\n  map(([, n]) => n),\r\n  // Start with our first two digits :)\r\n  startWith(...firstTwoFibs)\r\n);\r\n\r\nfibonacci$.subscribe(console.log);\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link expand}"},{"kind":25,"tagName":"see","text":"{@link mergeScan}"},{"kind":25,"tagName":"see","text":"{@link reduce}"},{"kind":25,"tagName":"see","text":"{@link switchScan}"},{"kind":25,"tagName":"param","text":"accumulator A \"reducer function\". This will be called for each value after an initial state is\r\nacquired."},{"kind":25,"tagName":"param","text":"seed The initial state. If this is not provided, the first value from the source will\r\nbe used as the initial state, and emitted without going through the accumulator. All subsequent values\r\nwill be processed by the accumulator function. If this is provided, all values will go through\r\nthe accumulator function."},{"kind":25,"tagName":"return","text":"A function that returns an Observable of the accumulated values."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"V","kind":39,"isConst":false,"variance":0},{"name":"A","kind":39,"isConst":false,"default":"V","variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"accumulator","type":"(acc: A | V, value: V, index: number) => A","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<V, V | A>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"scan","modulePath":"..\\src\\internal\\operators\\scan.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"V","kind":39,"isConst":false,"variance":0},{"name":"A","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"accumulator","type":"(acc: A, value: V, index: number) => A","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"seed","type":"A","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<V, A>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"scan","modulePath":"..\\src\\internal\\operators\\scan.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"V","kind":39,"isConst":false,"variance":0},{"name":"A","kind":39,"isConst":false,"variance":0},{"name":"S","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"accumulator","type":"(acc: A | S, value: V, index: number) => A","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"seed","type":"S","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<V, A>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"scan","modulePath":"..\\src\\internal\\operators\\scan.ts"}]}}},"usabilityResult":{"index":1}},"..\\src\\internal\\operators\\sequenceEqual.ts":{"moduleComponents":{"sequenceEqual":{"kind":13,"usabilityResult":{"wordCount":228,"index":1},"sources":{"name":"sequenceEqual","statements":["return operate((source, subscriber) => {\r\n    // The state for the source observable\r\n    const aState = createState<T>();\r\n    // The state for the compareTo observable;\r\n    const bState = createState<T>();\r\n\r\n    /** A utility to emit and complete */\r\n    const emit = (isEqual: boolean) => {\r\n      subscriber.next(isEqual);\r\n      subscriber.complete();\r\n    };\r\n\r\n    /**\r\n     * Creates a subscriber that subscribes to one of the sources, and compares its collected\r\n     * state -- `selfState` -- to the other source's collected state -- `otherState`. This\r\n     * is used for both streams.\r\n     */\r\n    const createSubscriber = (selfState: SequenceState<T>, otherState: SequenceState<T>) => {\r\n      const sequenceEqualSubscriber = createOperatorSubscriber(\r\n        subscriber,\r\n        (a: T) => {\r\n          const { buffer, complete } = otherState;\r\n          if (buffer.length === 0) {\r\n            // If there's no values in the other buffer\r\n            // and the other stream is complete, we know\r\n            // this isn't a match, because we got one more value.\r\n            // Otherwise, we push onto our buffer, so when the other\r\n            // stream emits, it can pull this value off our buffer and check it\r\n            // at the appropriate time.\r\n            complete ? emit(false) : selfState.buffer.push(a);\r\n          } else {\r\n            // If the other stream *does* have values in its buffer,\r\n            // pull the oldest one off so we can compare it to what we\r\n            // just got. If it wasn't a match, emit `false` and complete.\r\n            !comparator(a, buffer.shift()!) && emit(false);\r\n          }\r\n        },\r\n        () => {\r\n          // Or observable completed\r\n          selfState.complete = true;\r\n          const { complete, buffer } = otherState;\r\n          // If the other observable is also complete, and there's\r\n          // still stuff left in their buffer, it doesn't match, if their\r\n          // buffer is empty, then it does match. This is because we can't\r\n          // possibly get more values here anymore.\r\n          complete && emit(buffer.length === 0);\r\n          // Be sure to clean up our stream as soon as possible if we can.\r\n          sequenceEqualSubscriber?.unsubscribe();\r\n        }\r\n      );\r\n\r\n      return sequenceEqualSubscriber;\r\n    };\r\n\r\n    // Subscribe to each source.\r\n    source.subscribe(createSubscriber(aState, bState));\r\n    innerFrom(compareTo).subscribe(createSubscriber(bState, aState));\r\n  });"],"parameters":[{"name":"compareTo","type":"ObservableInput<T>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"comparator","initializer":"(a, b) => a === b","type":"(a: T, b: T) => boolean","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, boolean>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nCompares all values of two observables in sequence using an optional comparator function\r\nand returns an observable of a single boolean value representing whether or not the two sequences\r\nare equal.\r\n\r\n<span class=\"informal\">Checks to see of all values emitted by both observables are equal, in order.</span>\r\n\r\n![](sequenceEqual.png)\r\n\r\n`sequenceEqual` subscribes to source observable and `compareTo` `ObservableInput` (that internally\r\ngets converted to an observable) and buffers incoming values from each observable. Whenever either\r\nobservable emits a value, the value is buffered and the buffers are shifted and compared from the bottom\r\nup; If any value pair doesn't match, the returned observable will emit `false` and complete. If one of the\r\nobservables completes, the operator will wait for the other observable to complete; If the other\r\nobservable emits before completing, the returned observable will emit `false` and complete. If one observable never\r\ncompletes or emits after the other completes, the returned observable will never complete.\r\n\r\n## Example\r\n\r\nFigure out if the Konami code matches\r\n\r\n```ts\r\nimport { from, fromEvent, map, bufferCount, mergeMap, sequenceEqual } from 'rxjs';\r\n\r\nconst codes = from([\r\n  'ArrowUp',\r\n  'ArrowUp',\r\n  'ArrowDown',\r\n  'ArrowDown',\r\n  'ArrowLeft',\r\n  'ArrowRight',\r\n  'ArrowLeft',\r\n  'ArrowRight',\r\n  'KeyB',\r\n  'KeyA',\r\n  'Enter', // no start key, clearly.\r\n]);\r\n\r\nconst keys = fromEvent<KeyboardEvent>(document, 'keyup').pipe(map(e => e.code));\r\nconst matches = keys.pipe(\r\n  bufferCount(11, 1),\r\n  mergeMap(last11 => from(last11).pipe(sequenceEqual(codes)))\r\n);\r\nmatches.subscribe(matched => console.log('Successful cheat at Contra? ', matched));\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link combineLatest}"},{"kind":25,"tagName":"see","text":"{@link zip}"},{"kind":25,"tagName":"see","text":"{@link withLatestFrom}"},{"kind":25,"tagName":"param","text":"compareTo The `ObservableInput` sequence to compare the source sequence to."},{"kind":25,"tagName":"param","text":"comparator An optional function to compare each value pair."},{"kind":25,"tagName":"return","text":"A function that returns an Observable that emits a single boolean\r\nvalue representing whether or not the values emitted by the source\r\nObservable and provided `ObservableInput` were equal in sequence."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[],"functionName":"sequenceEqual","modulePath":"..\\src\\internal\\operators\\sequenceEqual.ts"}}},"usabilityResult":{"index":1}},"..\\src\\internal\\operators\\share.ts":{"moduleComponents":{"share":{"kind":13,"usabilityResult":{"wordCount":396,"index":1},"sources":{"name":"share","statements":[{"isExported":false,"isDefaultExport":false,"hasDeclareKeyword":false,"docs":[],"kind":41,"declarationKind":"const","declarations":[{"name":"{ connector = () => new Subject<T>(), resetOnError = true, resetOnComplete = true, resetOnRefCountZero = true }","initializer":"options","hasExclamationToken":false,"kind":40}]},"return (wrapperSource) => {\r\n    let connection: SafeSubscriber<T> | undefined;\r\n    let resetConnection: Subscription | undefined;\r\n    let subject: SubjectLike<T> | undefined;\r\n    let refCount = 0;\r\n    let hasCompleted = false;\r\n    let hasErrored = false;\r\n\r\n    const cancelReset = () => {\r\n      resetConnection?.unsubscribe();\r\n      resetConnection = undefined;\r\n    };\r\n    // Used to reset the internal state to a \"cold\"\r\n    // state, as though it had never been subscribed to.\r\n    const reset = () => {\r\n      cancelReset();\r\n      connection = subject = undefined;\r\n      hasCompleted = hasErrored = false;\r\n    };\r\n    const resetAndUnsubscribe = () => {\r\n      // We need to capture the connection before\r\n      // we reset (if we need to reset).\r\n      const conn = connection;\r\n      reset();\r\n      conn?.unsubscribe();\r\n    };\r\n\r\n    return operate<T, T>((source, subscriber) => {\r\n      refCount++;\r\n      if (!hasErrored && !hasCompleted) {\r\n        cancelReset();\r\n      }\r\n\r\n      // Create the subject if we don't have one yet. Grab a local reference to\r\n      // it as well, which avoids non-null assertions when using it and, if we\r\n      // connect to it now, then error/complete need a reference after it was\r\n      // reset.\r\n      const dest = (subject = subject ?? connector());\r\n\r\n      // Add the finalization directly to the subscriber - instead of returning it -\r\n      // so that the handling of the subscriber's unsubscription will be wired\r\n      // up _before_ the subscription to the source occurs. This is done so that\r\n      // the assignment to the source connection's `closed` property will be seen\r\n      // by synchronous firehose sources.\r\n      subscriber.add(() => {\r\n        refCount--;\r\n\r\n        // If we're resetting on refCount === 0, and it's 0, we only want to do\r\n        // that on \"unsubscribe\", really. Resetting on error or completion is a different\r\n        // configuration.\r\n        if (refCount === 0 && !hasErrored && !hasCompleted) {\r\n          resetConnection = handleReset(resetAndUnsubscribe, resetOnRefCountZero);\r\n        }\r\n      });\r\n\r\n      // The following line adds the subscription to the subscriber passed.\r\n      // Basically, `subscriber === dest.subscribe(subscriber)` is `true`.\r\n      dest.subscribe(subscriber);\r\n\r\n      if (\r\n        !connection &&\r\n        // Check this shareReplay is still activate - it can be reset to 0\r\n        // and be \"unsubscribed\" _before_ it actually subscribes.\r\n        // If we were to subscribe then, it'd leak and get stuck.\r\n        refCount > 0\r\n      ) {\r\n        // We need to create a subscriber here - rather than pass an observer and\r\n        // assign the returned subscription to connection - because it's possible\r\n        // for reentrant subscriptions to the shared observable to occur and in\r\n        // those situations we want connection to be already-assigned so that we\r\n        // don't create another connection to the source.\r\n        connection = new SafeSubscriber({\r\n          next: (value) => dest.next(value),\r\n          error: (err) => {\r\n            hasErrored = true;\r\n            cancelReset();\r\n            resetConnection = handleReset(reset, resetOnError, err);\r\n            dest.error(err);\r\n          },\r\n          complete: () => {\r\n            hasCompleted = true;\r\n            cancelReset();\r\n            resetConnection = handleReset(reset, resetOnComplete);\r\n            dest.complete();\r\n          },\r\n        });\r\n        innerFrom(source).subscribe(connection);\r\n      }\r\n    })(wrapperSource);\r\n  };"],"parameters":[{"name":"options","initializer":"{}","type":"ShareConfig<T>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"MonoTypeOperatorFunction<T>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nReturns a new Observable that multicasts (shares) the original Observable. As long as there is at least one\r\nSubscriber this Observable will be subscribed and emitting data. When all subscribers have unsubscribed it will\r\nunsubscribe from the source Observable. Because the Observable is multicasting it makes the stream `hot`.\r\nThis is an alias for `multicast(() => new Subject()), refCount()`.\r\n\r\nThe subscription to the underlying source Observable can be reset (unsubscribe and resubscribe for new subscribers),\r\nif the subscriber count to the shared observable drops to 0, or if the source Observable errors or completes. It is\r\npossible to use notifier factories for the resets to allow for behaviors like conditional or delayed resets. Please\r\nnote that resetting on error or complete of the source Observable does not behave like a transparent retry or restart\r\nof the source because the error or complete will be forwarded to all subscribers and their subscription will be\r\nclosed. Only new subscribers after a reset on error or complete happened will cause a fresh subscription to the\r\nsource. To achieve transparent retries or restarts pipe the source through appropriate operators before sharing.\r\n\r\n![](share.png)\r\n\r\n## Example\r\n\r\nGenerate new multicast Observable from the `source` Observable value\r\n\r\n```ts\r\nimport { interval, tap, map, take, share } from 'rxjs';\r\n\r\nconst source = interval(1000).pipe(\r\n  tap(x => console.log('Processing: ', x)),\r\n  map(x => x * x),\r\n  take(6),\r\n  share()\r\n);\r\n\r\nsource.subscribe(x => console.log('subscription 1: ', x));\r\nsource.subscribe(x => console.log('subscription 2: ', x));\r\n\r\n// Logs:\r\n// Processing: 0\r\n// subscription 1: 0\r\n// subscription 2: 0\r\n// Processing: 1\r\n// subscription 1: 1\r\n// subscription 2: 1\r\n// Processing: 2\r\n// subscription 1: 4\r\n// subscription 2: 4\r\n// Processing: 3\r\n// subscription 1: 9\r\n// subscription 2: 9\r\n// Processing: 4\r\n// subscription 1: 16\r\n// subscription 2: 16\r\n// Processing: 5\r\n// subscription 1: 25\r\n// subscription 2: 25\r\n```\r\n\r\n## Example with notifier factory: Delayed reset\r\n\r\n```ts\r\nimport { interval, take, share, timer } from 'rxjs';\r\n\r\nconst source = interval(1000).pipe(\r\n  take(3),\r\n  share({\r\n    resetOnRefCountZero: () => timer(1000)\r\n  })\r\n);\r\n\r\nconst subscriptionOne = source.subscribe(x => console.log('subscription 1: ', x));\r\nsetTimeout(() => subscriptionOne.unsubscribe(), 1300);\r\n\r\nsetTimeout(() => source.subscribe(x => console.log('subscription 2: ', x)), 1700);\r\n\r\nsetTimeout(() => source.subscribe(x => console.log('subscription 3: ', x)), 5000);\r\n\r\n// Logs:\r\n// subscription 1:  0\r\n// (subscription 1 unsubscribes here)\r\n// (subscription 2 subscribes here ~400ms later, source was not reset)\r\n// subscription 2:  1\r\n// subscription 2:  2\r\n// (subscription 2 unsubscribes here)\r\n// (subscription 3 subscribes here ~2000ms later, source did reset before)\r\n// subscription 3:  0\r\n// subscription 3:  1\r\n// subscription 3:  2\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link shareReplay}"},{"kind":25,"tagName":"return","text":"A function that returns an Observable that mirrors the source."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[],"returnType":"MonoTypeOperatorFunction<T>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"share","modulePath":"..\\src\\internal\\operators\\share.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"options","type":"ShareConfig<T>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"MonoTypeOperatorFunction<T>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"share","modulePath":"..\\src\\internal\\operators\\share.ts"}]}}},"usabilityResult":{"index":1}},"..\\src\\internal\\operators\\shareReplay.ts":{"moduleComponents":{"shareReplay":{"kind":13,"usabilityResult":{"wordCount":600,"index":1},"sources":{"name":"shareReplay","statements":[{"isExported":false,"isDefaultExport":false,"hasDeclareKeyword":false,"docs":[],"kind":41,"declarationKind":"let","declarations":[{"name":"bufferSize","type":"number","hasExclamationToken":false,"kind":40}]},{"isExported":false,"isDefaultExport":false,"hasDeclareKeyword":false,"docs":[],"kind":41,"declarationKind":"let","declarations":[{"name":"refCount","initializer":"false","hasExclamationToken":false,"kind":40}]},"if (configOrBufferSize && typeof configOrBufferSize === 'object') {\r\n({ bufferSize = Infinity, windowTime = Infinity, refCount = false, scheduler } = configOrBufferSize);\r\n} else {\r\nbufferSize = (configOrBufferSize ?? Infinity) as number;\r\n}","return share<T>({\r\nconnector: () => new ReplaySubject(bufferSize, windowTime, scheduler),\r\nresetOnError: true,\r\nresetOnComplete: false,\r\nresetOnRefCountZero: refCount,\r\n});"],"parameters":[{"name":"configOrBufferSize","type":"ShareReplayConfig | number","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"windowTime","type":"number","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"scheduler","type":"SchedulerLike","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"MonoTypeOperatorFunction<T>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nShare source and replay specified number of emissions on subscription.\r\n\r\nThis operator is a specialization of `replay` that connects to a source observable\r\nand multicasts through a `ReplaySubject` constructed with the specified arguments.\r\nA successfully completed source will stay cached in the `shareReplay`ed observable forever,\r\nbut an errored source can be retried.\r\n\r\n## Why use `shareReplay`?\r\n\r\nYou generally want to use `shareReplay` when you have side-effects or taxing computations\r\nthat you do not wish to be executed amongst multiple subscribers.\r\nIt may also be valuable in situations where you know you will have late subscribers to\r\na stream that need access to previously emitted values.\r\nThis ability to replay values on subscription is what differentiates {@link share} and `shareReplay`.\r\n\r\n## Reference counting\r\n\r\nBy default `shareReplay` will use `refCount` of false, meaning that it will _not_ unsubscribe the\r\nsource when the reference counter drops to zero, i.e. the inner `ReplaySubject` will _not_ be unsubscribed\r\n(and potentially run for ever).\r\nThis is the default as it is expected that `shareReplay` is often used to keep around expensive to setup\r\nobservables which we want to keep running instead of having to do the expensive setup again.\r\n\r\nAs of RXJS version 6.4.0 a new overload signature was added to allow for manual control over what\r\nhappens when the operators internal reference counter drops to zero.\r\nIf `refCount` is true, the source will be unsubscribed from once the reference count drops to zero, i.e.\r\nthe inner `ReplaySubject` will be unsubscribed. All new subscribers will receive value emissions from a\r\nnew `ReplaySubject` which in turn will cause a new subscription to the source observable.\r\n\r\n## Examples\r\n\r\nExample with a third subscriber coming late to the party\r\n\r\n```ts\r\nimport { interval, take, shareReplay } from 'rxjs';\r\n\r\nconst shared$ = interval(2000).pipe(\r\n  take(6),\r\n  shareReplay(3)\r\n);\r\n\r\nshared$.subscribe(x => console.log('sub A: ', x));\r\nshared$.subscribe(y => console.log('sub B: ', y));\r\n\r\nsetTimeout(() => {\r\n  shared$.subscribe(y => console.log('sub C: ', y));\r\n}, 11000);\r\n\r\n// Logs:\r\n// (after ~2000 ms)\r\n// sub A: 0\r\n// sub B: 0\r\n// (after ~4000 ms)\r\n// sub A: 1\r\n// sub B: 1\r\n// (after ~6000 ms)\r\n// sub A: 2\r\n// sub B: 2\r\n// (after ~8000 ms)\r\n// sub A: 3\r\n// sub B: 3\r\n// (after ~10000 ms)\r\n// sub A: 4\r\n// sub B: 4\r\n// (after ~11000 ms, sub C gets the last 3 values)\r\n// sub C: 2\r\n// sub C: 3\r\n// sub C: 4\r\n// (after ~12000 ms)\r\n// sub A: 5\r\n// sub B: 5\r\n// sub C: 5\r\n```\r\n\r\nExample for `refCount` usage\r\n\r\n```ts\r\nimport { Observable, tap, interval, shareReplay, take } from 'rxjs';\r\n\r\nconst log = <T>(name: string, source: Observable<T>) => source.pipe(\r\n  tap({\r\n    subscribe: () => console.log(`${ name }: subscribed`),\r\n    next: value => console.log(`${ name }: ${ value }`),\r\n    complete: () => console.log(`${ name }: completed`),\r\n    finalize: () => console.log(`${ name }: unsubscribed`)\r\n  })\r\n);\r\n\r\nconst obs$ = log('source', interval(1000));\r\n\r\nconst shared$ = log('shared', obs$.pipe(\r\n  shareReplay({ bufferSize: 1, refCount: true }),\r\n  take(2)\r\n));\r\n\r\nshared$.subscribe(x => console.log('sub A: ', x));\r\nshared$.subscribe(y => console.log('sub B: ', y));\r\n\r\n// PRINTS:\r\n// shared: subscribed <-- reference count = 1\r\n// source: subscribed\r\n// shared: subscribed <-- reference count = 2\r\n// source: 0\r\n// shared: 0\r\n// sub A: 0\r\n// shared: 0\r\n// sub B: 0\r\n// source: 1\r\n// shared: 1\r\n// sub A: 1\r\n// shared: completed <-- take(2) completes the subscription for sub A\r\n// shared: unsubscribed <-- reference count = 1\r\n// shared: 1\r\n// sub B: 1\r\n// shared: completed <-- take(2) completes the subscription for sub B\r\n// shared: unsubscribed <-- reference count = 0\r\n// source: unsubscribed <-- replaySubject unsubscribes from source observable because the reference count dropped to 0 and refCount is true\r\n\r\n// In case of refCount being false, the unsubscribe is never called on the source and the source would keep on emitting, even if no subscribers\r\n// are listening.\r\n// source: 2\r\n// source: 3\r\n// source: 4\r\n// ...\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link publish}"},{"kind":25,"tagName":"see","text":"{@link share}"},{"kind":25,"tagName":"see","text":"{@link publishReplay}"},{"kind":25,"tagName":"param","text":"configOrBufferSize Maximum element count of the replay buffer or {@link ShareReplayConfig configuration}\r\nobject."},{"kind":25,"tagName":"param","text":"windowTime Maximum time length of the replay buffer in milliseconds."},{"kind":25,"tagName":"param","text":"scheduler Scheduler where connected observers within the selector function\r\nwill be invoked on."},{"kind":25,"tagName":"return","text":"A function that returns an Observable sequence that contains the\r\nelements of a sequence produced by multicasting the source sequence within a\r\nselector function."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"config","type":"ShareReplayConfig","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"MonoTypeOperatorFunction<T>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"shareReplay","modulePath":"..\\src\\internal\\operators\\shareReplay.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"bufferSize","type":"number","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"windowTime","type":"number","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"scheduler","type":"SchedulerLike","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"MonoTypeOperatorFunction<T>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"shareReplay","modulePath":"..\\src\\internal\\operators\\shareReplay.ts"}]}}},"usabilityResult":{"index":1}},"..\\src\\internal\\operators\\single.ts":{"moduleComponents":{"single":{"kind":13,"usabilityResult":{"wordCount":197,"index":1},"sources":{"name":"single","statements":["return operate((source, subscriber) => {\r\nlet hasValue = false;\r\nlet singleValue: T;\r\nlet seenValue = false;\r\nlet index = 0;\r\nsource.subscribe(\r\n  createOperatorSubscriber(\r\n    subscriber,\r\n    (value) => {\r\n      seenValue = true;\r\n      if (!predicate || predicate(value, index++, source)) {\r\n        hasValue && subscriber.error(new SequenceError('Too many matching values'));\r\n        hasValue = true;\r\n        singleValue = value;\r\n      }\r\n    },\r\n    () => {\r\n      if (hasValue) {\r\n        subscriber.next(singleValue);\r\n        subscriber.complete();\r\n      } else {\r\n        subscriber.error(seenValue ? new NotFoundError('No matching values') : new EmptyError());\r\n      }\r\n    }\r\n  )\r\n);\r\n});"],"parameters":[{"name":"predicate","type":"(value: T, index: number, source: Observable<T>) => boolean","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"MonoTypeOperatorFunction<T>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nReturns an observable that asserts that only one value is\r\nemitted from the observable that matches the predicate. If no\r\npredicate is provided, then it will assert that the observable\r\nonly emits one value.\r\n\r\nIn the event that the observable is empty, it will throw an\r\n{@link EmptyError}.\r\n\r\nIn the event that two values are found that match the predicate,\r\nor when there are two values emitted and no predicate, it will\r\nthrow a {@link SequenceError}\r\n\r\nIn the event that no values match the predicate, if one is provided,\r\nit will throw a {@link NotFoundError}\r\n\r\n## Example\r\n\r\nExpect only `name` beginning with `'B'`\r\n\r\n```ts\r\nimport { of, single } from 'rxjs';\r\n\r\nconst source1 = of(\r\n { name: 'Ben' },\r\n { name: 'Tracy' },\r\n { name: 'Laney' },\r\n { name: 'Lily' }\r\n);\r\n\r\nsource1\r\n  .pipe(single(x => x.name.startsWith('B')))\r\n  .subscribe(x => console.log(x));\r\n// Emits 'Ben'\r\n\r\n\r\nconst source2 = of(\r\n { name: 'Ben' },\r\n { name: 'Tracy' },\r\n { name: 'Bradley' },\r\n { name: 'Lincoln' }\r\n);\r\n\r\nsource2\r\n  .pipe(single(x => x.name.startsWith('B')))\r\n  .subscribe({ error: err => console.error(err) });\r\n// Error emitted: SequenceError('Too many values match')\r\n\r\n\r\nconst source3 = of(\r\n { name: 'Laney' },\r\n { name: 'Tracy' },\r\n { name: 'Lily' },\r\n { name: 'Lincoln' }\r\n);\r\n\r\nsource3\r\n  .pipe(single(x => x.name.startsWith('B')))\r\n  .subscribe({ error: err => console.error(err) });\r\n// Error emitted: NotFoundError('No values match')\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link first}"},{"kind":25,"tagName":"see","text":"{@link find}"},{"kind":25,"tagName":"see","text":"{@link findIndex}"},{"kind":25,"tagName":"see","text":"{@link elementAt}"},{"kind":25,"tagName":"throws","text":"{NotFoundError} Delivers an NotFoundError to the Observer's `error`\r\ncallback if the Observable completes before any `next` notification was sent."},{"kind":25,"tagName":"throws","text":"{SequenceError} Delivers a SequenceError if more than one value is emitted that matches the\r\nprovided predicate. If no predicate is provided, will deliver a SequenceError if more\r\nthan one value comes from the source"},{"kind":25,"tagName":"param","text":"{Function} predicate - A predicate function to evaluate items emitted by the source Observable."},{"kind":25,"tagName":"return","text":"A function that returns an Observable that emits the single item\r\nemitted by the source Observable that matches the predicate."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"predicate","type":"BooleanConstructor","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, TruthyTypesOf<T>>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"single","modulePath":"..\\src\\internal\\operators\\single.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"predicate","type":"(value: T, index: number, source: Observable<T>) => boolean","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"MonoTypeOperatorFunction<T>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"single","modulePath":"..\\src\\internal\\operators\\single.ts"}]}}},"usabilityResult":{"index":1}},"..\\src\\internal\\operators\\skip.ts":{"moduleComponents":{"skip":{"kind":13,"usabilityResult":{"wordCount":97,"index":1},"sources":{"name":"skip","statements":["return filter((_, index) => count <= index);"],"parameters":[{"name":"count","type":"number","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"MonoTypeOperatorFunction<T>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nReturns an Observable that skips the first `count` items emitted by the source Observable.\r\n\r\n![](skip.png)\r\n\r\nSkips the values until the sent notifications are equal or less than provided skip count. It raises\r\nan error if skip count is equal or more than the actual number of emits and source raises an error.\r\n\r\n## Example\r\n\r\nSkip the values before the emission\r\n\r\n```ts\r\nimport { interval, skip } from 'rxjs';\r\n\r\n// emit every half second\r\nconst source = interval(500);\r\n// skip the first 10 emitted values\r\nconst result = source.pipe(skip(10));\r\n\r\nresult.subscribe(value => console.log(value));\r\n// output: 10...11...12...13...\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link last}"},{"kind":25,"tagName":"see","text":"{@link skipWhile}"},{"kind":25,"tagName":"see","text":"{@link skipUntil}"},{"kind":25,"tagName":"see","text":"{@link skipLast}"},{"kind":25,"tagName":"param","text":"{Number} count - The number of times, items emitted by source Observable should be skipped."},{"kind":25,"tagName":"return","text":"A function that returns an Observable that skips the first `count`\r\nvalues emitted by the source Observable."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[],"functionName":"skip","modulePath":"..\\src\\internal\\operators\\skip.ts"}}},"usabilityResult":{"index":1}},"..\\src\\internal\\operators\\skipLast.ts":{"moduleComponents":{"skipLast":{"kind":13,"usabilityResult":{"wordCount":177,"index":1},"sources":{"name":"skipLast","statements":["return skipCount <= 0\r\n    ? // For skipCounts less than or equal to zero, we are just mirroring the source.\r\n      identity\r\n    : operate((source, subscriber) => {\r\n        // A ring buffer to hold the values while we wait to see\r\n        // if we can emit it or it's part of the \"skipped\" last values.\r\n        // Note that it is the _same size_ as the skip count.\r\n        let ring: T[] = new Array(skipCount);\r\n        // The number of values seen so far. This is used to get\r\n        // the index of the current value when it arrives.\r\n        let seen = 0;\r\n        source.subscribe(\r\n          createOperatorSubscriber(subscriber, (value) => {\r\n            // Get the index of the value we have right now\r\n            // relative to all other values we've seen, then\r\n            // increment `seen`. This ensures we've moved to\r\n            // the next slot in our ring buffer.\r\n            const valueIndex = seen++;\r\n            if (valueIndex < skipCount) {\r\n              // If we haven't seen enough values to fill our buffer yet,\r\n              // Then we aren't to a number of seen values where we can\r\n              // emit anything, so let's just start by filling the ring buffer.\r\n              ring[valueIndex] = value;\r\n            } else {\r\n              // We are traversing over the ring array in such\r\n              // a way that when we get to the end, we loop back\r\n              // and go to the start.\r\n              const index = valueIndex % skipCount;\r\n              // Pull the oldest value out so we can emit it,\r\n              // and stuff the new value in it's place.\r\n              const oldValue = ring[index];\r\n              ring[index] = value;\r\n              // Emit the old value. It is important that this happens\r\n              // after we swap the value in the buffer, if it happens\r\n              // before we swap the value in the buffer, then a synchronous\r\n              // source can get the buffer out of whack.\r\n              subscriber.next(oldValue);\r\n            }\r\n          })\r\n        );\r\n\r\n        return () => {\r\n          // Release our values in memory\r\n          ring = null!;\r\n        };\r\n      });"],"parameters":[{"name":"skipCount","type":"number","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"MonoTypeOperatorFunction<T>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nSkip a specified number of values before the completion of an observable.\r\n\r\n![](skipLast.png)\r\n\r\nReturns an observable that will emit values as soon as it can, given a number of\r\nskipped values. For example, if you `skipLast(3)` on a source, when the source\r\nemits its fourth value, the first value the source emitted will finally be emitted\r\nfrom the returned observable, as it is no longer part of what needs to be skipped.\r\n\r\nAll values emitted by the result of `skipLast(N)` will be delayed by `N` emissions,\r\nas each value is held in a buffer until enough values have been emitted that that\r\nthe buffered value may finally be sent to the consumer.\r\n\r\nAfter subscribing, unsubscribing will not result in the emission of the buffered\r\nskipped values.\r\n\r\n## Example\r\n\r\nSkip the last 2 values of an observable with many values\r\n\r\n```ts\r\nimport { of, skipLast } from 'rxjs';\r\n\r\nconst numbers = of(1, 2, 3, 4, 5);\r\nconst skipLastTwo = numbers.pipe(skipLast(2));\r\nskipLastTwo.subscribe(x => console.log(x));\r\n\r\n// Results in:\r\n// 1 2 3\r\n// (4 and 5 are skipped)\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link skip}"},{"kind":25,"tagName":"see","text":"{@link skipUntil}"},{"kind":25,"tagName":"see","text":"{@link skipWhile}"},{"kind":25,"tagName":"see","text":"{@link take}"},{"kind":25,"tagName":"param","text":"skipCount Number of elements to skip from the end of the source Observable."},{"kind":25,"tagName":"return","text":"A function that returns an Observable that skips the last `count`\r\nvalues emitted by the source Observable."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[],"functionName":"skipLast","modulePath":"..\\src\\internal\\operators\\skipLast.ts"}}},"usabilityResult":{"index":1}},"..\\src\\internal\\operators\\skipUntil.ts":{"moduleComponents":{"skipUntil":{"kind":13,"usabilityResult":{"wordCount":206,"index":1},"sources":{"name":"skipUntil","statements":["return operate((source, subscriber) => {\r\n    let taking = false;\r\n\r\n    const skipSubscriber = createOperatorSubscriber(\r\n      subscriber,\r\n      () => {\r\n        skipSubscriber?.unsubscribe();\r\n        taking = true;\r\n      },\r\n      noop\r\n    );\r\n\r\n    innerFrom(notifier).subscribe(skipSubscriber);\r\n\r\n    source.subscribe(createOperatorSubscriber(subscriber, (value) => taking && subscriber.next(value)));\r\n  });"],"parameters":[{"name":"notifier","type":"ObservableInput<any>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"MonoTypeOperatorFunction<T>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nReturns an Observable that skips items emitted by the source Observable until a second Observable emits an item.\r\n\r\nThe `skipUntil` operator causes the observable stream to skip the emission of values until the passed in observable\r\nemits the first value. This can be particularly useful in combination with user interactions, responses of HTTP\r\nrequests or waiting for specific times to pass by.\r\n\r\n![](skipUntil.png)\r\n\r\nInternally, the `skipUntil` operator subscribes to the passed in `notifier` `ObservableInput` (which gets converted\r\nto an Observable) in order to recognize the emission of its first value. When `notifier` emits next, the operator\r\nunsubscribes from it and starts emitting the values of the *source* observable until it completes or errors. It\r\nwill never let the *source* observable emit any values if the `notifier` completes or throws an error without\r\nemitting a value before.\r\n\r\n## Example\r\n\r\nIn the following example, all emitted values of the interval observable are skipped until the user clicks anywhere\r\nwithin the page\r\n\r\n```ts\r\nimport { interval, fromEvent, skipUntil } from 'rxjs';\r\n\r\nconst intervalObservable = interval(1000);\r\nconst click = fromEvent(document, 'click');\r\n\r\nconst emitAfterClick = intervalObservable.pipe(\r\n  skipUntil(click)\r\n);\r\n// clicked at 4.6s. output: 5...6...7...8........ or\r\n// clicked at 7.3s. output: 8...9...10..11.......\r\nemitAfterClick.subscribe(value => console.log(value));\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link last}"},{"kind":25,"tagName":"see","text":"{@link skip}"},{"kind":25,"tagName":"see","text":"{@link skipWhile}"},{"kind":25,"tagName":"see","text":"{@link skipLast}"},{"kind":25,"tagName":"param","text":"notifier An `ObservableInput` that has to emit an item before the source Observable elements begin to\r\nbe mirrored by the resulting Observable."},{"kind":25,"tagName":"return","text":"A function that returns an Observable that skips items from the\r\nsource Observable until the `notifier` Observable emits an item, then emits the\r\nremaining items."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[],"functionName":"skipUntil","modulePath":"..\\src\\internal\\operators\\skipUntil.ts"}}},"usabilityResult":{"index":1}},"..\\src\\internal\\operators\\skipWhile.ts":{"moduleComponents":{"skipWhile":{"kind":13,"usabilityResult":{"wordCount":162,"index":1},"sources":{"name":"skipWhile","statements":["return operate((source, subscriber) => {\r\nlet taking = false;\r\nlet index = 0;\r\nsource.subscribe(\r\n  createOperatorSubscriber(subscriber, (value) => (taking || (taking = !predicate(value, index++))) && subscriber.next(value))\r\n);\r\n});"],"parameters":[{"name":"predicate","type":"(value: T, index: number) => boolean","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"MonoTypeOperatorFunction<T>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nReturns an Observable that skips all items emitted by the source Observable as long as a specified condition holds\r\ntrue, but emits all further source items as soon as the condition becomes false.\r\n\r\n![](skipWhile.png)\r\n\r\nSkips all the notifications with a truthy predicate. It will not skip the notifications when the predicate is falsy.\r\nIt can also be skipped using index. Once the predicate is true, it will not be called again.\r\n\r\n## Example\r\n\r\nSkip some super heroes\r\n\r\n```ts\r\nimport { from, skipWhile } from 'rxjs';\r\n\r\nconst source = from(['Green Arrow', 'SuperMan', 'Flash', 'SuperGirl', 'Black Canary'])\r\n// Skip the heroes until SuperGirl\r\nconst example = source.pipe(skipWhile(hero => hero !== 'SuperGirl'));\r\n// output: SuperGirl, Black Canary\r\nexample.subscribe(femaleHero => console.log(femaleHero));\r\n```\r\n\r\nSkip values from the array until index 5\r\n\r\n```ts\r\nimport { from, skipWhile } from 'rxjs';\r\n\r\nconst source = from([1, 2, 3, 4, 5, 6, 7, 9, 10]);\r\nconst example = source.pipe(skipWhile((_, i) => i !== 5));\r\n// output: 6, 7, 9, 10\r\nexample.subscribe(value => console.log(value));\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link last}"},{"kind":25,"tagName":"see","text":"{@link skip}"},{"kind":25,"tagName":"see","text":"{@link skipUntil}"},{"kind":25,"tagName":"see","text":"{@link skipLast}"},{"kind":25,"tagName":"param","text":"{Function} predicate - A function to test each item emitted from the source Observable."},{"kind":25,"tagName":"return","text":"A function that returns an Observable that begins emitting items\r\nemitted by the source Observable when the specified predicate becomes false."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"predicate","type":"BooleanConstructor","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, Extract<T, Falsy> extends never ? never : T>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"skipWhile","modulePath":"..\\src\\internal\\operators\\skipWhile.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"predicate","type":"(value: T, index: number) => true","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, never>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"skipWhile","modulePath":"..\\src\\internal\\operators\\skipWhile.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"predicate","type":"(value: T, index: number) => boolean","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"MonoTypeOperatorFunction<T>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"skipWhile","modulePath":"..\\src\\internal\\operators\\skipWhile.ts"}]}}},"usabilityResult":{"index":1}},"..\\src\\internal\\operators\\startWith.ts":{"moduleComponents":{"startWith":{"kind":13,"usabilityResult":{"wordCount":99,"index":1},"sources":{"name":"startWith","statements":[{"isExported":false,"isDefaultExport":false,"hasDeclareKeyword":false,"docs":[],"kind":41,"declarationKind":"const","declarations":[{"name":"scheduler","initializer":"popScheduler(values)","hasExclamationToken":false,"kind":40}]},"return operate((source, subscriber) => {\r\n// Here we can't pass `undefined` as a scheduler, because if we did, the\r\n// code inside of `concat` would be confused by the `undefined`, and treat it\r\n// like an invalid observable. So we have to split it two different ways.\r\n(scheduler ? concat(values, source, scheduler) : concat(values, source)).subscribe(subscriber);\r\n});"],"parameters":[{"name":"values","type":"D[]","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":true}],"returnType":"OperatorFunction<T, T | D>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"D","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nReturns an observable that, at the moment of subscription, will synchronously emit all\r\nvalues provided to this operator, then subscribe to the source and mirror all of its emissions\r\nto subscribers.\r\n\r\nThis is a useful way to know when subscription has occurred on an existing observable.\r\n\r\n<span class=\"informal\">First emits its arguments in order, and then any\r\nemissions from the source.</span>\r\n\r\n![](startWith.png)\r\n\r\n## Examples\r\n\r\nEmit a value when a timer starts.\r\n\r\n```ts\r\nimport { timer, map, startWith } from 'rxjs';\r\n\r\ntimer(1000)\r\n  .pipe(\r\n    map(() => 'timer emit'),\r\n    startWith('timer start')\r\n  )\r\n  .subscribe(x => console.log(x));\r\n\r\n// results:\r\n// 'timer start'\r\n// 'timer emit'\r\n```\r\n","tags":[{"kind":25,"tagName":"param","text":"values Items you want the modified Observable to emit first."},{"kind":25,"tagName":"return","text":"A function that returns an Observable that synchronously emits\r\nprovided values before subscribing to the source Observable."},{"kind":25,"tagName":"see","text":"{@link endWith}"},{"kind":25,"tagName":"see","text":"{@link finalize}"},{"kind":25,"tagName":"see","text":"{@link concat}"}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"value","type":"null","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, T | null>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"startWith","modulePath":"..\\src\\internal\\operators\\startWith.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"value","type":"undefined","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, T | undefined>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"startWith","modulePath":"..\\src\\internal\\operators\\startWith.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"A","kind":39,"isConst":false,"constraint":"readonly unknown[]","default":"T[]","variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"The `scheduler` parameter will be removed in v8. Use `scheduled` and `concatAll`. Details: https://rxjs.dev/deprecations/scheduler-argument"}]}],"hasDeclareKeyword":false,"parameters":[{"name":"valuesAndScheduler","type":"[...A, SchedulerLike]","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":true}],"returnType":"OperatorFunction<T, T | ValueFromArray<A>>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"startWith","modulePath":"..\\src\\internal\\operators\\startWith.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"A","kind":39,"isConst":false,"constraint":"readonly unknown[]","default":"T[]","variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"values","type":"A","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":true}],"returnType":"OperatorFunction<T, T | ValueFromArray<A>>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"startWith","modulePath":"..\\src\\internal\\operators\\startWith.ts"}]}}},"usabilityResult":{"index":1}},"..\\src\\internal\\operators\\subscribeOn.ts":{"moduleComponents":{"subscribeOn":{"kind":13,"usabilityResult":{"wordCount":197,"index":1},"sources":{"name":"subscribeOn","statements":["return operate((source, subscriber) => {\r\nsubscriber.add(scheduler.schedule(() => source.subscribe(subscriber), delay));\r\n});"],"parameters":[{"name":"scheduler","type":"SchedulerLike","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"delay","initializer":"0","type":"number","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"MonoTypeOperatorFunction<T>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nAsynchronously subscribes Observers to this Observable on the specified {@link SchedulerLike}.\r\n\r\nWith `subscribeOn` you can decide what type of scheduler a specific Observable will be using when it is subscribed to.\r\n\r\nSchedulers control the speed and order of emissions to observers from an Observable stream.\r\n\r\n![](subscribeOn.png)\r\n\r\n## Example\r\n\r\nGiven the following code:\r\n\r\n```ts\r\nimport { of, merge } from 'rxjs';\r\n\r\nconst a = of(1, 2, 3);\r\nconst b = of(4, 5, 6);\r\n\r\nmerge(a, b).subscribe(console.log);\r\n\r\n// Outputs\r\n// 1\r\n// 2\r\n// 3\r\n// 4\r\n// 5\r\n// 6\r\n```\r\n\r\nBoth Observable `a` and `b` will emit their values directly and synchronously once they are subscribed to.\r\n\r\nIf we instead use the `subscribeOn` operator declaring that we want to use the {@link asyncScheduler} for values emitted by Observable `a`:\r\n\r\n```ts\r\nimport { of, subscribeOn, asyncScheduler, merge } from 'rxjs';\r\n\r\nconst a = of(1, 2, 3).pipe(subscribeOn(asyncScheduler));\r\nconst b = of(4, 5, 6);\r\n\r\nmerge(a, b).subscribe(console.log);\r\n\r\n// Outputs\r\n// 4\r\n// 5\r\n// 6\r\n// 1\r\n// 2\r\n// 3\r\n```\r\n\r\nThe reason for this is that Observable `b` emits its values directly and synchronously like before\r\nbut the emissions from `a` are scheduled on the event loop because we are now using the {@link asyncScheduler} for that specific Observable.\r\n","tags":[{"kind":25,"tagName":"param","text":"scheduler The {@link SchedulerLike} to perform subscription actions on."},{"kind":25,"tagName":"param","text":"delay A delay to pass to the scheduler to delay subscriptions"},{"kind":25,"tagName":"return","text":"A function that returns an Observable modified so that its\r\nsubscriptions happen on the specified {@link SchedulerLike}."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[],"functionName":"subscribeOn","modulePath":"..\\src\\internal\\operators\\subscribeOn.ts"}}},"usabilityResult":{"index":1}},"..\\src\\internal\\operators\\switchAll.ts":{"moduleComponents":{"switchAll":{"kind":13,"usabilityResult":{"wordCount":188,"index":1},"sources":{"name":"switchAll","statements":["return switchMap(identity);"],"parameters":[],"returnType":"OperatorFunction<O, ObservedValueOf<O>>","typeParameters":[{"name":"O","kind":39,"isConst":false,"constraint":"ObservableInput<any>","variance":0}],"docs":[{"kind":24,"description":"\r\nConverts a higher-order Observable into a first-order Observable\r\nproducing values only from the most recent observable sequence\r\n\r\n<span class=\"informal\">Flattens an Observable-of-Observables.</span>\r\n\r\n![](switchAll.png)\r\n\r\n`switchAll` subscribes to a source that is an observable of observables, also known as a\r\n\"higher-order observable\" (or `Observable<Observable<T>>`). It subscribes to the most recently\r\nprovided \"inner observable\" emitted by the source, unsubscribing from any previously subscribed\r\nto inner observable, such that only the most recent inner observable may be subscribed to at\r\nany point in time. The resulting observable returned by `switchAll` will only complete if the\r\nsource observable completes, *and* any currently subscribed to inner observable also has completed,\r\nif there are any.\r\n\r\n## Examples\r\n\r\nSpawn a new interval observable for each click event, but for every new\r\nclick, cancel the previous interval and subscribe to the new one\r\n\r\n```ts\r\nimport { fromEvent, tap, map, interval, switchAll } from 'rxjs';\r\n\r\nconst clicks = fromEvent(document, 'click').pipe(tap(() => console.log('click')));\r\nconst source = clicks.pipe(map(() => interval(1000)));\r\n\r\nsource\r\n  .pipe(switchAll())\r\n  .subscribe(x => console.log(x));\r\n\r\n// Output\r\n// click\r\n// 0\r\n// 1\r\n// 2\r\n// 3\r\n// ...\r\n// click\r\n// 0\r\n// 1\r\n// 2\r\n// ...\r\n// click\r\n// ...\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link combineLatestAll}"},{"kind":25,"tagName":"see","text":"{@link concatAll}"},{"kind":25,"tagName":"see","text":"{@link exhaustAll}"},{"kind":25,"tagName":"see","text":"{@link switchMap}"},{"kind":25,"tagName":"see","text":"{@link switchMapTo}"},{"kind":25,"tagName":"see","text":"{@link mergeAll}"},{"kind":25,"tagName":"return","text":"A function that returns an Observable that converts a higher-order\r\nObservable into a first-order Observable producing values only from the most\r\nrecent Observable sequence."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[],"functionName":"switchAll","modulePath":"..\\src\\internal\\operators\\switchAll.ts"}}},"usabilityResult":{"index":1}},"..\\src\\internal\\operators\\switchMap.ts":{"moduleComponents":{"switchMap":{"kind":13,"usabilityResult":{"wordCount":211,"index":1},"sources":{"name":"switchMap","statements":["return operate((source, subscriber) => {\r\n    let innerSubscriber: Subscriber<ObservedValueOf<O>> | null = null;\r\n    let index = 0;\r\n    // Whether or not the source subscription has completed\r\n    let isComplete = false;\r\n\r\n    // We only complete the result if the source is complete AND we don't have an active inner subscription.\r\n    // This is called both when the source completes and when the inners complete.\r\n    const checkComplete = () => isComplete && !innerSubscriber && subscriber.complete();\r\n\r\n    source.subscribe(\r\n      createOperatorSubscriber(\r\n        subscriber,\r\n        (value) => {\r\n          // Cancel the previous inner subscription if there was one\r\n          innerSubscriber?.unsubscribe();\r\n          let innerIndex = 0;\r\n          const outerIndex = index++;\r\n          // Start the next inner subscription\r\n          innerFrom(project(value, outerIndex)).subscribe(\r\n            (innerSubscriber = createOperatorSubscriber(\r\n              subscriber,\r\n              // When we get a new inner value, next it through. Note that this is\r\n              // handling the deprecate result selector here. This is because with this architecture\r\n              // it ends up being smaller than using the map operator.\r\n              (innerValue) => subscriber.next(resultSelector ? resultSelector(value, innerValue, outerIndex, innerIndex++) : innerValue),\r\n              () => {\r\n                // The inner has completed. Null out the inner subscriber to\r\n                // free up memory and to signal that we have no inner subscription\r\n                // currently.\r\n                innerSubscriber = null!;\r\n                checkComplete();\r\n              }\r\n            ))\r\n          );\r\n        },\r\n        () => {\r\n          isComplete = true;\r\n          checkComplete();\r\n        }\r\n      )\r\n    );\r\n  });"],"parameters":[{"name":"project","type":"(value: T, index: number) => O","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"resultSelector","type":"(outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, ObservedValueOf<O> | R>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"R","kind":39,"isConst":false,"variance":0},{"name":"O","kind":39,"isConst":false,"constraint":"ObservableInput<any>","variance":0}],"docs":[{"kind":24,"description":"\r\nProjects each source value to an Observable which is merged in the output\r\nObservable, emitting values only from the most recently projected Observable.\r\n\r\n<span class=\"informal\">Maps each value to an Observable, then flattens all of\r\nthese inner Observables using {@link switchAll}.</span>\r\n\r\n![](switchMap.png)\r\n\r\nReturns an Observable that emits items based on applying a function that you\r\nsupply to each item emitted by the source Observable, where that function\r\nreturns an (so-called \"inner\") Observable. Each time it observes one of these\r\ninner Observables, the output Observable begins emitting the items emitted by\r\nthat inner Observable. When a new inner Observable is emitted, `switchMap`\r\nstops emitting items from the earlier-emitted inner Observable and begins\r\nemitting items from the new one. It continues to behave like this for\r\nsubsequent inner Observables.\r\n\r\n## Example\r\n\r\nGenerate new Observable according to source Observable values\r\n\r\n```ts\r\nimport { of, switchMap } from 'rxjs';\r\n\r\nconst switched = of(1, 2, 3).pipe(switchMap(x => of(x, x ** 2, x ** 3)));\r\nswitched.subscribe(x => console.log(x));\r\n// outputs\r\n// 1\r\n// 1\r\n// 1\r\n// 2\r\n// 4\r\n// 8\r\n// 3\r\n// 9\r\n// 27\r\n```\r\n\r\nRestart an interval Observable on every click event\r\n\r\n```ts\r\nimport { fromEvent, switchMap, interval } from 'rxjs';\r\n\r\nconst clicks = fromEvent(document, 'click');\r\nconst result = clicks.pipe(switchMap(() => interval(1000)));\r\nresult.subscribe(x => console.log(x));\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link concatMap}"},{"kind":25,"tagName":"see","text":"{@link exhaustMap}"},{"kind":25,"tagName":"see","text":"{@link mergeMap}"},{"kind":25,"tagName":"see","text":"{@link switchAll}"},{"kind":25,"tagName":"see","text":"{@link switchMapTo}"},{"kind":25,"tagName":"param","text":"{function(value: T, index: number): ObservableInput} project A function\r\nthat, when applied to an item emitted by the source Observable, returns an\r\nObservable."},{"kind":25,"tagName":"return","text":"A function that returns an Observable that emits the result of\r\napplying the projection function (and the optional deprecated\r\n`resultSelector`) to each item emitted by the source Observable and taking\r\nonly the values from the most recently projected inner Observable."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"O","kind":39,"isConst":false,"constraint":"ObservableInput<any>","variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"project","type":"(value: T, index: number) => O","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, ObservedValueOf<O>>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"switchMap","modulePath":"..\\src\\internal\\operators\\switchMap.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"O","kind":39,"isConst":false,"constraint":"ObservableInput<any>","variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"The `resultSelector` parameter will be removed in v8. Use an inner `map` instead. Details: https://rxjs.dev/deprecations/resultSelector"}]}],"hasDeclareKeyword":false,"parameters":[{"name":"project","type":"(value: T, index: number) => O","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"resultSelector","type":"undefined","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, ObservedValueOf<O>>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"switchMap","modulePath":"..\\src\\internal\\operators\\switchMap.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"R","kind":39,"isConst":false,"variance":0},{"name":"O","kind":39,"isConst":false,"constraint":"ObservableInput<any>","variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"The `resultSelector` parameter will be removed in v8. Use an inner `map` instead. Details: https://rxjs.dev/deprecations/resultSelector"}]}],"hasDeclareKeyword":false,"parameters":[{"name":"project","type":"(value: T, index: number) => O","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"resultSelector","type":"(outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, R>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"switchMap","modulePath":"..\\src\\internal\\operators\\switchMap.ts"}]}}},"usabilityResult":{"index":1}},"..\\src\\internal\\operators\\switchMapTo.ts":{"moduleComponents":{"switchMapTo":{"kind":13,"usabilityResult":{"wordCount":118,"index":1},"sources":{"name":"switchMapTo","statements":["return isFunction(resultSelector) ? switchMap(() => innerObservable, resultSelector) : switchMap(() => innerObservable);"],"parameters":[{"name":"innerObservable","type":"O","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"resultSelector","type":"(outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, ObservedValueOf<O> | R>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"R","kind":39,"isConst":false,"variance":0},{"name":"O","kind":39,"isConst":false,"constraint":"ObservableInput<unknown>","variance":0}],"docs":[{"kind":24,"description":"\r\nProjects each source value to the same Observable which is flattened multiple\r\ntimes with {@link switchMap} in the output Observable.\r\n\r\n<span class=\"informal\">It's like {@link switchMap}, but maps each value\r\nalways to the same inner Observable.</span>\r\n\r\n![](switchMapTo.png)\r\n\r\nMaps each source value to the given Observable `innerObservable` regardless\r\nof the source value, and then flattens those resulting Observables into one\r\nsingle Observable, which is the output Observable. The output Observables\r\nemits values only from the most recently emitted instance of\r\n`innerObservable`.\r\n\r\n## Example\r\n\r\nRestart an interval Observable on every click event\r\n\r\n```ts\r\nimport { fromEvent, switchMapTo, interval } from 'rxjs';\r\n\r\nconst clicks = fromEvent(document, 'click');\r\nconst result = clicks.pipe(switchMapTo(interval(1000)));\r\nresult.subscribe(x => console.log(x));\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link concatMapTo}"},{"kind":25,"tagName":"see","text":"{@link switchAll}"},{"kind":25,"tagName":"see","text":"{@link switchMap}"},{"kind":25,"tagName":"see","text":"{@link mergeMapTo}"},{"kind":25,"tagName":"param","text":"{ObservableInput} innerObservable An Observable to replace each value from\r\nthe source Observable."},{"kind":25,"tagName":"return","text":"A function that returns an Observable that emits items from the\r\ngiven `innerObservable` (and optionally transformed through the deprecated\r\n`resultSelector`) every time a value is emitted on the source Observable,\r\nand taking only the values from the most recently projected inner\r\nObservable."},{"kind":25,"tagName":"deprecated","text":"Will be removed in v9. Use {@link switchMap} instead: `switchMap(() => result)`"}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"O","kind":39,"isConst":false,"constraint":"ObservableInput<unknown>","variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Will be removed in v9. Use {@link switchMap} instead: `switchMap(() => result)`"}]}],"hasDeclareKeyword":false,"parameters":[{"name":"observable","type":"O","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<unknown, ObservedValueOf<O>>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"switchMapTo","modulePath":"..\\src\\internal\\operators\\switchMapTo.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"O","kind":39,"isConst":false,"constraint":"ObservableInput<unknown>","variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"The `resultSelector` parameter will be removed in v8. Use an inner `map` instead. Details: https://rxjs.dev/deprecations/resultSelector"}]}],"hasDeclareKeyword":false,"parameters":[{"name":"observable","type":"O","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"resultSelector","type":"undefined","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<unknown, ObservedValueOf<O>>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"switchMapTo","modulePath":"..\\src\\internal\\operators\\switchMapTo.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"R","kind":39,"isConst":false,"variance":0},{"name":"O","kind":39,"isConst":false,"constraint":"ObservableInput<unknown>","variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"The `resultSelector` parameter will be removed in v8. Use an inner `map` instead. Details: https://rxjs.dev/deprecations/resultSelector"}]}],"hasDeclareKeyword":false,"parameters":[{"name":"observable","type":"O","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"resultSelector","type":"(outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, R>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"switchMapTo","modulePath":"..\\src\\internal\\operators\\switchMapTo.ts"}]}}},"usabilityResult":{"index":1}},"..\\src\\internal\\operators\\switchScan.ts":{"moduleComponents":{"switchScan":{"kind":13,"usabilityResult":{"wordCount":50,"index":1},"sources":{"name":"switchScan","statements":["return operate((source, subscriber) => {\r\n    // The state we will keep up to date to pass into our\r\n    // accumulator function at each new value from the source.\r\n    let state = seed;\r\n\r\n    // Use `switchMap` on our `source` to do the work of creating\r\n    // this operator. Note the backwards order here of `switchMap()(source)`\r\n    // to avoid needing to use `pipe` unnecessarily\r\n    switchMap(\r\n      // On each value from the source, call the accumulator with\r\n      // our previous state, the value and the index.\r\n      (value: T, index) => accumulator(state, value, index),\r\n      // Using the deprecated result selector here as a dirty trick\r\n      // to update our state with the flattened value.\r\n      (_, innerValue) => ((state = innerValue), innerValue)\r\n    )(source).subscribe(subscriber);\r\n\r\n    return () => {\r\n      // Release state on finalization\r\n      state = null!;\r\n    };\r\n  });"],"parameters":[{"name":"accumulator","type":"(acc: R, value: T, index: number) => O","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"seed","type":"R","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, ObservedValueOf<O>>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"R","kind":39,"isConst":false,"variance":0},{"name":"O","kind":39,"isConst":false,"constraint":"ObservableInput<any>","variance":0}],"docs":[{"kind":24,"description":"\r\nApplies an accumulator function over the source Observable where the\r\naccumulator function itself returns an Observable, emitting values\r\nonly from the most recently returned Observable.\r\n\r\n<span class=\"informal\">It's like {@link mergeScan}, but only the most recent\r\nObservable returned by the accumulator is merged into the outer Observable.</span>\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link scan}"},{"kind":25,"tagName":"see","text":"{@link mergeScan}"},{"kind":25,"tagName":"see","text":"{@link switchMap}"},{"kind":25,"tagName":"param","text":"accumulator\r\nThe accumulator function called on each source value."},{"kind":25,"tagName":"param","text":"seed The initial accumulation value."},{"kind":25,"tagName":"return","text":"A function that returns an observable of the accumulated values."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[],"functionName":"switchScan","modulePath":"..\\src\\internal\\operators\\switchScan.ts"}}},"usabilityResult":{"index":1}},"..\\src\\internal\\operators\\take.ts":{"moduleComponents":{"take":{"kind":13,"usabilityResult":{"wordCount":108,"index":1},"sources":{"name":"take","statements":["return count <= 0\r\n? // If we are taking no values, that's empty.\r\n  () => EMPTY\r\n: operate((source, subscriber) => {\r\n    let seen = 0;\r\n    source.subscribe(\r\n      createOperatorSubscriber(subscriber, (value) => {\r\n        // Increment the number of values we have seen,\r\n        // then check it against the allowed count to see\r\n        // if we are still letting values through.\r\n        if (++seen <= count) {\r\n          subscriber.next(value);\r\n          // If we have met or passed our allowed count,\r\n          // we need to complete. We have to do <= here,\r\n          // because re-entrant code will increment `seen` twice.\r\n          if (count <= seen) {\r\n            subscriber.complete();\r\n          }\r\n        }\r\n      })\r\n    );\r\n  });"],"parameters":[{"name":"count","type":"number","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"MonoTypeOperatorFunction<T>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nEmits only the first `count` values emitted by the source Observable.\r\n\r\n<span class=\"informal\">Takes the first `count` values from the source, then\r\ncompletes.</span>\r\n\r\n![](take.png)\r\n\r\n`take` returns an Observable that emits only the first `count` values emitted\r\nby the source Observable. If the source emits fewer than `count` values then\r\nall of its values are emitted. After that, it completes, regardless if the\r\nsource completes.\r\n\r\n## Example\r\n\r\nTake the first 5 seconds of an infinite 1-second interval Observable\r\n\r\n```ts\r\nimport { interval, take } from 'rxjs';\r\n\r\nconst intervalCount = interval(1000);\r\nconst takeFive = intervalCount.pipe(take(5));\r\ntakeFive.subscribe(x => console.log(x));\r\n\r\n// Logs:\r\n// 0\r\n// 1\r\n// 2\r\n// 3\r\n// 4\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link takeLast}"},{"kind":25,"tagName":"see","text":"{@link takeUntil}"},{"kind":25,"tagName":"see","text":"{@link takeWhile}"},{"kind":25,"tagName":"see","text":"{@link skip}"},{"kind":25,"tagName":"param","text":"count The maximum number of `next` values to emit."},{"kind":25,"tagName":"return","text":"A function that returns an Observable that emits only the first\r\n`count` values emitted by the source Observable, or all of the values from\r\nthe source if the source emits fewer than `count` values."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[],"functionName":"take","modulePath":"..\\src\\internal\\operators\\take.ts"}}},"usabilityResult":{"index":1}},"..\\src\\internal\\operators\\takeLast.ts":{"moduleComponents":{"takeLast":{"kind":13,"usabilityResult":{"wordCount":151,"index":1},"sources":{"name":"takeLast","statements":["return count <= 0\r\n? () => EMPTY\r\n: operate((source, subscriber) => {\r\n    // This buffer will hold the values we are going to emit\r\n    // when the source completes. Since we only want to take the\r\n    // last N values, we can't emit until we're sure we're not getting\r\n    // any more values.\r\n    let buffer: T[] = [];\r\n    source.subscribe(\r\n      createOperatorSubscriber(\r\n        subscriber,\r\n        (value) => {\r\n          // Add the most recent value onto the end of our buffer.\r\n          buffer.push(value);\r\n          // If our buffer is now larger than the number of values we\r\n          // want to take, we remove the oldest value from the buffer.\r\n          count < buffer.length && buffer.shift();\r\n        },\r\n        () => {\r\n          // The source completed, we now know what are last values\r\n          // are, emit them in the order they were received.\r\n          for (const value of buffer) {\r\n            subscriber.next(value);\r\n          }\r\n          subscriber.complete();\r\n        },\r\n        // Errors are passed through to the consumer\r\n        undefined,\r\n        () => {\r\n          // During finalization release the values in our buffer.\r\n          buffer = null!;\r\n        }\r\n      )\r\n    );\r\n  });"],"parameters":[{"name":"count","type":"number","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"MonoTypeOperatorFunction<T>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nWaits for the source to complete, then emits the last N values from the source,\r\nas specified by the `count` argument.\r\n\r\n![](takeLast.png)\r\n\r\n`takeLast` results in an observable that will hold values up to `count` values in memory,\r\nuntil the source completes. It then pushes all values in memory to the consumer, in the\r\norder they were received from the source, then notifies the consumer that it is\r\ncomplete.\r\n\r\nIf for some reason the source completes before the `count` supplied to `takeLast` is reached,\r\nall values received until that point are emitted, and then completion is notified.\r\n\r\n**Warning**: Using `takeLast` with an observable that never completes will result\r\nin an observable that never emits a value.\r\n\r\n## Example\r\n\r\nTake the last 3 values of an Observable with many values\r\n\r\n```ts\r\nimport { range, takeLast } from 'rxjs';\r\n\r\nconst many = range(1, 100);\r\nconst lastThree = many.pipe(takeLast(3));\r\nlastThree.subscribe(x => console.log(x));\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link take}"},{"kind":25,"tagName":"see","text":"{@link takeUntil}"},{"kind":25,"tagName":"see","text":"{@link takeWhile}"},{"kind":25,"tagName":"see","text":"{@link skip}"},{"kind":25,"tagName":"param","text":"count The maximum number of values to emit from the end of\r\nthe sequence of values emitted by the source Observable."},{"kind":25,"tagName":"return","text":"A function that returns an Observable that emits at most the last\r\n`count` values emitted by the source Observable."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[],"functionName":"takeLast","modulePath":"..\\src\\internal\\operators\\takeLast.ts"}}},"usabilityResult":{"index":1}},"..\\src\\internal\\operators\\takeUntil.ts":{"moduleComponents":{"takeUntil":{"kind":13,"usabilityResult":{"wordCount":122,"index":1},"sources":{"name":"takeUntil","statements":["return operate((source, subscriber) => {\r\ninnerFrom(notifier).subscribe(createOperatorSubscriber(subscriber, () => subscriber.complete(), noop));\r\n!subscriber.closed && source.subscribe(subscriber);\r\n});"],"parameters":[{"name":"notifier","type":"ObservableInput<any>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"MonoTypeOperatorFunction<T>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nEmits the values emitted by the source Observable until a `notifier`\r\nObservable emits a value.\r\n\r\n<span class=\"informal\">Lets values pass until a second Observable,\r\n`notifier`, emits a value. Then, it completes.</span>\r\n\r\n![](takeUntil.png)\r\n\r\n`takeUntil` subscribes and begins mirroring the source Observable. It also\r\nmonitors a second Observable, `notifier` that you provide. If the `notifier`\r\nemits a value, the output Observable stops mirroring the source Observable\r\nand completes. If the `notifier` doesn't emit any value and completes\r\nthen `takeUntil` will pass all values.\r\n\r\n## Example\r\n\r\nTick every second until the first click happens\r\n\r\n```ts\r\nimport { interval, fromEvent, takeUntil } from 'rxjs';\r\n\r\nconst source = interval(1000);\r\nconst clicks = fromEvent(document, 'click');\r\nconst result = source.pipe(takeUntil(clicks));\r\nresult.subscribe(x => console.log(x));\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link take}"},{"kind":25,"tagName":"see","text":"{@link takeLast}"},{"kind":25,"tagName":"see","text":"{@link takeWhile}"},{"kind":25,"tagName":"see","text":"{@link skip}"},{"kind":25,"tagName":"param","text":"{Observable} notifier The Observable whose first emitted value will\r\ncause the output Observable of `takeUntil` to stop emitting values from the\r\nsource Observable."},{"kind":25,"tagName":"return","text":"A function that returns an Observable that emits the values from the\r\nsource Observable until `notifier` emits its first value."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[],"functionName":"takeUntil","modulePath":"..\\src\\internal\\operators\\takeUntil.ts"}}},"usabilityResult":{"index":1}},"..\\src\\internal\\operators\\takeWhile.ts":{"moduleComponents":{"takeWhile":{"kind":13,"usabilityResult":{"wordCount":157,"index":1},"sources":{"name":"takeWhile","statements":["return operate((source, subscriber) => {\r\nlet index = 0;\r\nsource.subscribe(\r\n  createOperatorSubscriber(subscriber, (value) => {\r\n    const result = predicate(value, index++);\r\n    (result || inclusive) && subscriber.next(value);\r\n    !result && subscriber.complete();\r\n  })\r\n);\r\n});"],"parameters":[{"name":"predicate","type":"(value: T, index: number) => boolean","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"inclusive","initializer":"false","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"MonoTypeOperatorFunction<T>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nEmits values emitted by the source Observable so long as each value satisfies\r\nthe given `predicate`, and then completes as soon as this `predicate` is not\r\nsatisfied.\r\n\r\n<span class=\"informal\">Takes values from the source only while they pass the\r\ncondition given. When the first value does not satisfy, it completes.</span>\r\n\r\n![](takeWhile.png)\r\n\r\n`takeWhile` subscribes and begins mirroring the source Observable. Each value\r\nemitted on the source is given to the `predicate` function which returns a\r\nboolean, representing a condition to be satisfied by the source values. The\r\noutput Observable emits the source values until such time as the `predicate`\r\nreturns false, at which point `takeWhile` stops mirroring the source\r\nObservable and completes the output Observable.\r\n\r\n## Example\r\n\r\nEmit click events only while the clientX property is greater than 200\r\n\r\n```ts\r\nimport { fromEvent, takeWhile } from 'rxjs';\r\n\r\nconst clicks = fromEvent<PointerEvent>(document, 'click');\r\nconst result = clicks.pipe(takeWhile(ev => ev.clientX > 200));\r\nresult.subscribe(x => console.log(x));\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link take}"},{"kind":25,"tagName":"see","text":"{@link takeLast}"},{"kind":25,"tagName":"see","text":"{@link takeUntil}"},{"kind":25,"tagName":"see","text":"{@link skip}"},{"kind":25,"tagName":"param","text":"{function(value: T, index: number): boolean} predicate A function that\r\nevaluates a value emitted by the source Observable and returns a boolean.\r\nAlso takes the (zero-based) index as the second argument."},{"kind":25,"tagName":"param","text":"{boolean} inclusive When set to `true` the value that caused\r\n`predicate` to return `false` will also be emitted."},{"kind":25,"tagName":"return","text":"A function that returns an Observable that emits values from the\r\nsource Observable so long as each value satisfies the condition defined by\r\nthe `predicate`, then completes."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"predicate","type":"BooleanConstructor","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"inclusive","type":"true","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"MonoTypeOperatorFunction<T>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"takeWhile","modulePath":"..\\src\\internal\\operators\\takeWhile.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"predicate","type":"BooleanConstructor","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"inclusive","type":"false","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, TruthyTypesOf<T>>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"takeWhile","modulePath":"..\\src\\internal\\operators\\takeWhile.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"predicate","type":"BooleanConstructor","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, TruthyTypesOf<T>>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"takeWhile","modulePath":"..\\src\\internal\\operators\\takeWhile.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"S","kind":39,"isConst":false,"constraint":"T","variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"predicate","type":"(value: T, index: number) => value is S","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, S>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"takeWhile","modulePath":"..\\src\\internal\\operators\\takeWhile.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"S","kind":39,"isConst":false,"constraint":"T","variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"predicate","type":"(value: T, index: number) => value is S","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"inclusive","type":"false","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, S>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"takeWhile","modulePath":"..\\src\\internal\\operators\\takeWhile.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"predicate","type":"(value: T, index: number) => boolean","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"inclusive","type":"boolean","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"MonoTypeOperatorFunction<T>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"takeWhile","modulePath":"..\\src\\internal\\operators\\takeWhile.ts"}]}}},"usabilityResult":{"index":1}},"..\\src\\internal\\operators\\tap.ts":{"moduleComponents":{"tap":{"kind":13,"usabilityResult":{"wordCount":489,"index":1},"sources":{"name":"tap","statements":[{"isExported":false,"isDefaultExport":false,"hasDeclareKeyword":false,"docs":[],"kind":41,"declarationKind":"const","declarations":[{"name":"tapObserver","initializer":"isFunction(observerOrNext) || error || complete\r\n      ? // tslint:disable-next-line: no-object-literal-type-assertion\r\n        ({ next: observerOrNext as Exclude<typeof observerOrNext, Partial<TapObserver<T>>>, error, complete } as Partial<TapObserver<T>>)\r\n      : observerOrNext","hasExclamationToken":false,"kind":40}]},"return tapObserver\r\n? operate((source, subscriber) => {\r\n    tapObserver.subscribe?.();\r\n    let isUnsub = true;\r\n    source.subscribe(\r\n      createOperatorSubscriber(\r\n        subscriber,\r\n        (value) => {\r\n          tapObserver.next?.(value);\r\n          subscriber.next(value);\r\n        },\r\n        () => {\r\n          isUnsub = false;\r\n          tapObserver.complete?.();\r\n          subscriber.complete();\r\n        },\r\n        (err) => {\r\n          isUnsub = false;\r\n          tapObserver.error?.(err);\r\n          subscriber.error(err);\r\n        },\r\n        () => {\r\n          if (isUnsub) {\r\n            tapObserver.unsubscribe?.();\r\n          }\r\n          tapObserver.finalize?.();\r\n        }\r\n      )\r\n    );\r\n  })\r\n: // Tap was called with no valid tap observer or handler\r\n  // (e.g. `tap(null, null, null)` or `tap(null)` or `tap()`)\r\n  // so we're going to just mirror the source.\r\n  identity;"],"parameters":[{"name":"observerOrNext","type":"Partial<TapObserver<T>> | ((value: T) => void) | null","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"error","type":"((e: any) => void) | null","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"complete","type":"(() => void) | null","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"MonoTypeOperatorFunction<T>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nUsed to perform side-effects for notifications from the source observable\r\n\r\n<span class=\"informal\">Used when you want to affect outside state with a notification without altering the notification</span>\r\n\r\n![](tap.png)\r\n\r\nTap is designed to allow the developer a designated place to perform side effects. While you _could_ perform side-effects\r\ninside of a `map` or a `mergeMap`, that would make their mapping functions impure, which isn't always a big deal, but will\r\nmake it so you can't do things like memoize those functions. The `tap` operator is designed solely for such side-effects to\r\nhelp you remove side-effects from other operations.\r\n\r\nFor any notification, next, error, or complete, `tap` will call the appropriate callback you have provided to it, via a function\r\nreference, or a partial observer, then pass that notification down the stream.\r\n\r\nThe observable returned by `tap` is an exact mirror of the source, with one exception: Any error that occurs -- synchronously -- in a handler\r\nprovided to `tap` will be emitted as an error from the returned observable.\r\n\r\n> Be careful! You can mutate objects as they pass through the `tap` operator's handlers.\r\n\r\nThe most common use of `tap` is actually for debugging. You can place a `tap(console.log)` anywhere\r\nin your observable `pipe`, log out the notifications as they are emitted by the source returned by the previous\r\noperation.\r\n\r\n## Examples\r\n\r\nCheck a random number before it is handled. Below is an observable that will use a random number between 0 and 1,\r\nand emit `'big'` or `'small'` depending on the size of that number. But we wanted to log what the original number\r\nwas, so we have added a `tap(console.log)`.\r\n\r\n```ts\r\nimport { of, tap, map } from 'rxjs';\r\n\r\nof(Math.random()).pipe(\r\n  tap(console.log),\r\n  map(n => n > 0.5 ? 'big' : 'small')\r\n).subscribe(console.log);\r\n```\r\n\r\nUsing `tap` to analyze a value and force an error. Below is an observable where in our system we only\r\nwant to emit numbers 3 or less we get from another source. We can force our observable to error\r\nusing `tap`.\r\n\r\n```ts\r\nimport { of, tap } from 'rxjs';\r\n\r\nconst source = of(1, 2, 3, 4, 5);\r\n\r\nsource.pipe(\r\n  tap(n => {\r\n    if (n > 3) {\r\n      throw new TypeError(`Value ${ n } is greater than 3`);\r\n    }\r\n  })\r\n)\r\n.subscribe({ next: console.log, error: err => console.log(err.message) });\r\n```\r\n\r\nWe want to know when an observable completes before moving on to the next observable. The system\r\nbelow will emit a random series of `'X'` characters from 3 different observables in sequence. The\r\nonly way we know when one observable completes and moves to the next one, in this case, is because\r\nwe have added a `tap` with the side effect of logging to console.\r\n\r\n```ts\r\nimport { of, concatMap, interval, take, map, tap } from 'rxjs';\r\n\r\nof(1, 2, 3).pipe(\r\n  concatMap(n => interval(1000).pipe(\r\n    take(Math.round(Math.random() * 10)),\r\n    map(() => 'X'),\r\n    tap({ complete: () => console.log(`Done with ${ n }`) })\r\n  ))\r\n)\r\n.subscribe(console.log);\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link finalize}"},{"kind":25,"tagName":"see","text":"{@link TapObserver}"},{"kind":25,"tagName":"param","text":"observerOrNext A next handler or partial observer"},{"kind":25,"tagName":"param","text":"error An error handler"},{"kind":25,"tagName":"param","text":"complete A completion handler"},{"kind":25,"tagName":"return","text":"A function that returns an Observable identical to the source, but\r\nruns the specified Observer or callback(s) for each item."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"observerOrNext","type":"Partial<TapObserver<T>> | ((value: T) => void)","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"MonoTypeOperatorFunction<T>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"tap","modulePath":"..\\src\\internal\\operators\\tap.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Instead of passing separate callback arguments, use an observer argument. Signatures taking separate callback arguments will be removed in v8. Details: https://rxjs.dev/deprecations/subscribe-arguments"}]}],"hasDeclareKeyword":false,"parameters":[{"name":"next","type":"((value: T) => void) | null","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"error","type":"((error: any) => void) | null","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"complete","type":"(() => void) | null","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"MonoTypeOperatorFunction<T>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"tap","modulePath":"..\\src\\internal\\operators\\tap.ts"}]}}},"usabilityResult":{"index":1}},"..\\src\\internal\\operators\\throttle.ts":{"moduleComponents":{"throttle":{"kind":13,"usabilityResult":{"wordCount":167,"index":1},"sources":{"name":"throttle","statements":["return operate((source, subscriber) => {\r\n    const { leading = true, trailing = false } = config ?? {};\r\n    let hasValue = false;\r\n    let sendValue: T | null = null;\r\n    let throttled: Subscription | null = null;\r\n    let isComplete = false;\r\n\r\n    const endThrottling = () => {\r\n      throttled?.unsubscribe();\r\n      throttled = null;\r\n      if (trailing) {\r\n        send();\r\n        isComplete && subscriber.complete();\r\n      }\r\n    };\r\n\r\n    const cleanupThrottling = () => {\r\n      throttled = null;\r\n      isComplete && subscriber.complete();\r\n    };\r\n\r\n    const startThrottle = (value: T) =>\r\n      (throttled = innerFrom(durationSelector(value)).subscribe(createOperatorSubscriber(subscriber, endThrottling, cleanupThrottling)));\r\n\r\n    const send = () => {\r\n      if (hasValue) {\r\n        // Ensure we clear out our value and hasValue flag\r\n        // before we emit, otherwise reentrant code can cause\r\n        // issues here.\r\n        hasValue = false;\r\n        const value = sendValue!;\r\n        sendValue = null;\r\n        // Emit the value.\r\n        subscriber.next(value);\r\n        !isComplete && startThrottle(value);\r\n      }\r\n    };\r\n\r\n    source.subscribe(\r\n      createOperatorSubscriber(\r\n        subscriber,\r\n        // Regarding the presence of throttled.closed in the following\r\n        // conditions, if a synchronous duration selector is specified - weird,\r\n        // but legal - an already-closed subscription will be assigned to\r\n        // throttled, so the subscription's closed property needs to be checked,\r\n        // too.\r\n        (value) => {\r\n          hasValue = true;\r\n          sendValue = value;\r\n          !(throttled && !throttled.closed) && (leading ? send() : startThrottle(value));\r\n        },\r\n        () => {\r\n          isComplete = true;\r\n          !(trailing && hasValue && throttled && !throttled.closed) && subscriber.complete();\r\n        }\r\n      )\r\n    );\r\n  });"],"parameters":[{"name":"durationSelector","type":"(value: T) => ObservableInput<any>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"config","type":"ThrottleConfig","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"MonoTypeOperatorFunction<T>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nEmits a value from the source Observable, then ignores subsequent source\r\nvalues for a duration determined by another Observable, then repeats this\r\nprocess.\r\n\r\n<span class=\"informal\">It's like {@link throttleTime}, but the silencing\r\nduration is determined by a second Observable.</span>\r\n\r\n![](throttle.svg)\r\n\r\n`throttle` emits the source Observable values on the output Observable\r\nwhen its internal timer is disabled, and ignores source values when the timer\r\nis enabled. Initially, the timer is disabled. As soon as the first source\r\nvalue arrives, it is forwarded to the output Observable, and then the timer\r\nis enabled by calling the `durationSelector` function with the source value,\r\nwhich returns the \"duration\" Observable. When the duration Observable emits a\r\nvalue, the timer is disabled, and this process repeats for the\r\nnext source value.\r\n\r\n## Example\r\n\r\nEmit clicks at a rate of at most one click per second\r\n\r\n```ts\r\nimport { fromEvent, throttle, interval } from 'rxjs';\r\n\r\nconst clicks = fromEvent(document, 'click');\r\nconst result = clicks.pipe(throttle(() => interval(1000)));\r\n\r\nresult.subscribe(x => console.log(x));\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link audit}"},{"kind":25,"tagName":"see","text":"{@link debounce}"},{"kind":25,"tagName":"see","text":"{@link delayWhen}"},{"kind":25,"tagName":"see","text":"{@link sample}"},{"kind":25,"tagName":"see","text":"{@link throttleTime}"},{"kind":25,"tagName":"param","text":"durationSelector A function that receives a value from the source\r\nObservable, for computing the silencing duration for each source value,\r\nreturned as an `ObservableInput`."},{"kind":25,"tagName":"param","text":"config A configuration object to define `leading` and `trailing`\r\nbehavior. Defaults to `{ leading: true, trailing: false }`."},{"kind":25,"tagName":"return","text":"A function that returns an Observable that performs the throttle\r\noperation to limit the rate of emissions from the source."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[],"functionName":"throttle","modulePath":"..\\src\\internal\\operators\\throttle.ts"}}},"usabilityResult":{"index":1}},"..\\src\\internal\\operators\\throttleTime.ts":{"moduleComponents":{"throttleTime":{"kind":13,"usabilityResult":{"wordCount":164,"index":1},"sources":{"name":"throttleTime","statements":[{"isExported":false,"isDefaultExport":false,"hasDeclareKeyword":false,"docs":[],"kind":41,"declarationKind":"const","declarations":[{"name":"duration$","initializer":"timer(duration, scheduler)","hasExclamationToken":false,"kind":40}]},"return throttle(() => duration$, config);"],"parameters":[{"name":"duration","type":"number","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"scheduler","initializer":"asyncScheduler","type":"SchedulerLike","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"config","type":"ThrottleConfig","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"MonoTypeOperatorFunction<T>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nEmits a value from the source Observable, then ignores subsequent source\r\nvalues for `duration` milliseconds, then repeats this process.\r\n\r\n<span class=\"informal\">Lets a value pass, then ignores source values for the\r\nnext `duration` milliseconds.</span>\r\n\r\n![](throttleTime.png)\r\n\r\n`throttleTime` emits the source Observable values on the output Observable\r\nwhen its internal timer is disabled, and ignores source values when the timer\r\nis enabled. Initially, the timer is disabled. As soon as the first source\r\nvalue arrives, it is forwarded to the output Observable, and then the timer\r\nis enabled. After `duration` milliseconds (or the time unit determined\r\ninternally by the optional `scheduler`) has passed, the timer is disabled,\r\nand this process repeats for the next source value. Optionally takes a\r\n{@link SchedulerLike} for managing timers.\r\n\r\n## Examples\r\n\r\n### Limit click rate\r\n\r\nEmit clicks at a rate of at most one click per second\r\n\r\n```ts\r\nimport { fromEvent, throttleTime } from 'rxjs';\r\n\r\nconst clicks = fromEvent(document, 'click');\r\nconst result = clicks.pipe(throttleTime(1000));\r\n\r\nresult.subscribe(x => console.log(x));\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link auditTime}"},{"kind":25,"tagName":"see","text":"{@link debounceTime}"},{"kind":25,"tagName":"see","text":"{@link delay}"},{"kind":25,"tagName":"see","text":"{@link sampleTime}"},{"kind":25,"tagName":"see","text":"{@link throttle}"},{"kind":25,"tagName":"param","text":"duration Time to wait before emitting another value after\r\nemitting the last value, measured in milliseconds or the time unit determined\r\ninternally by the optional `scheduler`."},{"kind":25,"tagName":"param","text":"scheduler The {@link SchedulerLike} to use for\r\nmanaging the timers that handle the throttling. Defaults to {@link asyncScheduler}."},{"kind":25,"tagName":"param","text":"config A configuration object to define `leading` and\r\n`trailing` behavior. Defaults to `{ leading: true, trailing: false }`."},{"kind":25,"tagName":"return","text":"A function that returns an Observable that performs the throttle\r\noperation to limit the rate of emissions from the source."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[],"functionName":"throttleTime","modulePath":"..\\src\\internal\\operators\\throttleTime.ts"}}},"usabilityResult":{"index":1}},"..\\src\\internal\\operators\\throwIfEmpty.ts":{"moduleComponents":{"throwIfEmpty":{"kind":13,"usabilityResult":{"wordCount":92,"index":1},"sources":{"name":"throwIfEmpty","statements":["return operate((source, subscriber) => {\r\nlet hasValue = false;\r\nsource.subscribe(\r\n  createOperatorSubscriber(\r\n    subscriber,\r\n    (value) => {\r\n      hasValue = true;\r\n      subscriber.next(value);\r\n    },\r\n    () => (hasValue ? subscriber.complete() : subscriber.error(errorFactory()))\r\n  )\r\n);\r\n});"],"parameters":[{"name":"errorFactory","initializer":"defaultErrorFactory","type":"() => any","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"MonoTypeOperatorFunction<T>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nIf the source observable completes without emitting a value, it will emit\r\nan error. The error will be created at that time by the optional\r\n`errorFactory` argument, otherwise, the error will be {@link EmptyError}.\r\n\r\n![](throwIfEmpty.png)\r\n\r\n## Example\r\n\r\nThrow an error if the document wasn't clicked within 1 second\r\n\r\n```ts\r\nimport { fromEvent, takeUntil, timer, throwIfEmpty } from 'rxjs';\r\n\r\nconst click$ = fromEvent(document, 'click');\r\n\r\nclick$.pipe(\r\n  takeUntil(timer(1000)),\r\n  throwIfEmpty(() => new Error('The document was not clicked within 1 second'))\r\n)\r\n.subscribe({\r\n  next() {\r\n   console.log('The document was clicked');\r\n  },\r\n  error(err) {\r\n    console.error(err.message);\r\n  }\r\n});\r\n```\r\n","tags":[{"kind":25,"tagName":"param","text":"errorFactory A factory function called to produce the\r\nerror to be thrown when the source observable completes without emitting a\r\nvalue."},{"kind":25,"tagName":"return","text":"A function that returns an Observable that throws an error if the\r\nsource Observable completed without emitting."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[],"functionName":"throwIfEmpty","modulePath":"..\\src\\internal\\operators\\throwIfEmpty.ts"}}},"usabilityResult":{"index":1}},"..\\src\\internal\\operators\\timeInterval.ts":{"moduleComponents":{"timeInterval":{"kind":13,"usabilityResult":{"wordCount":143,"index":1},"sources":{"name":"timeInterval","statements":["return operate((source, subscriber) => {\r\nlet last = scheduler.now();\r\nsource.subscribe(\r\n  createOperatorSubscriber(subscriber, (value) => {\r\n    const now = scheduler.now();\r\n    const interval = now - last;\r\n    last = now;\r\n    subscriber.next(new TimeInterval(value, interval));\r\n  })\r\n);\r\n});"],"parameters":[{"name":"scheduler","initializer":"asyncScheduler","type":"SchedulerLike","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, TimeInterval<T>>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nEmits an object containing the current value, and the time that has\r\npassed between emitting the current value and the previous value, which is\r\ncalculated by using the provided `scheduler`'s `now()` method to retrieve\r\nthe current time at each emission, then calculating the difference. The `scheduler`\r\ndefaults to {@link asyncScheduler}, so by default, the `interval` will be in\r\nmilliseconds.\r\n\r\n<span class=\"informal\">Convert an Observable that emits items into one that\r\nemits indications of the amount of time elapsed between those emissions.</span>\r\n\r\n![](timeInterval.png)\r\n\r\n## Example\r\n\r\nEmit interval between current value with the last value\r\n\r\n```ts\r\nimport { interval, timeInterval } from 'rxjs';\r\n\r\nconst seconds = interval(1000);\r\n\r\nseconds\r\n  .pipe(timeInterval())\r\n  .subscribe(value => console.log(value));\r\n\r\n// NOTE: The values will never be this precise,\r\n// intervals created with `interval` or `setInterval`\r\n// are non-deterministic.\r\n\r\n// { value: 0, interval: 1000 }\r\n// { value: 1, interval: 1000 }\r\n// { value: 2, interval: 1000 }\r\n```\r\n","tags":[{"kind":25,"tagName":"param","text":"{SchedulerLike} [scheduler] Scheduler used to get the current time."},{"kind":25,"tagName":"return","text":"A function that returns an Observable that emits information about\r\nvalue and interval."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[],"functionName":"timeInterval","modulePath":"..\\src\\internal\\operators\\timeInterval.ts"}}},"usabilityResult":{"index":1}},"..\\src\\internal\\operators\\timeout.ts":{"moduleComponents":{"timeout":{"kind":13,"usabilityResult":{"wordCount":1047,"index":1},"sources":{"name":"timeout","statements":[{"isExported":false,"isDefaultExport":false,"hasDeclareKeyword":false,"docs":[],"kind":41,"declarationKind":"const","declarations":[{"name":"{\r\n    first,\r\n    each,\r\n    with: _with = timeoutErrorFactory,\r\n    scheduler = schedulerArg ?? asyncScheduler,\r\n    meta = null!,\r\n  }","initializer":"(isValidDate(config) ? { first: config } : typeof config === 'number' ? { each: config } : config) as TimeoutConfig<T, O, M>","hasExclamationToken":false,"kind":40}]},"if (first == null && each == null) {\r\n// Ensure timeout was provided at runtime.\r\nthrow new TypeError('No timeout provided.');\r\n}","return operate((source, subscriber) => {\r\n    // This subscription encapsulates our subscription to the\r\n    // source for this operator. We're capturing it separately,\r\n    // because if there is a `with` observable to fail over to,\r\n    // we want to unsubscribe from our original subscription, and\r\n    // hand of the subscription to that one.\r\n    let originalSourceSubscription: Subscription;\r\n    // The subscription for our timeout timer. This changes\r\n    // every time we get a new value.\r\n    let timerSubscription: Subscription;\r\n    // A bit of state we pass to our with and error factories to\r\n    // tell what the last value we saw was.\r\n    let lastValue: T | null = null;\r\n    // A bit of state we pass to the with and error factories to\r\n    // tell how many values we have seen so far.\r\n    let seen = 0;\r\n    const startTimer = (delay: number) => {\r\n      timerSubscription = executeSchedule(\r\n        subscriber,\r\n        scheduler,\r\n        () => {\r\n          try {\r\n            originalSourceSubscription.unsubscribe();\r\n            innerFrom(\r\n              _with!({\r\n                meta,\r\n                lastValue,\r\n                seen,\r\n              })\r\n            ).subscribe(subscriber);\r\n          } catch (err) {\r\n            subscriber.error(err);\r\n          }\r\n        },\r\n        delay\r\n      );\r\n    };\r\n\r\n    originalSourceSubscription = source.subscribe(\r\n      createOperatorSubscriber(\r\n        subscriber,\r\n        (value: T) => {\r\n          // clear the timer so we can emit and start another one.\r\n          timerSubscription?.unsubscribe();\r\n          seen++;\r\n          // Emit\r\n          subscriber.next((lastValue = value));\r\n          // null | undefined are both < 0. Thanks, JavaScript.\r\n          each! > 0 && startTimer(each!);\r\n        },\r\n        undefined,\r\n        undefined,\r\n        () => {\r\n          if (!timerSubscription?.closed) {\r\n            timerSubscription?.unsubscribe();\r\n          }\r\n          // Be sure not to hold the last value in memory after unsubscription\r\n          // it could be quite large.\r\n          lastValue = null;\r\n        }\r\n      )\r\n    );\r\n\r\n    // Intentionally terse code.\r\n    // If we've `seen` a value, that means the \"first\" clause was met already, if it existed.\r\n    //   it also means that a timer was already started for \"each\" (in the next handler above).\r\n    // If `first` was provided, and it's a number, then use it.\r\n    // If `first` was provided and it's not a number, it's a Date, and we get the difference between it and \"now\".\r\n    // If `first` was not provided at all, then our first timer will be the value from `each`.\r\n    !seen && startTimer(first != null ? (typeof first === 'number' ? first : +first - scheduler!.now()) : each!);\r\n  });"],"parameters":[{"name":"config","type":"number | Date | TimeoutConfig<T, O, M>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"schedulerArg","type":"SchedulerLike","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, T | ObservedValueOf<O>>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"O","kind":39,"isConst":false,"constraint":"ObservableInput<any>","variance":0},{"name":"M","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\n\r\nErrors if Observable does not emit a value in given time span.\r\n\r\n<span class=\"informal\">Timeouts on Observable that doesn't emit values fast enough.</span>\r\n\r\n![](timeout.png)\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link timeoutWith}"},{"kind":25,"tagName":"return","text":"A function that returns an Observable that mirrors behaviour of the\r\nsource Observable, unless timeout happens when it throws an error."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"O","kind":39,"isConst":false,"constraint":"ObservableInput<unknown>","variance":0},{"name":"M","kind":39,"isConst":false,"default":"unknown","variance":0}],"docs":[{"kind":24,"description":"\r\nIf `with` is provided, this will return an observable that will switch to a different observable if the source\r\ndoes not push values within the specified time parameters.\r\n\r\n<span class=\"informal\">The most flexible option for creating a timeout behavior.</span>\r\n\r\nThe first thing to know about the configuration is if you do not provide a `with` property to the configuration,\r\nwhen timeout conditions are met, this operator will emit a {@link TimeoutError}. Otherwise, it will use the factory\r\nfunction provided by `with`, and switch your subscription to the result of that. Timeout conditions are provided by\r\nthe settings in `first` and `each`.\r\n\r\nThe `first` property can be either a `Date` for a specific time, a `number` for a time period relative to the\r\npoint of subscription, or it can be skipped. This property is to check timeout conditions for the arrival of\r\nthe first value from the source _only_. The timings of all subsequent values  from the source will be checked\r\nagainst the time period provided by `each`, if it was provided.\r\n\r\nThe `each` property can be either a `number` or skipped. If a value for `each` is provided, it represents the amount of\r\ntime the resulting observable will wait between the arrival of values from the source before timing out. Note that if\r\n`first` is _not_ provided, the value from `each` will be used to check timeout conditions for the arrival of the first\r\nvalue and all subsequent values. If `first` _is_ provided, `each` will only be use to check all values after the first.\r\n\r\n## Examples\r\n\r\nEmit a custom error if there is too much time between values\r\n\r\n```ts\r\nimport { interval, timeout, throwError } from 'rxjs';\r\n\r\nclass CustomTimeoutError extends Error {\r\n  constructor() {\r\n    super('It was too slow');\r\n    this.name = 'CustomTimeoutError';\r\n  }\r\n}\r\n\r\nconst slow$ = interval(900);\r\n\r\nslow$.pipe(\r\n  timeout({\r\n    each: 1000,\r\n    with: () => throwError(() => new CustomTimeoutError())\r\n  })\r\n)\r\n.subscribe({\r\n  error: console.error\r\n});\r\n```\r\n\r\nSwitch to a faster observable if your source is slow.\r\n\r\n```ts\r\nimport { interval, timeout } from 'rxjs';\r\n\r\nconst slow$ = interval(900);\r\nconst fast$ = interval(500);\r\n\r\nslow$.pipe(\r\n  timeout({\r\n    each: 1000,\r\n    with: () => fast$,\r\n  })\r\n)\r\n.subscribe(console.log);\r\n```","tags":[{"kind":25,"tagName":"param","text":"config The configuration for the timeout."}]}],"hasDeclareKeyword":false,"parameters":[{"name":"config","type":"TimeoutConfig<T, O, M> & { with: (info: TimeoutInfo<T, M>) => O }","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, T | ObservedValueOf<O>>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"timeout","modulePath":"..\\src\\internal\\operators\\timeout.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"M","kind":39,"isConst":false,"default":"unknown","variance":0}],"docs":[{"kind":24,"description":"\r\nReturns an observable that will error or switch to a different observable if the source does not push values\r\nwithin the specified time parameters.\r\n\r\n<span class=\"informal\">The most flexible option for creating a timeout behavior.</span>\r\n\r\nThe first thing to know about the configuration is if you do not provide a `with` property to the configuration,\r\nwhen timeout conditions are met, this operator will emit a {@link TimeoutError}. Otherwise, it will use the factory\r\nfunction provided by `with`, and switch your subscription to the result of that. Timeout conditions are provided by\r\nthe settings in `first` and `each`.\r\n\r\nThe `first` property can be either a `Date` for a specific time, a `number` for a time period relative to the\r\npoint of subscription, or it can be skipped. This property is to check timeout conditions for the arrival of\r\nthe first value from the source _only_. The timings of all subsequent values  from the source will be checked\r\nagainst the time period provided by `each`, if it was provided.\r\n\r\nThe `each` property can be either a `number` or skipped. If a value for `each` is provided, it represents the amount of\r\ntime the resulting observable will wait between the arrival of values from the source before timing out. Note that if\r\n`first` is _not_ provided, the value from `each` will be used to check timeout conditions for the arrival of the first\r\nvalue and all subsequent values. If `first` _is_ provided, `each` will only be use to check all values after the first.\r\n\r\n### Handling TimeoutErrors\r\n\r\nIf no `with` property was provided, subscriptions to the resulting observable may emit an error of {@link TimeoutError}.\r\nThe timeout error provides useful information you can examine when you're handling the error. The most common way to handle\r\nthe error would be with {@link catchError}, although you could use {@link tap} or just the error handler in your `subscribe` call\r\ndirectly, if your error handling is only a side effect (such as notifying the user, or logging).\r\n\r\nIn this case, you would check the error for `instanceof TimeoutError` to validate that the error was indeed from `timeout`, and\r\nnot from some other source. If it's not from `timeout`, you should probably rethrow it if you're in a `catchError`.\r\n\r\n## Examples\r\n\r\nEmit a {@link TimeoutError} if the first value, and _only_ the first value, does not arrive within 5 seconds\r\n\r\n```ts\r\nimport { interval, timeout } from 'rxjs';\r\n\r\n// A random interval that lasts between 0 and 10 seconds per tick\r\nconst source$ = interval(Math.round(Math.random() * 10_000));\r\n\r\nsource$.pipe(\r\n  timeout({ first: 5_000 })\r\n)\r\n.subscribe({\r\n  next: console.log,\r\n  error: console.error\r\n});\r\n```\r\n\r\nEmit a {@link TimeoutError} if the source waits longer than 5 seconds between any two values or the first value\r\nand subscription.\r\n\r\n```ts\r\nimport { timer, timeout, expand } from 'rxjs';\r\n\r\nconst getRandomTime = () => Math.round(Math.random() * 10_000);\r\n\r\n// An observable that waits a random amount of time between each delivered value\r\nconst source$ = timer(getRandomTime())\r\n  .pipe(expand(() => timer(getRandomTime())));\r\n\r\nsource$\r\n  .pipe(timeout({ each: 5_000 }))\r\n  .subscribe({\r\n    next: console.log,\r\n    error: console.error\r\n  });\r\n```\r\n\r\nEmit a {@link TimeoutError} if the source does not emit before 7 seconds, _or_ if the source waits longer than\r\n5 seconds between any two values after the first.\r\n\r\n```ts\r\nimport { timer, timeout, expand } from 'rxjs';\r\n\r\nconst getRandomTime = () => Math.round(Math.random() * 10_000);\r\n\r\n// An observable that waits a random amount of time between each delivered value\r\nconst source$ = timer(getRandomTime())\r\n  .pipe(expand(() => timer(getRandomTime())));\r\n\r\nsource$\r\n  .pipe(timeout({ first: 7_000, each: 5_000 }))\r\n  .subscribe({\r\n    next: console.log,\r\n    error: console.error\r\n  });\r\n```","tags":[]}],"hasDeclareKeyword":false,"parameters":[{"name":"config","type":"Omit<TimeoutConfig<T, any, M>, 'with'>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, T>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"timeout","modulePath":"..\\src\\internal\\operators\\timeout.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nReturns an observable that will error if the source does not push its first value before the specified time passed as a `Date`.\r\nThis is functionally the same as `timeout({ first: someDate })`.\r\n\r\n<span class=\"informal\">Errors if the first value doesn't show up before the given date and time</span>\r\n\r\n![](timeout.png)\r\n","tags":[{"kind":25,"tagName":"param","text":"first The date to at which the resulting observable will timeout if the source observable\r\ndoes not emit at least one value."},{"kind":25,"tagName":"param","text":"scheduler The scheduler to use. Defaults to {@link asyncScheduler}."}]}],"hasDeclareKeyword":false,"parameters":[{"name":"first","type":"Date","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"scheduler","type":"SchedulerLike","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"MonoTypeOperatorFunction<T>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"timeout","modulePath":"..\\src\\internal\\operators\\timeout.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nReturns an observable that will error if the source does not push a value within the specified time in milliseconds.\r\nThis is functionally the same as `timeout({ each: milliseconds })`.\r\n\r\n<span class=\"informal\">Errors if it waits too long between any value</span>\r\n\r\n![](timeout.png)\r\n","tags":[{"kind":25,"tagName":"param","text":"each The time allowed between each pushed value from the source before the resulting observable\r\nwill timeout."},{"kind":25,"tagName":"param","text":"scheduler The scheduler to use. Defaults to {@link asyncScheduler}."}]}],"hasDeclareKeyword":false,"parameters":[{"name":"each","type":"number","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"scheduler","type":"SchedulerLike","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"MonoTypeOperatorFunction<T>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"timeout","modulePath":"..\\src\\internal\\operators\\timeout.ts"}]}}},"usabilityResult":{"index":1}},"..\\src\\internal\\operators\\timeoutWith.ts":{"moduleComponents":{"timeoutWith":{"kind":13,"usabilityResult":{"wordCount":253,"index":1},"sources":{"name":"timeoutWith","statements":[{"isExported":false,"isDefaultExport":false,"hasDeclareKeyword":false,"docs":[],"kind":41,"declarationKind":"let","declarations":[{"name":"first","type":"number | Date | undefined","hasExclamationToken":false,"kind":40}]},{"isExported":false,"isDefaultExport":false,"hasDeclareKeyword":false,"docs":[],"kind":41,"declarationKind":"let","declarations":[{"name":"each","type":"number | undefined","hasExclamationToken":false,"kind":40}]},{"isExported":false,"isDefaultExport":false,"hasDeclareKeyword":false,"docs":[],"kind":41,"declarationKind":"let","declarations":[{"name":"_with","type":"() => ObservableInput<R>","hasExclamationToken":false,"kind":40}]},"scheduler = scheduler ?? async;","if (isValidDate(due)) {\r\nfirst = due;\r\n} else if (typeof due === 'number') {\r\neach = due;\r\n}","if (withObservable) {\r\n_with = () => withObservable;\r\n} else {\r\nthrow new TypeError('No observable provided to switch to');\r\n}","if (first == null && each == null) {\r\n// Ensure timeout was provided at runtime.\r\nthrow new TypeError('No timeout provided.');\r\n}","return timeout<T, ObservableInput<R>>({\r\nfirst,\r\neach,\r\nscheduler,\r\nwith: _with,\r\n});"],"parameters":[{"name":"due","type":"number | Date","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"withObservable","type":"ObservableInput<R>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"scheduler","type":"SchedulerLike","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, T | R>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"R","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nWhen the passed timespan elapses before the source emits any given value, it will unsubscribe from the source,\r\nand switch the subscription to another observable.\r\n\r\n<span class=\"informal\">Used to switch to a different observable if your source is being slow.</span>\r\n\r\nUseful in cases where:\r\n\r\n- You want to switch to a different source that may be faster.\r\n- You want to notify a user that the data stream is slow.\r\n- You want to emit a custom error rather than the {@link TimeoutError} emitted\r\n  by the default usage of {@link timeout}.\r\n\r\nIf the first parameter is passed as Date and the time of the Date arrives before the first value arrives from the source,\r\nit will unsubscribe from the source and switch the subscription to another observable.\r\n\r\n<span class=\"informal\">Use Date object to switch to a different observable if the first value doesn't arrive by a specific time.</span>\r\n\r\nCan be used to set a timeout only for the first value, however it's recommended to use the {@link timeout} operator with\r\nthe `first` configuration to get the same effect.\r\n\r\n## Examples\r\n\r\nFallback to a faster observable\r\n\r\n```ts\r\nimport { interval, timeoutWith } from 'rxjs';\r\n\r\nconst slow$ = interval(1000);\r\nconst faster$ = interval(500);\r\n\r\nslow$\r\n  .pipe(timeoutWith(900, faster$))\r\n  .subscribe(console.log);\r\n```\r\n\r\nEmit your own custom timeout error\r\n\r\n```ts\r\nimport { interval, timeoutWith, throwError } from 'rxjs';\r\n\r\nclass CustomTimeoutError extends Error {\r\n  constructor() {\r\n    super('It was too slow');\r\n    this.name = 'CustomTimeoutError';\r\n  }\r\n}\r\n\r\nconst slow$ = interval(1000);\r\n\r\nslow$\r\n  .pipe(timeoutWith(900, throwError(() => new CustomTimeoutError())))\r\n  .subscribe({\r\n    error: err => console.error(err.message)\r\n  });\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link timeout}"},{"kind":25,"tagName":"param","text":"due When passed a number, used as the time (in milliseconds) allowed between each value from the source before timeout\r\nis triggered. When passed a Date, used as the exact time at which the timeout will be triggered if the first value does not arrive."},{"kind":25,"tagName":"param","text":"withObservable The observable to switch to when timeout occurs."},{"kind":25,"tagName":"param","text":"scheduler The scheduler to use with time-related operations within this operator. Defaults to {@link asyncScheduler}"},{"kind":25,"tagName":"return","text":"A function that returns an Observable that mirrors behaviour of the\r\nsource Observable, unless timeout happens when it starts emitting values\r\nfrom the `ObservableInput` passed as a second parameter."},{"kind":25,"tagName":"deprecated","text":"Replaced with {@link timeout}. Instead of `timeoutWith(100, a$, scheduler)`, use {@link timeout} with the configuration\r\nobject: `timeout({ each: 100, with: () => a$, scheduler })`. Instead of `timeoutWith(someDate, a$, scheduler)`, use {@link timeout}\r\nwith the configuration object: `timeout({ first: someDate, with: () => a$, scheduler })`. Will be removed in v8."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"R","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Replaced with {@link timeout}. Instead of `timeoutWith(someDate, a$, scheduler)`, use the configuration object\r\n`timeout({ first: someDate, with: () => a$, scheduler })`. Will be removed in v8."}]}],"hasDeclareKeyword":false,"parameters":[{"name":"dueBy","type":"Date","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"switchTo","type":"ObservableInput<R>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"scheduler","type":"SchedulerLike","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, T | R>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"timeoutWith","modulePath":"..\\src\\internal\\operators\\timeoutWith.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"R","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"deprecated","text":"Replaced with {@link timeout}. Instead of `timeoutWith(100, a$, scheduler)`, use the configuration object\r\n `timeout({ each: 100, with: () => a$, scheduler })`. Will be removed in v8."}]}],"hasDeclareKeyword":false,"parameters":[{"name":"waitFor","type":"number","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"switchTo","type":"ObservableInput<R>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"scheduler","type":"SchedulerLike","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, T | R>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"timeoutWith","modulePath":"..\\src\\internal\\operators\\timeoutWith.ts"}]}}},"usabilityResult":{"index":1}},"..\\src\\internal\\operators\\timestamp.ts":{"moduleComponents":{"timestamp":{"kind":13,"usabilityResult":{"wordCount":128,"index":1},"sources":{"name":"timestamp","statements":["return map((value: T) => ({ value, timestamp: timestampProvider.now() }));"],"parameters":[{"name":"timestampProvider","initializer":"dateTimestampProvider","type":"TimestampProvider","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, Timestamp<T>>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nAttaches a timestamp to each item emitted by an observable indicating when it was emitted\r\n\r\nThe `timestamp` operator maps the *source* observable stream to an object of type\r\n`{value: T, timestamp: R}`. The properties are generically typed. The `value` property contains the value\r\nand type of the *source* observable. The `timestamp` is generated by the schedulers `now` function. By\r\ndefault, it uses the `asyncScheduler` which simply returns `Date.now()` (milliseconds since 1970/01/01\r\n00:00:00:000) and therefore is of type `number`.\r\n\r\n![](timestamp.png)\r\n\r\n## Example\r\n\r\nIn this example there is a timestamp attached to the document's click events\r\n\r\n```ts\r\nimport { fromEvent, timestamp } from 'rxjs';\r\n\r\nconst clickWithTimestamp = fromEvent(document, 'click').pipe(\r\n  timestamp()\r\n);\r\n\r\n// Emits data of type { value: PointerEvent, timestamp: number }\r\nclickWithTimestamp.subscribe(data => {\r\n  console.log(data);\r\n});\r\n```\r\n","tags":[{"kind":25,"tagName":"param","text":"timestampProvider An object with a `now()` method used to get the current timestamp."},{"kind":25,"tagName":"return","text":"A function that returns an Observable that attaches a timestamp to\r\neach item emitted by the source Observable indicating when it was emitted."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[],"functionName":"timestamp","modulePath":"..\\src\\internal\\operators\\timestamp.ts"}}},"usabilityResult":{"index":1}},"..\\src\\internal\\operators\\toArray.ts":{"moduleComponents":{"toArray":{"kind":13,"usabilityResult":{"wordCount":91,"index":1},"sources":{"name":"toArray","statements":["return operate((source, subscriber) => {\r\nreduce(arrReducer, [] as T[])(source).subscribe(subscriber);\r\n});"],"parameters":[],"returnType":"OperatorFunction<T, T[]>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nCollects all source emissions and emits them as an array when the source completes.\r\n\r\n<span class=\"informal\">Get all values inside an array when the source completes</span>\r\n\r\n![](toArray.png)\r\n\r\n`toArray` will wait until the source Observable completes before emitting\r\nthe array containing all emissions. When the source Observable errors no\r\narray will be emitted.\r\n\r\n## Example\r\n\r\n```ts\r\nimport { interval, take, toArray } from 'rxjs';\r\n\r\nconst source = interval(1000);\r\nconst example = source.pipe(\r\n  take(10),\r\n  toArray()\r\n);\r\n\r\nexample.subscribe(value => console.log(value));\r\n\r\n// output: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\r\n```\r\n","tags":[{"kind":25,"tagName":"return","text":"A function that returns an Observable that emits an array of items\r\nemitted by the source Observable when source completes."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[],"functionName":"toArray","modulePath":"..\\src\\internal\\operators\\toArray.ts"}}},"usabilityResult":{"index":1}},"..\\src\\internal\\operators\\window.ts":{"moduleComponents":{"window":{"kind":13,"usabilityResult":{"wordCount":164,"index":1},"sources":{"name":"window","statements":["return operate((source, subscriber) => {\r\n    let windowSubject: Subject<T> = new Subject<T>();\r\n\r\n    subscriber.next(windowSubject.asObservable());\r\n\r\n    const errorHandler = (err: any) => {\r\n      windowSubject.error(err);\r\n      subscriber.error(err);\r\n    };\r\n\r\n    // Subscribe to our source\r\n    source.subscribe(\r\n      createOperatorSubscriber(\r\n        subscriber,\r\n        (value) => windowSubject?.next(value),\r\n        () => {\r\n          windowSubject.complete();\r\n          subscriber.complete();\r\n        },\r\n        errorHandler\r\n      )\r\n    );\r\n\r\n    // Subscribe to the window boundaries.\r\n    innerFrom(windowBoundaries).subscribe(\r\n      createOperatorSubscriber(\r\n        subscriber,\r\n        () => {\r\n          windowSubject.complete();\r\n          subscriber.next((windowSubject = new Subject()));\r\n        },\r\n        noop,\r\n        errorHandler\r\n      )\r\n    );\r\n\r\n    return () => {\r\n      // Unsubscribing the subject ensures that anyone who has captured\r\n      // a reference to this window that tries to use it after it can\r\n      // no longer get values from the source will get an ObjectUnsubscribedError.\r\n      windowSubject?.unsubscribe();\r\n      windowSubject = null!;\r\n    };\r\n  });"],"parameters":[{"name":"windowBoundaries","type":"ObservableInput<any>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, Observable<T>>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nBranch out the source Observable values as a nested Observable whenever\r\n`windowBoundaries` emits.\r\n\r\n<span class=\"informal\">It's like {@link buffer}, but emits a nested Observable\r\ninstead of an array.</span>\r\n\r\n![](window.png)\r\n\r\nReturns an Observable that emits windows of items it collects from the source\r\nObservable. The output Observable emits connected, non-overlapping\r\nwindows. It emits the current window and opens a new one whenever the\r\n`windowBoundaries` emits an item. `windowBoundaries` can be any type that\r\n`ObservableInput` accepts. It internally gets converted to an Observable.\r\nBecause each window is an Observable, the output is a higher-order Observable.\r\n\r\n## Example\r\n\r\nIn every window of 1 second each, emit at most 2 click events\r\n\r\n```ts\r\nimport { fromEvent, interval, window, map, take, mergeAll } from 'rxjs';\r\n\r\nconst clicks = fromEvent(document, 'click');\r\nconst sec = interval(1000);\r\nconst result = clicks.pipe(\r\n  window(sec),\r\n  map(win => win.pipe(take(2))), // take at most 2 emissions from each window\r\n  mergeAll()                     // flatten the Observable-of-Observables\r\n);\r\nresult.subscribe(x => console.log(x));\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link windowCount}"},{"kind":25,"tagName":"see","text":"{@link windowTime}"},{"kind":25,"tagName":"see","text":"{@link windowToggle}"},{"kind":25,"tagName":"see","text":"{@link windowWhen}"},{"kind":25,"tagName":"see","text":"{@link buffer}"},{"kind":25,"tagName":"param","text":"windowBoundaries An `ObservableInput` that completes the\r\nprevious window and starts a new window."},{"kind":25,"tagName":"return","text":"A function that returns an Observable of windows, which are\r\nObservables emitting values of the source Observable."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[],"functionName":"window","modulePath":"..\\src\\internal\\operators\\window.ts"}}},"usabilityResult":{"index":1}},"..\\src\\internal\\operators\\windowCount.ts":{"moduleComponents":{"windowCount":{"kind":13,"usabilityResult":{"wordCount":213,"index":1},"sources":{"name":"windowCount","statements":[{"isExported":false,"isDefaultExport":false,"hasDeclareKeyword":false,"docs":[],"kind":41,"declarationKind":"const","declarations":[{"name":"startEvery","initializer":"startWindowEvery > 0 ? startWindowEvery : windowSize","hasExclamationToken":false,"kind":40}]},"return operate((source, subscriber) => {\r\n    let windows = [new Subject<T>()];\r\n    let starts: number[] = [];\r\n    let count = 0;\r\n\r\n    // Open the first window.\r\n    subscriber.next(windows[0].asObservable());\r\n\r\n    source.subscribe(\r\n      createOperatorSubscriber(\r\n        subscriber,\r\n        (value: T) => {\r\n          // Emit the value through all current windows.\r\n          // We don't need to create a new window yet, we\r\n          // do that as soon as we close one.\r\n          for (const window of windows) {\r\n            window.next(value);\r\n          }\r\n          // Here we're using the size of the window array to figure\r\n          // out if the oldest window has emitted enough values. We can do this\r\n          // because the size of the window array is a function of the values\r\n          // seen by the subscription. If it's time to close it, we complete\r\n          // it and remove it.\r\n          const c = count - windowSize + 1;\r\n          if (c >= 0 && c % startEvery === 0) {\r\n            windows.shift()!.complete();\r\n          }\r\n\r\n          // Look to see if the next count tells us it's time to open a new window.\r\n          // TODO: We need to figure out if this really makes sense. We're technically\r\n          // emitting windows *before* we have a value to emit them for. It's probably\r\n          // more expected that we should be emitting the window when the start\r\n          // count is reached -- not before.\r\n          if (++count % startEvery === 0) {\r\n            const window = new Subject<T>();\r\n            windows.push(window);\r\n            subscriber.next(window.asObservable());\r\n          }\r\n        },\r\n        () => {\r\n          while (windows.length > 0) {\r\n            windows.shift()!.complete();\r\n          }\r\n          subscriber.complete();\r\n        },\r\n        (err) => {\r\n          while (windows.length > 0) {\r\n            windows.shift()!.error(err);\r\n          }\r\n          subscriber.error(err);\r\n        },\r\n        () => {\r\n          starts = null!;\r\n          windows = null!;\r\n        }\r\n      )\r\n    );\r\n  });"],"parameters":[{"name":"windowSize","type":"number","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"startWindowEvery","initializer":"0","type":"number","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, Observable<T>>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nBranch out the source Observable values as a nested Observable with each\r\nnested Observable emitting at most `windowSize` values.\r\n\r\n<span class=\"informal\">It's like {@link bufferCount}, but emits a nested\r\nObservable instead of an array.</span>\r\n\r\n![](windowCount.png)\r\n\r\nReturns an Observable that emits windows of items it collects from the source\r\nObservable. The output Observable emits windows every `startWindowEvery`\r\nitems, each containing no more than `windowSize` items. When the source\r\nObservable completes or encounters an error, the output Observable emits\r\nthe current window and propagates the notification from the source\r\nObservable. If `startWindowEvery` is not provided, then new windows are\r\nstarted immediately at the start of the source and when each window completes\r\nwith size `windowSize`.\r\n\r\n## Examples\r\n\r\nIgnore every 3rd click event, starting from the first one\r\n\r\n```ts\r\nimport { fromEvent, windowCount, map, skip, mergeAll } from 'rxjs';\r\n\r\nconst clicks = fromEvent(document, 'click');\r\nconst result = clicks.pipe(\r\n  windowCount(3),\r\n  map(win => win.pipe(skip(1))), // skip first of every 3 clicks\r\n  mergeAll()                     // flatten the Observable-of-Observables\r\n);\r\nresult.subscribe(x => console.log(x));\r\n```\r\n\r\nIgnore every 3rd click event, starting from the third one\r\n\r\n```ts\r\nimport { fromEvent, windowCount, mergeAll } from 'rxjs';\r\n\r\nconst clicks = fromEvent(document, 'click');\r\nconst result = clicks.pipe(\r\n  windowCount(2, 3),\r\n  mergeAll() // flatten the Observable-of-Observables\r\n);\r\nresult.subscribe(x => console.log(x));\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link window}"},{"kind":25,"tagName":"see","text":"{@link windowTime}"},{"kind":25,"tagName":"see","text":"{@link windowToggle}"},{"kind":25,"tagName":"see","text":"{@link windowWhen}"},{"kind":25,"tagName":"see","text":"{@link bufferCount}"},{"kind":25,"tagName":"param","text":"{number} windowSize The maximum number of values emitted by each\r\nwindow."},{"kind":25,"tagName":"param","text":"{number} [startWindowEvery] Interval at which to start a new window.\r\nFor example if `startWindowEvery` is `2`, then a new window will be started\r\non every other value from the source. A new window is started at the\r\nbeginning of the source by default."},{"kind":25,"tagName":"return","text":"A function that returns an Observable of windows, which in turn are\r\nObservable of values."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[],"functionName":"windowCount","modulePath":"..\\src\\internal\\operators\\windowCount.ts"}}},"usabilityResult":{"index":1}},"..\\src\\internal\\operators\\windowTime.ts":{"moduleComponents":{"windowTime":{"kind":13,"usabilityResult":{"wordCount":328,"index":1},"sources":{"name":"windowTime","statements":[{"isExported":false,"isDefaultExport":false,"hasDeclareKeyword":false,"docs":[],"kind":41,"declarationKind":"const","declarations":[{"name":"scheduler","initializer":"popScheduler(otherArgs) ?? asyncScheduler","hasExclamationToken":false,"kind":40}]},{"isExported":false,"isDefaultExport":false,"hasDeclareKeyword":false,"docs":[],"kind":41,"declarationKind":"const","declarations":[{"name":"windowCreationInterval","initializer":"(otherArgs[0] as number) ?? null","hasExclamationToken":false,"kind":40}]},{"isExported":false,"isDefaultExport":false,"hasDeclareKeyword":false,"docs":[],"kind":41,"declarationKind":"const","declarations":[{"name":"maxWindowSize","initializer":"(otherArgs[1] as number) || Infinity","hasExclamationToken":false,"kind":40}]},"return operate((source, subscriber) => {\r\n    // The active windows, their related subscriptions, and removal functions.\r\n    let windowRecords: WindowRecord<T>[] | null = [];\r\n    // If true, it means that every time we close a window, we want to start a new window.\r\n    // This is only really used for when *just* the time span is passed.\r\n    let restartOnClose = false;\r\n\r\n    const closeWindow = (record: { window: Subject<T>; subs: Subscription }) => {\r\n      const { window, subs } = record;\r\n      window.complete();\r\n      subs.unsubscribe();\r\n      arrRemove(windowRecords, record);\r\n      restartOnClose && startWindow();\r\n    };\r\n\r\n    /**\r\n     * Called every time we start a new window. This also does\r\n     * the work of scheduling the job to close the window.\r\n     */\r\n    const startWindow = () => {\r\n      if (windowRecords) {\r\n        const subs = new Subscription();\r\n        subscriber.add(subs);\r\n        const window = new Subject<T>();\r\n        const record = {\r\n          window,\r\n          subs,\r\n          seen: 0,\r\n        };\r\n        windowRecords.push(record);\r\n        subscriber.next(window.asObservable());\r\n        executeSchedule(subs, scheduler, () => closeWindow(record), windowTimeSpan);\r\n      }\r\n    };\r\n\r\n    if (windowCreationInterval !== null && windowCreationInterval >= 0) {\r\n      // The user passed both a windowTimeSpan (required), and a creation interval\r\n      // That means we need to start new window on the interval, and those windows need\r\n      // to wait the required time span before completing.\r\n      executeSchedule(subscriber, scheduler, startWindow, windowCreationInterval, true);\r\n    } else {\r\n      restartOnClose = true;\r\n    }\r\n\r\n    startWindow();\r\n\r\n    /**\r\n     * We need to loop over a copy of the window records several times in this operator.\r\n     * This is to save bytes over the wire more than anything.\r\n     * The reason we copy the array is that reentrant code could mutate the array while\r\n     * we are iterating over it.\r\n     */\r\n    const loop = (cb: (record: WindowRecord<T>) => void) => windowRecords!.slice().forEach(cb);\r\n\r\n    /**\r\n     * Used to notify all of the windows and the subscriber in the same way\r\n     * in the error and complete handlers.\r\n     */\r\n    const terminate = (cb: (consumer: Observer<any>) => void) => {\r\n      loop(({ window }) => cb(window));\r\n      cb(subscriber);\r\n      subscriber.unsubscribe();\r\n    };\r\n\r\n    source.subscribe(\r\n      createOperatorSubscriber(\r\n        subscriber,\r\n        (value: T) => {\r\n          // Notify all windows of the value.\r\n          loop((record) => {\r\n            record.window.next(value);\r\n            // If the window is over the max size, we need to close it.\r\n            maxWindowSize <= ++record.seen && closeWindow(record);\r\n          });\r\n        },\r\n        // Complete the windows and the downstream subscriber and clean up.\r\n        () => terminate((consumer) => consumer.complete()),\r\n        // Notify the windows and the downstream subscriber of the error and clean up.\r\n        (err) => terminate((consumer) => consumer.error(err))\r\n      )\r\n    );\r\n\r\n    // Additional finalization. This will be called when the\r\n    // destination tears down. Other finalizations are registered implicitly\r\n    // above via subscription.\r\n    return () => {\r\n      // Ensure that the buffer is released.\r\n      windowRecords = null!;\r\n    };\r\n  });"],"parameters":[{"name":"windowTimeSpan","type":"number","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"otherArgs","type":"any[]","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":true}],"returnType":"OperatorFunction<T, Observable<T>>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nBranch out the source Observable values as a nested Observable periodically\r\nin time.\r\n\r\n<span class=\"informal\">It's like {@link bufferTime}, but emits a nested\r\nObservable instead of an array.</span>\r\n\r\n![](windowTime.png)\r\n\r\nReturns an Observable that emits windows of items it collects from the source\r\nObservable. The output Observable starts a new window periodically, as\r\ndetermined by the `windowCreationInterval` argument. It emits each window\r\nafter a fixed timespan, specified by the `windowTimeSpan` argument. When the\r\nsource Observable completes or encounters an error, the output Observable\r\nemits the current window and propagates the notification from the source\r\nObservable. If `windowCreationInterval` is not provided, the output\r\nObservable starts a new window when the previous window of duration\r\n`windowTimeSpan` completes. If `maxWindowCount` is provided, each window\r\nwill emit at most fixed number of values. Window will complete immediately\r\nafter emitting last value and next one still will open as specified by\r\n`windowTimeSpan` and `windowCreationInterval` arguments.\r\n\r\n## Examples\r\n\r\nIn every window of 1 second each, emit at most 2 click events\r\n\r\n```ts\r\nimport { fromEvent, windowTime, map, take, mergeAll } from 'rxjs';\r\n\r\nconst clicks = fromEvent(document, 'click');\r\nconst result = clicks.pipe(\r\n  windowTime(1000),\r\n  map(win => win.pipe(take(2))), // take at most 2 emissions from each window\r\n  mergeAll()                     // flatten the Observable-of-Observables\r\n);\r\nresult.subscribe(x => console.log(x));\r\n```\r\n\r\nEvery 5 seconds start a window 1 second long, and emit at most 2 click events per window\r\n\r\n```ts\r\nimport { fromEvent, windowTime, map, take, mergeAll } from 'rxjs';\r\n\r\nconst clicks = fromEvent(document, 'click');\r\nconst result = clicks.pipe(\r\n  windowTime(1000, 5000),\r\n  map(win => win.pipe(take(2))), // take at most 2 emissions from each window\r\n  mergeAll()                     // flatten the Observable-of-Observables\r\n);\r\nresult.subscribe(x => console.log(x));\r\n```\r\n\r\nSame as example above but with `maxWindowCount` instead of `take`\r\n\r\n```ts\r\nimport { fromEvent, windowTime, mergeAll } from 'rxjs';\r\n\r\nconst clicks = fromEvent(document, 'click');\r\nconst result = clicks.pipe(\r\n  windowTime(1000, 5000, 2), // take at most 2 emissions from each window\r\n  mergeAll()                 // flatten the Observable-of-Observables\r\n);\r\nresult.subscribe(x => console.log(x));\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link window}"},{"kind":25,"tagName":"see","text":"{@link windowCount}"},{"kind":25,"tagName":"see","text":"{@link windowToggle}"},{"kind":25,"tagName":"see","text":"{@link windowWhen}"},{"kind":25,"tagName":"see","text":"{@link bufferTime}"},{"kind":25,"tagName":"param","text":"windowTimeSpan The amount of time, in milliseconds, to fill each window."},{"kind":25,"tagName":"param","text":"windowCreationInterval The interval at which to start new\r\nwindows."},{"kind":25,"tagName":"param","text":"maxWindowSize Max number of\r\nvalues each window can emit before completion."},{"kind":25,"tagName":"param","text":"scheduler The scheduler on which to schedule the\r\nintervals that determine window boundaries."},{"kind":25,"tagName":"return","text":"A function that returns an Observable of windows, which in turn are\r\nObservables."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"windowTimeSpan","type":"number","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"scheduler","type":"SchedulerLike","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, Observable<T>>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"windowTime","modulePath":"..\\src\\internal\\operators\\windowTime.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"windowTimeSpan","type":"number","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"windowCreationInterval","type":"number","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"scheduler","type":"SchedulerLike","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, Observable<T>>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"windowTime","modulePath":"..\\src\\internal\\operators\\windowTime.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"windowTimeSpan","type":"number","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"windowCreationInterval","type":"number | null | void","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"maxWindowSize","type":"number","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"scheduler","type":"SchedulerLike","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, Observable<T>>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"windowTime","modulePath":"..\\src\\internal\\operators\\windowTime.ts"}]}}},"usabilityResult":{"index":1}},"..\\src\\internal\\operators\\windowToggle.ts":{"moduleComponents":{"windowToggle":{"kind":13,"usabilityResult":{"wordCount":141,"index":1},"sources":{"name":"windowToggle","statements":["return operate((source, subscriber) => {\r\n    const windows: Subject<T>[] = [];\r\n\r\n    const handleError = (err: any) => {\r\n      while (0 < windows.length) {\r\n        windows.shift()!.error(err);\r\n      }\r\n      subscriber.error(err);\r\n    };\r\n\r\n    innerFrom(openings).subscribe(\r\n      createOperatorSubscriber(\r\n        subscriber,\r\n        (openValue) => {\r\n          const window = new Subject<T>();\r\n          windows.push(window);\r\n          const closingSubscription = new Subscription();\r\n          const closeWindow = () => {\r\n            arrRemove(windows, window);\r\n            window.complete();\r\n            closingSubscription.unsubscribe();\r\n          };\r\n\r\n          let closingNotifier: Observable<any>;\r\n          try {\r\n            closingNotifier = innerFrom(closingSelector(openValue));\r\n          } catch (err) {\r\n            handleError(err);\r\n            return;\r\n          }\r\n\r\n          subscriber.next(window.asObservable());\r\n\r\n          closingSubscription.add(closingNotifier.subscribe(createOperatorSubscriber(subscriber, closeWindow, noop, handleError)));\r\n        },\r\n        noop\r\n      )\r\n    );\r\n\r\n    // Subscribe to the source to get things started.\r\n    source.subscribe(\r\n      createOperatorSubscriber(\r\n        subscriber,\r\n        (value: T) => {\r\n          // Copy the windows array before we emit to\r\n          // make sure we don't have issues with reentrant code.\r\n          const windowsCopy = windows.slice();\r\n          for (const window of windowsCopy) {\r\n            window.next(value);\r\n          }\r\n        },\r\n        () => {\r\n          // Complete all of our windows before we complete.\r\n          while (0 < windows.length) {\r\n            windows.shift()!.complete();\r\n          }\r\n          subscriber.complete();\r\n        },\r\n        handleError,\r\n        () => {\r\n          // Add this finalization so that all window subjects are\r\n          // disposed of. This way, if a user tries to subscribe\r\n          // to a window *after* the outer subscription has been unsubscribed,\r\n          // they will get an error, instead of waiting forever to\r\n          // see if a value arrives.\r\n          while (0 < windows.length) {\r\n            windows.shift()!.unsubscribe();\r\n          }\r\n        }\r\n      )\r\n    );\r\n  });"],"parameters":[{"name":"openings","type":"ObservableInput<O>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"closingSelector","type":"(openValue: O) => ObservableInput<any>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, Observable<T>>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"O","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nBranch out the source Observable values as a nested Observable starting from\r\nan emission from `openings` and ending when the output of `closingSelector`\r\nemits.\r\n\r\n<span class=\"informal\">It's like {@link bufferToggle}, but emits a nested\r\nObservable instead of an array.</span>\r\n\r\n![](windowToggle.png)\r\n\r\nReturns an Observable that emits windows of items it collects from the source\r\nObservable. The output Observable emits windows that contain those items\r\nemitted by the source Observable between the time when the `openings`\r\nObservable emits an item and when the Observable returned by\r\n`closingSelector` emits an item.\r\n\r\n## Example\r\n\r\nEvery other second, emit the click events from the next 500ms\r\n\r\n```ts\r\nimport { fromEvent, interval, windowToggle, EMPTY, mergeAll } from 'rxjs';\r\n\r\nconst clicks = fromEvent(document, 'click');\r\nconst openings = interval(1000);\r\nconst result = clicks.pipe(\r\n  windowToggle(openings, i => i % 2 ? interval(500) : EMPTY),\r\n  mergeAll()\r\n);\r\nresult.subscribe(x => console.log(x));\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link window}"},{"kind":25,"tagName":"see","text":"{@link windowCount}"},{"kind":25,"tagName":"see","text":"{@link windowTime}"},{"kind":25,"tagName":"see","text":"{@link windowWhen}"},{"kind":25,"tagName":"see","text":"{@link bufferToggle}"},{"kind":25,"tagName":"param","text":"{Observable<O>} openings An observable of notifications to start new\r\nwindows."},{"kind":25,"tagName":"param","text":"{function(value: O): Observable} closingSelector A function that takes\r\nthe value emitted by the `openings` observable and returns an Observable,\r\nwhich, when it emits a next notification, signals that the\r\nassociated window should complete."},{"kind":25,"tagName":"return","text":"A function that returns an Observable of windows, which in turn are\r\nObservables."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[],"functionName":"windowToggle","modulePath":"..\\src\\internal\\operators\\windowToggle.ts"}}},"usabilityResult":{"index":1}},"..\\src\\internal\\operators\\windowWhen.ts":{"moduleComponents":{"windowWhen":{"kind":13,"usabilityResult":{"wordCount":168,"index":1},"sources":{"name":"windowWhen","statements":["return operate((source, subscriber) => {\r\n    let window: Subject<T> | null;\r\n    let closingSubscriber: Subscriber<any> | undefined;\r\n\r\n    /**\r\n     * When we get an error, we have to notify both the\r\n     * destination subscriber and the window.\r\n     */\r\n    const handleError = (err: any) => {\r\n      window!.error(err);\r\n      subscriber.error(err);\r\n    };\r\n\r\n    /**\r\n     * Called every time we need to open a window.\r\n     * Recursive, as it will start the closing notifier, which\r\n     * inevitably *should* call openWindow -- but may not if\r\n     * it is a \"never\" observable.\r\n     */\r\n    const openWindow = () => {\r\n      // We need to clean up our closing subscription,\r\n      // we only cared about the first next or complete notification.\r\n      closingSubscriber?.unsubscribe();\r\n\r\n      // Close our window before starting a new one.\r\n      window?.complete();\r\n\r\n      // Start the new window.\r\n      window = new Subject<T>();\r\n      subscriber.next(window.asObservable());\r\n\r\n      // Get our closing notifier.\r\n      let closingNotifier: Observable<any>;\r\n      try {\r\n        closingNotifier = innerFrom(closingSelector());\r\n      } catch (err) {\r\n        handleError(err);\r\n        return;\r\n      }\r\n\r\n      // Subscribe to the closing notifier, be sure\r\n      // to capture the subscriber (aka Subscription)\r\n      // so we can clean it up when we close the window\r\n      // and open a new one.\r\n      closingNotifier.subscribe((closingSubscriber = createOperatorSubscriber(subscriber, openWindow, openWindow, handleError)));\r\n    };\r\n\r\n    // Start the first window.\r\n    openWindow();\r\n\r\n    // Subscribe to the source\r\n    source.subscribe(\r\n      createOperatorSubscriber(\r\n        subscriber,\r\n        (value) => window!.next(value),\r\n        () => {\r\n          // The source completed, close the window and complete.\r\n          window!.complete();\r\n          subscriber.complete();\r\n        },\r\n        handleError,\r\n        () => {\r\n          // Be sure to clean up our closing subscription\r\n          // when this tears down.\r\n          closingSubscriber?.unsubscribe();\r\n          window = null!;\r\n        }\r\n      )\r\n    );\r\n  });"],"parameters":[{"name":"closingSelector","type":"() => ObservableInput<any>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<T, Observable<T>>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nBranch out the source Observable values as a nested Observable using a\r\nfactory function of closing Observables to determine when to start a new\r\nwindow.\r\n\r\n<span class=\"informal\">It's like {@link bufferWhen}, but emits a nested\r\nObservable instead of an array.</span>\r\n\r\n![](windowWhen.png)\r\n\r\nReturns an Observable that emits windows of items it collects from the source\r\nObservable. The output Observable emits connected, non-overlapping windows.\r\nIt emits the current window and opens a new one whenever the Observable\r\nproduced by the specified `closingSelector` function emits an item. The first\r\nwindow is opened immediately when subscribing to the output Observable.\r\n\r\n## Example\r\n\r\nEmit only the first two clicks events in every window of [1-5] random seconds\r\n\r\n```ts\r\nimport { fromEvent, windowWhen, interval, map, take, mergeAll } from 'rxjs';\r\n\r\nconst clicks = fromEvent(document, 'click');\r\nconst result = clicks.pipe(\r\n  windowWhen(() => interval(1000 + Math.random() * 4000)),\r\n  map(win => win.pipe(take(2))), // take at most 2 emissions from each window\r\n  mergeAll()                     // flatten the Observable-of-Observables\r\n);\r\nresult.subscribe(x => console.log(x));\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link window}"},{"kind":25,"tagName":"see","text":"{@link windowCount}"},{"kind":25,"tagName":"see","text":"{@link windowTime}"},{"kind":25,"tagName":"see","text":"{@link windowToggle}"},{"kind":25,"tagName":"see","text":"{@link bufferWhen}"},{"kind":25,"tagName":"param","text":"{function(): Observable} closingSelector A function that takes no\r\narguments and returns an Observable that signals (on either `next` or\r\n`complete`) when to close the previous window and start a new one."},{"kind":25,"tagName":"return","text":"A function that returns an Observable of windows, which in turn are\r\nObservables."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[],"functionName":"windowWhen","modulePath":"..\\src\\internal\\operators\\windowWhen.ts"}}},"usabilityResult":{"index":1}},"..\\src\\internal\\operators\\withLatestFrom.ts":{"moduleComponents":{"withLatestFrom":{"kind":13,"usabilityResult":{"wordCount":165,"index":1},"sources":{"name":"withLatestFrom","statements":[{"isExported":false,"isDefaultExport":false,"hasDeclareKeyword":false,"docs":[],"kind":41,"declarationKind":"const","declarations":[{"name":"project","initializer":"popResultSelector(inputs) as ((...args: any[]) => R) | undefined","hasExclamationToken":false,"kind":40}]},"return operate((source, subscriber) => {\r\n    const len = inputs.length;\r\n    const otherValues = new Array(len);\r\n    // An array of whether or not the other sources have emitted. Matched with them by index.\r\n    // TODO: At somepoint, we should investigate the performance implications here, and look\r\n    // into using a `Set()` and checking the `size` to see if we're ready.\r\n    let hasValue = inputs.map(() => false);\r\n    // Flipped true when we have at least one value from all other sources and\r\n    // we are ready to start emitting values.\r\n    let ready = false;\r\n\r\n    // Other sources. Note that here we are not checking `subscriber.closed`,\r\n    // this causes all inputs to be subscribed to, even if nothing can be emitted\r\n    // from them. This is an important distinction because subscription constitutes\r\n    // a side-effect.\r\n    for (let i = 0; i < len; i++) {\r\n      innerFrom(inputs[i]).subscribe(\r\n        createOperatorSubscriber(\r\n          subscriber,\r\n          (value) => {\r\n            otherValues[i] = value;\r\n            if (!ready && !hasValue[i]) {\r\n              // If we're not ready yet, flag to show this observable has emitted.\r\n              hasValue[i] = true;\r\n              // Intentionally terse code.\r\n              // If all of our other observables have emitted, set `ready` to `true`,\r\n              // so we know we can start emitting values, then clean up the `hasValue` array,\r\n              // because we don't need it anymore.\r\n              (ready = hasValue.every(identity)) && (hasValue = null!);\r\n            }\r\n          },\r\n          // Completing one of the other sources has\r\n          // no bearing on the completion of our result.\r\n          noop\r\n        )\r\n      );\r\n    }\r\n\r\n    // Source subscription\r\n    source.subscribe(\r\n      createOperatorSubscriber(subscriber, (value) => {\r\n        if (ready) {\r\n          // We have at least one value from the other sources. Go ahead and emit.\r\n          const values = [value, ...otherValues];\r\n          subscriber.next(project ? project(...values) : values);\r\n        }\r\n      })\r\n    );\r\n  });"],"parameters":[{"name":"inputs","type":"any[]","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":true}],"returnType":"OperatorFunction<T, R | any[]>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"R","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nCombines the source Observable with other Observables to create an Observable\r\nwhose values are calculated from the latest values of each, only when the\r\nsource emits.\r\n\r\n<span class=\"informal\">Whenever the source Observable emits a value, it\r\ncomputes a formula using that value plus the latest values from other input\r\nObservables, then emits the output of that formula.</span>\r\n\r\n![](withLatestFrom.png)\r\n\r\n`withLatestFrom` combines each value from the source Observable (the\r\ninstance) with the latest values from the other input Observables only when\r\nthe source emits a value, optionally using a `project` function to determine\r\nthe value to be emitted on the output Observable. All input Observables must\r\nemit at least one value before the output Observable will emit a value.\r\n\r\n## Example\r\n\r\nOn every click event, emit an array with the latest timer event plus the click event\r\n\r\n```ts\r\nimport { fromEvent, interval, withLatestFrom } from 'rxjs';\r\n\r\nconst clicks = fromEvent(document, 'click');\r\nconst timer = interval(1000);\r\nconst result = clicks.pipe(withLatestFrom(timer));\r\nresult.subscribe(x => console.log(x));\r\n```\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link combineLatest}"},{"kind":25,"tagName":"param","text":"{ObservableInput} other An input Observable to combine with the source\r\nObservable. More than one input Observables may be given as argument."},{"kind":25,"tagName":"param","text":"{Function} [project] Projection function for combining values\r\ntogether. Receives all values in order of the Observables passed, where the\r\nfirst parameter is a value from the source Observable. (e.g.\r\n`a.pipe(withLatestFrom(b, c), map(([a1, b1, c1]) => a1 + b1 + c1))`). If this is not\r\npassed, arrays will be emitted on the output Observable."},{"kind":25,"tagName":"return","text":"A function that returns an Observable of projected values from the\r\nmost recent values from each input Observable, or an array of the most\r\nrecent values from each input Observable."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"O","kind":39,"isConst":false,"constraint":"unknown[]","variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"inputs","type":"[...ObservableInputTuple<O>]","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":true}],"returnType":"OperatorFunction<T, [T, ...O]>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"withLatestFrom","modulePath":"..\\src\\internal\\operators\\withLatestFrom.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"O","kind":39,"isConst":false,"constraint":"unknown[]","variance":0},{"name":"R","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"inputs","type":"[...ObservableInputTuple<O>, (...value: [T, ...O]) => R]","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":true}],"returnType":"OperatorFunction<T, R>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"withLatestFrom","modulePath":"..\\src\\internal\\operators\\withLatestFrom.ts"}]}}},"usabilityResult":{"index":1}},"..\\src\\internal\\operators\\zipAll.ts":{"moduleComponents":{"zipAll":{"kind":13,"usabilityResult":{"wordCount":27,"index":0.54},"sources":{"name":"zipAll","statements":["return joinAllInternals(zip, project);"],"parameters":[{"name":"project","type":"(...values: T[]) => R","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"R","kind":39,"isConst":false,"variance":0}],"docs":[],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nCollects all observable inner sources from the source, once the source completes,\r\nit will subscribe to all inner sources, combining their values by index and emitting\r\nthem.\r\n","tags":[{"kind":25,"tagName":"see","text":"{@link zipWith}"},{"kind":25,"tagName":"see","text":"{@link zip}"}]}],"hasDeclareKeyword":false,"parameters":[],"returnType":"OperatorFunction<ObservableInput<T>, T[]>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"zipAll","modulePath":"..\\src\\internal\\operators\\zipAll.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[],"returnType":"OperatorFunction<any, T[]>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"zipAll","modulePath":"..\\src\\internal\\operators\\zipAll.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"R","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"project","type":"(...values: T[]) => R","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<ObservableInput<T>, R>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"zipAll","modulePath":"..\\src\\internal\\operators\\zipAll.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"R","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"project","type":"(...values: Array<any>) => R","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"OperatorFunction<any, R>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"zipAll","modulePath":"..\\src\\internal\\operators\\zipAll.ts"}]}}},"usabilityResult":{"index":0.54}},"..\\src\\internal\\operators\\zipWith.ts":{"moduleComponents":{"zipWith":{"kind":13,"usabilityResult":{"wordCount":178,"index":1},"sources":{"name":"zipWith","statements":["return zip(...otherInputs);"],"parameters":[{"name":"otherInputs","type":"[...ObservableInputTuple<A>]","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":true}],"returnType":"OperatorFunction<T, Cons<T, A>>","typeParameters":[{"name":"T","kind":39,"isConst":false,"variance":0},{"name":"A","kind":39,"isConst":false,"constraint":"readonly unknown[]","variance":0}],"docs":[{"kind":24,"description":"\r\nSubscribes to the source, and the observable inputs provided as arguments, and combines their values, by index, into arrays.\r\n\r\nWhat is meant by \"combine by index\": The first value from each will be made into a single array, then emitted,\r\nthen the second value from each will be combined into a single array and emitted, then the third value\r\nfrom each will be combined into a single array and emitted, and so on.\r\n\r\nThis will continue until it is no longer able to combine values of the same index into an array.\r\n\r\nAfter the last value from any one completed source is emitted in an array, the resulting observable will complete,\r\nas there is no way to continue \"zipping\" values together by index.\r\n\r\nUse-cases for this operator are limited. There are memory concerns if one of the streams is emitting\r\nvalues at a much faster rate than the others. Usage should likely be limited to streams that emit\r\nat a similar pace, or finite streams of known length.\r\n\r\nIn many cases, authors want `combineLatestWith` and not `zipWith`.\r\n","tags":[{"kind":25,"tagName":"param","text":"otherInputs other observable inputs to collate values from."},{"kind":25,"tagName":"return","text":"A function that returns an Observable that emits items by index\r\ncombined from the source Observable and provided Observables, in form of an\r\narray."}]}],"isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"isGenerator":false,"isAsync":false,"kind":13,"overloads":[],"functionName":"zipWith","modulePath":"..\\src\\internal\\operators\\zipWith.ts"}}},"usabilityResult":{"index":1}}}}