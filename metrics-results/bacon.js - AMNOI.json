{"projectName":"bacon.js","metric":"AMNOI","usabilityResult":{"index":0.8333333333333333},"modules":{"..\\src\\observable.ts":{"moduleComponents":{"EventStream":{"kind":2,"usabilityResult":{"index":1},"methods":[{"methodName":"concat","usabilityResult":{"index":1},"sources":[{"parameters":[{"name":"other","type":"Observable<V>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"options","type":"EventStreamOptions","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"EventStream<V>","isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"isAbstract":false,"typeParameters":[],"hasOverrideKeyword":false,"docs":[{"kind":24,"description":"\r\n   Concatenates two streams/properties into one stream/property so that\r\n   it will deliver events from this observable until it ends and then deliver\r\n   events from `other`. This means too that events from `other`,\r\n   occurring before the end of this observable will not be included in the result\r\n   stream/property.","tags":[]}],"kind":27,"declarationInfo":{"className":"EventStream","modulePath":"..\\src\\observable.ts"},"classStructure":{"decorators":[],"typeParameters":[{"name":"V","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nEventStream represents a stream of events. It is an Observable object, meaning\r\n that you can listen to events in the stream using, for instance, the [`onValue`](#onvalue) method\r\n with a callback.\r\n\r\n To create an EventStream, you'll want to use one of the following factory methods:\r\n\r\n  - From DOM EventTarget or Node.JS EventEmitter objects using [fromEvent](../globals.html#fromevent)\r\n  - From a Promise using [fromPromise](../globals.html#frompromise)\r\n  - From an unary callback using [fromCallback](../globals.html#fromcallback)\r\n  - From a Node.js style callback using [fromNodeCallback](../globals.html#fromnodecallback)\r\n  - From RxJs or Kefir observables using [fromESObservable](../globals.html#fromesobservable)\r\n  - By polling a synchronous function using [fromPoll](../globals.html#fromPoll)\r\n  - Emit a single event instantly using [once](../globals.html#once)\r\n  - Emit a single event with a delay [later](../globals.html#later)\r\n  - Emit the same event indefinitely using [interval](../globals.html#interval)\r\n  - Emit an array of events instantly [fromArray](../globals.html#fromarray)\r\n  - Emit an array of events with a delay [sequentially](../globals.html#sequentially)\r\n  - Emit an array of events repeatedly with a delay [repeatedly](../globals.html#repeatedly)\r\n  - Use a generator function to be called repeatedly [repeat](../globals.html#repeat)\r\n  - Create a stream that never emits an event, ending immediately [never](../globals.html#never)\r\n  - Create a stream that never emits an event, ending with a delay [silence](../globals.html#silence)\r\n  - Create stream using a custom binder function [fromBinder](../globals.html#frombinder)\r\n  - Wrap jQuery events using [asEventStream](../globals.html#_)","tags":[{"kind":25,"tagName":"typeparam","text":"V   Type of the elements/values in the stream/property"}]}],"isAbstract":false,"implements":[],"name":"EventStream","isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"kind":2,"ctors":[{"statements":["super(desc)","if (options !== allowSync) {\r\n  subscribe = asyncWrapSubscribe(this, subscribe)\r\n}","this.dispatcher = new Dispatcher(this, subscribe, handler)","registerObs(this)"],"parameters":[{"name":"desc","type":"Desc","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"subscribe","type":"Subscribe<V>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"handler","type":"EventSink<V>","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"options","type":"EventStreamOptions","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"typeParameters":[],"docs":[],"kind":5,"overloads":[]}],"properties":[{"name":"dispatcher","type":"Dispatcher<V, EventStream<V>>","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"internal"}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"_isEventStream","type":"boolean","initializer":"true","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"hidden"}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false}],"extends":"Observable<V>","getAccessors":[],"setAccessors":[]}},{"parameters":[{"name":"other","type":"Observable<V2>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"options","type":"EventStreamOptions","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"EventStream<V | V2>","isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"isAbstract":false,"typeParameters":[{"name":"V2","kind":39,"isConst":false,"variance":0}],"hasOverrideKeyword":false,"docs":[],"kind":27,"declarationInfo":{"className":"EventStream","modulePath":"..\\src\\observable.ts"},"classStructure":{"decorators":[],"typeParameters":[{"name":"V","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nEventStream represents a stream of events. It is an Observable object, meaning\r\n that you can listen to events in the stream using, for instance, the [`onValue`](#onvalue) method\r\n with a callback.\r\n\r\n To create an EventStream, you'll want to use one of the following factory methods:\r\n\r\n  - From DOM EventTarget or Node.JS EventEmitter objects using [fromEvent](../globals.html#fromevent)\r\n  - From a Promise using [fromPromise](../globals.html#frompromise)\r\n  - From an unary callback using [fromCallback](../globals.html#fromcallback)\r\n  - From a Node.js style callback using [fromNodeCallback](../globals.html#fromnodecallback)\r\n  - From RxJs or Kefir observables using [fromESObservable](../globals.html#fromesobservable)\r\n  - By polling a synchronous function using [fromPoll](../globals.html#fromPoll)\r\n  - Emit a single event instantly using [once](../globals.html#once)\r\n  - Emit a single event with a delay [later](../globals.html#later)\r\n  - Emit the same event indefinitely using [interval](../globals.html#interval)\r\n  - Emit an array of events instantly [fromArray](../globals.html#fromarray)\r\n  - Emit an array of events with a delay [sequentially](../globals.html#sequentially)\r\n  - Emit an array of events repeatedly with a delay [repeatedly](../globals.html#repeatedly)\r\n  - Use a generator function to be called repeatedly [repeat](../globals.html#repeat)\r\n  - Create a stream that never emits an event, ending immediately [never](../globals.html#never)\r\n  - Create a stream that never emits an event, ending with a delay [silence](../globals.html#silence)\r\n  - Create stream using a custom binder function [fromBinder](../globals.html#frombinder)\r\n  - Wrap jQuery events using [asEventStream](../globals.html#_)","tags":[{"kind":25,"tagName":"typeparam","text":"V   Type of the elements/values in the stream/property"}]}],"isAbstract":false,"implements":[],"name":"EventStream","isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"kind":2,"ctors":[{"statements":["super(desc)","if (options !== allowSync) {\r\n  subscribe = asyncWrapSubscribe(this, subscribe)\r\n}","this.dispatcher = new Dispatcher(this, subscribe, handler)","registerObs(this)"],"parameters":[{"name":"desc","type":"Desc","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"subscribe","type":"Subscribe<V>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"handler","type":"EventSink<V>","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"options","type":"EventStreamOptions","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"typeParameters":[],"docs":[],"kind":5,"overloads":[]}],"properties":[{"name":"dispatcher","type":"Dispatcher<V, EventStream<V>>","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"internal"}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"_isEventStream","type":"boolean","initializer":"true","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"hidden"}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false}],"extends":"Observable<V>","getAccessors":[],"setAccessors":[]}}]},{"methodName":"map","usabilityResult":{"index":1},"sources":[{"parameters":[{"name":"f","type":"Function1<V, V2>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"EventStream<V2>","isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"isAbstract":false,"typeParameters":[{"name":"V2","kind":39,"isConst":false,"variance":0}],"hasOverrideKeyword":false,"docs":[],"kind":27,"declarationInfo":{"className":"EventStream","modulePath":"..\\src\\observable.ts"},"classStructure":{"decorators":[],"typeParameters":[{"name":"V","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nEventStream represents a stream of events. It is an Observable object, meaning\r\n that you can listen to events in the stream using, for instance, the [`onValue`](#onvalue) method\r\n with a callback.\r\n\r\n To create an EventStream, you'll want to use one of the following factory methods:\r\n\r\n  - From DOM EventTarget or Node.JS EventEmitter objects using [fromEvent](../globals.html#fromevent)\r\n  - From a Promise using [fromPromise](../globals.html#frompromise)\r\n  - From an unary callback using [fromCallback](../globals.html#fromcallback)\r\n  - From a Node.js style callback using [fromNodeCallback](../globals.html#fromnodecallback)\r\n  - From RxJs or Kefir observables using [fromESObservable](../globals.html#fromesobservable)\r\n  - By polling a synchronous function using [fromPoll](../globals.html#fromPoll)\r\n  - Emit a single event instantly using [once](../globals.html#once)\r\n  - Emit a single event with a delay [later](../globals.html#later)\r\n  - Emit the same event indefinitely using [interval](../globals.html#interval)\r\n  - Emit an array of events instantly [fromArray](../globals.html#fromarray)\r\n  - Emit an array of events with a delay [sequentially](../globals.html#sequentially)\r\n  - Emit an array of events repeatedly with a delay [repeatedly](../globals.html#repeatedly)\r\n  - Use a generator function to be called repeatedly [repeat](../globals.html#repeat)\r\n  - Create a stream that never emits an event, ending immediately [never](../globals.html#never)\r\n  - Create a stream that never emits an event, ending with a delay [silence](../globals.html#silence)\r\n  - Create stream using a custom binder function [fromBinder](../globals.html#frombinder)\r\n  - Wrap jQuery events using [asEventStream](../globals.html#_)","tags":[{"kind":25,"tagName":"typeparam","text":"V   Type of the elements/values in the stream/property"}]}],"isAbstract":false,"implements":[],"name":"EventStream","isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"kind":2,"ctors":[{"statements":["super(desc)","if (options !== allowSync) {\r\n  subscribe = asyncWrapSubscribe(this, subscribe)\r\n}","this.dispatcher = new Dispatcher(this, subscribe, handler)","registerObs(this)"],"parameters":[{"name":"desc","type":"Desc","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"subscribe","type":"Subscribe<V>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"handler","type":"EventSink<V>","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"options","type":"EventStreamOptions","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"typeParameters":[],"docs":[],"kind":5,"overloads":[]}],"properties":[{"name":"dispatcher","type":"Dispatcher<V, EventStream<V>>","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"internal"}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"_isEventStream","type":"boolean","initializer":"true","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"hidden"}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false}],"extends":"Observable<V>","getAccessors":[],"setAccessors":[]}},{"parameters":[{"name":"f","type":"Property<V2> | V2","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"EventStream<V2>","isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"isAbstract":false,"typeParameters":[{"name":"V2","kind":39,"isConst":false,"variance":0}],"hasOverrideKeyword":false,"docs":[],"kind":27,"declarationInfo":{"className":"EventStream","modulePath":"..\\src\\observable.ts"},"classStructure":{"decorators":[],"typeParameters":[{"name":"V","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nEventStream represents a stream of events. It is an Observable object, meaning\r\n that you can listen to events in the stream using, for instance, the [`onValue`](#onvalue) method\r\n with a callback.\r\n\r\n To create an EventStream, you'll want to use one of the following factory methods:\r\n\r\n  - From DOM EventTarget or Node.JS EventEmitter objects using [fromEvent](../globals.html#fromevent)\r\n  - From a Promise using [fromPromise](../globals.html#frompromise)\r\n  - From an unary callback using [fromCallback](../globals.html#fromcallback)\r\n  - From a Node.js style callback using [fromNodeCallback](../globals.html#fromnodecallback)\r\n  - From RxJs or Kefir observables using [fromESObservable](../globals.html#fromesobservable)\r\n  - By polling a synchronous function using [fromPoll](../globals.html#fromPoll)\r\n  - Emit a single event instantly using [once](../globals.html#once)\r\n  - Emit a single event with a delay [later](../globals.html#later)\r\n  - Emit the same event indefinitely using [interval](../globals.html#interval)\r\n  - Emit an array of events instantly [fromArray](../globals.html#fromarray)\r\n  - Emit an array of events with a delay [sequentially](../globals.html#sequentially)\r\n  - Emit an array of events repeatedly with a delay [repeatedly](../globals.html#repeatedly)\r\n  - Use a generator function to be called repeatedly [repeat](../globals.html#repeat)\r\n  - Create a stream that never emits an event, ending immediately [never](../globals.html#never)\r\n  - Create a stream that never emits an event, ending with a delay [silence](../globals.html#silence)\r\n  - Create stream using a custom binder function [fromBinder](../globals.html#frombinder)\r\n  - Wrap jQuery events using [asEventStream](../globals.html#_)","tags":[{"kind":25,"tagName":"typeparam","text":"V   Type of the elements/values in the stream/property"}]}],"isAbstract":false,"implements":[],"name":"EventStream","isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"kind":2,"ctors":[{"statements":["super(desc)","if (options !== allowSync) {\r\n  subscribe = asyncWrapSubscribe(this, subscribe)\r\n}","this.dispatcher = new Dispatcher(this, subscribe, handler)","registerObs(this)"],"parameters":[{"name":"desc","type":"Desc","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"subscribe","type":"Subscribe<V>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"handler","type":"EventSink<V>","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"options","type":"EventStreamOptions","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"typeParameters":[],"docs":[],"kind":5,"overloads":[]}],"properties":[{"name":"dispatcher","type":"Dispatcher<V, EventStream<V>>","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"internal"}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"_isEventStream","type":"boolean","initializer":"true","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"hidden"}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false}],"extends":"Observable<V>","getAccessors":[],"setAccessors":[]}}]},{"methodName":"merge","usabilityResult":{"index":1},"sources":[{"parameters":[{"name":"other","type":"EventStream<V>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"EventStream<V>","isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"isAbstract":false,"typeParameters":[],"hasOverrideKeyword":false,"docs":[{"kind":24,"description":"\r\n   Merges two streams into one stream that delivers events from both","tags":[]}],"kind":27,"declarationInfo":{"className":"EventStream","modulePath":"..\\src\\observable.ts"},"classStructure":{"decorators":[],"typeParameters":[{"name":"V","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nEventStream represents a stream of events. It is an Observable object, meaning\r\n that you can listen to events in the stream using, for instance, the [`onValue`](#onvalue) method\r\n with a callback.\r\n\r\n To create an EventStream, you'll want to use one of the following factory methods:\r\n\r\n  - From DOM EventTarget or Node.JS EventEmitter objects using [fromEvent](../globals.html#fromevent)\r\n  - From a Promise using [fromPromise](../globals.html#frompromise)\r\n  - From an unary callback using [fromCallback](../globals.html#fromcallback)\r\n  - From a Node.js style callback using [fromNodeCallback](../globals.html#fromnodecallback)\r\n  - From RxJs or Kefir observables using [fromESObservable](../globals.html#fromesobservable)\r\n  - By polling a synchronous function using [fromPoll](../globals.html#fromPoll)\r\n  - Emit a single event instantly using [once](../globals.html#once)\r\n  - Emit a single event with a delay [later](../globals.html#later)\r\n  - Emit the same event indefinitely using [interval](../globals.html#interval)\r\n  - Emit an array of events instantly [fromArray](../globals.html#fromarray)\r\n  - Emit an array of events with a delay [sequentially](../globals.html#sequentially)\r\n  - Emit an array of events repeatedly with a delay [repeatedly](../globals.html#repeatedly)\r\n  - Use a generator function to be called repeatedly [repeat](../globals.html#repeat)\r\n  - Create a stream that never emits an event, ending immediately [never](../globals.html#never)\r\n  - Create a stream that never emits an event, ending with a delay [silence](../globals.html#silence)\r\n  - Create stream using a custom binder function [fromBinder](../globals.html#frombinder)\r\n  - Wrap jQuery events using [asEventStream](../globals.html#_)","tags":[{"kind":25,"tagName":"typeparam","text":"V   Type of the elements/values in the stream/property"}]}],"isAbstract":false,"implements":[],"name":"EventStream","isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"kind":2,"ctors":[{"statements":["super(desc)","if (options !== allowSync) {\r\n  subscribe = asyncWrapSubscribe(this, subscribe)\r\n}","this.dispatcher = new Dispatcher(this, subscribe, handler)","registerObs(this)"],"parameters":[{"name":"desc","type":"Desc","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"subscribe","type":"Subscribe<V>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"handler","type":"EventSink<V>","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"options","type":"EventStreamOptions","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"typeParameters":[],"docs":[],"kind":5,"overloads":[]}],"properties":[{"name":"dispatcher","type":"Dispatcher<V, EventStream<V>>","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"internal"}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"_isEventStream","type":"boolean","initializer":"true","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"hidden"}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false}],"extends":"Observable<V>","getAccessors":[],"setAccessors":[]}},{"parameters":[{"name":"other","type":"EventStream<V2>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"EventStream<V | V2>","isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"isAbstract":false,"typeParameters":[{"name":"V2","kind":39,"isConst":false,"variance":0}],"hasOverrideKeyword":false,"docs":[],"kind":27,"declarationInfo":{"className":"EventStream","modulePath":"..\\src\\observable.ts"},"classStructure":{"decorators":[],"typeParameters":[{"name":"V","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\nEventStream represents a stream of events. It is an Observable object, meaning\r\n that you can listen to events in the stream using, for instance, the [`onValue`](#onvalue) method\r\n with a callback.\r\n\r\n To create an EventStream, you'll want to use one of the following factory methods:\r\n\r\n  - From DOM EventTarget or Node.JS EventEmitter objects using [fromEvent](../globals.html#fromevent)\r\n  - From a Promise using [fromPromise](../globals.html#frompromise)\r\n  - From an unary callback using [fromCallback](../globals.html#fromcallback)\r\n  - From a Node.js style callback using [fromNodeCallback](../globals.html#fromnodecallback)\r\n  - From RxJs or Kefir observables using [fromESObservable](../globals.html#fromesobservable)\r\n  - By polling a synchronous function using [fromPoll](../globals.html#fromPoll)\r\n  - Emit a single event instantly using [once](../globals.html#once)\r\n  - Emit a single event with a delay [later](../globals.html#later)\r\n  - Emit the same event indefinitely using [interval](../globals.html#interval)\r\n  - Emit an array of events instantly [fromArray](../globals.html#fromarray)\r\n  - Emit an array of events with a delay [sequentially](../globals.html#sequentially)\r\n  - Emit an array of events repeatedly with a delay [repeatedly](../globals.html#repeatedly)\r\n  - Use a generator function to be called repeatedly [repeat](../globals.html#repeat)\r\n  - Create a stream that never emits an event, ending immediately [never](../globals.html#never)\r\n  - Create a stream that never emits an event, ending with a delay [silence](../globals.html#silence)\r\n  - Create stream using a custom binder function [fromBinder](../globals.html#frombinder)\r\n  - Wrap jQuery events using [asEventStream](../globals.html#_)","tags":[{"kind":25,"tagName":"typeparam","text":"V   Type of the elements/values in the stream/property"}]}],"isAbstract":false,"implements":[],"name":"EventStream","isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"kind":2,"ctors":[{"statements":["super(desc)","if (options !== allowSync) {\r\n  subscribe = asyncWrapSubscribe(this, subscribe)\r\n}","this.dispatcher = new Dispatcher(this, subscribe, handler)","registerObs(this)"],"parameters":[{"name":"desc","type":"Desc","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"subscribe","type":"Subscribe<V>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"handler","type":"EventSink<V>","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"options","type":"EventStreamOptions","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"typeParameters":[],"docs":[],"kind":5,"overloads":[]}],"properties":[{"name":"dispatcher","type":"Dispatcher<V, EventStream<V>>","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"internal"}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"_isEventStream","type":"boolean","initializer":"true","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"hidden"}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false}],"extends":"Observable<V>","getAccessors":[],"setAccessors":[]}}]}]},"Observable":{"kind":2,"usabilityResult":{"index":0},"methods":[{"methodName":"sampledBy","usabilityResult":{"index":0},"sources":[{"parameters":[{"name":"sampler","type":"EventStream<any>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"EventStream<V>","isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"isAbstract":false,"typeParameters":[],"hasOverrideKeyword":false,"docs":[{"kind":24,"description":"\r\n  Creates an EventStream by sampling this\r\n  stream/property value at each event from the `sampler` stream. The result\r\n  `EventStream` will contain the sampled value at each event in the source\r\n  stream.","tags":[{"kind":25,"tagName":"param","text":"{Observable<V2>} sampler"}]},{"kind":24,"description":"\r\n   Creates an EventStream/Property by sampling this\r\n   stream/property value at each event from the `sampler` stream. The result\r\n   will contain the sampled value at each event in the source stream.","tags":[{"kind":25,"tagName":"param","text":"{Observable<V2>} sampler"}]}],"kind":27,"declarationInfo":{"className":"Observable","modulePath":"..\\src\\observable.ts"},"classStructure":{"decorators":[],"typeParameters":[{"name":"V","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\n Observable is the base class for [EventsStream](eventstream.html) and [Property](property.html)","tags":[{"kind":25,"tagName":"typeparam","text":"V   Type of the elements/values in the stream/property"}]}],"isAbstract":true,"implements":[],"name":"Observable","isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"kind":2,"ctors":[{"statements":["this.desc = desc","this.initialDesc = desc"],"parameters":[{"name":"desc","type":"Desc","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"typeParameters":[],"docs":[],"kind":5,"overloads":[]}],"properties":[{"name":"desc","type":"Desc","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"\r\nContains a structured version of what [`toString`](#tostring) returns.\r\n   The structured description is an object that contains the fields `context`, `method` and `args`.\r\n   For example, for `Bacon.fromArray([1,2,3]).desc` you'd get\r\n\r\n   { context: \"Bacon\", method: \"fromArray\", args: [[1,2,3]] }","tags":[]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"id","type":"number","initializer":"++idCounter","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"\r\nUnique numeric id of this Observable. Implemented using a simple counter starting from 1.","tags":[]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"initialDesc","type":"Desc","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"hidden"}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"_name","type":"string","hasQuestionToken":true,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"hidden"}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"_isObservable","initializer":"true","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"hidden"}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false}],"getAccessors":[],"setAccessors":[]}},{"parameters":[{"name":"sampler","type":"Property<any>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Property<V>","isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"isAbstract":false,"typeParameters":[],"hasOverrideKeyword":false,"docs":[],"kind":27,"declarationInfo":{"className":"Observable","modulePath":"..\\src\\observable.ts"},"classStructure":{"decorators":[],"typeParameters":[{"name":"V","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\n Observable is the base class for [EventsStream](eventstream.html) and [Property](property.html)","tags":[{"kind":25,"tagName":"typeparam","text":"V   Type of the elements/values in the stream/property"}]}],"isAbstract":true,"implements":[],"name":"Observable","isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"kind":2,"ctors":[{"statements":["this.desc = desc","this.initialDesc = desc"],"parameters":[{"name":"desc","type":"Desc","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"typeParameters":[],"docs":[],"kind":5,"overloads":[]}],"properties":[{"name":"desc","type":"Desc","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"\r\nContains a structured version of what [`toString`](#tostring) returns.\r\n   The structured description is an object that contains the fields `context`, `method` and `args`.\r\n   For example, for `Bacon.fromArray([1,2,3]).desc` you'd get\r\n\r\n   { context: \"Bacon\", method: \"fromArray\", args: [[1,2,3]] }","tags":[]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"id","type":"number","initializer":"++idCounter","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"\r\nUnique numeric id of this Observable. Implemented using a simple counter starting from 1.","tags":[]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"initialDesc","type":"Desc","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"hidden"}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"_name","type":"string","hasQuestionToken":true,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"hidden"}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"_isObservable","initializer":"true","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"hidden"}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false}],"getAccessors":[],"setAccessors":[]}},{"parameters":[{"name":"sampler","type":"Observable<any>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Observable<V>","isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"isAbstract":false,"typeParameters":[],"hasOverrideKeyword":false,"docs":[],"kind":27,"declarationInfo":{"className":"Observable","modulePath":"..\\src\\observable.ts"},"classStructure":{"decorators":[],"typeParameters":[{"name":"V","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\n Observable is the base class for [EventsStream](eventstream.html) and [Property](property.html)","tags":[{"kind":25,"tagName":"typeparam","text":"V   Type of the elements/values in the stream/property"}]}],"isAbstract":true,"implements":[],"name":"Observable","isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"kind":2,"ctors":[{"statements":["this.desc = desc","this.initialDesc = desc"],"parameters":[{"name":"desc","type":"Desc","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"typeParameters":[],"docs":[],"kind":5,"overloads":[]}],"properties":[{"name":"desc","type":"Desc","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"\r\nContains a structured version of what [`toString`](#tostring) returns.\r\n   The structured description is an object that contains the fields `context`, `method` and `args`.\r\n   For example, for `Bacon.fromArray([1,2,3]).desc` you'd get\r\n\r\n   { context: \"Bacon\", method: \"fromArray\", args: [[1,2,3]] }","tags":[]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"id","type":"number","initializer":"++idCounter","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"\r\nUnique numeric id of this Observable. Implemented using a simple counter starting from 1.","tags":[]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"initialDesc","type":"Desc","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"hidden"}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"_name","type":"string","hasQuestionToken":true,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"hidden"}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"_isObservable","initializer":"true","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"hidden"}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false}],"getAccessors":[],"setAccessors":[]}}]}]},"Property":{"kind":2,"usabilityResult":{"index":1},"methods":[{"methodName":"concat","usabilityResult":{"index":1},"sources":[{"parameters":[{"name":"other","type":"Observable<V>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Property<V>","isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"isAbstract":false,"typeParameters":[],"hasOverrideKeyword":false,"docs":[{"kind":24,"description":"\r\n   Concatenates this property with another stream/properties into one property so that\r\n   it will deliver events from this property it ends and then deliver\r\n   events from `other`. This means too that events from `other`,\r\n   occurring before the end of this property will not be included in the result\r\n   stream/property.","tags":[]}],"kind":27,"declarationInfo":{"className":"Property","modulePath":"..\\src\\observable.ts"},"classStructure":{"decorators":[],"typeParameters":[{"name":"V","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\n A reactive property. Has the concept of \"current value\".\r\n You can create a Property from an EventStream by using either [`toProperty`](eventstream.html#toproperty)\r\n or [`scan`](eventstream.html#scan) method. Note: depending on how a Property is created, it may or may not\r\n have an initial value. The current value stays as its last value after the stream has ended.\r\n\r\n Here are the most common ways for creating Properties:\r\n\r\n - Create a constant property with [constant](../globals.html#constant)\r\n - Create a property based on an EventStream with [toProperty](eventstream.html#toproperty)\r\n - Scan an EventStream with an accumulator function with [scan](eventstream.html#scan)\r\n - Create a state property based on multiple sources using [update](../globals.html#update)","tags":[{"kind":25,"tagName":"typeparam","text":"V   Type of the elements/values in the stream/property"}]}],"isAbstract":false,"implements":[],"name":"Property","isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"kind":2,"ctors":[{"statements":["super(desc)","assertFunction(subscribe);","this.dispatcher = new PropertyDispatcher(this, subscribe, handler);","registerObs(this);"],"parameters":[{"name":"desc","type":"Desc","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"subscribe","type":"Subscribe<V>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"handler","type":"EventSink<V>","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"typeParameters":[],"docs":[],"kind":5,"overloads":[]}],"properties":[{"name":"dispatcher","type":"PropertyDispatcher<V, Property<V>>","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"internal"}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"_isProperty","initializer":"true","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"internal"}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false}],"extends":"Observable<V>","getAccessors":[],"setAccessors":[]}},{"parameters":[{"name":"other","type":"Observable<V2>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Property<V | V2>","isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"isAbstract":false,"typeParameters":[{"name":"V2","kind":39,"isConst":false,"variance":0}],"hasOverrideKeyword":false,"docs":[],"kind":27,"declarationInfo":{"className":"Property","modulePath":"..\\src\\observable.ts"},"classStructure":{"decorators":[],"typeParameters":[{"name":"V","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\n A reactive property. Has the concept of \"current value\".\r\n You can create a Property from an EventStream by using either [`toProperty`](eventstream.html#toproperty)\r\n or [`scan`](eventstream.html#scan) method. Note: depending on how a Property is created, it may or may not\r\n have an initial value. The current value stays as its last value after the stream has ended.\r\n\r\n Here are the most common ways for creating Properties:\r\n\r\n - Create a constant property with [constant](../globals.html#constant)\r\n - Create a property based on an EventStream with [toProperty](eventstream.html#toproperty)\r\n - Scan an EventStream with an accumulator function with [scan](eventstream.html#scan)\r\n - Create a state property based on multiple sources using [update](../globals.html#update)","tags":[{"kind":25,"tagName":"typeparam","text":"V   Type of the elements/values in the stream/property"}]}],"isAbstract":false,"implements":[],"name":"Property","isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"kind":2,"ctors":[{"statements":["super(desc)","assertFunction(subscribe);","this.dispatcher = new PropertyDispatcher(this, subscribe, handler);","registerObs(this);"],"parameters":[{"name":"desc","type":"Desc","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"subscribe","type":"Subscribe<V>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"handler","type":"EventSink<V>","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"typeParameters":[],"docs":[],"kind":5,"overloads":[]}],"properties":[{"name":"dispatcher","type":"PropertyDispatcher<V, Property<V>>","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"internal"}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"_isProperty","initializer":"true","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"internal"}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false}],"extends":"Observable<V>","getAccessors":[],"setAccessors":[]}}]},{"methodName":"map","usabilityResult":{"index":1},"sources":[{"parameters":[{"name":"f","type":"Function1<V, V2>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Property<V2>","isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"isAbstract":false,"typeParameters":[{"name":"V2","kind":39,"isConst":false,"variance":0}],"hasOverrideKeyword":false,"docs":[],"kind":27,"declarationInfo":{"className":"Property","modulePath":"..\\src\\observable.ts"},"classStructure":{"decorators":[],"typeParameters":[{"name":"V","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\n A reactive property. Has the concept of \"current value\".\r\n You can create a Property from an EventStream by using either [`toProperty`](eventstream.html#toproperty)\r\n or [`scan`](eventstream.html#scan) method. Note: depending on how a Property is created, it may or may not\r\n have an initial value. The current value stays as its last value after the stream has ended.\r\n\r\n Here are the most common ways for creating Properties:\r\n\r\n - Create a constant property with [constant](../globals.html#constant)\r\n - Create a property based on an EventStream with [toProperty](eventstream.html#toproperty)\r\n - Scan an EventStream with an accumulator function with [scan](eventstream.html#scan)\r\n - Create a state property based on multiple sources using [update](../globals.html#update)","tags":[{"kind":25,"tagName":"typeparam","text":"V   Type of the elements/values in the stream/property"}]}],"isAbstract":false,"implements":[],"name":"Property","isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"kind":2,"ctors":[{"statements":["super(desc)","assertFunction(subscribe);","this.dispatcher = new PropertyDispatcher(this, subscribe, handler);","registerObs(this);"],"parameters":[{"name":"desc","type":"Desc","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"subscribe","type":"Subscribe<V>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"handler","type":"EventSink<V>","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"typeParameters":[],"docs":[],"kind":5,"overloads":[]}],"properties":[{"name":"dispatcher","type":"PropertyDispatcher<V, Property<V>>","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"internal"}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"_isProperty","initializer":"true","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"internal"}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false}],"extends":"Observable<V>","getAccessors":[],"setAccessors":[]}},{"parameters":[{"name":"f","type":"Property<V2> | V2","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Property<V2>","isGenerator":false,"isAsync":false,"isStatic":false,"hasQuestionToken":false,"isAbstract":false,"typeParameters":[{"name":"V2","kind":39,"isConst":false,"variance":0}],"hasOverrideKeyword":false,"docs":[],"kind":27,"declarationInfo":{"className":"Property","modulePath":"..\\src\\observable.ts"},"classStructure":{"decorators":[],"typeParameters":[{"name":"V","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\n A reactive property. Has the concept of \"current value\".\r\n You can create a Property from an EventStream by using either [`toProperty`](eventstream.html#toproperty)\r\n or [`scan`](eventstream.html#scan) method. Note: depending on how a Property is created, it may or may not\r\n have an initial value. The current value stays as its last value after the stream has ended.\r\n\r\n Here are the most common ways for creating Properties:\r\n\r\n - Create a constant property with [constant](../globals.html#constant)\r\n - Create a property based on an EventStream with [toProperty](eventstream.html#toproperty)\r\n - Scan an EventStream with an accumulator function with [scan](eventstream.html#scan)\r\n - Create a state property based on multiple sources using [update](../globals.html#update)","tags":[{"kind":25,"tagName":"typeparam","text":"V   Type of the elements/values in the stream/property"}]}],"isAbstract":false,"implements":[],"name":"Property","isExported":true,"isDefaultExport":false,"hasDeclareKeyword":false,"kind":2,"ctors":[{"statements":["super(desc)","assertFunction(subscribe);","this.dispatcher = new PropertyDispatcher(this, subscribe, handler);","registerObs(this);"],"parameters":[{"name":"desc","type":"Desc","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"subscribe","type":"Subscribe<V>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"handler","type":"EventSink<V>","isReadonly":false,"decorators":[],"hasQuestionToken":true,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"typeParameters":[],"docs":[],"kind":5,"overloads":[]}],"properties":[{"name":"dispatcher","type":"PropertyDispatcher<V, Property<V>>","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"internal"}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false},{"name":"_isProperty","initializer":"true","hasQuestionToken":false,"hasExclamationToken":false,"isReadonly":false,"docs":[{"kind":24,"description":"","tags":[{"kind":25,"tagName":"internal"}]}],"isStatic":false,"isAbstract":false,"decorators":[],"hasDeclareKeyword":false,"hasOverrideKeyword":false,"kind":31,"hasAccessorKeyword":false}],"extends":"Observable<V>","getAccessors":[],"setAccessors":[]}}]}]}},"usabilityResult":{"index":0.6666666666666666}},"..\\src\\combine.ts":{"moduleComponents":{"combineWith":{"kind":13,"usabilityResult":{"index":1},"sources":[{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"R","kind":39,"isConst":false,"variance":0}],"docs":[{"kind":24,"description":"\r\n  Combines given *n* Properties and\r\n  EventStreams using the given n-ary function `f(v1, v2 ...)`.\r\n\r\n  To calculate the current sum of three numeric Properties, you can do\r\n\r\n```js\r\nfunction sum3(x,y,z) { return x + y + z }\r\nBacon.combineWith(sum3, p1, p2, p3)\r\n```","tags":[]}],"hasDeclareKeyword":false,"parameters":[{"name":"fn","type":"Function0<R>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Property<R>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"combineWith","modulePath":"..\\src\\combine.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"V","kind":39,"isConst":false,"variance":0},{"name":"R","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"a","type":"Observable<V>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"fn","type":"Function1<V, R>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Property<R>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"combineWith","modulePath":"..\\src\\combine.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"V","kind":39,"isConst":false,"variance":0},{"name":"V2","kind":39,"isConst":false,"variance":0},{"name":"R","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"a","type":"Observable<V>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"b","type":"Observable<V2>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"fn","type":"Function2<V, V2, R>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Property<R>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"combineWith","modulePath":"..\\src\\combine.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"V","kind":39,"isConst":false,"variance":0},{"name":"V2","kind":39,"isConst":false,"variance":0},{"name":"V3","kind":39,"isConst":false,"variance":0},{"name":"R","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"a","type":"Observable<V>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"b","type":"Observable<V2>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"c","type":"Observable<V3>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"fn","type":"Function3<V, V2, V3, R>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Property<R>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"combineWith","modulePath":"..\\src\\combine.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"V","kind":39,"isConst":false,"variance":0},{"name":"V2","kind":39,"isConst":false,"variance":0},{"name":"V3","kind":39,"isConst":false,"variance":0},{"name":"V4","kind":39,"isConst":false,"variance":0},{"name":"R","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"a","type":"Observable<V>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"b","type":"Observable<V2>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"c","type":"Observable<V3>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"d","type":"Observable<V4>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"fn","type":"Function4<V, V2, V3, V4, R>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Property<R>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"combineWith","modulePath":"..\\src\\combine.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"V","kind":39,"isConst":false,"variance":0},{"name":"V2","kind":39,"isConst":false,"variance":0},{"name":"V3","kind":39,"isConst":false,"variance":0},{"name":"V4","kind":39,"isConst":false,"variance":0},{"name":"V5","kind":39,"isConst":false,"variance":0},{"name":"R","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"a","type":"Observable<V>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"b","type":"Observable<V2>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"c","type":"Observable<V3>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"d","type":"Observable<V4>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"e","type":"Observable<V5>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"fn","type":"Function5<V, V2, V3, V4, V5, R>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Property<R>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"combineWith","modulePath":"..\\src\\combine.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"V","kind":39,"isConst":false,"variance":0},{"name":"V2","kind":39,"isConst":false,"variance":0},{"name":"V3","kind":39,"isConst":false,"variance":0},{"name":"V4","kind":39,"isConst":false,"variance":0},{"name":"V5","kind":39,"isConst":false,"variance":0},{"name":"V6","kind":39,"isConst":false,"variance":0},{"name":"R","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"a","type":"Observable<V>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"b","type":"Observable<V2>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"c","type":"Observable<V3>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"d","type":"Observable<V4>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"e","type":"Observable<V5>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"f","type":"Observable<V6>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"fn","type":"Function6<V, V2, V3, V4, V5, V6, R>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Property<R>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"combineWith","modulePath":"..\\src\\combine.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"R","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"observables","type":"Observable<any>[]","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"fn","type":"Function","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Property<R>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"combineWith","modulePath":"..\\src\\combine.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"V","kind":39,"isConst":false,"variance":0},{"name":"R","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"fn","type":"Function1<V, R>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"a","type":"Observable<V>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Property<R>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"combineWith","modulePath":"..\\src\\combine.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"V","kind":39,"isConst":false,"variance":0},{"name":"V2","kind":39,"isConst":false,"variance":0},{"name":"R","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"fn","type":"Function2<V, V2, R>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"a","type":"Observable<V>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"b","type":"Observable<V2>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Property<R>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"combineWith","modulePath":"..\\src\\combine.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"V","kind":39,"isConst":false,"variance":0},{"name":"V2","kind":39,"isConst":false,"variance":0},{"name":"V3","kind":39,"isConst":false,"variance":0},{"name":"R","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"fn","type":"Function3<V, V2, V3, R>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"a","type":"Observable<V>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"b","type":"Observable<V2>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"c","type":"Observable<V3>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Property<R>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"combineWith","modulePath":"..\\src\\combine.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"V","kind":39,"isConst":false,"variance":0},{"name":"V2","kind":39,"isConst":false,"variance":0},{"name":"V3","kind":39,"isConst":false,"variance":0},{"name":"V4","kind":39,"isConst":false,"variance":0},{"name":"R","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"fn","type":"Function4<V, V2, V3, V4, R>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"a","type":"Observable<V>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"b","type":"Observable<V2>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"c","type":"Observable<V3>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"d","type":"Observable<V4>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Property<R>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"combineWith","modulePath":"..\\src\\combine.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"V","kind":39,"isConst":false,"variance":0},{"name":"V2","kind":39,"isConst":false,"variance":0},{"name":"V3","kind":39,"isConst":false,"variance":0},{"name":"V4","kind":39,"isConst":false,"variance":0},{"name":"V5","kind":39,"isConst":false,"variance":0},{"name":"R","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"fn","type":"Function5<V, V2, V3, V4, V5, R>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"a","type":"Observable<V>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"b","type":"Observable<V2>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"c","type":"Observable<V3>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"d","type":"Observable<V4>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"e","type":"Observable<V5>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Property<R>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"combineWith","modulePath":"..\\src\\combine.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"V","kind":39,"isConst":false,"variance":0},{"name":"V2","kind":39,"isConst":false,"variance":0},{"name":"V3","kind":39,"isConst":false,"variance":0},{"name":"V4","kind":39,"isConst":false,"variance":0},{"name":"V5","kind":39,"isConst":false,"variance":0},{"name":"V6","kind":39,"isConst":false,"variance":0},{"name":"R","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"fn","type":"Function6<V, V2, V3, V4, V5, V6, R>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"a","type":"Observable<V>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"b","type":"Observable<V2>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"c","type":"Observable<V3>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"d","type":"Observable<V4>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"e","type":"Observable<V5>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"f","type":"Observable<V6>","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Property<R>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"combineWith","modulePath":"..\\src\\combine.ts"},{"isExported":true,"isDefaultExport":false,"typeParameters":[{"name":"R","kind":39,"isConst":false,"variance":0}],"docs":[],"hasDeclareKeyword":false,"parameters":[{"name":"fn","type":"Function","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false},{"name":"observables","type":"Observable<any>[]","isReadonly":false,"decorators":[],"hasQuestionToken":false,"hasOverrideKeyword":false,"kind":30,"isRestParameter":false}],"returnType":"Property<R>","isGenerator":false,"isAsync":false,"kind":14,"functionName":"combineWith","modulePath":"..\\src\\combine.ts"}]}},"usabilityResult":{"index":1}}}}